ALTER TABLE gl_accounts ADD COLUMN create_date timestamp;
ALTER TABLE gl_accounts ADD COLUMN create_date timestamp;
UPDATE gl_accounts set create_date=date('now');
ALTER TABLE gl_accounts ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_accounts ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_accounts ADD COLUMN create_who varchar(32);
UPDATE gl_accounts set create_who='admin';
ALTER TABLE gl_accounts ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_accounts ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_accounts ADD COLUMN change_date timestamp;
ALTER TABLE gl_accounts ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_accounts ADD COLUMN change_who varchar(32);
ALTER TABLE gl_accounts ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_acct_type ADD COLUMN create_date timestamp;
UPDATE gl_acct_type set create_date=date('now');
ALTER TABLE gl_acct_type ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_acct_type ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_acct_type ADD COLUMN create_who varchar(32);
UPDATE gl_acct_type set create_who='admin';
ALTER TABLE gl_acct_type ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_acct_type ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_acct_type ADD COLUMN change_date timestamp;
ALTER TABLE gl_acct_type ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_acct_type ADD COLUMN change_who varchar(32);
ALTER TABLE gl_acct_type ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_dept ADD COLUMN create_date timestamp;
UPDATE gl_dept set create_date=date('now');
ALTER TABLE gl_dept ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_dept ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_dept ADD COLUMN create_who varchar(32);
UPDATE gl_dept set create_who='admin';
ALTER TABLE gl_dept ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_dept ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_dept ADD COLUMN change_date timestamp;
ALTER TABLE gl_dept ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_dept ADD COLUMN change_who varchar(32);
ALTER TABLE gl_dept ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_je_detail ADD COLUMN create_date timestamp;
UPDATE gl_je_detail set create_date=date('now');
ALTER TABLE gl_je_detail ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_je_detail ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_je_detail ADD COLUMN create_who varchar(32);
UPDATE gl_je_detail set create_who='admin';
ALTER TABLE gl_je_detail ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_je_detail ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_je_detail ADD COLUMN change_date timestamp;
ALTER TABLE gl_je_detail ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_je_detail ADD COLUMN change_who varchar(32);
ALTER TABLE gl_je_detail ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_journal_master ADD COLUMN create_date timestamp;
UPDATE gl_journal_master set create_date=date('now');
ALTER TABLE gl_journal_master ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_journal_master ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_journal_master ADD COLUMN create_who varchar(32);
UPDATE gl_journal_master set create_who='admin';
ALTER TABLE gl_journal_master ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_journal_master ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_journal_master ADD COLUMN change_date timestamp;
ALTER TABLE gl_journal_master ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_journal_master ADD COLUMN change_who varchar(32);
ALTER TABLE gl_journal_master ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_period ADD COLUMN create_date timestamp;
UPDATE gl_period set create_date=date('now');
ALTER TABLE gl_period ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_period ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_period ADD COLUMN create_who varchar(32);
UPDATE gl_period set create_who='admin';
ALTER TABLE gl_period ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_period ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_period ADD COLUMN change_date timestamp;
ALTER TABLE gl_period ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_period ADD COLUMN change_who varchar(32);
ALTER TABLE gl_period ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_period_det ADD COLUMN create_date timestamp;
UPDATE gl_period_det set create_date=date('now');
ALTER TABLE gl_period_det ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_period_det ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_period_det ADD COLUMN create_who varchar(32);
UPDATE gl_period_det set create_who='admin';
ALTER TABLE gl_period_det ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_period_det ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_period_det ADD COLUMN change_date timestamp;
ALTER TABLE gl_period_det ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_period_det ADD COLUMN change_who varchar(32);
ALTER TABLE gl_period_det ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_rpt ADD COLUMN create_date timestamp;
UPDATE gl_rpt set create_date=date('now');
ALTER TABLE gl_rpt ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_rpt ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_rpt ADD COLUMN create_who varchar(32);
UPDATE gl_rpt set create_who='admin';
ALTER TABLE gl_rpt ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_rpt ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_rpt ADD COLUMN change_date timestamp;
ALTER TABLE gl_rpt ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_rpt ADD COLUMN change_who varchar(32);
ALTER TABLE gl_rpt ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE gl_rpt_col ADD COLUMN create_date timestamp;
UPDATE gl_rpt_col set create_date=date('now');
ALTER TABLE gl_rpt_col ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_rpt_col ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_rpt_col ADD COLUMN create_who varchar(32);
UPDATE gl_rpt_col set create_who='admin';
ALTER TABLE gl_rpt_col ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_rpt_col ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_rpt_col ADD COLUMN change_date timestamp;
ALTER TABLE gl_rpt_col ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_rpt_col ADD COLUMN change_who varchar(32);
ALTER TABLE gl_rpt_col ALTER COLUMN change_who SET STORAGE EXTENDED;
ALTER TABLE gl_rpt_lin ADD COLUMN create_date timestamp;
UPDATE gl_rpt_lin set create_date=date('now');
ALTER TABLE gl_rpt_lin ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE gl_rpt_lin ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE gl_rpt_lin ADD COLUMN create_who varchar(32);
UPDATE gl_rpt_lin set create_who='admin';
ALTER TABLE gl_rpt_lin ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE gl_rpt_lin ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE gl_rpt_lin ADD COLUMN change_date timestamp;
ALTER TABLE gl_rpt_lin ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE gl_rpt_lin ADD COLUMN change_who varchar(32);
ALTER TABLE gl_rpt_lin ALTER COLUMN change_who SET STORAGE EXTENDED;

CREATE TABLE ent_master
(
  ent_id int8 NOT NULL,
  ent_class  varchar(32),
  ent_name  varchar(32),
  CONSTRAINT ent_master_pk PRIMARY KEY (ent_id)
);



CREATE TABLE ent_address
(
  ent_addr_id int8 NOT NULL,
  ent_id int8,
  addr_type  varchar(5),
  CONSTRAINT ent_address_pk PRIMARY KEY (ent_addr_id)
);

CREATE TABLE ins_entity
(
  ins_entity_id int8 NOT NULL,
  ins_entity_type  varchar(5),
  ent_id int8,
  active_flag  varchar(1),
  CONSTRAINT ins_entity_pk PRIMARY KEY (ins_entity_id)
);

CREATE TABLE ins_items
(
  ins_item_id int8 NOT NULL,
  description  varchar(255),
  active_flag  varchar(1),
  comission_flag  varchar(1),
  premi_flag    varchar(1),
  CONSTRAINT ins_items_pk PRIMARY KEY (ins_item_id)
);

CREATE TABLE ins_policy
(
  pol_id int8 NOT NULL,
  pol_no  varchar(32),
  description  varchar(255),
  ccy  varchar(3),
  posted_flag  varchar(1),
  CONSTRAINT ins_policy_pk PRIMARY KEY (pol_id)
);

CREATE TABLE ins_pol_entity
(
  ins_pe_id int8 NOT NULL,
  pol_id int8,
  ent_id int8,
  rel_type  varchar(5),
  CONSTRAINT ins_pol_entity_pk PRIMARY KEY (ins_pe_id)
);

CREATE TABLE ins_pol_items
(
  ins_pol_item_id int8 NOT NULL,
  pol_id int8,
  ins_item_id int8,
  description  varchar(255),
  amount numeric,
  ar_invoice_id int8,
  ap_invoice_id  int8,
  CONSTRAINT ins_pol_items_pk PRIMARY KEY (ins_pol_item_id)
);

CREATE TABLE ar_customer_class
(
  ar_cclass_id int8 NOT NULL,
  description  varchar(255),
  CONSTRAINT ar_customer_class_pk PRIMARY KEY (ar_cclass_id)
);

CREATE TABLE ar_customer
(
  ar_cust_id int8 NOT NULL,
  ent_id int8,
  ar_cclass_id int8,
  CONSTRAINT ar_customer_pk PRIMARY KEY (ar_cust_id)
);

CREATE TABLE ar_invoice
(
  ar_invoice_id int8 NOT NULL,
  invoice_no  varchar(64),
  amount numeric,
  invoice_date timestamp,
  due_date timestamp,
  amount_settled numeric,
  ccy  varchar(3),
  ar_cust_id int8,
  posted_flag  varchar(1),
  cancel_flag  varchar(1),
  CONSTRAINT ar_invoice_pk PRIMARY KEY (ar_invoice_id)
);

CREATE TABLE ar_receipt
(
  ar_receipt_id int8 NOT NULL,
  receipt_no  varchar(64),
  amount numeric,
  ccy  varchar(3),
  posted_flag  varchar(1),
  pmt_method_id int8,
  cancel_flag  varchar(1),
  CONSTRAINT ar_receipt_pk PRIMARY KEY (ar_receipt_id)
);

CREATE TABLE ar_receipt_lines
(
  ar_rcl_id int8 NOT NULL,
  ar_invoice_id int8,
  amount numeric,
  receipt_id int8,
  CONSTRAINT ar_receipt_lines_pk PRIMARY KEY (ar_rcl_id)
);

CREATE TABLE ar_payment_method
(
  pmt_method_id int8 NOT NULL,
  rc_id int8,
  gl_acct_id int8,
  description  varchar(255),
  CONSTRAINT ar_payment_method_pk PRIMARY KEY (pmt_method_id)
);

CREATE TABLE ar_receipt_class
(
  rc_id int8 NOT NULL,
  description  varchar(255),
  active_flag  varchar(1),
  remit_flag  varchar(1),
  CONSTRAINT ar_receipt_class_pk PRIMARY KEY (rc_id)
);

CREATE TABLE ap_invoice
(
  ap_invoice_id int8 NOT NULL,
  invoice_no  varchar(64),
  amount numeric,
  ccy  varchar(3),
  due_date timestamp,
  invoice_date timestamp,
  ap_vendor_id int8,
  posted_flag  varchar(1),
  amount_settled numeric,
  cancel_flag  varchar(1),
  CONSTRAINT ap_invoice_pk PRIMARY KEY (ap_invoice_id)
);

CREATE TABLE ap_vendor
(
  ap_vendor_id int8 NOT NULL,
  ent_id int8,
  CONSTRAINT ap_vendor_pk PRIMARY KEY (ap_vendor_id)
);




ALTER TABLE ent_master ADD COLUMN create_date timestamp;
UPDATE ent_master set create_date=date('now');
ALTER TABLE ent_master ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ent_master ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ent_master ADD COLUMN create_who varchar(32);
UPDATE ent_master set create_who='admin';
ALTER TABLE ent_master ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ent_master ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ent_master ADD COLUMN change_date timestamp;
ALTER TABLE ent_master ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ent_master ADD COLUMN change_who varchar(32);
ALTER TABLE ent_master ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ent_address ADD COLUMN create_date timestamp;
UPDATE ent_address set create_date=date('now');
ALTER TABLE ent_address ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ent_address ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ent_address ADD COLUMN create_who varchar(32);
UPDATE ent_address set create_who='admin';
ALTER TABLE ent_address ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ent_address ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ent_address ADD COLUMN change_date timestamp;
ALTER TABLE ent_address ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ent_address ADD COLUMN change_who varchar(32);
ALTER TABLE ent_address ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ap_invoice ADD COLUMN create_date timestamp;
UPDATE ap_invoice set create_date=date('now');
ALTER TABLE ap_invoice ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ap_invoice ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ap_invoice ADD COLUMN create_who varchar(32);
UPDATE ap_invoice set create_who='admin';
ALTER TABLE ap_invoice ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ap_invoice ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ap_invoice ADD COLUMN change_date timestamp;
ALTER TABLE ap_invoice ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ap_invoice ADD COLUMN change_who varchar(32);
ALTER TABLE ap_invoice ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ap_vendor ADD COLUMN create_date timestamp;
UPDATE ap_vendor set create_date=date('now');
ALTER TABLE ap_vendor ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ap_vendor ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ap_vendor ADD COLUMN create_who varchar(32);
UPDATE ap_vendor set create_who='admin';
ALTER TABLE ap_vendor ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ap_vendor ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ap_vendor ADD COLUMN change_date timestamp;
ALTER TABLE ap_vendor ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ap_vendor ADD COLUMN change_who varchar(32);
ALTER TABLE ap_vendor ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ar_customer ADD COLUMN create_date timestamp;
UPDATE ar_customer set create_date=date('now');
ALTER TABLE ar_customer ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ar_customer ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ar_customer ADD COLUMN create_who varchar(32);
UPDATE ar_customer set create_who='admin';
ALTER TABLE ar_customer ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ar_customer ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ar_customer ADD COLUMN change_date timestamp;
ALTER TABLE ar_customer ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ar_customer ADD COLUMN change_who varchar(32);
ALTER TABLE ar_customer ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ar_customer_class ADD COLUMN create_date timestamp;
UPDATE ar_customer_class set create_date=date('now');
ALTER TABLE ar_customer_class ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ar_customer_class ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ar_customer_class ADD COLUMN create_who varchar(32);
UPDATE ar_customer_class set create_who='admin';
ALTER TABLE ar_customer_class ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ar_customer_class ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ar_customer_class ADD COLUMN change_date timestamp;
ALTER TABLE ar_customer_class ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ar_customer_class ADD COLUMN change_who varchar(32);
ALTER TABLE ar_customer_class ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ar_invoice ADD COLUMN create_date timestamp;
UPDATE ar_invoice set create_date=date('now');
ALTER TABLE ar_invoice ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ar_invoice ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ar_invoice ADD COLUMN create_who varchar(32);
UPDATE ar_invoice set create_who='admin';
ALTER TABLE ar_invoice ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ar_invoice ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ar_invoice ADD COLUMN change_date timestamp;
ALTER TABLE ar_invoice ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ar_invoice ADD COLUMN change_who varchar(32);
ALTER TABLE ar_invoice ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ar_payment_method ADD COLUMN create_date timestamp;
UPDATE ar_payment_method set create_date=date('now');
ALTER TABLE ar_payment_method ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ar_payment_method ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ar_payment_method ADD COLUMN create_who varchar(32);
UPDATE ar_payment_method set create_who='admin';
ALTER TABLE ar_payment_method ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ar_payment_method ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ar_payment_method ADD COLUMN change_date timestamp;
ALTER TABLE ar_payment_method ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ar_payment_method ADD COLUMN change_who varchar(32);
ALTER TABLE ar_payment_method ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ar_receipt ADD COLUMN create_date timestamp;
UPDATE ar_receipt set create_date=date('now');
ALTER TABLE ar_receipt ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ar_receipt ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ar_receipt ADD COLUMN create_who varchar(32);
UPDATE ar_receipt set create_who='admin';
ALTER TABLE ar_receipt ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ar_receipt ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ar_receipt ADD COLUMN change_date timestamp;
ALTER TABLE ar_receipt ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ar_receipt ADD COLUMN change_who varchar(32);
ALTER TABLE ar_receipt ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ar_receipt_lines ADD COLUMN create_date timestamp;
UPDATE ar_receipt_lines set create_date=date('now');
ALTER TABLE ar_receipt_lines ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ar_receipt_lines ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ar_receipt_lines ADD COLUMN create_who varchar(32);
UPDATE ar_receipt_lines set create_who='admin';
ALTER TABLE ar_receipt_lines ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ar_receipt_lines ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ar_receipt_lines ADD COLUMN change_date timestamp;
ALTER TABLE ar_receipt_lines ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ar_receipt_lines ADD COLUMN change_who varchar(32);
ALTER TABLE ar_receipt_lines ALTER COLUMN change_who SET STORAGE EXTENDED;

ALTER TABLE ar_receipt_class ADD COLUMN create_date timestamp;
UPDATE ar_receipt_class set create_date=date('now');
ALTER TABLE ar_receipt_class ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ar_receipt_class ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ar_receipt_class ADD COLUMN create_who varchar(32);
UPDATE ar_receipt_class set create_who='admin';
ALTER TABLE ar_receipt_class ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ar_receipt_class ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ar_receipt_class ADD COLUMN change_date timestamp;
ALTER TABLE ar_receipt_class ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ar_receipt_class ADD COLUMN change_who varchar(32);
ALTER TABLE ar_receipt_class ALTER COLUMN change_who SET STORAGE EXTENDED;


ALTER TABLE ins_entity ADD COLUMN create_date timestamp;
UPDATE ins_entity set create_date=date('now');
ALTER TABLE ins_entity ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ins_entity ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ins_entity ADD COLUMN create_who varchar(32);
UPDATE ins_entity set create_who='admin';
ALTER TABLE ins_entity ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ins_entity ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ins_entity ADD COLUMN change_date timestamp;
ALTER TABLE ins_entity ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ins_entity ADD COLUMN change_who varchar(32);
ALTER TABLE ins_entity ALTER COLUMN change_who SET STORAGE EXTENDED;
ALTER TABLE ins_items ADD COLUMN create_date timestamp;
UPDATE ins_items set create_date=date('now');
ALTER TABLE ins_items ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ins_items ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ins_items ADD COLUMN create_who varchar(32);
UPDATE ins_items set create_who='admin';
ALTER TABLE ins_items ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ins_items ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ins_items ADD COLUMN change_date timestamp;
ALTER TABLE ins_items ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ins_items ADD COLUMN change_who varchar(32);
ALTER TABLE ins_items ALTER COLUMN change_who SET STORAGE EXTENDED;
ALTER TABLE ins_pol_entity ADD COLUMN create_date timestamp;
UPDATE ins_pol_entity set create_date=date('now');
ALTER TABLE ins_pol_entity ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ins_pol_entity ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ins_pol_entity ADD COLUMN create_who varchar(32);
UPDATE ins_pol_entity set create_who='admin';
ALTER TABLE ins_pol_entity ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ins_pol_entity ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ins_pol_entity ADD COLUMN change_date timestamp;
ALTER TABLE ins_pol_entity ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ins_pol_entity ADD COLUMN change_who varchar(32);
ALTER TABLE ins_pol_entity ALTER COLUMN change_who SET STORAGE EXTENDED;
ALTER TABLE ins_pol_items ADD COLUMN create_date timestamp;
UPDATE ins_pol_items set create_date=date('now');
ALTER TABLE ins_pol_items ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ins_pol_items ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ins_pol_items ADD COLUMN create_who varchar(32);
UPDATE ins_pol_items set create_who='admin';
ALTER TABLE ins_pol_items ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ins_pol_items ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ins_pol_items ADD COLUMN change_date timestamp;
ALTER TABLE ins_pol_items ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ins_pol_items ADD COLUMN change_who varchar(32);
ALTER TABLE ins_pol_items ALTER COLUMN change_who SET STORAGE EXTENDED;
ALTER TABLE ins_policy ADD COLUMN create_date timestamp;
UPDATE ins_policy set create_date=date('now');
ALTER TABLE ins_policy ALTER COLUMN create_date SET STORAGE PLAIN;
ALTER TABLE ins_policy ALTER COLUMN create_date SET NOT NULL;
ALTER TABLE ins_policy ADD COLUMN create_who varchar(32);
UPDATE ins_policy set create_who='admin';
ALTER TABLE ins_policy ALTER COLUMN create_who SET STORAGE EXTENDED;
ALTER TABLE ins_policy ALTER COLUMN create_who SET NOT NULL;
ALTER TABLE ins_policy ADD COLUMN change_date timestamp;
ALTER TABLE ins_policy ALTER COLUMN change_date SET STORAGE PLAIN;
ALTER TABLE ins_policy ADD COLUMN change_who varchar(32);
ALTER TABLE ins_policy ALTER COLUMN change_who SET STORAGE EXTENDED;


CREATE TABLE gl_tax
(
  tax_id int8 NOT NULL,
  description  varchar(255),
  tax_rate  numeric,
  active_flag  varchar(1),
  gl_account int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT gl_tax_pk PRIMARY KEY (tax_id)
)

CREATE TABLE ins_policy_types
(
  pol_type_id int8 NOT NULL,
  description  varchar(255),
  gl_production int8,
  gl_comission int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_policy_types_pk PRIMARY KEY (pol_type_id)
)

CREATE TABLE gl_col_type
(
  col_type  varchar(8) NOT NULL,
  col_type_desc    varchar(255),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT gl_col_type_pk PRIMARY KEY (col_type)
)

insert into gl_col_type(col_type,col_type_desc) values (col_type,col_type_desc);

insert into gl_rpt_col(gl_rpt_col_id,gl_rpt_id,col_no,col_type,create_who,create_date) values ("&&","&&","&&","&&",'admin','now');


CREATE TABLE ar_invoice_details
(
  ar_invoice_dtl_id int8 NOT NULL,
  ar_invoice_id int8,
  description  varchar(255),
  amount numeric,
  gl_account_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ar_invoice_details_pk PRIMARY KEY (ar_invoice_det_id)
)


CREATE TABLE ar_trx_type
(
  ar_trx_type_id int8 NOT NULL,
  positive_flag  varchar(1),
  description  varchar(128),
  gl_account_id  int8,
  active_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ar_trx_type_pk PRIMARY KEY (ar_trx_type_id)
)

CREATE TABLE gl_currency
(
  ccy_code  varchar(3) NOT NULL,
  description  varchar(128) NOT NULL,
  enabled_flag  varchar(1) NOT NULL,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT gl_currency_pk PRIMARY KEY (ccy_code)
);

CREATE TABLE gl_ccy_history
(
  ccy_hist_id int8 NOT NULL,
  ccy_code  varchar(3),
  ccy_date timestamp,
  ccy_rate numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT gl_ccy_history_pk PRIMARY KEY (ccy_hist_id)
);












CREATE TABLE ins_policy_subtype
(
  pol_type_id int8 NOT NULL,
  pol_subtype_id int8
  description  varchar(128),
  active_flag  varchar(1),
  premi_rate numeric,
  gl_production  varchar(32),
  gl_cost  varchar(32),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_policy_subtype_pk PRIMARY KEY (pol_subtype_id)
);

CREATE TABLE ins_clausules
(
  ins_clause_id int8 NOT NULL,
  description  varchar(128),
  active_flag  varchar(1),
  rate numeric,
  rate_type  varchar(5),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_clausules_pk PRIMARY KEY (ins_clause_id)
);

CREATE TABLE policy_subtype_clausules
(
  pol_type_id int8 NOT NULL,
  ins_clause_id int8 NOT NULL,
  rate numeric,
  rate_type  varchar(5),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT policy_subtype_clausules_pk PRIMARY KEY (pol_type_id,ins_clause_id)
);

CREATE TABLE ins_pol_clausules
(
  ins_pol_claus_id int8 NOT NULL,
  ins_clause_id int8,
  pol_id int8,
  rate numeric
  rate_type  varchar(5),
  amount numeric,
  ins_pol_obj_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_clausules_pk PRIMARY KEY (ins_pol_claus_id)
);

CREATE TABLE ins_pol_vehicles
(
  ins_pol_obj_id int8 NOT NULL,
  pol_id int8,
  vehicle_type_id int8,
  police_reg_no  varchar(16),
  prod_year int4,
  chassis_no  varchar(64),
  engine_no  varchar(64),
  seat_num int4
  insured_amount numeric,
  premi_rate numeric,
  permi_amount numeric,
  tjh3 numeric,
  pa_driver_rate numeric,
  pa_driver_premi numeric,
  self_risk_amount numeric,
  pa_passng_rate numeric,
  pa_passng_premi numeric,
  remarks  text,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_vehicles_pk PRIMARY KEY (ins_pol_obj_id)
);


CREATE TABLE ins_poltype_clausules
(
  pol_type_id int8 NOT NULL,
  ins_clause_id int8,
  rate numeric,
  rate_type  varchar(3),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_poltype_clausules_pk PRIMARY KEY (pol_type_id)
)

CREATE TABLE s_valueset
(
  vs_group  varchar(64) NOT NULL,
  vs_code  varchar(64),
  vs_description  varchar(255),
  active_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_valueset_pk PRIMARY KEY (vs_group,vs_code)
)

CREATE TABLE s_region
(
  region_id int8 NOT NULL,
  description  varchar(255),
  active_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_region_pk PRIMARY KEY (region_id)
)

CREATE TABLE ins_entity
(
  ins_entity_id int8 NOT NULL,
  ent_id int8 NOT NULL,
  ins_entity_type varchar(5),
  active_flag varchar(1),
  gl_ap varchar(32),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_entity_pk PRIMARY KEY (ins_entity_id)
)

CREATE TABLE gl_chart
(
  account_id int8  NOT NULL,
  account_no  varchar(32),
  description  varchar(128),
  account_type  varchar(5),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT gl_char_pk PRIMARY KEY ()
) without oids;

CREATE TABLE s_country
(
  country_id int8 NOT NULL,
  country_name  varchar(32),
  active_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_country_pk PRIMARY KEY (country_id)
) without oids;

CREATE TABLE ent_rel
(
  ent_rel_id int8 NOT NULL,
  rel_code   varchar(10),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ent_rel_pk PRIMARY KEY (ent_rel_id)
) without oids;


CREATE TABLE payment_term
(
  payment_term_id int8 NOT NULL,
  description  varchar(128),
  active_flag   varchar(1),
  due_days  int4,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT payment_term_pk PRIMARY KEY (payment_term_id)
) without oids;

CREATE TABLE ent_class
(
  ent_class_id int8 NOT NULL,
  ent_class_code   varchar(5),
  description  varchar(128),
  active_flag   varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ent_class_pk PRIMARY KEY (ent_class_id)
) without oids;

CREATE TABLE ent_category
(
  ent_cat_id int8 NOT NULL,
  description   varchar(128),
  active_flag   varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ent_category_pk PRIMARY KEY (ent_cat_id)
) without oids;



CREATE TABLE s_region_map
(
  region_id int8 NOT NULL,
  region_level int8,
  parent_id int8,
  country_id  varchar(3),
  region_name  varchar(128),
  active_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_region_map_pk PRIMARY KEY (region_id)
) without oids;


CREATE TABLE s_region_set
(
  region_set_id int8 NOT NULL,
  country_id  varchar(3),
  level1  varchar(128),
  level2  varchar(128),
  level3  varchar(128),
  level4  varchar(128),
  level5  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_region_set_pk PRIMARY KEY (region_set_id)
) without oids;


CREATE TABLE s_religion
(
  religion_id int8 NOT NULL,
  religion_name  varchar(128),
  active_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_religion_pk PRIMARY KEY (religion_id)
) without oids;

CREATE TABLE ar_trx_line
(
  ar_trx_line_id int8 NOT NULL,
  ar_trx_type_id int8 NOT NULL,
  item_desc  varchar(128) NOT NULL,
  gl_account  varchar(32) NOT NULL,
  positive_flag  varchar(1) NOT NULL,
  enabled_flag  varchar(1) NOT NULL,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ar_trx_line_pk PRIMARY KEY (ar_trx_line_id)
) without oids;


CREATE TABLE ins_tsi_cat
(
  ins_tsi_cat_id int8 NOT NULL,
  description  varchar(128) ,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_tsi_cat_pk PRIMARY KEY (ins_tsi_cat_id)
) without oids;


CREATE TABLE ins_tsicat_poltype
(
  ins_tcpt_id int8 NOT NULL,
  ins_tsi_cat_id int8 NOT NULL,
  pol_type_id int8 NOT NULL,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_tsicat_poltype_pk PRIMARY KEY (ins_tcpt_id)
) without oids;


CREATE TABLE ins_pol_pa
(
  ins_pol_pa_id int8 NOT NULL,
  ins_period int8,
  period_start timestamp,
  period_end timestamp,
  pa_name  varchar(128),
  pa_occupancy  varchar(32),
  pa_birthdate timestamp,
  pa_addr text,
  pa_id_no  varchar(64),
  pa_benef_name  varchar(128),
  pa_benef_rel  varchar(16),
  insured_amount numeric,
  premi_rate numeric,
  premi_amount numeric,
  premi_total numeric,
  policy_no varchar(64),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_pa_pk PRIMARY KEY (ins_pol_pa_id)
) without oids;

-- Table: ins_pol_vehicles

-- DROP TABLE ins_pol_vehicles;

CREATE TABLE ins_pol_vehicles
(
  ins_pol_obj_id int8 NOT NULL,
  pol_id int8,
  vehicle_type_id int8,
  police_reg_no varchar(16),
  prod_year int4,
  chassis_no varchar(64),
  engine_no varchar(64),
  seat_num int4,
  tjh3 numeric,
  pa_driver_rate numeric,
  pa_driver_premi numeric,
  self_risk_amount numeric,
  pa_passng_rate numeric,
  pa_passng_premi numeric,
  remarks text,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  vehicle_type_desc varchar(128),
  CONSTRAINT ins_pol_vehicles_pk PRIMARY KEY (ins_pol_obj_id)
)
WITH OIDS;
ALTER TABLE ins_pol_vehicles OWNER TO postgres;


CREATE TABLE ins_pol_obj
(
  ins_pol_obj_id int8 NOT NULL,
  period_start timestamp,
  period_end timestamp,
  pol_id int8,
  ins_risk_cat_id int8,
  insured_amount numeric,
  premi_rate numeric,
  premi_amount numeric,
  premi_total numeric,
  policy_no varchar(64),
  description   varchar(255),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_obj_pk PRIMARY KEY (ins_pol_obj_id)
) without oids;


CREATE TABLE ins_clm_cause
(
  ins_clm_caus_id int8 NOT NULL,
  cause_desc  varchar(255),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_clm_cause_pk PRIMARY KEY (ins_clm_caus_id)
) without oids;

CREATE TABLE ins_clm
(
  ins_clm_id int8 NOT NULL,
  refno   varchar(64),
  report_date timestamp,
  rpter_id int8,
  rpter_name  varchar(255),
  rpter_address  varchar(255),
  rpter_phone  varchar(64),
  rpter_idno  varchar(128),
  rpter_remark text,
  doc_status  varchar(16),
  issue_date timestamp,
  entry_code  varchar(32),

  loss_status  varchar(16),
  reco_mode  varchar(16),
  loss_adjuster  varchar(128),
  indm_desc text,
  prel_clm_amt numeric,
  depr_val_amt numeric,
  def_clm_amt numeric,
  bppdan_pokn_amt numeric,
  ow_rettn_amt numeric,
  surplus numeric,
  facultative numeric,
  total_amt numeric,

  approved_by  varchar(128),
  approve_date timestamp,

  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_clm_pk PRIMARY KEY (ins_clm_id)
) without oids;

CREATE TABLE ins_clm_pol
(
  ins_clm_pol_id int8 NOT NULL,
  ins_clm_id int8 NOT NULL,
  policy_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_clm_pol_pk PRIMARY KEY (ins_clm_pol_id)
) without oids;

CREATE TABLE ins_clm_obj
(
  ins_clm_obj_id int8 NOT NULL,
  ins_clm_id int8 NOT NULL,
  lks_number  varchar(128),
  policy_id int8,
  ins_pol_obj_id int8,
  ev_location text,
  ev_date timestamp,
  ins_clm_caus_id int8,
  loss_desc text,
  loss_est_amt numeric,
  loss_real_amt numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_clm_pol_pk PRIMARY KEY (ins_clm_obj_id)
) without oids;

CREATE TABLE ins_clm_coins
(
  ins_clm_coins_id int8 NOT NULL,
  ins_clm_id int8 NOT NULL,
  ent_id int8,
  position_code  varchar(16),
  share_pct numeric,
  tsi_amt numeric,
  claim_amt numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_clm_coins_pk PRIMARY KEY (ins_clm_coins_id)
) without oids;

CREATE TABLE ar_bal
(
  ent_id int8 NOT NULL,
  bal_ar numeric,
  bal_ap numeric,
  CONSTRAINT ar_bal_pk PRIMARY KEY (ent_id)
) without oids;

CREATE TABLE ins_polsubtype_cover
(
  pol_subtype_id int8 NOT NULL,
  ins_cover_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_polsubtype_cover_pk PRIMARY KEY (pol_subtype_id,ins_cover_id)
) without oids;

CREATE TABLE ins_pol_deduct
(
  ins_pol_deduct_id int8 NOT NULL,
  description  varchar(128),
  amount numeric,
  percentage numeric,
  deduct_type  varchar(16),
  amt_min numeric,
  amt_max numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_deduct_pk PRIMARY KEY (ins_pol_deduct_id)
) without oids;

CREATE TABLE ins_policy_type_grp
(
  ins_policy_type_grp_id int8 NOT NULL,
  group_name  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_polic_type_grp_pk PRIMARY KEY (ins_policy_type_grp_id)
) without oids;

CREATE TABLE emp (
    empname           text NOT NULL,
    salary            integer
);

CREATE TABLE emp_audit(
    operation         char(1)   NOT NULL,
    stamp             timestamp NOT NULL,
    userid            text      NOT NULL,
    empname           text      NOT NULL,
    salary integer
);

insert into emp values('uhuh',1);

select * from emp_audit;

CREATE OR REPLACE FUNCTION process_emp_audit() RETURNS TRIGGER AS $emp_audit$
    BEGIN
        --
        -- Create a row in emp_audit to reflect the operation performed on emp,
        -- make use of the special variable TG_OP to work out the operation.
        --
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO emp_audit SELECT 'D', now(), user, OLD.*;
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO emp_audit SELECT 'U', now(), user, NEW.*;
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO emp_audit SELECT 'I', now(), user, NEW.*;
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$emp_audit$ language plpgsql;

CREATE TRIGGER emp_audit
AFTER INSERT OR UPDATE OR DELETE ON emp
    FOR EACH ROW EXECUTE PROCEDURE process_emp_audit();


CREATE OR REPLACE FUNCTION trg_ar_inv_x_bal() RETURNS TRIGGER AS $trgn_ar_inv_x_bal$
DECLARE
	cnt numeric;
    BEGIN
        --
        -- Create a row in emp_audit to reflect the operation performed on emp,
        -- make use of the special variable TG_OP to work out the operation.
        --

	select into cnt count(1) from ar_bal where ent_id = NEW.ent_id;

	if (cnt=0) THEN
		INSERT INTO ar_bal(ent_id) values(new.ent_id);
	end if;

	if ((TG_OP='DELETE') or (TG_OP='UPDATE')) then
		if (old.invoice_type='AR') then
			update ar_bal set bal_ar=coalesce(bal_ar,0)-coalesce(old.amount,0) where ent_id=OLD.ent_id;
		else
			update ar_bal set bal_ap=coalesce(bal_ap,0)-coalesce(old.amount,0) where ent_id=OLD.ent_id;
		end if;
	end if;

	if (new.invoice_type='AR') then
		update ar_bal set bal_ar=coalesce(bal_ar,0)+coalesce(new.amount,0) where ent_id=NEW.ent_id;
	else
		update ar_bal set bal_ap=coalesce(bal_ap,0)+coalesce(new.amount,0) where ent_id=NEW.ent_id;
	end if;

        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$trgn_ar_inv_x_bal$ language plpgsql;

CREATE TRIGGER trg_ar_inv_x_baln
AFTER INSERT OR UPDATE OR DELETE ON ar_invoice
    FOR EACH ROW EXECUTE PROCEDURE trg_ar_inv_x_bal();


CREATE TABLE pol_obj_maph
(
  pol_obj_maph_id int8 NOT NULL,
  description  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT pol_obj_maph_pk PRIMARY KEY (pol_obj_maph_id)
) without oids;

CREATE TABLE pol_obj_mapd
(
  pol_obj_mapd_id int8 NOT NULL,
  pol_obj_maph_id int8,
  field_no int8,
  field_desc  varchar(255),
  field_ref  varchar(128),
  field_type  varchar(32),
  field_mandatory  varchar(1),
  width int8,
  rows int8,
  lov  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT pol_obj_mapd_pk PRIMARY KEY (pol_obj_mapd_id)
) without oids;

CREATE TABLE gl_acct_bal2
(
  account_id int8 NOT NULL,
  period_year int8,
         cr0 numeric,	db0 numeric,	bal0 numeric,
         cr1 numeric,	db1 numeric,	bal1 numeric,
         cr2 numeric,	db2 numeric,	bal2 numeric,
         cr3 numeric,	db3 numeric,	bal3 numeric,
         cr4 numeric,	db4 numeric,	bal4 numeric,
         cr5 numeric,	db5 numeric,	bal5 numeric,
         cr6 numeric,	db6 numeric,	bal6 numeric,
         cr7 numeric,	db7 numeric,	bal7 numeric,
         cr8 numeric,	db8 numeric,	bal8 numeric,
         cr9 numeric,	db9 numeric,	bal9 numeric,
         cr10 numeric,	db10 numeric,	bal10 numeric,
         cr11 numeric,	db11 numeric,	bal11 numeric,
         cr12 numeric,	db12 numeric,	bal12 numeric,
         cr13 numeric,	db13 numeric,	bal13 numeric,
         cr14 numeric,	db14 numeric,	bal14 numeric,
         cr15 numeric,	db15 numeric,	bal15 numeric,
         cr16 numeric,	db16 numeric,	bal16 numeric,
         cr17 numeric,	db17 numeric,	bal17 numeric,
         cr18 numeric,	db18 numeric,	bal18 numeric,
         cr19 numeric,	db19 numeric,	bal19 numeric,
         cr20 numeric,	db20 numeric,	bal20 numeric,
         cr21 numeric,	db21 numeric,	bal21 numeric,
         cr22 numeric,	db22 numeric,	bal22 numeric,
         cr23 numeric,	db23 numeric,	bal23 numeric,
         cr24 numeric,	db24 numeric,	bal24 numeric,
  CONSTRAINT gl_acct_bal2_pk PRIMARY KEY (account_id, period_year)
) without oids;

CREATE OR REPLACE FUNCTION trg_gl_bal() RETURNS TRIGGER AS $BODY$
DECLARE
	cnt numeric;
   BEGIN
      select into cnt count(1) from gl_acct_bal2 where account_id = NEW.accountid and period_year=NEW.fiscal_year;

      if (cnt=0) THEN
         INSERT INTO gl_acct_bal2(account_id,period_year) values(NEW.accountid,cast(NEW.fiscal_year as int8));
      end if;

      if ((TG_OP='DELETE') or (TG_OP='UPDATE')) then
         EXECUTE 'update gl_acct_bal2 set db'||OLD.period_no ||'=coalesce(db'||OLD.period_no||',0)-coalesce('||old.debit||',0) where account_id = '||OLD.accountid||' and period_year='||OLD.fiscal_year;
         EXECUTE 'update gl_acct_bal2 set cr'||OLD.period_no ||'=coalesce(cr'||OLD.period_no||',0)-coalesce('||old.credit||',0) where account_id = '||OLD.accountid||' and period_year='||OLD.fiscal_year;
         EXECUTE 'update gl_acct_bal2 set bal'||OLD.period_no ||'=coalesce(bal'||OLD.period_no||',0)+coalesce('||old.debit||',0)-coalesce('||old.credit||',0) where account_id = '||OLD.accountid||' and period_year='||OLD.fiscal_year;
      end if;

      EXECUTE 'update gl_acct_bal2 set db'||NEW.period_no ||'=coalesce(db'||NEW.period_no||',0)+coalesce('||NEW.debit||',0) where account_id = '||NEW.accountid||' and period_year='||NEW.fiscal_year;
      EXECUTE 'update gl_acct_bal2 set cr'||NEW.period_no ||'=coalesce(cr'||NEW.period_no||',0)+coalesce('||NEW.credit||',0) where account_id = '||NEW.accountid||' and period_year='||NEW.fiscal_year;
      EXECUTE 'update gl_acct_bal2 set bal'||NEW.period_no ||'=coalesce(bal'||NEW.period_no||',0)-coalesce('||NEW.debit||',0)+coalesce('||NEW.credit||',0) where account_id = '||NEW.accountid||' and period_year='||NEW.fiscal_year;

      RETURN NULL; -- result is ignored since this is an AFTER trigger
   END;
$BODY$ language plpgsql;

CREATE TRIGGER trg_gl_balt
AFTER INSERT OR UPDATE OR DELETE ON gl_je_detail
    FOR EACH ROW EXECUTE PROCEDURE trg_gl_bal();

CREATE TABLE ins_cover_source
(
  ins_cover_source_id  varchar(32) NOT NULL,
  description  varchar(128),
  active_flag  varchar(1),
  ar_trx_type_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_cover_source_pk PRIMARY KEY (ins_cover_source_id)
) without oids;


CREATE OR REPLACE FUNCTION trg_ar_rcp_line_settle()
  RETURNS "trigger" AS
$BODY$
DECLARE
	cnt numeric;
    BEGIN
         if ((TG_OP='DELETE') or (TG_OP='UPDATE')) then
            if (old.commit_flag='Y') then
               if ((old.line_type='INVOC') or (old.line_type='NOTE')) then
                  update ar_invoice set amount_settled=coalesce(amount_settled,0)-coalesce(old.amount_entered,0) where ar_invoice_id=OLD.ar_invoice_id;
               end if;
               if ((old.line_type='COMM')) then
                  update ar_invoice_details set amount_settled=coalesce(amount_settled,0)-coalesce(old.amount_entered,0) where ar_invoice_dtl_id=old.ar_invoice_dtl_id;
               end if;
             end if;
         end if;
         if ((TG_OP='INSERT') or (TG_OP='UPDATE')) then
            if (new.commit_flag='Y') then
               if ((new.line_type='INVOC') or (new.line_type='NOTE')) then
                  update ar_invoice set amount_settled=coalesce(amount_settled,0)+coalesce(new.amount_entered,0) where ar_invoice_id=new.ar_invoice_id;
               end if;
               if ((new.line_type='COMM')) then
                  update ar_invoice_details set amount_settled=coalesce(amount_settled,0)+coalesce(new.amount_entered,0) where ar_invoice_dtl_id=new.ar_invoice_dtl_id;
               end if;
            end if;
         end if;
        RETURN NULL;
    END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;

CREATE TRIGGER trg_ar_rcp_line_settle_t
AFTER INSERT OR UPDATE OR DELETE ON ar_receipt_lines
    FOR EACH ROW EXECUTE PROCEDURE trg_ar_rcp_line_settle();


CREATE TABLE ar_tax
(
  tax_code int8 NOT NULL,
  description  varchar(128),
  inclusive_flag  varchar(1),
  rate numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ar_tax_pk PRIMARY KEY (tax_code)
) without oids;


CREATE OR REPLACE FUNCTION trg_ar_inv_x_bal()
  RETURNS "trigger" AS
$BODY$
DECLARE
	cnt numeric;
    BEGIN

        select into cnt count(1) from ar_bal where ent_id = NEW.ent_id;
        if (cnt=0) THEN
            INSERT INTO ar_bal(ent_id) values(new.ent_id);
        end if;
        if ((TG_OP='DELETE') or (TG_OP='UPDATE')) then
            if (old.commit_flag='Y') then
                if (old.invoice_type='AR') then
                    update ar_bal set bal_ar=coalesce(bal_ar,0)-coalesce(old.amount,0) where ent_id=OLD.ent_id;
                else
                    update ar_bal set bal_ap=coalesce(bal_ap,0)-coalesce(old.amount,0) where ent_id=OLD.ent_id;
                end if;
            end if;
	    end if;
        if ((TG_OP='INSERT') or (TG_OP='UPDATE')) then
            if (new.commit_flag='Y') then
                if (new.invoice_type='AR') then
                    update ar_bal set bal_ar=coalesce(bal_ar,0)+coalesce(new.amount,0) where ent_id=NEW.ent_id;
                else
                    update ar_bal set bal_ap=coalesce(bal_ap,0)+coalesce(new.amount,0) where ent_id=NEW.ent_id;
                end if;
            end if;
        end if;
        RETURN NULL;
    END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;
ALTER FUNCTION trg_ar_inv_x_bal() OWNER TO postgres;

CREATE TABLE ins_endorse
(
  ins_endorse_id int8 NOT NULL,
  description  varchar(255),
  endorse_date timestamp,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_endorse_pk PRIMARY KEY (ins_endorse_id)
) without oids;

CREATE TABLE ins_period
(
  ins_period_id int8 NOT NULL,
  description  varchar(255),
  period_length int8,
  period_unit  varchar(16),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_period_pk PRIMARY KEY (ins_period_id)
) without oids;

CREATE TABLE ins_installmnt
(
  ins_inst_id int8 NOT NULL,
  due_date timestamp,
  amount numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_installmnt_pk PRIMARY KEY (ins_inst_id)
) without oids;

CREATE TABLE ff_detail
(
  ff_detail_id int8 NOT NULL,
  ff_header_id varchar(32),
  field_no int8,
  field_desc varchar(255),
  field_ref varchar(128),
  field_type varchar(32),
  field_mandatory varchar(1),
  field_width int8,
  field_height int8,
  lov varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ff_detail_pk PRIMARY KEY (ff_detail_id)
)
WITHOUT OIDS;

CREATE TABLE ff_header
(
  ff_header_id varchar(32) NOT NULL,
  description varchar(128),
  desc_field varchar(64),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ff_header_pk PRIMARY KEY (ff_header_id)
)
WITHOUT OIDS;

CREATE TABLE ins_period_base
(
  ins_period_base_id int8 NOT NULL,
  base_unit numeric,
  description  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_period_base_pk PRIMARY KEY (ins_period_base_id)
) without oids;

CREATE TABLE ins_premium_factor
(
  ins_premium_factor_id int8 NOT NULL,
  description  varchar(255),
  period_rate_factor numeric,
  premi_factor numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_premium_factor_pk PRIMARY KEY (ins_premium_factor_id)
) without oids;

CREATE TABLE s_lang
(
  lang_id varchar(3) NOT NULL,
  lang_name  varchar(128),
  active_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_lang_pk PRIMARY KEY (lang_id)
) without oids;


CREATE TABLE s_region_map2
(
  region_map_id int8 NOT NULL,
  city_name  varchar(64),
  region_class  varchar(5),
  region_name   varchar(128),
  postal_code   varchar(5),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_region_map2_pk PRIMARY KEY (region_map_id)
) without oids;

CREATE TABLE ins_treaty
(
  ins_treaty_id int8 NOT NULL,
  treaty_name  varchar(128),
  prop_tre_flag  varchar(1),
  retro_cess_flag  varchar(1),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_treaty_pk PRIMARY KEY (ins_treaty_id)
) without oids;

CREATE TABLE ins_treaty_detail
(
  ins_treaty_detail_id int NOT NULL,
  treaty_type  varchar(5),
  policy_type_id int8,
  treaty_limit numeric,
  rate_mindep_pct numeric,
  comm_ri_pct numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_treaty_detail_pk PRIMARY KEY (ins_treaty_detail_id)
) without oids;

CREATE TABLE ins_treaty_shares
(
  ins_treaty_shares_id int8 NOT NULL,
  ins_treaty_detail_id int8,
  member_ent_id int8,
  sharepct numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_treaty_shares_pk PRIMARY KEY (ins_treaty_shares_id)
) without oids;


CREATE TABLE ins_pol_treaty
(
  ins_pol_treaty_id int8 NOT NULL,
  ins_treaty_detail_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_treaty_pk PRIMARY KEY (ins_pol_treaty_id)
) without oids;

CREATE TABLE ins_pol_ri
(
  ins_pol_ri_id int8 NOT NULL,
  ins_treaty_shares_id int8,
  member_ent_id int8,
  sharepct numeric,
  premi_amount numeric,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_ri_pk PRIMARY KEY (ins_pol_ri_id)
) without oids;

CREATE TABLE ins_prt_log
(
  ins_prt_log_id int8 NOT NULL,
  policy_id int8,
  print_type varchar(64),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_prt_log_pk PRIMARY KEY (ins_prt_log_id)
) without oids;


CREATE TABLE ins_rates_big
(
  ins_rates_id varchar(32) NOT NULL,
  rate_class  varchar(8),

  period_start timestamp,
  period_end timestamp,

  ref1 varchar(8),
  ref2 varchar(8),
  ref3 varchar(8),

  rate0 numeric,
  rate1 numeric,
  rate2 numeric,
  rate3 numeric,
  rate4 numeric,
  rate5 numeric,
  rate6 numeric,
  rate7 numeric,
  rate8 numeric,
  rate9 numeric,
  rate10 numeric,

  rate11 numeric,
  rate12 numeric,
  rate13 numeric,
  rate14 numeric,
  rate15 numeric,
  rate16 numeric,
  rate17 numeric,
  rate18 numeric,
  rate19 numeric,
  rate20 numeric,

  rate21 numeric,
  rate22 numeric,
  rate23 numeric,
  rate24 numeric,
  rate25 numeric,
  rate26 numeric,
  rate27 numeric,
  rate28 numeric,
  rate29 numeric,
  rate30 numeric,

  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_rates_pk PRIMARY KEY (ins_rates_id)
) without oids;


CREATE TABLE ins_rate_meta
(
  ins_rate_meta_id int8 NOT NULL,
  rm_description  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_rate_meta_pk PRIMARY KEY (ins_rate_meta_id)
) without oids;

CREATE TABLE ins_rate_meta_details
(
  ins_rate_meta_dtl_id int8 NOT NULL,
  ins_rate_meta_id int8,
  rmd_field_ref varchar(32),
  rmd_pad_char  varchar(1),
  rmd_pad_align  varchar(1),
  rmd_pad_length int8,
  rmd_order int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_rate_meta_details_pk PRIMARY KEY (ins_rate_meta_dtl_id)
) without oids;

drop FUNCTION dc_update_policy(v_pol_id text);

CREATE or replace FUNCTION dc_update_policy(v_pol_id text) RETURNS text AS $$
DECLARE
    mviews RECORD;

    comm1 numeric;
    comm2 numeric;
    comm3 numeric;
    comm4 numeric;
    brok1 numeric;
    brok2 numeric;
    hfee numeric;
    sfee numeric;
    pdut numeric;
    commt1 numeric;
    commt2 numeric;
    commt3 numeric;
    commt4 numeric;
    brokt1 numeric;
    brokt2 numeric;
BEGIN

   FOR mviews IN
      select a.amount, b.ins_item_cat from ins_pol_items a,ins_items b where b.ins_item_id=a.ins_item_id and a.pol_id=v_pol_id
      LOOP

      RAISE NOTICE 'item :  %, %', mviews.ins_item_cat, mviews.amount;

     -- Now "mviews" has one record from cs_materialized_views
     if (mviews.ins_item_cat='COMM') then
        if comm1 is null then comm1 := mviews.amount;
           elsif comm2 is null then comm2 := mviews.amount;
           elsif  comm3 is null then comm3 := mviews.amount;
           elsif  comm4 is null then comm4 := mviews.amount;
        end if;
     end if;

     if (mviews.ins_item_cat='BROKR') then
        if brok1 is null then brok1 := mviews.amount;
            elsif brok2 is null then brok2 := mviews.amount;
        end if;
     end if;

      if (mviews.ins_item_cat='HFEE') then
         hfee := mviews.amount;
      end if;

      if (mviews.ins_item_cat='SFEE') then
         sfee := mviews.amount;
      end if;

      if (mviews.ins_item_cat='PCOST') then
         pdut := mviews.amount;
      end if;

   END LOOP;

   update ins_policy set
      nd_comm1 = comm1,
      nd_comm2 = comm2,
      nd_comm3 = comm3,
      nd_comm4 = comm4,
      nd_brok1 = brok1,
      nd_brok2 = brok2,
      nd_hfee = hfee,
      nd_sfee = sfee,
      nd_pcost = pdut,
      nd_update='Y'
    where pol_id=v_pol_id;

   RETURN 'OK';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION summ(text,text)
  RETURNS text AS
'select coalesce($1,$2)'
  LANGUAGE 'sql' VOLATILE;

CREATE OR REPLACE FUNCTION summ(numeric,numeric)
  RETURNS numeric AS
'select coalesce($1,0)+coalesce($2,0)'
  LANGUAGE 'sql' VOLATILE;

CREATE OR REPLACE FUNCTION summ(int8,int8)
  RETURNS int8 AS
'select coalesce($1,$2)'
  LANGUAGE 'sql' VOLATILE;

CREATE AGGREGATE summ (BASETYPE = bigint, SFUNC = summ, STYPE = bigint);
CREATE AGGREGATE summ (BASETYPE = text, SFUNC = summ, STYPE = text);
CREATE AGGREGATE summ (BASETYPE = numeric, SFUNC = summ, STYPE = numeric);


ALTER TABLE ins_policy ADD COLUMN nd_brok1pct numeric;
ALTER TABLE ins_policy ADD COLUMN nd_brok2pct numeric;
ALTER TABLE ins_policy ADD COLUMN nd_hfeepct numeric;

ALTER TABLE ins_policy ADD COLUMN nd_premi1 numeric;
ALTER TABLE ins_policy ADD COLUMN nd_premi2 numeric;
ALTER TABLE ins_policy ADD COLUMN nd_premi3 numeric;
ALTER TABLE ins_policy ADD COLUMN nd_premi4 numeric;

ALTER TABLE ins_policy ADD COLUMN nd_premirate1 numeric;
ALTER TABLE ins_policy ADD COLUMN nd_premirate2 numeric;
ALTER TABLE ins_policy ADD COLUMN nd_premirate3 numeric;
ALTER TABLE ins_policy ADD COLUMN nd_premirate4 numeric;

ALTER TABLE ins_policy ADD COLUMN nd_disc1 numeric;
ALTER TABLE ins_policy ADD COLUMN nd_disc2 numeric;

ALTER TABLE ins_policy ADD COLUMN nd_disc1pct numeric;
ALTER TABLE ins_policy ADD COLUMN nd_disc2pct numeric;

CREATE or replace FUNCTION dc_update_policy(v_pol_id text) RETURNS text AS $$
DECLARE
    mviews RECORD;

    comm1 numeric;
    comm2 numeric;
    comm3 numeric;
    comm4 numeric;
    brok1 numeric;
    brok2 numeric;
    hfee numeric;
    hfeepct numeric;
    sfee numeric;
    pdut numeric;
    commt1 numeric;
    commt2 numeric;
    commt3 numeric;
    commt4 numeric;
    brok1pct numeric;
    brok2pct numeric;

    disc1 numeric;
    disc2 numeric;
    disc1pct numeric;
    disc2pct numeric;

    premi1 numeric;
    premi2 numeric;
    premi3 numeric;
    premi4 numeric;
    premi1pct numeric;
    premi2pct numeric;
    premi3pct numeric;
    premi4pct numeric;
BEGIN

   FOR mviews IN
      select a.amount, a.rate, b.ins_item_cat from ins_pol_items a,ins_items b where b.ins_item_id=a.ins_item_id and a.pol_id=v_pol_id
      LOOP

      if (mviews.ins_item_cat='COMM') then
         if comm1 is null then comm1 := mviews.amount;
            elsif comm2 is null then comm2 := mviews.amount;
            elsif  comm3 is null then comm3 := mviews.amount;
            elsif  comm4 is null then comm4 := mviews.amount;
         end if;
      end if;

      if (mviews.ins_item_cat='DISC') then
         if disc1 is null then
            disc1 := mviews.amount;
            disc1pct := mviews.rate;
         elsif disc2 is null then
            disc2 := mviews.amount;
            disc2pct := mviews.rate;
         end if;
      end if;

      if (mviews.ins_item_cat='BROKR') then
         if brok1 is null then
            brok1 := mviews.amount;
            brok1pct := mviews.rate;
         elsif brok2 is null then
            brok2 := mviews.amount;
            brok2pct := mviews.rate;
         end if;

      end if;

      if (mviews.ins_item_cat='HFEE') then
         hfee := mviews.amount;
         hfeepct := mviews.rate;
      end if;

      if (mviews.ins_item_cat='SFEE') then
         sfee := mviews.amount;
      end if;

      if (mviews.ins_item_cat='PCOST') then
         pdut := mviews.amount;
      end if;

   END LOOP;

   cur_ins_pol_obj_id := null

   FOR mviews IN
     select a.premi, a.rate, a.ins_pol_obj_id from ins_pol_ cover a where a.pol_id=v_pol_id order by ins_pol_obj_id, ins_cover_id
      LOOP

      if (not(cur_ins_pol_obj_id = mviews.ins_pol_obj_id)) then
         update ins_pol_obj set
            nd_premi1 = premi1,
            nd_premi2 = premi2,
            nd_premi3 = premi3,
            nd_premi4 = premi4,
            nd_premirate1 = premi1pct,
            nd_premirate2 = premi2pct,
            nd_premirate3 = premi3pct,
            nd_premirate4 = premi4pct
         where
            ins_pol_obj_id=mviews.ins_pol_obj_id;

         premi1 := null;
         premi2 := null;
         premi3 := null;
         premi4 := null;
         premi1pct := null;
         premi2pct := null;
         premi3pct := null;
         premi4pct := null;
      end if

      cur_ins_pol_obj_id :=  mviews.ins_pol_obj_id;

      if (premi1 is null)then
         premi1:=mviews.premi;
         premi1pct:=mviews.rate;
      elsif (premi2 is null)then
         premi2:=mviews.premi;
         premi2pct:=mviews.rate;
      elsif (premi3 is null)then
         premi3:=mviews.premi;
         premi3pct:=mviews.rate;
      elsif (premi4 is null)then
         premi4:=mviews.premi;
         premi4pct:=mviews.rate;
      end if;
   END LOOP;

   update ins_pol_obj set
      nd_premi1 = premi1,
      nd_premi2 = premi2,
      nd_premi3 = premi3,
      nd_premi4 = premi4,
      nd_premirate1 = premi1pct,
      nd_premirate2 = premi2pct,
      nd_premirate3 = premi3pct,
      nd_premirate4 = premi4pct
   where
      ins_pol_obj_id=cur_ins_pol_obj_id;

   update ins_policy set
      nd_comm1 = comm1,
      nd_comm2 = comm2,
      nd_comm3 = comm3,
      nd_comm4 = comm4,
      nd_brok1 = brok1,
      nd_brok1pct = brok1pct,
      nd_brok2 = brok2,
      nd_brok2pct = brok2pct,
      nd_hfee = hfee,
      nd_hfeepct = hfeepct,
      nd_sfee = sfee,
      nd_pcost = pdut,
      nd_disc1 = disc1,
      nd_disc2 = disc2,
      nd_disc1pct = disc1pct,
      nd_disc2pct = disc2pct,
      nd_premi1 = premi1,
      nd_premi2 = premi2,
      nd_premi3 = premi3,
      nd_premi4 = premi4,
      nd_premirate1 = premi1pct,
      nd_premirate2 = premi2pct,
      nd_premirate3 = premi3pct,
      nd_premirate4 = premi4pct,
      nd_update='Y'
    where pol_id=v_pol_id;

   RETURN 'OK';
END;
$$ LANGUAGE plpgsql;

CREATE TABLE s_user_log
(
  user_log_id int8 NOT NULL,
  user_action  varchar(32),
  reference1  varchar(255) ,
  user_id  varchar(32),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_user_log_pk PRIMARY KEY (user_log_id)
) without oids;

CREATE TABLE ins_pol_nomerator
(
  ins_pol_nomerator_id varchar(16) NOT NULL,
  cc_code int8,
  policy_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_nomerator_pk PRIMARY KEY (ins_pol_nomerator_id)
) without oids;

CREATE TABLE ar_rcp_type
(
  ar_rcp_type_id int8 NOT NULL,
  ar_rcp_desc
  enabled_flag
  default_
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ar_rcp_type_pk PRIMARY KEY (ar_rcp_type_id)
) without oids;

CREATE TABLE receipt_class_item
(
  rc_item_id int8 NOT NULL,
  rc_id int8,
  description  varchar(128),
  chrg_account  varchar(128),
  chrg_account_neg  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT receipt_class_item_pk PRIMARY KEY (rc_item_id)
) without oids;

CREATE TABLE ar_settlement
(
  ar_settlement_id int8 NOT NULL,
  description  varchar(128),
  arap_account  varchar(128),
  arap_account_neg varchar(128),
  excess_account varchar(128),
  excess_account_neg varchar(128),
  rate_diff_account varchar(128),
  rate_diff_account_neg varchar(128),
  arap_trx_type_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ar_settlement_pk PRIMARY KEY (ar_settlement_id)
) without oids;

CREATE TABLE ar_settlement_excess
(
  ar_settlement_xc_id int8 NOT NULL,
  description  varchar(128),
  f_negative  varchar(1),
  f_positive  varchar(1),
  gl_account  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ar_settlement_excess_pk PRIMARY KEY (ar_settlement_xc_id)
) without oids;


CREATE TABLE ins_document_type
(
  ins_document_type_id int8 NOT NULL,
  description  varchar(128),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_document_pk PRIMARY KEY (ins_document_type_id)
) without oids;

CREATE TABLE ins_documents
(
  ins_documents_id int8 NOT NULL,
  ins_document_type_id int8,
  pol_type_id int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_documents_pk PRIMARY KEY (ins_documents_id)
) without oids;

CREATE TABLE ins_pol_documents
(
  ins_pol_document_id int8 NOT NULL,
  ins_document_type_id int8,
  document_class  varchar(8),
  file_physic int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_pol_documents_pk PRIMARY KEY (ins_pol_document_id)
) without oids;

CREATE TABLE s_files
(
  file_id int8 NOT NULL,
  orig_name  varchar(255),
  file_path  varchar(255),
  file_size int8,
  file_date timestamp,
  file_type  varchar(64),
  mime_type  varchar(64),
  compressed_flag  varchar(1),
  orig_size int8,
  parent_id int8,
  image_width int8,
  image_height int8,
  image_colors int8,
  folder_flag  varchar(1),
  thumb_flag  varchar(1),
  file_group  varchar(255),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_files_pk PRIMARY KEY (file_id)
) without oids;


CREATE TABLE invoice_group
(
  invoice_group_id int8 NOT NULL,
  invoice_group_no  varchar(32),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT invoice_group_pk PRIMARY KEY (invoice_group_id)
) without oids;

CREATE TABLE s_print_history
(
  print_history_id int8 NOT NULL,
  file_id int8,
  group_id  varchar(16),
  generate_url  varchar(255),
  secure_print_group  varchar(16),
  secure_print_code  varchar(16),
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT s_print_history_pk PRIMARY KEY (print_history_id)
) without oids;

CREATE TABLE ff_table
(
  fft_id int8 NOT NULL,
  ref1  varchar(255),
  ref2  varchar(255),
  ref3  varchar(255),
  ref4  varchar(255),
  ref5  varchar(255),
  refid1 int8,
  refid2 int8,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ff_table_pk PRIMARY KEY (fft_id)
) without oids;

CREATE TABLE ins_rates_bigh
(
  ins_rates_hdr_id int8 NOT NULL,
  description varchar(32),
  rate_class varchar(32),
  period_start timestamp,
  period_end timestamp,
  create_date timestamp NOT NULL,
  create_who varchar(32) NOT NULL,
  change_date timestamp,
  change_who varchar(32),
  CONSTRAINT ins_rates_bigh_pk PRIMARY KEY (ins_rates_hdr_id)
) without oids;
