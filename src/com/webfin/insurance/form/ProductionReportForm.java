/***********************************************************************
 * Module:  com.webfin.insurance.form.ProductionReportForm
 * Author:  Denny Mahendra
 * Created: Aug 15, 2006 11:17:20 PM
 * Purpose:
 ***********************************************************************/

package com.webfin.insurance.form;

import com.crux.lang.LanguageView;
import com.crux.util.DTOList;
import com.crux.util.SQLAssembler;
import com.crux.util.Tools;
import com.crux.util.ListUtil;
import com.crux.web.controller.SessionManager;
import com.crux.web.form.Form;
import com.crux.lov.LOVManager;
import com.crux.common.model.DTO;
import com.crux.common.model.HashDTO;
import com.crux.pool.DTOPool;
import com.webfin.gl.model.GLCostCenterView;
import com.webfin.insurance.model.InsurancePolicyItemsView;
import com.webfin.insurance.model.InsurancePolicyView;
import com.webfin.insurance.model.InsuranceTreatyTypesView;
import com.webfin.insurance.ejb.PostProcessorManager;
import com.webfin.FinCodec;
import com.crux.lang.LanguageManager;
import com.crux.util.BDUtil;
import com.crux.util.DateUtil;
import com.crux.util.LogManager;
import com.webfin.insurance.ejb.Insurance;
import com.webfin.insurance.ejb.InsuranceHome;
import com.webfin.pks.model.PerjanjianKerjasamaView;

import javax.ejb.CreateException;
import javax.naming.NamingException;
import java.rmi.RemoteException;
import com.crux.util.JNDIUtil;

import java.util.Date;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.HashSet;
import java.io.File;
import java.lang.reflect.Method;
import java.math.BigDecimal;

import java.io.*;
import org.apache.axis.types.Language;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.servlet.ServletOutputStream;

import com.crux.util.SQLUtil;
import com.webfin.entity.model.EntityView;
import com.webfin.entity.model.EntityAddressView;
import com.webfin.insurance.model.InsuranceProdukView;
import com.webfin.insurance.model.InsuranceBayar1View;
import com.webfin.insurance.model.InsuranceHutangView;
import com.webfin.insurance.model.InsurancePajakView;
import com.webfin.postalcode.model.PostalCodeView;
import javax.ejb.SessionContext;

import org.joda.time.Months;
import org.joda.time.DateTime;

import com.crux.common.model.Filter;

public class ProductionReportForm extends Form {
    
    public SessionContext ctx;
    private Date periodFrom;
    private Date expirePeriodFrom;
    private Date expirePeriodTo;
    private Date periodTo;
    private Date policyDateFrom;
    private Date policyDateTo;
    private Date entryDateFrom;
    private Date entryDateTo;
    private Date claimDateFrom;
    private Date claimDateTo;
    private Date periodEndFrom;
    private Date periodEndTo;
    private Date restFrom;
    private Date restTo;
    private Date remarkDateFrom;
    private Date remarkDateTo;
    private Date receiveDateFrom;
    private Date receiveDateTo;
    
    private String stPolicyTypeGroupID;
    private String stPolicyTypeID;
    private String stInsCompanyID;
    private String stInsCompanyName;
    private String stEntityName;
    
    private String stFltCoverType;
    private String stFltTreatyType;
    private String stFltTreatyTypeDesc;
    private String stFltCoverTypeDesc;
    private String stFltClaimStatus;
    private String stFltClaimStatusDesc;
    private String stCustCategory1;
    private String stEntityID;
    private String stPolicyTypeDesc;
    private String stPrintForm;
    private String stFontSize;
    private String stLang;
    private String stPolicyNo;
    private String stRiskLocation;
    private String stPostCode;
    private String stRiskCardNo;
    private String stBranch = SessionManager.getInstance().getSession().getStBranch();
    private String stBranchName = SessionManager.getInstance().getSession().getCostCenterDesc();
    private String stBranchDesc;
    private String stRiskCode;
    private String stCustCategory1Desc;
    private boolean enableRiskFilter;
    private boolean enableSelectForm=true;
    private String ref1;
    private HashMap refPropMap;
    private String status;
    private String stReportTitle;
    private String stReport;
    private String stReportDesc;
    private String stReportType;
    private String stNama;
    private String stMarketerID;
    private String stMarketerName;
    private String stCompanyID;
    private String stCompanyName;
    private String stZoneCode;
    private String stZoneCodeName;
    private String stPolicyTypeGroupDesc;
    private String stReportTypeOfFile;
    private String stFileName;
    private String stZoneEquake;
    private String stZoneEquakeName;
    private String stNoUrut;
    private String stNumber;
    private String stCreateID;
    private String stCreateName;
    private String stRekapNo;
    private String stAuthorized;
    private String stPostCodeDesc;
    private String stCoinsurerID;
    private String stCoinsurerName;
    private String stRiskCodeName;
    String stTreatyYear = "";
    private DTOList list;
    private String stABAFlag="N";
    private String stIndex="N";
    private Date appDateFrom;
    private Date appDateTo;
    private Date PLADateFrom;
    private Date PLADateTo;
    private Date DLADateFrom;
    private Date DLADateTo;
    private Date paymentDateFrom;
    private Date paymentDateTo;
    private String stReceiptNo;
    private String stObject;
    private String stParentID;
    private String stCustStatus;
    private String stStatus;
    private String stYearTreaty;
    private String stTime;
    private String stTax;
    private String stTaxDesc;
    private String stWilayahID;
    private String stWilayahName;
    private String stCompTypeID;
    private String stCompTypeName;
    private String stCreditID;
    private String stCreditName;
    private String stItemClaimID;
    private String stItemClaimName;
    private String stKreasiID;
    private String stKreasiName;
    private String stReinsID;
    private String stReinsName;
    private String stGroupID;
    private String stGroupName;
    
    private static HashSet formList = null;
    
    private final static transient LogManager logger = LogManager.getInstance(ProductionReportForm.class);
    
    private Insurance getRemoteInsurance() throws NamingException, ClassNotFoundException, CreateException, RemoteException {
        return ((InsuranceHome) JNDIUtil.getInstance().lookup("InsuranceEJB",InsuranceHome.class.getName()))
        .create();
    }
    /*
    public String getStZoneEquake() {
        return stZoneEquake;
    }
    
    public void setStZoneEquake(String stZoneEquake) {
        this.stZoneEquake = stZoneEquake;
    }
    
    public String getStZoneEquakeName() {
        return stZoneEquakeName;
    }
    
    public void setStZoneEquakeName(String stZoneEquakeName) {
        this.stZoneEquakeName = stZoneEquakeName;
    }
    
    public String getStFileName() {
        return stFileName;
    }
    
    public void setStFileName(String stFileName) {
        this.stFileName = stFileName;
    }
    
    public String getStMarketerID() {
        return stMarketerID;
    }
    
    public void setStMarketerID(String stMarketerID) {
        this.stMarketerID = stMarketerID;
    }
    
    public String getStMarketerName() {
        return stMarketerName;
    }
    
    public void setStMarketerName(String stMarketerName) {
        this.stMarketerName = stMarketerName;
    }
    
    public String getStCompanyID() {
        return stCompanyID;
    }
    
    public void setStCompanyID(String stCompanyID) {
        this.stCompanyID = stCompanyID;
    }
    
    public String getStCompanyName() {
        return stCompanyName;
    }
    
    public void setStCompanyName(String stCompanyName) {
        this.stCompanyName = stCompanyName;
    }
    
    public String getStReportType() {
        return stReportType;
    }
    
    public void setStReportType(String stReportType) {
        this.stReportType = stReportType;
    }
    
    public String getStReportTypeOfFile() {
        return stReportTypeOfFile;
    }
    
    public void setStReportTypeOfFile(String stReportTypeOfFile) {
        this.stReportTypeOfFile = stReportTypeOfFile;
    }
    
    public String getStFltClaimStatus() {
        return stFltClaimStatus;
    }
    
    public void setStFltClaimStatus(String stFltClaimStatus) {
        this.stFltClaimStatus = stFltClaimStatus;
    }
    
    public String getStReport() {
        return stReport;
    }
    
    public void setStReport(String stReport) {
        this.stReport = stReport;
    }
    
    public String getStReportDesc() {
        return stReportDesc;
    }
    
    public void setStReportDesc(String stReportDesc) {
        this.stReportDesc = stReportDesc;
    }
    
    public String getStFltClaimStatusDesc() {
        return stFltClaimStatusDesc;
    }
    
    public void setStFltClaimStatusDesc(String stFltClaimStatusDesc) {
        this.stFltClaimStatusDesc = stFltClaimStatusDesc;
    }
    
    public String getStEntityName() {
        return stEntityName;
    }
    
    public void setStEntityName(String stEntityName) {
        this.stEntityName = stEntityName;
    }
    
    public String getStPolicyTypeDesc() {
        return stPolicyTypeDesc;
    }
    
    public void setStPolicyTypeDesc(String stPolicyTypeDesc) {
        this.stPolicyTypeDesc = stPolicyTypeDesc;
    }
    
    public String getStFltTreatyTypeDesc() {
        return stFltTreatyTypeDesc;
    }
    
    public void setStFltTreatyTypeDesc(String stFltTreatyTypeDesc) {
        this.stFltTreatyTypeDesc = stFltTreatyTypeDesc;
    }
    
    public String getStFltTreatyType() {
        return stFltTreatyType;
    }
    
    public void setStFltTreatyType(String stFltTreatyType) {
        this.stFltTreatyType = stFltTreatyType;
    }
    
    public String getStBranchDesc() {
        return stBranchDesc;
    }
    
    public void setStBranchDesc(String stBranchDesc) {
        this.stBranchDesc = stBranchDesc;
    }
    
    public String getStBranch() {
        return stBranch;
    }
    
    public void setStBranch(String stBranch) {
        this.stBranch = stBranch;
    }
    
    public boolean isEnableSelectForm() {
        return enableSelectForm;
    }
    
    public void setEnableSelectForm(boolean enableSelectForm) {
        this.enableSelectForm = enableSelectForm;
    }
    
    private static String [][] objectFields={
        {"b.description","odescription",},
        {"b.nd_premi1","nd_premi1",},
        {"b.nd_premi2","nd_premi2",},
        {"b.nd_premi3","nd_premi3",},
        {"b.nd_premi4","nd_premi4",},
        {"b.nd_premirate1","nd_premirate1",},
        {"b.nd_premirate2","nd_premirate2",},
        {"b.nd_premirate3","nd_premirate3",},
        {"b.nd_premirate4","nd_premirate4",},
    };
    
    private static String [][] objectFields2={
        {"coalesce(b.ref1d,b.ref1)","obj_ref1",},
        {"coalesce(b.ref2d,b.ref2)","obj_ref2",},
        {"coalesce(b.ref3d,b.ref3)","obj_ref3",},
        {"coalesce(b.ref4d,b.ref4)","obj_ref4",},
        {"coalesce(b.ref5d,b.ref5)","obj_ref5",},
        {"coalesce(b.ref6d,b.ref6)","obj_ref6",},
        {"coalesce(b.ref7d,b.ref7)","obj_ref7",},
        {"b.riskcode","riskcode",},
        {"b.risk_location","risk_location",},
        {"b.riskcardno","riskcardno",},
        {"b.insured_amount","obj_insured_amount",},
        {"b.premi_total","obj_premi_total",},
    };
    
    private static String [][] policyFields={
        {"a.pol_id","pol_id",},
        {"a.pol_no","pol_no",},
        {"a.description","description",},
        {"a.ccy","ccy",},
        {"a.posted_flag","posted_flag",},
        {"a.create_date","create_date",},
        {"a.create_who","create_who",},
        {"a.change_date","change_date",},
        {"a.change_who","change_who",},
        {"a.pol_type_id","pol_type_id",},
        {"a.amount","amount",},
        {"a.period_start","period_start",},
        {"a.period_end","period_end",},
        {"a.pol_subtype_id","pol_subtype_id",},
        {"a.premi_base","premi_base",},
        {"a.premi_total","premi_total",},
        {"a.premi_rate","premi_rate",},
        {"a.insured_amount","insured_amount",},
        {"a.policy_date","policy_date",},
        {"a.bus_source","bus_source",},
        {"a.region_id","region_id",},
        {"a.captive_flag","captive_flag",},
        {"a.inward_flag","inward_flag",},
        {"a.premi_netto","premi_netto",},
        {"a.ccy_rate","ccy_rate",},
        {"a.cc_code","cc_code",},
        {"a.entity_id","entity_id",},
        {"a.condition_id","condition_id",},
        {"a.risk_category_id","risk_category_id",},
        {"a.cover_type_code","cover_type_code",},
        {"a.f_prodmode","f_prodmode",},
        {"a.cust_name","cust_name",},
        {"a.cust_address","cust_address",},
        {"a.master_policy_id","master_policy_id",},
        {"a.prod_name","prod_name",},
        {"a.prod_address","prod_address",},
        {"a.prod_id","prod_id",},
        {"a.ins_policy_type_grp_id","ins_policy_type_grp_id",},
        {"a.premi_total_adisc","premi_total_adisc",},
        {"a.total_due","total_due",},
        {"a.ins_period_id","ins_period_id",},
        {"a.inst_period_id","inst_period_id",},
        {"a.inst_periods","inst_periods",},
        {"a.period_rate","period_rate",},
        {"a.ref1","ref1",},
        {"a.ref2","ref2",},
        {"a.ref3","ref3",},
        {"a.ref4","ref4",},
        {"a.ref5","ref5",},
        {"a.ref6","ref6",},
        {"a.ref7","ref7",},
        {"a.ref8","ref8",},
        {"a.ref9","ref9",},
        {"a.ref10","ref10",},
        {"a.ref11","ref11",},
        {"a.ref12","ref12",},
        {"a.refd1","refd1",},
        {"a.refd2","refd2",},
        {"a.refd3","refd3",},
        {"a.refd4","refd4",},
        {"a.refd5","refd5",},
        {"a.refn1","refn1",},
        {"a.refn2","refn2",},
        {"a.refn3","refn3",},
        {"a.refn4","refn4",},
        {"a.refn5","refn5",},
        {"a.parent_id","parent_id",},
        {"a.status","status",},
        {"a.active_flag","active_flag",},
        {"a.sppa_no","sppa_no",},
        {"a.claim_no","claim_no",},
        {"a.claim_date","claim_date",},
        {"a.claim_cause","claim_cause",},
        {"a.claim_cause_desc","claim_cause_desc",},
        {"a.event_location","event_location",},
        {"a.claim_person_id","claim_person_id",},
        {"a.claim_person_name","claim_person_name",},
        {"a.claim_person_address","claim_person_address",},
        {"a.claim_person_status","claim_person_status",},
        {"a.claim_amount_est","claim_amount_est",},
        {"a.claim_currency","claim_currency",},
        {"a.claim_loss_status","claim_loss_status",},
        {"a.claim_benefit","claim_benefit",},
        {"a.claim_documents","claim_documents",},
        {"a.endorse_date","endorse_date",},
        {"a.effective_flag","effective_flag",},
        {"a.claim_status","claim_status",},
        {"a.endorse_notes","endorse_notes",},
        {"a.print_code","print_code",},
        {"a.root_id","root_id",},
        {"a.insured_amount_e","insured_amount_e",},
        {"a.ins_period_base_id","ins_period_base_id",},
        {"a.period_rate_before","period_rate_before",},
        {"a.ins_period_base_b4","ins_period_base_b4",},
        {"a.ins_premium_factor_id","ins_premium_factor_id",},
        {"a.dla_no","dla_no",},
        {"a.ins_treaty_id","ins_treaty_id",},
        {"a.total_fee","total_fee",},
        {"a.nd_comm1","nd_comm1",},
        {"a.nd_comm2","nd_comm2",},
        {"a.nd_comm3","nd_comm3",},
        {"a.nd_comm4","nd_comm4",},
        {"a.nd_brok1","nd_brok1",},
        {"a.nd_brok2","nd_brok2",},
        {"a.nd_hfee","nd_hfee",},
        {"a.nd_sfee","nd_sfee",},
        {"a.nd_pcost","nd_pcost",},
        {"a.nd_update","nd_update",},
        {"a.nd_brok1pct","nd_brok1pct",},
        {"a.nd_brok2pct","nd_brok2pct",},
        {"a.nd_hfeepct","nd_hfeepct",},
        {"a.nd_disc1","nd_disc1",},
        {"a.nd_disc2","nd_disc2",},
        {"a.nd_disc1pct","nd_disc1pct",},
        {"a.nd_disc2pct","nd_disc2pct",},
        {"a.odescription","odescription",},
        {"a.pfx_clauses","pfx_clauses",},
        {"a.pfx_interest","pfx_interest",},
        {"a.pfx_coverage","pfx_coverage",},
        {"a.pfx_deductible","pfx_deductible",},
        {"a.claim_ded_amount","claim_ded_amount",},
        {"a.premi_pay_date","premi_pay_date",},
        {"a.claim_amount","claim_amount",},
        {"a.claim_amount_approved","claim_amount_approved",},
        {"a.pla_no","pla_no",},
        {"a.dla_remark","dla_remark",},
        {"a.claim_cust_amount","claim_cust_amount",},
        {"a.claim_cust_ded_amount","claim_cust_ded_amount",},
        {"a.claim_ri_amount","claim_ri_amount",},
        {"a.claim_object_id","claim_object_id",},
    };
    
    public String getStCustCategory1Desc() {
        return stCustCategory1Desc;
    }
    
    public void setStCustCategory1Desc(String stCustCategory1Desc) {
        this.stCustCategory1Desc = stCustCategory1Desc;
    }
    
    public String getStFltCoverTypeDesc() {
        return stFltCoverTypeDesc;
    }
    
    public void setStFltCoverTypeDesc(String stFltCoverTypeDesc) {
        this.stFltCoverTypeDesc = stFltCoverTypeDesc;
    }
    
    public void onChangePolicyTypeGroup() {
        
    }
    
    public void onChangeReport() {
        
    }
    
    public String getStPolicyTypeGroupID() {
        return stPolicyTypeGroupID;
    }
    
    public void setStPolicyTypeGroupID(String stPolicyTypeGroupID) {
        this.stPolicyTypeGroupID = stPolicyTypeGroupID;
    }
    
    public String getStPolicyTypeID() {
        return stPolicyTypeID;
    }
    
    public void setStPolicyTypeID(String stPolicyTypeID) {
        this.stPolicyTypeID = stPolicyTypeID;
    }
    
    public Date getPolicyDateFrom() {
        return policyDateFrom;
    }
    
    public void setPolicyDateFrom(Date policyDateFrom) {
        this.policyDateFrom = policyDateFrom;
    }
    
    public Date getPolicyDateTo() {
        return policyDateTo;
    }
    
    public void setPolicyDateTo(Date policyDateTo) {
        this.policyDateTo = policyDateTo;
    }
    public Date getEntryDateFrom() {
        return entryDateFrom;
    }
    
    public void setEntryDateFrom(Date entryDateFrom) {
        this.entryDateFrom = entryDateFrom;
    }
    
    public Date getEntryDateTo() {
        return entryDateTo;
    }
    
    public void setEntryDateTo(Date entryDateTo) {
        this.entryDateTo = entryDateTo;
    }
    
    public boolean isEnableRiskFilter() {
        return enableRiskFilter;
    }
    
    public void setEnableRiskFilter(boolean enableRiskFilter) {
        this.enableRiskFilter = enableRiskFilter;
    }
    
    public String getStRiskLocation() {
        return stRiskLocation;
    }
    
    public void setStRiskLocation(String stRiskLocation) {
        this.stRiskLocation = stRiskLocation;
    }
    
    public String getStPostCode() {
        return stPostCode;
    }
    
    public void setStPostCode(String stPostCode) {
        this.stPostCode = stPostCode;
    }
    
    public String getStRiskCardNo() {
        return stRiskCardNo;
    }
    
    public void setStRiskCardNo(String stRiskCardNo) {
        this.stRiskCardNo = stRiskCardNo;
    }
    
    public String getStRiskCode() {
        return stRiskCode;
    }
    
    public void setStRiskCode(String stRiskCode) {
        this.stRiskCode = stRiskCode;
    }
    
    public String getStPolicyNo() {
        return stPolicyNo;
    }
    
    public void setStPolicyNo(String stPolicyNo) {
        this.stPolicyNo = stPolicyNo;
    }
    
    public String getStLang() {
        return stLang;
    }
    
    public void setStLang(String stLang) {
        this.stLang = stLang;
    }
    
    public String getStPrintForm() {
        return stPrintForm;
    }
    
    public void setStPrintForm(String stPrintForm) {
        this.stPrintForm = stPrintForm;
    }
    
    public Date getExpirePeriodFrom() {
        return expirePeriodFrom;
    }
    
    public void setExpirePeriodFrom(Date expirePeriodFrom) {
        this.expirePeriodFrom = expirePeriodFrom;
    }
    
    public Date getExpirePeriodTo() {
        return expirePeriodTo;
    }
    
    public void setExpirePeriodTo(Date expirePeriodTo) {
        this.expirePeriodTo = expirePeriodTo;
    }
    
    public String getStEntityID() {
        return stEntityID;
    }
    
    public void setStEntityID(String stEntityID) {
        this.stEntityID = stEntityID;
    }
    
    public String getStCustCategory1() {
        return stCustCategory1;
    }
    
    public void setStCustCategory1(String stCustCategory1) {
        this.stCustCategory1 = stCustCategory1;
    }
    
    public String getStFltCoverType() {
        return stFltCoverType;
    }
    
    public void setStFltCoverType(String stFltCoverType) {
        this.stFltCoverType = stFltCoverType;
    }
    
    public void initialize() {
        setTitle("REPORT");
        
        stReportType = (String)getAttribute("rpt");
    }
    
    public Date getPeriodFrom() {
        return periodFrom;
    }
    
    public void setPeriodFrom(Date periodFrom) {
        this.periodFrom = periodFrom;
    }
    
    public Date getPeriodTo() {
        return periodTo;
    }
    
    public void setPeriodTo(Date periodTo) {
        this.periodTo = periodTo;
    }
    
    private void loadFormList() {
        if (formList==null || true) {
            final String[] filez = new File(SessionManager.getInstance().getRequest().getSession().getServletContext().getRealPath("/pages/insurance/prodrpt")).list();
            
            formList = new HashSet();
            
            for (int i = 0; i < filez.length; i++) {
                String s = filez[i];
                
                formList.add(s);
            }
        }
    }
    
    private void validateNumber() throws Exception {
        
        if (getStReport().equalsIgnoreCase("rppkreasi_koas")||getStReport().equalsIgnoreCase("rppkreasi_nettkoas"))
            if (getStNoUrut()==null&&getStRekapNo()==null)
                throw new RuntimeException("No. belum diisi");
    }
    
    public void clickPrint() throws Exception {
        //PostProcessorManager.getInstance().runPolicyProcess();
        
        loadFormList();
        
        validateNumber();
        
        final DTOList l = loadList();
        
        SessionManager.getInstance().getRequest().setAttribute("RPT",l);
        
        final ArrayList plist = new ArrayList();
        
        plist.add(stReport+"_"+stPolicyTypeGroupID+"_"+stPolicyTypeID);
        
        plist.add(stReport+"_"+stPolicyTypeGroupID);
        
        plist.add(stReport+"_"+stFltTreatyType);
        
        plist.add(stReport+"_"+stIndex);
        
        plist.add(stReport);
        
        String urx=null;
        
        //logger.logDebug("printPolicy: scanlist:"+plist);
        
        for (int i = 0; i < plist.size(); i++) {
            String s = (String) plist.get(i);
            
            if (formList.contains(s+".fop.jsp")) {
                urx = "/pages/insurance/prodrpt/"+s+".fop?xlang="+stLang;
                break;
            }
        }
        
        if (urx==null) throw new RuntimeException("Unable to find suitable print form");
        
        super.redirect(urx);
        
    }
    
    private DTOList loadList() throws Exception {
        //ref1 = LOVManager.getInstance().getRef1("PROD_PRINTING",stPrintForm);
        ref1 = LOVManager.getInstance().getRef1("PROD_PRINTING",stReport);
        
        refPropMap = Tools.getPropMap(ref1);
        
        final String queryID = (String)refPropMap.get("QUERY");
        
        status = (String)refPropMap.get("STATUS");
        
        if (queryID==null)
            return defaultQuery();
        else {
            final Method m = this.getClass().getMethod(queryID,null);
            
            return (DTOList)m.invoke(this, null);
        }
    }
    
    public void clickPrintTransfer() throws Exception{
        
        ref1 = LOVManager.getInstance().getRef1("PROD_PRINTING",stReport);
        
        refPropMap = Tools.getPropMap(ref1);
        
        final String queryID = (String)refPropMap.get("QUERY_EXCEL");
        
        final Method m = this.getClass().getMethod(queryID,null);
        
        final DTOList data = (DTOList)m.invoke(this, null);
        
        final DTOList data2 = (DTOList)SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        InsuranceProdukView prod = (InsuranceProdukView) data2.get(0);
        
        //SessionManager.getInstance().getRequest().setAttribute(queryID, data);
        
        //getRemoteInsurance().updateABAProdukByDate(data2);
        //if(true) throw new RuntimeException("data= "+prod.getStInsuranceNoPolis());
        //updateABAProdukByDate(data);
        
        exportExcelTransfer();
        
    }
    
    public void exportExcelTransfer() throws Exception{
        ref1 = LOVManager.getInstance().getRef1("PROD_PRINTING",stReport);
        
        refPropMap = Tools.getPropMap(ref1);
        
        final String fileName =  LanguageManager.getInstance().translate(LOVManager.getInstance().getDescriptionLOV("PROD_PRINTING",stReport),getStLang());
        
        setStFileName(fileName);
        
        final String exportID = (String)refPropMap.get("EXPORT");
        
        final Method m = this.getClass().getMethod(exportID,null);
        
        m.invoke(this, null);
    }
    
    public void clickPrintExcel() throws Exception {
        //PostProcessorManager.getInstance().runPolicyProcess();
        
        final DTOList l = loadListExcel();
        
        SessionManager.getInstance().getRequest().setAttribute("RPT",l);
        
        exportExcel();
    }
    
    public void exportExcel() throws Exception{
        ref1 = LOVManager.getInstance().getRef1("PROD_PRINTING",stReport);
        
        refPropMap = Tools.getPropMap(ref1);
        
        final String exportID = (String)refPropMap.get("EXPORT");
        
        final String fileName =  LanguageManager.getInstance().translate(LOVManager.getInstance().getDescriptionLOV("PROD_PRINTING",stReport),getStLang());
        
        setStFileName(fileName);
        
        final Method m = this.getClass().getMethod(exportID,null);
        
        m.invoke(this, null);
    }
    
    private DTOList loadListExcel() throws Exception {
        //ref1 = LOVManager.getInstance().getRef1("PROD_PRINTING",stPrintForm);
        ref1 = LOVManager.getInstance().getRef1("PROD_PRINTING",stReport);
        
        refPropMap = Tools.getPropMap(ref1);
        
        final String queryID = (String)refPropMap.get("QUERY_EXCEL");
        
        
        status = (String)refPropMap.get("STATUS");
        
        if (queryID==null)
            return defaultQuery();
        else {
            final Method m = this.getClass().getMethod(queryID,null);
            
            return (DTOList)m.invoke(this, null);
        }
    }
    
    public void EXPORT_RPP()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Tanggal Entry");
            row0.createCell(1).setCellValue("Tanggal Polis");
            row0.createCell(2).setCellValue("Periode Awal");
            row0.createCell(3).setCellValue("Periode Akhir");
            row0.createCell(4).setCellValue("Nomor Polis");
            row0.createCell(5).setCellValue("Kodeko");
            row0.createCell(6).setCellValue("Nama Tertanggung");
            row0.createCell(7).setCellValue("TSI");
            row0.createCell(8).setCellValue("Premi Bruto");
            row0.createCell(9).setCellValue("Biaya Polis");
            row0.createCell(10).setCellValue("Biaya Materai");
            row0.createCell(11).setCellValue("Diskon Premi");
            row0.createCell(12).setCellValue("Komisi");
            row0.createCell(13).setCellValue("Fee Base");
            row0.createCell(14).setCellValue("Handling Fee");
            row0.createCell(15).setCellValue("Brokerage Fee");
            row0.createCell(16).setCellValue("Pajak");
            row0.createCell(17).setCellValue("Tagihan Netto");
            row0.createCell(18).setCellValue("Kode Relasi");
            row0.createCell(19).setCellValue("KDE");
            row0.createCell(20).setCellValue("KODA");
            
            BigDecimal tagihanNetto = null;
            BigDecimal nd_comm = null;
            BigDecimal nd_taxcomm = null;
            tagihanNetto    = BDUtil.add(h.getFieldValueByFieldNameBD("premi_amt"),h.getFieldValueByFieldNameBD("nd_pcost"));
            tagihanNetto    = BDUtil.add(tagihanNetto,h.getFieldValueByFieldNameBD("nd_sfee"));
            tagihanNetto    = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("diskon_premi"));
            tagihanNetto    = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("komisi"));
            tagihanNetto    = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_hfee"));
            tagihanNetto    = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("brok"));
            tagihanNetto    = BDUtil.add(tagihanNetto,h.getFieldValueByFieldNameBD("tax"));
            nd_comm         = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_comm3"));
            nd_taxcomm      = BDUtil.add(h.getFieldValueByFieldNameBD("nd_taxcomm1"), h.getFieldValueByFieldNameBD("nd_taxcomm3"));
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("create_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("entity_id").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_amt")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("premi_amt").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_pcost")!=null)
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_sfee")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            if (h.getFieldValueByFieldNameBD("diskon_premi")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("diskon_premi").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(12).setCellValue(nd_comm.doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_feebase")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("nd_feebase").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_hfee")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            if (h.getFieldValueByFieldNameBD("brok")!=null)
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm1")!=null)
                row.createCell(16).setCellValue(nd_taxcomm.doubleValue());
            row.createCell(17).setCellValue(tagihanNetto.doubleValue());
            row.createCell(18).setCellValue(String.valueOf(h.getFieldValueByFieldNameBD("prod_id")));
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameST("create_who"));
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_RPPCOMM()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Tanggal Entry");
            row0.createCell(1).setCellValue("Tanggal Polis");
            row0.createCell(2).setCellValue("Pol ID");
            row0.createCell(3).setCellValue("Nomor PP");
            row0.createCell(4).setCellValue("Nomor Polis");
            row0.createCell(5).setCellValue("Kodeko");
            row0.createCell(6).setCellValue("Nama Tertanggung");
            row0.createCell(7).setCellValue("Premi Bruto");
            row0.createCell(8).setCellValue("Biaya Polis");
            row0.createCell(9).setCellValue("Biaya Materai");
            row0.createCell(10).setCellValue("Diskon Premi");
            row0.createCell(11).setCellValue("Komisi 1");
            row0.createCell(12).setCellValue("Komisi 2");
            row0.createCell(13).setCellValue("Komisi 3");
            row0.createCell(14).setCellValue("Komisi 4");
            row0.createCell(15).setCellValue("Fee Base 1");
            row0.createCell(16).setCellValue("Fee Base 2");
            row0.createCell(17).setCellValue("Handling Fee");
            row0.createCell(18).setCellValue("Brokerage Fee 1");
            row0.createCell(19).setCellValue("Brokerage Fee 2");
            row0.createCell(20).setCellValue("Pajak 1");
            row0.createCell(21).setCellValue("Pajak 2");
            row0.createCell(22).setCellValue("Pajak 3");
            row0.createCell(23).setCellValue("Pajak 4");
            row0.createCell(24).setCellValue("Tagihan Netto");
            row0.createCell(25).setCellValue("Kode Relasi");
            row0.createCell(26).setCellValue("KDE");
            
            BigDecimal tagihanNetto = null;
            tagihanNetto = BDUtil.add(h.getFieldValueByFieldNameBD("premi_total"),h.getFieldValueByFieldNameBD("nd_pcost"));
            tagihanNetto = BDUtil.add(tagihanNetto,h.getFieldValueByFieldNameBD("nd_sfee"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("disc1"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_comm1"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_comm2"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_comm3"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_comm4"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_hfee"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_brok1"));
            tagihanNetto = BDUtil.sub(tagihanNetto,h.getFieldValueByFieldNameBD("nd_brok2"));
            tagihanNetto = BDUtil.add(tagihanNetto,h.getFieldValueByFieldNameBD("nd_taxcomm1"));
            tagihanNetto = BDUtil.add(tagihanNetto,h.getFieldValueByFieldNameBD("nd_taxcomm2"));
            tagihanNetto = BDUtil.add(tagihanNetto,h.getFieldValueByFieldNameBD("nd_taxcomm3"));
            tagihanNetto = BDUtil.add(tagihanNetto,h.getFieldValueByFieldNameBD("nd_taxcomm4"));
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("create_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("pol_id"));
            if (getStPolicyTypeGroupID()!=null) {
                if (getStPolicyTypeGroupID().equalsIgnoreCase("8")) {
                    row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("ref1"));
                }
            }
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("entity_id").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("nd_disc1").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("nd_comm1").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm2")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("nd_comm2").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm3")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("nd_comm3").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm4")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("nd_comm4").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_feebase1")!=null)
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("nd_feebase1").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_feebase2")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("nd_feebase2").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_hfee")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_brok1")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("nd_brok1").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_brok2")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("nd_brok2").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm1")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm1").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm2")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm2").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm3")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm3").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm4")!=null)
                row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm4").doubleValue());
            row.createCell(24).setCellValue(tagihanNetto.doubleValue());
            row.createCell(25).setCellValue(String.valueOf(h.getFieldValueByFieldNameBD("prod_id")));
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameST("create_who"));
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_RPPCOMM100()  throws Exception {
        
        //XSSFWorkbook wb = new XSSFWorkbook();
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        //XSSFSheet sheet = wb.createSheet("new sheet");
        HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        
        BigDecimal[] komisi = new BigDecimal[4];
        BigDecimal[] taxKomisi = new BigDecimal[4];
        
        for (int i=0;i< list.size() ; i++){
            InsurancePolicyView policy = (InsurancePolicyView) list.get(i);
            //HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Kode");
            row0.createCell(1).setCellValue("Cabang");
            row0.createCell(2).setCellValue("Tanggal Entry");
            row0.createCell(3).setCellValue("Tanggal Polis");
            row0.createCell(4).setCellValue("Pol ID");
            row0.createCell(5).setCellValue("Nomor PP");
            row0.createCell(6).setCellValue("Nomor Polis");
            row0.createCell(7).setCellValue("Nama Tertanggung");
            row0.createCell(8).setCellValue("Premi Bruto");
            row0.createCell(9).setCellValue("Biaya Polis");
            row0.createCell(10).setCellValue("Biaya Materai");
            row0.createCell(11).setCellValue("Diskon Premi");
            row0.createCell(12).setCellValue("Komisi A");
            row0.createCell(13).setCellValue("Komisi B");
            row0.createCell(14).setCellValue("Komisi C");
            row0.createCell(15).setCellValue("Komisi D");
            row0.createCell(16).setCellValue("Fee Base 1");
            row0.createCell(17).setCellValue("Fee Base 2");
            row0.createCell(18).setCellValue("Handling Fee");
            row0.createCell(19).setCellValue("Brokerage Fee 1");
            row0.createCell(20).setCellValue("Brokerage Fee 2");
            row0.createCell(21).setCellValue("Pajak A");
            row0.createCell(22).setCellValue("Pajak B");
            row0.createCell(23).setCellValue("Pajak C");
            row0.createCell(24).setCellValue("Pajak D");
            row0.createCell(25).setCellValue("Tagihan Netto");
            row0.createCell(26).setCellValue("Kode Relasi");
            row0.createCell(27).setCellValue("KDE");
            
            BigDecimal komisi1 = null;
            BigDecimal komisi2 = null;
            BigDecimal komisi3 = null;
            BigDecimal komisi4 = null;
            BigDecimal tax1 = null;
            BigDecimal tax2 = null;
            BigDecimal tax3 = null;
            BigDecimal tax4 = null;
            
            boolean cekKomisi1 = false;
            boolean cekKomisi2 = false;
            boolean cekKomisi3 = false;
            boolean cekKomisi4 = false;
            boolean cekTax1 = false;
            boolean cekTax2 = false;
            boolean cekTax3 = false;
            boolean cekTax4 = false;
            
            //DTOList items = h.getDetails(h.getFieldValueByFieldNameST("pol_id"));
            DTOList items = policy.getItems(policy.getStPolicyID());
            for (int k = 0; k < items.size(); k++) {
                InsurancePolicyItemsView item = (InsurancePolicyItemsView) items.get(k);
                
                if (item.isComission()) ;
                else continue;
                
                if (komisi1==null) {
                    if(item.getTax().getStTaxCode()!=null) {
                        if(item.getTax().getStTaxCode().equalsIgnoreCase("2")){
                            komisi1 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbAmount());
                            tax1 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbTaxAmount());
                            cekKomisi1 = true;
                            continue;
                        }
                    }
                }
                
                if (komisi2==null) {
                    if(item.getTax().getStTaxCode()!=null) {
                        if(item.getTax().getStTaxCode().equalsIgnoreCase("1")){
                            komisi2 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbAmount());
                            tax2 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbTaxAmount());
                            cekKomisi2 = true;
                            continue;
                        }
                    }
                }
                
                if (komisi3==null) {
                    if(item.getTax().getStTaxCode()!=null) {
                        if(item.getTax().getStTaxCode().equalsIgnoreCase("1")){
                            komisi3 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbAmount());
                            tax3 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbTaxAmount());
                            cekKomisi3 = true;
                            continue;
                        }
                    }
                }
                
                if (komisi4==null) {
                    if(item.getTax().getStTaxCode()!=null) {
                        if(item.getTax().getStTaxCode().equalsIgnoreCase("1")){
                            komisi4 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbAmount());
                            tax4 = BDUtil.mul(policy.getDbCurrencyRate(), item.getDbTaxAmount());
                            cekKomisi4 = true;
                            continue;
                        }
                    }
                }
                
            }
            
            
            BigDecimal tagihanNetto = null;
            tagihanNetto = BDUtil.add(policy.getDbPremiTotal(),policy.getDbNDPCost());
            tagihanNetto = BDUtil.add(tagihanNetto,policy.getDbNDSFee());
            tagihanNetto = BDUtil.sub(tagihanNetto,policy.getDbNDDisc1());
            tagihanNetto = BDUtil.sub(tagihanNetto,komisi1);
            tagihanNetto = BDUtil.sub(tagihanNetto,komisi2);
            tagihanNetto = BDUtil.sub(tagihanNetto,komisi3);
            tagihanNetto = BDUtil.sub(tagihanNetto,komisi4);
            tagihanNetto = BDUtil.sub(tagihanNetto,policy.getDbNDHFee());
            tagihanNetto = BDUtil.sub(tagihanNetto,policy.getDbNDBrok1());
            tagihanNetto = BDUtil.sub(tagihanNetto,policy.getDbNDBrok2());
            tagihanNetto = BDUtil.add(tagihanNetto,tax1);
            tagihanNetto = BDUtil.add(tagihanNetto,tax2);
            tagihanNetto = BDUtil.add(tagihanNetto,tax3);
            tagihanNetto = BDUtil.add(tagihanNetto,tax4);
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(policy.getStCostCenterCode());
            row.createCell(1).setCellValue(policy.getStDescription());
            row.createCell(2).setCellValue(policy.getDtCreateDate());
            row.createCell(3).setCellValue(policy.getDtPolicyDate());
            row.createCell(4).setCellValue(policy.getStPolicyID());
            if (getStPolicyTypeGroupID()!=null) {
                if (getStPolicyTypeGroupID().equalsIgnoreCase("8")) {
                    row.createCell(5).setCellValue(policy.getStReference1());
                }
            }
            row.createCell(6).setCellValue(policy.getStPolicyNo());
            row.createCell(7).setCellValue(policy.getStCustomerName());
            row.createCell(8).setCellValue(policy.getDbPremiTotal().doubleValue());
            row.createCell(9).setCellValue(policy.getDbNDPCost().doubleValue());
            row.createCell(10).setCellValue(policy.getDbNDSFee().doubleValue());
            row.createCell(11).setCellValue(policy.getDbNDDisc1().doubleValue());
            if (komisi1!=null)
                row.createCell(12).setCellValue(komisi1.doubleValue());
            if (komisi2!=null)
                row.createCell(13).setCellValue(komisi2.doubleValue());
            if (komisi3!=null)
                row.createCell(14).setCellValue(komisi3.doubleValue());
            if (komisi4!=null)
                row.createCell(15).setCellValue(komisi4.doubleValue());
            if (policy.getDbNDFeeBase1()!=null)
                row.createCell(16).setCellValue(policy.getDbNDFeeBase1().doubleValue());
            if (policy.getDbNDFeeBase2()!=null)
                row.createCell(17).setCellValue(policy.getDbNDFeeBase2().doubleValue());
            if (policy.getDbNDHFee()!=null)
                row.createCell(18).setCellValue(policy.getDbNDHFee().doubleValue());
            if (policy.getDbNDBrok1()!=null)
                row.createCell(19).setCellValue(policy.getDbNDBrok1().doubleValue());
            if (policy.getDbNDBrok2()!=null)
                row.createCell(20).setCellValue(policy.getDbNDBrok2().doubleValue());
            if (tax1!=null)
                row.createCell(21).setCellValue(tax1.doubleValue());
            if (tax2!=null)
                row.createCell(22).setCellValue(tax2.doubleValue());
            if (tax3!=null)
                row.createCell(23).setCellValue(tax3.doubleValue());
            if (tax4!=null)
                row.createCell(24).setCellValue(tax4.doubleValue());
            row.createCell(25).setCellValue(tagihanNetto.doubleValue());
            row.createCell(26).setCellValue(String.valueOf(policy.getStProducerID()));
            row.createCell(27).setCellValue(policy.getStCreateWho());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_BPPDAN()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("policy_date");
            row0.createCell(1).setCellValue("period_start");
            row0.createCell(2).setCellValue("period_end");
            row0.createCell(3).setCellValue("u_year");
            row0.createCell(4).setCellValue("pol_no");
            row0.createCell(5).setCellValue("status");
            row0.createCell(6).setCellValue("pol_id");
            row0.createCell(7).setCellValue("cust_name");
            row0.createCell(8).setCellValue("postal_code");
            row0.createCell(9).setCellValue("zone_code");
            row0.createCell(10).setCellValue("ref1");
            row0.createCell(11).setCellValue("risk_class");
            row0.createCell(12).setCellValue("ins_risk_cat_code");
            row0.createCell(13).setCellValue("ref3");
            row0.createCell(14).setCellValue("description");
            row0.createCell(15).setCellValue("ref5");
            row0.createCell(16).setCellValue("ccy");
            row0.createCell(17).setCellValue("ccy_rate");
            row0.createCell(18).setCellValue("insured_amount");
            row0.createCell(19).setCellValue("premi_total");
            row0.createCell(20).setCellValue("treaty_limit");
            row0.createCell(21).setCellValue("exc_risk_flag");
            row0.createCell(22).setCellValue("building");
            row0.createCell(23).setCellValue("machine");
            row0.createCell(24).setCellValue("stock");
            row0.createCell(25).setCellValue("other");
            row0.createCell(26).setCellValue("total_tsi");
            row0.createCell(27).setCellValue("premi_rate");
            row0.createCell(28).setCellValue("tsi_or");
            row0.createCell(29).setCellValue("premi_or");
            row0.createCell(30).setCellValue("komisi_or");
            row0.createCell(31).setCellValue("tsi_bppdan");
            row0.createCell(32).setCellValue("premi_bppdan");
            row0.createCell(33).setCellValue("komisi_bppdan");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("u_year"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("postal_code"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("zone_code"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("risk_class"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("ins_risk_cat_code"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("ref3"));
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameST("ref5"));
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("treaty_limit").doubleValue());
            row.createCell(21).setCellValue(h.getFieldValueByFieldNameST("exc_risk_flag"));
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("building").doubleValue());
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("machine").doubleValue());
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("stock").doubleValue());
            row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("other").doubleValue());
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("total_tsi").doubleValue());
            row.createCell(27).setCellValue(h.getFieldValueByFieldNameST("premi_rate"));
            row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("tsi_or").doubleValue());
            row.createCell(29).setCellValue(h.getFieldValueByFieldNameBD("premi_or").doubleValue());
            row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("komisi_or").doubleValue());
            row.createCell(31).setCellValue(h.getFieldValueByFieldNameBD("tsi_bppdan").doubleValue());
            row.createCell(32).setCellValue(h.getFieldValueByFieldNameBD("premi_bppdan").doubleValue());
            row.createCell(33).setCellValue(h.getFieldValueByFieldNameBD("komisi_bppdan").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_MAIPARK()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        
        int norut = 0;
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Running No. (1)");
            row0.createCell(1).setCellValue("Main Policy Cover (2)");
            row0.createCell(2).setCellValue("Original Policy No. (3)");
            row0.createCell(3).setCellValue("Endorsement No. (4)");
            row0.createCell(4).setCellValue("Endorsement Count (5)");
            row0.createCell(5).setCellValue("Risk No. (6)");
            row0.createCell(6).setCellValue("Name Of Insured (7)");
            row0.createCell(7).setCellValue("Location of Insured (8)");
            row0.createCell(8).setCellValue("Location of Risk (9)");
            row0.createCell(9).setCellValue("City/ Kabupaten (10)");
            row0.createCell(10).setCellValue("Kecamatan (11)");
            row0.createCell(11).setCellValue("Kelurahan (12)");
            row0.createCell(12).setCellValue("Postal Code (13)");
            row0.createCell(13).setCellValue("Occupation Code (14)");
            row0.createCell(14).setCellValue("Building Category (15)");
            row0.createCell(15).setCellValue("Class of Construction (16)");
            row0.createCell(16).setCellValue("Year Build (17)");
            row0.createCell(17).setCellValue("Building Storey (18)");
            row0.createCell(18).setCellValue("Inception/ Effective Date (19)");
            row0.createCell(19).setCellValue("Expiry Date (20)");
            row0.createCell(20).setCellValue("Currency (21)");
            row0.createCell(21).setCellValue("Building (22)");
            row0.createCell(22).setCellValue("Machinery (23)");
            row0.createCell(23).setCellValue("Stock (24)");
            row0.createCell(24).setCellValue("Others (25)");
            row0.createCell(25).setCellValue("Total (26)");
            row0.createCell(26).setCellValue("Co-Ins Status (27)");
            row0.createCell(27).setCellValue("Co-Ins Share (%) (28)");
            row0.createCell(28).setCellValue("Leader Policy No. (29)");
            row0.createCell(29).setCellValue("Policy Status (30)");
            row0.createCell(30).setCellValue("First Loss Limit (%) (31)");
            row0.createCell(31).setCellValue("Sum Insured (32)");
            row0.createCell(32).setCellValue("Premium (33)");
            row0.createCell(33).setCellValue("Gross Profit (34)");
            row0.createCell(34).setCellValue("Gross Wages (35)");
            row0.createCell(35).setCellValue("SI Increasing In Cost of Working (36)");
            row0.createCell(36).setCellValue("SI Others (37)");
            row0.createCell(37).setCellValue("Total Sum Insured (38)");
            row0.createCell(38).setCellValue("Period of Indemnity (Number of Months) (39)");
            row0.createCell(39).setCellValue("Time Excess (Number of Days) (40)");
            row0.createCell(40).setCellValue("Prorata Hari (41)");
            row0.createCell(41).setCellValue("Stock (42)");
            row0.createCell(42).setCellValue("Underwriting Year (43)");
            row0.createCell(43).setCellValue("Remark (44)");
            
            norut++;
            
            if(i>0){
                HashDTO s = (HashDTO) list.get(i-1);
                String nopol = s.getFieldValueByFieldNameST("nopol");
                String nopol2 = h.getFieldValueByFieldNameST("nopol");
                if(!nopol.equalsIgnoreCase(nopol2)){
                    
                    norut = 1;
                }
            }
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("ref2"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("nopol"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("ref4"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("ref5"));
            row.createCell(5).setCellValue(String.valueOf(norut));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("alamat"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("zona_gempa"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("ref10"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("ref11"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("ref12"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("postal_code"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("occupation_code"));
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("build_cat"));
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameST("class_construction"));
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("year_build"));
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameST("ref18"));
            row.createCell(18).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("building").doubleValue());
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("machine").doubleValue());
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("stock").doubleValue());
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("other").doubleValue());
            row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("total_tsi").doubleValue());
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameST("coins_status"));
            row.createCell(27).setCellValue(h.getFieldValueByFieldNameST("coins_share"));
            row.createCell(28).setCellValue(h.getFieldValueByFieldNameST("ref29"));
            row.createCell(29).setCellValue(h.getFieldValueByFieldNameST("status_policy"));
            row.createCell(30).setCellValue(h.getFieldValueByFieldNameST("ref31"));
            row.createCell(31).setCellValue(h.getFieldValueByFieldNameBD("tsi").doubleValue());
            row.createCell(32).setCellValue(h.getFieldValueByFieldNameBD("premi").doubleValue());
            row.createCell(33).setCellValue(h.getFieldValueByFieldNameST("ref34"));
            row.createCell(34).setCellValue(h.getFieldValueByFieldNameST("ref35"));
            row.createCell(35).setCellValue(h.getFieldValueByFieldNameST("ref36"));
            row.createCell(36).setCellValue(h.getFieldValueByFieldNameST("ref37"));
            row.createCell(37).setCellValue(h.getFieldValueByFieldNameST("ref38"));
            row.createCell(38).setCellValue(h.getFieldValueByFieldNameST("ref39"));
            row.createCell(39).setCellValue(h.getFieldValueByFieldNameST("ref40"));
            row.createCell(40).setCellValue(h.getFieldValueByFieldNameST("ref41"));
            row.createCell(41).setCellValue(h.getFieldValueByFieldNameST("ref42"));
            row.createCell(42).setCellValue(h.getFieldValueByFieldNameST("under_year"));
            row.createCell(43).setCellValue(h.getFieldValueByFieldNameST("ref44"));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_CONS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("policy_date");
            row0.createCell(1).setCellValue("period_start");
            row0.createCell(2).setCellValue("period_end");
            row0.createCell(3).setCellValue("u_year");
            row0.createCell(4).setCellValue("pol_no");
            row0.createCell(5).setCellValue("status");
            row0.createCell(6).setCellValue("pol_id");
            row0.createCell(7).setCellValue("cust_name");
            row0.createCell(8).setCellValue("postal_code");
            row0.createCell(9).setCellValue("zone_code");
            row0.createCell(10).setCellValue("ref1");
            row0.createCell(11).setCellValue("risk_class");
            row0.createCell(12).setCellValue("ins_risk_cat_code");
            row0.createCell(13).setCellValue("ref3");
            row0.createCell(14).setCellValue("description");
            row0.createCell(15).setCellValue("ref5");
            row0.createCell(16).setCellValue("building");
            row0.createCell(17).setCellValue("machine");
            row0.createCell(18).setCellValue("stock");
            row0.createCell(19).setCellValue("other");
            row0.createCell(20).setCellValue("total_tsi");
            row0.createCell(21).setCellValue("premi_rate");
            row0.createCell(22).setCellValue("tsi_amount");
            row0.createCell(23).setCellValue("premi_amount");
            row0.createCell(24).setCellValue("komisi_amount");
            
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("u_year"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("postal_code"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("zone_code"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("risk_class"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("ins_risk_cat_code"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("ref3"));
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameST("ref5"));
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("building").doubleValue());
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("machine").doubleValue());
            row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("stock").doubleValue());
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("other").doubleValue());
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("total_tsi").doubleValue());
            row.createCell(21).setCellValue(h.getFieldValueByFieldNameST("premi_rate"));
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("tsi_amount").doubleValue());
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("premi_amount").doubleValue());
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("komisi_amount").doubleValue());
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_FAC()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("kode_pos");
            row0.createCell(1).setCellValue("risk_code");
            row0.createCell(2).setCellValue("risk_class");
            row0.createCell(3).setCellValue("ins_pol_tre_det_id");
            row0.createCell(4).setCellValue("ri_slip_no");
            row0.createCell(5).setCellValue("treaty_limit");
            row0.createCell(6).setCellValue("policy_date");
            row0.createCell(7).setCellValue("period_start");
            row0.createCell(8).setCellValue("period_end");
            row0.createCell(9).setCellValue("pol_id");
            row0.createCell(10).setCellValue("pol_no");
            row0.createCell(11).setCellValue("cust_name");
            row0.createCell(12).setCellValue("ins_pol_obj_id");
            row0.createCell(13).setCellValue("objek");
            row0.createCell(14).setCellValue("pol_type_id");
            row0.createCell(15).setCellValue("short_desc");
            row0.createCell(16).setCellValue("ref_ent_id");
            row0.createCell(17).setCellValue("ccy");
            row0.createCell(18).setCellValue("ccy_rate");
            row0.createCell(19).setCellValue("ent_name");
            row0.createCell(20).setCellValue("tsi_polis");
            row0.createCell(21).setCellValue("tsi_askrida");
            row0.createCell(22).setCellValue("tsi_per_objek");
            row0.createCell(23).setCellValue("tsi_fac");
            row0.createCell(24).setCellValue("premi_polis");
            row0.createCell(25).setCellValue("premi_askrida");
            row0.createCell(26).setCellValue("premi_per_objek");
            row0.createCell(27).setCellValue("premi_fac");
            row0.createCell(28).setCellValue("komisi_fac");
            
            
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("kode_pos")));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("risk_code"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("risk_class"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("ins_pol_tre_det_id").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("ri_slip_no"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("treaty_limit").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("ins_pol_obj_id").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("objek"));
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameST("short_desc"));
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("ref_ent_id"));
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("tsi_polis").doubleValue());
            row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("tsi_askrida").doubleValue());
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("tsi_per_objek").doubleValue());
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("tsi_fac").doubleValue());
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("premi_polis").doubleValue());
            row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("premi_askrida").doubleValue());
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("premi_per_objek").doubleValue());
            row.createCell(27).setCellValue(h.getFieldValueByFieldNameBD("premi_fac").doubleValue());
            row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("komisi_fac").doubleValue());
            
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_SAHAM()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        BigDecimal poltypegrp = new BigDecimal(0);
        
        String name = "";
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            poltypegrp = h.getFieldValueByFieldNameBD("ins_policy_type_grp_id");
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("u_year");
            row0.createCell(1).setCellValue("u_year2");
            row0.createCell(2).setCellValue("pol_type_id");
            row0.createCell(3).setCellValue("short_desc");
            row0.createCell(4).setCellValue("cc_code");
            row0.createCell(5).setCellValue("treaty_type");
            row0.createCell(6).setCellValue("policy_date");
            row0.createCell(7).setCellValue("pol_no");
            row0.createCell(8).setCellValue("ref_ent_id");
            row0.createCell(9).setCellValue("reasuradur");
            row0.createCell(10).setCellValue("ccy");
            row0.createCell(11).setCellValue("ccy_rate");
            row0.createCell(12).setCellValue("sharepct");
            row0.createCell(13).setCellValue("tsi_reas");
            row0.createCell(14).setCellValue("premi_reas");
            row0.createCell(15).setCellValue("komisi_reas");
            row0.createCell(16).setCellValue("desc1");
            row0.createCell(17).setCellValue("kode_captive1");
            row0.createCell(18).setCellValue("premi_cover1");
            row0.createCell(19).setCellValue("komisi1");
            row0.createCell(20).setCellValue("desc2");
            row0.createCell(21).setCellValue("kode_captive2");
            row0.createCell(22).setCellValue("premi_cover2");
            row0.createCell(23).setCellValue("komisi2");
            row0.createCell(24).setCellValue("desc3");
            row0.createCell(25).setCellValue("kode_captive3");
            row0.createCell(26).setCellValue("premi_cover3");
            row0.createCell(27).setCellValue("komisi3");
            row0.createCell(28).setCellValue("desc4");
            row0.createCell(29).setCellValue("kode_captive4");
            row0.createCell(30).setCellValue("premi_cover4");
            row0.createCell(31).setCellValue("komisi4");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("u_year"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("u_year2"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("short_desc"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("treaty_type"));
            if (h.getFieldValueByFieldNameDT("policy_date")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            if (h.getFieldValueByFieldNameST("ref_ent_id")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("ref_ent_id"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("reasuradur"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            if (h.getFieldValueByFieldNameBD("sharepct")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("sharepct").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("tsi_reas").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("premi_reas").doubleValue());
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("komisi_reas").doubleValue());
            if (Tools.isEqual(poltypegrp, new BigDecimal(1))) {
                row.createCell(16).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("desc1")));
                if (h.getFieldValueByFieldNameST("kode_captive1")!=null)
                    row.createCell(17).setCellValue(h.getFieldValueByFieldNameST("kode_captive1"));
                if (h.getFieldValueByFieldNameBD("premi_cover1")!=null)
                    row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("premi_cover1").doubleValue());
                if (h.getFieldValueByFieldNameBD("komisi1")!=null)
                    row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("komisi1").doubleValue());
                if (h.getFieldValueByFieldNameST("desc2")!=null)
                    row.createCell(20).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("desc2")));
                if (h.getFieldValueByFieldNameST("kode_captive2")!=null)
                    row.createCell(21).setCellValue(h.getFieldValueByFieldNameST("kode_captive2"));
                if (h.getFieldValueByFieldNameBD("premi_cover2")!=null)
                    row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("premi_cover2").doubleValue());
                if (h.getFieldValueByFieldNameBD("komisi2")!=null)
                    row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("komisi2").doubleValue());
                if (h.getFieldValueByFieldNameST("desc3")!=null)
                    row.createCell(24).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("desc3")));
                if (h.getFieldValueByFieldNameST("kode_captive3")!=null)
                    row.createCell(25).setCellValue(h.getFieldValueByFieldNameST("kode_captive3"));
                if (h.getFieldValueByFieldNameBD("premi_cover3")!=null)
                    row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("premi_cover3").doubleValue());
                if (h.getFieldValueByFieldNameBD("komisi3")!=null)
                    row.createCell(27).setCellValue(h.getFieldValueByFieldNameBD("komisi3").doubleValue());
                if (h.getFieldValueByFieldNameST("desc4")!=null)
                    row.createCell(28).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("desc4")));
                if (h.getFieldValueByFieldNameST("kode_captive4")!=null)
                    row.createCell(29).setCellValue(h.getFieldValueByFieldNameST("kode_captive4"));
                if (h.getFieldValueByFieldNameBD("premi_cover4")!=null)
                    row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("premi_cover4").doubleValue());
                if (h.getFieldValueByFieldNameBD("komisi4")!=null)
                    row.createCell(31).setCellValue(h.getFieldValueByFieldNameBD("komisi4").doubleValue());
            }
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_PRODUK()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("produk");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header produk
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("nopol");
            row0.createCell(1).setCellValue("tglpol");
            row0.createCell(2).setCellValue("nama");
            row0.createCell(3).setCellValue("harper");
            row0.createCell(4).setCellValue("preto");
            row0.createCell(5).setCellValue("biapol");
            row0.createCell(6).setCellValue("biamat");
            row0.createCell(7).setCellValue("komisi");
            row0.createCell(8).setCellValue("tglm");
            row0.createCell(9).setCellValue("tgla");
            row0.createCell(10).setCellValue("relasi");
            row0.createCell(11).setCellValue("tglent");
            row0.createCell(12).setCellValue("kali");
            row0.createCell(13).setCellValue("dollar");
            row0.createCell(14).setCellValue("kodeko");
            row0.createCell(15).setCellValue("diskon");
            row0.createCell(16).setCellValue("h_fee");
            row0.createCell(17).setCellValue("b_fee");
            row0.createCell(18).setCellValue("entity_id");
            
            //bikin isi cell produk
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("nopol"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("tglpol"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("nama"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("harper").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("preto").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("biapol").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("biamat").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameDT("tglm"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameDT("tgla"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("relasi"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameDT("tglent"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("kali"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("dollar").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("kodeko"));
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("diskon").doubleValue());
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("h_fee").doubleValue());
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("b_fee").doubleValue());
            row.createCell(18).setCellValue(String.valueOf(h.getFieldValueByFieldNameBD("entity_id")));
        }
        
        FileOutputStream fos = new FileOutputStream("E://Transfer/aba_produk.xls");
        wb.write(fos);
        fos.flush();
        fos.close();
        
    }
    
    public void btnPrintProd() throws Exception {
        PostProcessorManager.getInstance().runPolicyProcess();
        
        final DTOList l = loadList();
        
        SessionManager.getInstance().getRequest().setAttribute("RPT",l);
        
        super.redirect("/pages/insurance/prodrpt/prodreport.fop");
    }
    
    public void btnPrintReminder() throws Exception {
        
        PostProcessorManager.getInstance().runPolicyProcess();
        
        final DTOList l = loadList();
        
        SessionManager.getInstance().getRequest().setAttribute("RPT",l);
        
        super.redirect("/pages/insurance/prodrpt/reminderLetters.fop");
    }
    
    public DTOList NONE() throws Exception {
        return null;
    }
    
    public DTOList BORDERO() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	getbordero5(j.treaty_type='OR',j.treaty_type='FACO',a.pol_id) as pol_id, "+
                "	getbordero2(j.treaty_type='OR',j.treaty_type='FACO',a.pol_no) as pol_no, "+
                "	getbordero2(j.treaty_type='OR',j.treaty_type='FACO',substr(a.cust_name,1,35)) as cust_name, "+
                "	getbordero6(j.treaty_type='OR',j.treaty_type='FACO',a.period_start) as period_start, "+
                "	getbordero6(j.treaty_type='OR',j.treaty_type='FACO',a.period_end) as period_end, "+
                "	getbordero2(j.treaty_type='OR',j.treaty_type='FACO',a.ccy) as ccy, "+
                "	getbordero(j.treaty_type='OR',j.treaty_type='FACO',a.insured_amount*a.ccy_rate) as insured_amount, "+
                "	j.treaty_type,"+
                "	sum(getbordero4(j.treaty_type='OR',i.tsi_amount*a.ccy_rate)) as tsi_reas, "+
                "	sum(getbordero3(j.treaty_type='OR',i.premi_amount*a.ccy_rate)) as premi_or, "+
                "	sum(getbordero4(j.treaty_type='OR',i.premi_amount*a.ccy_rate)) as premi_reas,"+
                "       a.status"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id=a.pol_id "+
                "	inner join ins_policy_types f on a.pol_type_id = f.pol_type_id  "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"+
                "	inner join ins_treaty_types k on k.ins_treaty_type_id = j.treaty_type "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        sqa.addClause(" j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by j.treaty_type,a.pol_id,a.pol_no,a.cust_name,k.order , "+
                " a.period_start,a.period_end,a.insured_amount,a.ccy_rate,a.ccy,a.status"+
                " order by a.pol_no,k.order asc";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_BORDERO() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	getbordero5(j.treaty_type='OR',j.treaty_type='FACO',a.pol_id) as pol_id, "+
                "	getbordero2(j.treaty_type='OR',j.treaty_type='FACO',a.pol_no) as pol_no, "+
                "	getbordero2(j.treaty_type='OR',j.treaty_type='FACO',substr(a.cust_name,1,35)) as cust_name, "+
                "	getbordero6(j.treaty_type='OR',j.treaty_type='FACO',a.period_start) as period_start, "+
                "	getbordero6(j.treaty_type='OR',j.treaty_type='FACO',a.period_end) as period_end, "+
                "	getbordero2(j.treaty_type='OR',j.treaty_type='FACO',a.ccy) as ccy, "+
                "	getbordero(j.treaty_type='OR',j.treaty_type='FACO',a.insured_amount*a.ccy_rate) as insured_amount, "+
                "	j.treaty_type,a.status,"+
                "	sum(getbordero4(j.treaty_type='OR',i.tsi_amount*a.ccy_rate)) as tsi_reas, "+
                "	sum(getbordero3(j.treaty_type='OR',i.premi_amount*a.ccy_rate)) as premi_or, "+
                "	sum(getbordero4(j.treaty_type='OR',i.premi_amount*a.ccy_rate)) as premi_reas"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id=a.pol_id "+
                "	inner join ins_policy_types f on a.pol_type_id = f.pol_type_id  "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"+
                "	inner join ins_treaty_types k on k.ins_treaty_type_id = j.treaty_type "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        sqa.addClause(" j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by j.treaty_type,a.pol_id,a.pol_no,a.cust_name,k.order , "+
                " a.period_start,a.period_end,a.insured_amount,a.ccy_rate,a.ccy,a.status"+
                " order by a.pol_no,k.order asc";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_BORDERO()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("pol_id");
            row0.createCell(1).setCellValue("pol_no");
            row0.createCell(2).setCellValue("cust_name");
            row0.createCell(3).setCellValue("period_start");
            row0.createCell(4).setCellValue("period_end");
            row0.createCell(5).setCellValue("ccy");
            row0.createCell(6).setCellValue("insured_amount");
            row0.createCell(7).setCellValue("treaty_type");
            row0.createCell(8).setCellValue("tsi_reas");
            row0.createCell(9).setCellValue("premi_or");
            row0.createCell(10).setCellValue("premi_reas");
            row0.createCell(11).setCellValue("ket.");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            if (h.getFieldValueByFieldNameBD("pol_id")!=null)
                row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            if (h.getFieldValueByFieldNameST("pol_no")!=null)
                row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            if (h.getFieldValueByFieldNameST("cust_name")!=null)
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            if (h.getFieldValueByFieldNameDT("period_start")!=null)
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            if (h.getFieldValueByFieldNameDT("period_end")!=null)
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            if (h.getFieldValueByFieldNameST("ccy")!=null)
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameST("treaty_type")!=null)
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("treaty_type"));
            if (h.getFieldValueByFieldNameBD("tsi_reas")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("tsi_reas").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_or")!=null)
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("premi_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_reas")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("premi_reas").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("status"));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList CONSORTIUM() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.policy_date,a.period_start,a.period_end,substr(a.period_start::text,1,4) as period,a.pol_no,a.cust_name,a.ccy_rate, "+
                "getpostcode(a.pol_type_id,b.ref6d,b.ref9d) as print_code,b.ref1,c.ins_risk_cat_code as cover_type_code, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=6,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as total_due, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=39,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as total_fee, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=56,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as premi_rate, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id not in (6,39,56),z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as premi_netto,b.insured_amount as insured_amount, "+
                "(select round(sum(x.rate),4)||' '||a.rate_method_desc "+
                "from ins_policy y "+
                "inner join ins_pol_cover x on x.pol_id = y.pol_id "+
                "where y.pol_id = a.pol_id) as treaty_type, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FACO',i.tsi_amount)),2),0) as tsi_faco, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FACO',i.premi_amount)),2),0) as premi_faco, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FACO',i.ricomm_amt)),2),0) as komisi"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ins_risk_cat c on b.ins_risk_cat_id = c.ins_risk_cat_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause(" a.pol_type_id=2");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+" group by a.policy_date,a.period_start,a.period_end,a.pol_no,a.pol_id,a.cust_name,a.ccy_rate, "+
                "a.pol_type_id,b.ref6d,b.ref9d,b.ref1,c.ins_risk_cat_code,b.ins_pol_obj_id, "+
                "b.insured_amount,a.rate_method_desc "+
                "order by a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList KLAIM() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.cc_code,a.dla_no,a.status,a.pol_no,a.pol_type_id, "+
                " getname(a.ins_policy_type_grp_id=10,a.claim_client_name,f.ref1) as cust_name,d.short_desc as prod_name, "+
                " getpremi(a.cover_type_code = 'DIRECT' or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUT'),(a.claim_amount*a.ccy_rate),getbordero3((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER') or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id = 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS' and b.entity_id = 1),(a.claim_amount*a.ccy_rate))) as claim_amount, "+
                " getpremi(a.cover_type_code = 'DIRECT' or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUT'),(b.claim_amt*a.ccy_rate),getbordero3((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER') or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id = 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS' and b.entity_id = 1),(a.claim_amount*a.ccy_rate))) as claim_amount_endorse, "+
                " getbordero3((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER' and b.entity_id <> 1) or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id <> 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS' and b.entity_id <> 1),(b.claim_amt*a.ccy_rate)) as nd_taxcomm1, "+
                " a.dla_date,checkstatus(b.entity_id = 1,'OR',e.short_name) as coinsurer_name " );
        
        sqa.addQuery(" from ins_policy a "+
                " inner join ins_pol_coins b on b.policy_id = a.pol_id "+
                " inner join ins_pol_obj f on f.ins_pol_obj_id = a.claim_object_id "+
                " left join gl_cost_center c on c.cc_code = a.cc_code "+
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id "+
                " left join ent_master e on e.ent_id = b.entity_id "+
                " left join ent_master g on g.ent_id = a.entity_id "
                );
        
        sqa.addClause("a.claim_status = 'DLA'");
        sqa.addClause("b.claim_amt <> 0");
        sqa.addClause("((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER') or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id <> 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS'))");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (stFltClaimStatus!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(stFltClaimStatus);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if (periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("g.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL()+" order by a.cc_code,a.ins_policy_type_grp_id,a.dla_no,b.coins_type,b.entity_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStPolicyTypeID()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        return l;
    }
    
    public DTOList KLAIM_KO() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.claim_date,a.dla_no,a.pol_no,substr(a.cust_name,1,25)||' qq. '||substr(c.ref1,1,15) as cust_name,"+
                "(b.claim_amt*a.ccy_rate) as premi_total"
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id and b.entity_id <> 1 "+
                "	inner join ins_pol_obj c on c.ins_pol_obj_id = a.claim_object_id"
                );
        
        sqa.addClause("a.cover_type_code <> 'DIRECT'");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "a.dla_no,a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList AUTOFAC() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.claim_cause,sum(a.claim_amount*a.ccy_rate) as claim_amount" );
        
        sqa.addQuery("   from ins_policy a "+
                " inner join ins_pol_obj b on b.pol_id = a.pol_id"
                );
        
        sqa.addClause(" a.claim_cause in (1576,3732,3734) ");
        
        sqa.addClause(" a.ins_policy_type_grp_id = 9 ");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (periodFrom!=null) {
            sqa.addClause("b.refd2 >= ?");
            sqa.addPar(periodFrom);
        }
        
        if (periodTo!=null) {
            sqa.addClause("b.refd2 <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = sqa.getSQL()+" group by a.claim_cause";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList AUTOFAC_DETIL() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.claim_cause,a.dla_no,a.pol_no,b.ref1 as cust_name,(a.claim_amount*a.ccy_rate) as claim_cust_amount" );
        
        sqa.addQuery("   from ins_policy a "+
                " inner join ins_pol_obj b on b.pol_id = a.pol_id"
                );
        
        sqa.addClause(" a.claim_cause in (1576,3732,3734) ");
        
        sqa.addClause(" a.ins_policy_type_grp_id = 9 ");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (periodFrom!=null) {
            sqa.addClause("b.refd2 >= ?");
            sqa.addPar(periodFrom);
        }
        
        if (periodTo!=null) {
            sqa.addClause("b.refd2 <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = sqa.getSQL()+" order by a.cc_code,a.dla_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList KLAIM_KREASI() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.ref1 as nd_premi1, a.ref2 as nd_premi2,count(b.pol_no) as pol_no, b.claim_cause, "+
                " sum(getkoas(b.claim_cause=1575,b.claim_amount_approved)) as sakit, "+
                " sum(getkoas(b.claim_cause=1576,b.claim_amount_approved)) as kecelakaan, "+
                " sum(getkoas(b.claim_cause=3732,b.claim_amount_approved)) as phk, "+
                " sum(getkoas(b.claim_cause=3734,b.claim_amount_approved)) as paw, "+
                " sum(getkoas(b.claim_cause in (1542,3833),b.claim_amount_approved)) as other "
                );
        
        sqa.addQuery(" from band_level a "+
                " left join ins_policy b on b.claim_amount_approved between a.ref1 and a.ref2 "
                );
        
        sqa.addClause("a.ref3 = 'LOSS_CLAIM'");
        
        sqa.addClause("b.effective_flag='Y'");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("b.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && FLT_CLAIM_STATUS!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("b.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("b.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("b.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',b.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        
        final String sql = "select nd_premi1,nd_premi2, "+
                " sum(getkoas(claim_cause=1575,pol_no)) as nd_comm1, "+
                " sum(getkoas(claim_cause=1575,sakit)) as premi_base, "+
                " sum(getkoas(claim_cause=1576,pol_no)) as nd_comm2, "+
                " sum(getkoas(claim_cause=1576,kecelakaan)) as premi_total, "+
                " sum(getkoas(claim_cause=3732,pol_no)) as nd_comm3, "+
                " sum(getkoas(claim_cause=3732,phk)) as premi_total_adisc, "+
                " sum(getkoas(claim_cause=3734,pol_no)) as nd_comm4, "+
                " sum(getkoas(claim_cause=3734,paw)) as total_due, "+
                " sum(getkoas(claim_cause in (1542,3833),pol_no)) as nd_brok1, "+
                " sum(getkoas(claim_cause in (1542,3833),other)) as total_fee "+
                " from ( "+ sqa.getSQL()+" group by a.ref1, a.ref2, b.claim_cause ) z group by nd_premi1,nd_premi2 order by nd_premi1,nd_premi2";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStPolicyTypeID()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        //javax.swing.JOptionPane.showMessageDialog(null,"Eror= "+l,"tes",javax.swing.JOptionPane.CLOSED_OPTION);
        
        return l;
    }
    
    public DTOList KREASI2() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.cc_code,a.pol_id,a.pol_no,a.pol_type_id,a.policy_date,"+
                "	sum(getpremi(a.status='ENDORSE' and a.create_who='administrator',c.refn4,c.insured_amount)) as insured,"+
                "	sum(c.insured_amount) as insured_amount,"+
                "	count(c.ref1) as jumlah, "+
                "	sum(c.refn2) as premi,sum(c.refn9) as comm1,c.ref8 as entity_id,b.description,"+
                "(select d.share_pct from ins_pol_coins d where d.policy_id = a.pol_id and d.entity_id = 1 and d.coins_type= 'COINS') as share_pct"
                );
        
        sqa.addQuery("   from ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "	left join ent_master e on e.ent_id = c.ref8::bigint "+
                " left join gl_cost_center b on b.cc_code = a.cc_code "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stCoinsurerID!=null) {
            sqa.addClause("c.ref8 = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stWilayahID!=null) {
            if (stWilayahID.equalsIgnoreCase("1")){
                sqa.addClause("a.cc_code in ('10','13','17','20','21','22','40','43','70')");
            } else {
                sqa.addClause("a.cc_code not in ('10','13','17','20','21','22','40','43','70')");
            }
        }
        
        if (stRekapNo!=null) {
            if (stCoinsurerID.equalsIgnoreCase("96")) {
                sqa.addClause("a.ref4 = ?");
            }else{
                sqa.addClause("a.ref3 = ?");
            }
            sqa.addPar(stRekapNo);
        }
        
        
        final String sql = " select *,round(((insured_amount*share_pct)/100),0) as insured_amount,"+
                " round(((premi*share_pct)/100),0) as premi_koas,"+
                " round(((comm1*share_pct)/100),0) as nd_comm1"+
                " from ( "+sqa.getSQL()+" group by a.cc_code,a.pol_id,a.pol_no,a.pol_type_id,a.policy_date,c.ref8,b.description) x "+
                " order by cc_code,pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        //if (getStNoUrut()!=null) {
        //    getRemoteInsurance().updateRecapDoubleCoins(l, this);
        //}
         
        
        return l;
        
    }
    
    public DTOList KREASI4() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.attr_pol_id as pol_id,a.attr_pol_no as pol_no,a.refx0 as jumlah,a.attr_pol_tsi_total as insured_amount," +
                " a.amount as premi_koas,a.no_surat_hutang,a.cc_code,a.ent_id as entity_id,b.description,a.attr_pol_type_id as pol_type_id," +
                "(select d.share_pct from ins_pol_coins d where d.policy_id = a.attr_pol_id and d.entity_id = 1 and d.coins_type= 'COINS') as share_pct " );
        
        sqa.addQuery(" from ar_invoice a " +
                " left join gl_cost_center b on b.cc_code = a.cc_code " );
        
        sqa.addClause("a.ar_trx_type_id = 10");
        sqa.addClause("a.attr_pol_type_id = '21'");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.mutation_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.mutation_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stKreasiName!=null) {
            sqa.addClause("a.no_surat_hutang = ?");
            sqa.addPar(stKreasiName);
        }
        
        if (stWilayahID!=null) {
            if (stWilayahID.equalsIgnoreCase("1")){
                sqa.addClause("a.cc_code in ('10','13','17','20','21','22','40','43','70')");
            } else {
                sqa.addClause("a.cc_code not in ('10','13','17','20','21','22','40','43','70')");
            }
        }
        
        final String sql = "select * "+
                " from ( "+sqa.getSQL()+" ) x order by cc_code,pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_KLAIM_POS2() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" a.* ");
        
        sqa.addQuery(" from claim a ");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("a.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stItemClaimID!=null) {
            sqa.addClause("a.item_klaim = ? ");
            sqa.addPar(stItemClaimID);
        }
        
        final String sql = sqa.getSQL();
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_KLAIM_POS_PLA() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" a.* ");
        
        sqa.addQuery(" from claim_pla a ");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (PLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.pla_date) >= ?");
            sqa.addPar(PLADateFrom);
        }
        
        if (PLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.pla_date) <= ?");
            sqa.addPar(PLADateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("a.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stItemClaimID!=null) {
            if (stItemClaimID.equalsIgnoreCase("1")){
                sqa.addClause("a.item_klaim = 54 ");
            } else {
                sqa.addClause("a.item_klaim = 50 ");
            }
        }
        
        final String sql = sqa.getSQL();
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList KREASI3() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.cc_code,a.pol_id,a.pol_no,a.pol_type_id,e.ref_ent_id as kreasi_type_id,a.policy_date,a.create_who, "+
                " (select sum(y.insured_amount) "+
                " from ins_policy x "+
                " inner join ins_pol_obj y on y.pol_id = x.pol_id where x.pol_id = a.pol_id) as insured_amount, "+
                " (select sum(y.refn4) "+
                " from ins_policy x "+
                " inner join ins_pol_obj y on y.pol_id = x.pol_id where x.pol_id = a.pol_id) as amount, "+
                " (select count(y.ref1) "+
                " from ins_policy x "+
                " inner join ins_pol_obj y on y.pol_id = x.pol_id where x.pol_id = a.pol_id) as jumlah, "+
                " (select sum(y.refn2)  from ins_policy x "+
                " inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                " where x.pol_id = a.pol_id) as premi_koas, "+
                " (select sum(y.refn9) "+
                " from ins_policy x "+
                " inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                " where x.pol_id = a.pol_id) as nd_comm1, "+
                " b.description,e.short_name as cust_name, "+
                " (select d.share_pct from ins_pol_coins d where d.policy_id = a.pol_id and d.entity_id = 1 and d.coins_type= 'COINS') as share_pct "
                );
        
        sqa.addQuery(" from ins_policy a "+
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "+
                " left join ent_master e on e.ent_id = d.entity_id "+
                " left join gl_cost_center b on b.cc_code = a.cc_code "
                );
        
        sqa.addClause("d.coins_type = 'COINS_COVER'");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("d.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stRekapNo!=null) {
            sqa.addClause("a.ref3 = ?");
            sqa.addPar(stRekapNo);
        }
        
        final String sql = "select pol_id,pol_no,pol_type_id,kreasi_type_id,policy_date,insured_amount,create_who,amount,jumlah,((premi_koas*share_pct)/100) as premi_koas,nd_comm1, "+
                " description,cust_name from ( "+sqa.getSQL()+" group by a.cc_code,a.pol_type_id,a.pol_id,a.pol_no,a.create_who,e.ref_ent_id,b.description,e.short_name,d.share_pct,a.policy_date "+
                " ) x order by cc_code,pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        //if (getStNoUrut()!=null) {
            //getRemoteInsurance().updateRecapCoinsNo(l, this);
        //}
         
        
        
        return l;
        
    }
    
    public DTOList NOTAREINS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "	e.cover_category as cover_type_code,j.treaty_type as co_treaty_id,a.ccy,"+
                "	sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(i.premi_amount*a.ccy_rate)),0)) as premi_amt,"+
                "	j.comm_ri_pct as nd_brok1pct,"+
                "	sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(i.ricomm_amt*a.ccy_rate)),0)) as nd_brok2pct,"+
                "	sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(i.premi_amount*a.ccy_rate)),0))-sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(i.ricomm_amt*a.ccy_rate)),0)) as premi_netto"
                );
        
        
        sqa.addQuery(
                " from ins_policy a"+
                "	inner join ins_pol_obj c on c.pol_id=a.pol_id"+
                "	inner join ins_pol_cover d on a.pol_id = d.pol_id"+
                "	inner join ins_cover e on d.ins_cover_id = e.ins_cover_id"+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id"+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id"+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id"+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"+
                "	inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "	inner join ent_master k on k.ent_id = i.member_ent_id");
        
        
        sqa.addClause("a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("a.effective_flag = 'Y'");
        
        sqa.addClause("j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5','OR')");
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("k.ent_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        final String sql = " select cover_type_code,co_treaty_id,ccy," +
                " sum(premi_amt) as premi_amt, nd_brok1pct," +
                " sum(nd_brok2pct) as nd_brok2pct, sum(premi_netto) as premi_netto from ( "+
                sqa.getSQL()+"   group by d.ins_cover_id,e.cover_category,j.treaty_type,j.comm_ri_pct,a.ccy "+
                " ) a where premi_amt <> 0 group by cover_type_code,co_treaty_id,ccy,nd_brok1pct order by cover_type_code ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList REAS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.policy_date,a.pol_type_id,a.period_start,a.period_end,a.pol_id,a.pol_no,substr(a.cust_name,1,25) as cust_name,a.ccy,a.insured_amount,a.premi_total, "+
                "	(round(sum(i.premi_rate),4)||' '||a.rate_method_desc) as rate_method_desc,(round(a.share_pct,2)||' %') as rate_method,"+
                "		(	select coalesce(sum(y.amount),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id=1 "+
                "		where y.policy_id=a.pol_id) as tsi_askrida, "+
                "		(	select coalesce(sum(y.premi_amt),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id=1 "+
                "		where y.policy_id=a.pol_id) as premi_askrida, "+
                "		(	select coalesce(sum(y.amount),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id<>1 "+
                "		where y.policy_id=a.pol_id) as tsi_ko, "+
                "		(	select coalesce(sum(y.premi_amt),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id<>1 "+
                "		where y.policy_id=a.pol_id) as premi_ko, "+
                "	sum(checkreas(j.treaty_type='BPDAN',i.tsi_amount)) as tsi_bpdan, "+
                "	sum(checkreas(j.treaty_type='BPDAN',i.premi_amount)) as premi_bpdan, "+
                "	sum(checkreas(j.treaty_type='OR',i.tsi_amount)) as tsi_or, "+
                "	sum(checkreas(j.treaty_type='OR',i.premi_amount)) as premi_or, "+
                "	sum(checkreas(j.treaty_type='QS',i.tsi_amount)) as tsi_qs, "+
                "	sum(checkreas(j.treaty_type='QS',i.premi_amount)) as premi_qs, "+
                "	sum(checkreas(j.treaty_type='SPL',i.tsi_amount)) as tsi_spl, "+
                "	sum(checkreas(j.treaty_type='SPL',i.premi_amount)) as premi_spl, "+
                "	sum(checkreas(j.treaty_type='FAC',i.tsi_amount)) as tsi_fac, "+
                "	sum(checkreas(j.treaty_type='FAC',i.premi_amount)) as premi_fac, "+
                "	sum(checkreas(j.treaty_type='PARK',i.tsi_amount)) as tsi_park, "+
                "	sum(checkreas(j.treaty_type='PARK',i.premi_amount)) as premi_park, "+
                "	sum(checkreas(j.treaty_type='FACO',i.tsi_amount)) as tsi_faco, "+
                "	sum(checkreas(j.treaty_type='FACO',i.premi_amount)) as premi_faco, "+
                "	sum(checkreas(j.treaty_type='BPDAN',i.ricomm_amt)) as comm_bpdan, "+
                "	sum(checkreas(j.treaty_type='OR',i.ricomm_amt)) as comm_or, "+
                "	sum(checkreas(j.treaty_type='QS',i.ricomm_amt)) as comm_qs, "+
                "	sum(checkreas(j.treaty_type='SPL',i.ricomm_amt)) as comm_spl, "+
                "	sum(checkreas(j.treaty_type='FAC',i.ricomm_amt)) as comm_fac, "+
                "	sum(checkreas(j.treaty_type='PARK',i.ricomm_amt)) as comm_park, "+
                "	sum(checkreas(j.treaty_type='FACO',i.ricomm_amt)) as comm_faco, "+
                "	sum(checkreas(j.treaty_type='XOL1',i.tsi_amount)) as tsi_xol1, "+
                "	sum(checkreas(j.treaty_type='XOL2',i.tsi_amount)) as tsi_xol2, "+
                "	sum(checkreas(j.treaty_type='XOL3',i.tsi_amount)) as tsi_xol3, "+
                "	sum(checkreas(j.treaty_type='XOL4',i.tsi_amount)) as tsi_xol4, "+
                "	sum(checkreas(j.treaty_type='XOL5',i.tsi_amount)) as tsi_xol5, "+
                "	sum(checkreas(j.treaty_type='XOL1',i.premi_amount)) as premi_xol1, "+
                "	sum(checkreas(j.treaty_type='XOL2',i.premi_amount)) as premi_xol2, "+
                "	sum(checkreas(j.treaty_type='XOL3',i.premi_amount)) as premi_xol3, "+
                "	sum(checkreas(j.treaty_type='XOL4',i.premi_amount)) as premi_xol4, "+
                "	sum(checkreas(j.treaty_type='XOL5',i.premi_amount)) as premi_xol5"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj b on b.pol_id=a.pol_id "+
                "	inner join ins_policy_types f on f.pol_type_id =a.pol_type_id "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on h.ins_pol_treaty_id = g.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stYearTreaty!=null){
            sqa.addClause("substr(i.valid_ri_date::text,1,4) = ?");
            sqa.addPar(stYearTreaty);
        }
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        }
        
        final String sql = sqa.getSQL()+" group by a.policy_date,a.pol_type_id,a.period_start,a.period_end,a.pol_id,a.pol_no,"+
                "a.cust_name,a.ccy,a.ccy_rate,a.insured_amount,a.premi_total,a.share_pct,a.rate_method_desc "+
                " order by a.pol_no asc";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXPIRED() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" a.policy_date,a.period_start,a.period_end,a.pol_no,a.cust_name,b.ref1 as prod_name,(b.insured_amount*a.ccy_rate) as insured_amount,(b.premi_total*a.ccy_rate) as premi_total" );
        
        sqa.addQuery("   from " +
                "   ins_policy a"   +
                "	inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "	inner join ins_policy_types c on c.pol_type_id = a.pol_type_id "+
                "	left join ent_master e on e.ent_id = a.entity_id"
                );
        
        sqa.addClause("a.status IN ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("c.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                " a.policy_date,a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList EXCEL_EXPIRED() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" a.policy_date,a.period_start,a.period_end,a.pol_no,a.cust_name,b.ref1,(b.insured_amount*a.ccy_rate) as insured_amount,(b.premi_total*a.ccy_rate) as premi_total" );
        
        sqa.addQuery("   from " +
                "   ins_policy a"   +
                "	inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "	inner join ins_policy_types c on c.pol_type_id = a.pol_type_id "+
                "	left join ent_master e on e.ent_id = a.entity_id"
                );
        
        sqa.addClause("a.status IN ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("c.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                " a.policy_date,a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_EXPIRED()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("Jatuh_Tempo");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header produk
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("tanggal_polis");
            row0.createCell(1).setCellValue("periode_awal");
            row0.createCell(2).setCellValue("periode_akhir");
            row0.createCell(3).setCellValue("no_polis");
            row0.createCell(4).setCellValue("tertanggung");
            row0.createCell(5).setCellValue("okupasi");
            row0.createCell(6).setCellValue("tsi");
            row0.createCell(7).setCellValue("premi");
            
            
            //bikin isi cell produk
            XSSFRow row = sheet.createRow(i+1);
            
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename=EXPIRED.xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList SUMM_REAS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	j.treaty_type,a.pol_type_id,a.ccy,a.ccy_rate,a.ccy_rate_treaty,"+
                "	k.short_name as cust_name,sum(i.premi_amount) as premi_total,sum(i.premi_amount*a.ccy_rate) as premi_netto,"+
                "	sum(i.ricomm_amt) as nd_comm1,sum(i.ricomm_amt*a.ccy_rate) as nd_comm2"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "	inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "	inner join ent_master k on k.ent_id = i.member_ent_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('OR','XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stCoinsurerID!=null) {
            sqa.addClause("i.member_ent_id = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        final String sql = sqa.getSQL()+" group by j.treaty_type,a.pol_type_id,f.ins_policy_type_grp_id,a.ccy,a.ccy_rate,a.ccy_rate_treaty,k.short_name "+
                " order by j.treaty_type,f.ins_policy_type_grp_id,a.pol_type_id,k.short_name";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList REAS_COMPANY() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	j.treaty_type,a.pol_type_id,"+
                "	sum(getpremi2(k.ref1<>'34',i.premi_amount*a.ccy_rate)) as premi_total,"+
                "	sum(getpremi2(k.ref1='34',i.premi_amount*a.ccy_rate)) as premi_netto,"+
                "	sum(getpremi2(k.ref1<>'34',i.ricomm_amt*a.ccy_rate)) as nd_comm1,"+
                "	sum(getpremi2(k.ref1='34',i.ricomm_amt*a.ccy_rate)) as nd_comm2"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "	inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "	inner join ent_master k on k.ent_id = i.member_ent_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('OR','XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stCoinsurerID!=null) {
            sqa.addClause("i.member_ent_id = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        final String sql = sqa.getSQL()+" group by j.treaty_type,a.pol_type_id,f.ins_policy_type_grp_id "+
                " order by j.treaty_type,f.ins_policy_type_grp_id,a.pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_BPPDAN() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.policy_date,a.period_start,a.period_end,substr(a.period_start::text,1,4) as u_year,a.pol_no,a.status,a.pol_id,a.cust_name, "+
                "b.ref9d as postal_code,getzone2(b.ref6d) as zone_code,b.ref1,b.risk_class,c.ins_risk_cat_code, "+
                "b.ref3,c.description,b.ref5,a.ccy,a.ccy_rate,a.insured_amount,a.premi_total, "+
                "(case b.risk_class when 1 then c.tre_limit1 when 2 then c.tre_limit2 when 3 then c.tre_limit3 else 0 end) as treaty_limit,c.exc_risk_flag, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=6,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) "+
                "	as building,"+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=39,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) "+
                "	as machine, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=56,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) "+
                "	as stock, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id not in (6,39,56),z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) "+
                "	as other,b.insured_amount as total_tsi, "+
                "sum(round(i.premi_rate,4))||' '||a.rate_method_desc as premi_rate, "+
                "coalesce(round(sum(checkreas(j.treaty_type='OR',i.tsi_amount)),2),0) as tsi_or, "+
                "coalesce(round(sum(checkreas(j.treaty_type='OR',i.premi_amount)),2),0) as premi_or, "+
                "coalesce(round(sum(checkreas(j.treaty_type='OR',i.ricomm_amt)),2),0) as komisi_or, "+
                "coalesce(round(sum(checkreas(j.treaty_type='BPDAN',i.tsi_amount)),2),0) as tsi_bppdan, "+
                "coalesce(round(sum(checkreas(j.treaty_type='BPDAN',i.premi_amount)),2),0) as premi_bppdan, "+
                "coalesce(round(sum(checkreas(j.treaty_type='BPDAN',i.ricomm_amt)),2),0) as komisi_bppdan "
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ins_risk_cat c on b.ins_risk_cat_id = c.ins_risk_cat_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("(a.pol_type_id=1 or a.pol_type_id=81 or a.pol_type_id=19)");
        
        sqa.addClause("j.treaty_type in ('OR','BPDAN')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = sqa.getSQL()+" group by a.policy_date,a.period_start,a.period_end,substr(a.period_start::text,1,4),a.pol_no,a.status,a.pol_id,a.cust_name,"+
                "a.insured_amount,a.premi_total, b.ref9d,b.ref6d,b.ref1,b.risk_class,b.ref3,c.description,b.ref5,c.ins_risk_cat_code,c.exc_risk_flag,a.ccy,a.ccy_rate,b.insured_amount,"+
                "a.rate_method_desc, c.tre_limit1,c.tre_limit2,c.tre_limit3,b.ins_pol_obj_id,a.pol_type_id "+
                "order by a.policy_date,a.period_start,a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
     
    
    public DTOList BORDERO_KBG() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.pol_no,substr(a.cust_name,1,30) as cust_name,a.pol_type_id,a.period_start,a.period_end,(a.insured_amount*a.ccy_rate) as insured_amount,(a.premi_total*a.ccy_rate) as premi_total,"+
                "	k.ent_id as entity_id,coalesce((i.premi_amount*a.ccy_rate),0) as premi_netto,coalesce((i.ricomm_amt*a.ccy_rate),0) as nd_comm1,coalesce(((i.premi_amount*a.ccy_rate)-(i.ricomm_amt*a.ccy_rate)),0) as premi_base"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "	inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "	inner join ent_master k on k.ent_id = i.member_ent_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5','OR')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stMarketerID!=null){
            sqa.addClause("k.ent_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_BORDERO_KBG() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.pol_no,substr(a.cust_name,1,30) as cust_name,a.pol_type_id,a.period_start,a.period_end,(a.insured_amount*a.ccy_rate) as insured_amount,(a.premi_total*a.ccy_rate) as premi_total,"+
                "	k.ent_id,k.ent_name,(i.premi_amount*a.ccy_rate) as premi_netto,(i.ricomm_amt*a.ccy_rate) as nd_comm1,((i.premi_amount*a.ccy_rate)-(i.ricomm_amt*a.ccy_rate)) as premi_base"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "	inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "	inner join ent_master k on k.ent_id = i.member_ent_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5','OR')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stMarketerID!=null){
            sqa.addClause("k.ent_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_BORDERO_KBG()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("pol_no");
            row0.createCell(1).setCellValue("cust_name");
            row0.createCell(2).setCellValue("pol_type_id");
            row0.createCell(3).setCellValue("period_start");
            row0.createCell(4).setCellValue("period_end");
            row0.createCell(5).setCellValue("insured_amount");
            row0.createCell(6).setCellValue("premi_total");
            row0.createCell(7).setCellValue("ent_id");
            row0.createCell(8).setCellValue("ent_name");
            row0.createCell(9).setCellValue("premi_netto");
            row0.createCell(10).setCellValue("nd_comm1");
            row0.createCell(11).setCellValue("premi_base");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            if (h.getFieldValueByFieldNameBD("ent_id")!=null)
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("ent_id").doubleValue());
            if (h.getFieldValueByFieldNameST("ent_name")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            if (h.getFieldValueByFieldNameBD("premi_netto")!=null)
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("premi_netto").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("nd_comm1").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_base")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("premi_base").doubleValue());
            
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList RKP() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.dla_date,a.policy_date,a.pol_no,a.pla_no,a.dla_no,a.cust_name,(b.insured_amount*a.ccy_rate) as insured_amount,checkstatus(a.ins_policy_type_grp_id=10,b.ref2,b.ref1) as prod_name,"+
                "(a.claim_amount_est*a.ccy_rate) as claim_amount_est,(a.claim_amount_approved*a.ccy_rate) as claim_amount_approved"
                );
        
        sqa.addQuery("   from ins_policy a "+
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_obj b on b.ins_pol_obj_id = a.claim_object_id"
                );
        
        sqa.addClause("a.status IN ('CLAIM','CLAIM ENDORSE')");
        sqa.addClause("a.claim_status = 'DLA'");
        sqa.addClause("a.claim_effective_flag = 'Y'");
        
        if(appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stCoinsurerID!=null) {
            sqa.addClause("b.ref8 = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stObject!=null) {
            if (stPolicyTypeGroupID.equalsIgnoreCase("10")) {
                sqa.addClause("upper(b.ref2) like ?");
            } else {
                sqa.addClause("upper(b.ref1) like ?");
            }
            sqa.addPar('%'+stObject.toUpperCase()+'%');
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "a.pla_date,a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList RKS() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.pla_date,a.policy_date,a.pol_no,a.pla_no,a.cust_name,(b.insured_amount*a.ccy_rate) as insured_amount,checkstatus(a.ins_policy_type_grp_id=10,b.ref2,b.ref1) as prod_name,"+
                "(a.claim_amount_est*a.ccy_rate) as claim_amount_est,(a.claim_amount_approved*a.ccy_rate) as claim_amount_approved"
                );
        
        sqa.addQuery("   from ins_policy a "+
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_obj b on b.ins_pol_obj_id = a.claim_object_id"
                );
        
        sqa.addClause("a.effective_flag='Y'");
        
        sqa.addClause("a.pol_id not in ( " +
                "select a.parent_id " +
                "from ins_policy a " +
                "where a.claim_status = 'DLA' " +
                "and a.status in ('CLAIM','CLAIM ENDORSE')) ");
        
        sqa.addClause("a.status IN ('CLAIM')");
        sqa.addClause("a.claim_status = 'PLA'");
        sqa.addClause("a.effective_flag = 'Y'");
        
        if(appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (PLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.pla_date) >= ?");
            sqa.addPar(PLADateFrom);
        }
        
        if (PLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.pla_date) <= ?");
            sqa.addPar(PLADateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stObject!=null) {
            if (stPolicyTypeGroupID.equalsIgnoreCase("10"))
                sqa.addClause("upper(b.ref2) like ?");
            else
                sqa.addClause("upper(b.ref1) like ?");
            sqa.addPar('%'+stObject.toUpperCase()+'%');
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "a.pla_date,a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_VALID() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.policy_date,a.pol_no,a.cust_name,a.status,a.effective_flag,a.ccy, "+
                "coalesce(a.f_ri_finish,'N') as f_ri_finish,coalesce(a.insured_amount,0) as insured_amount,coalesce(a.premi_total,0) as premi_total"
                );
        
        sqa.addQuery(" from ins_policy a ");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        sqa.addClause("a.active_flag = 'Y'");
        
        sqa.addClause(" (a.f_ri_finish is null or a.effective_flag = 'N')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_VALID()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Tgl Polis");
            row0.createCell(1).setCellValue("No Polis");
            row0.createCell(2).setCellValue("Nama");
            row0.createCell(3).setCellValue("Status POlis");
            row0.createCell(4).setCellValue("Eff Flag");
            row0.createCell(5).setCellValue("R/I Flag");
            row0.createCell(6).setCellValue("Kurs");
            row0.createCell(7).setCellValue("Insured");
            row0.createCell(8).setCellValue("Premi");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("effective_flag"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("f_ri_finish"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList RPP() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.create_date,a.policy_date,a.period_start,a.period_end,a.pol_id,a.create_who,a.prod_id,a.pol_no,b.entity_id as entity_id, "+
                "getname(a.ins_policy_type_grp_id in (7,8),a.ref5,a.cust_name) as cust_name, "+
                "getpremiend(b.entity_id,coalesce(a.insured_amount,0)*a.ccy_rate,0) as insured_amount, "+
                "getpremiend(b.entity_id,coalesce(a.premi_total,0)*a.ccy_rate,coalesce(b.premi_amt,0)*a.ccy_rate*-1) as premi_total, "+
                "getpremiend(b.entity_id,coalesce(a.nd_pcost,0)*a.ccy_rate,0) as nd_pcost, "+
                "getpremiend(b.entity_id,coalesce(a.nd_sfee,0)*a.ccy_rate,0) as nd_sfee, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(b.disc_amount,0))*a.ccy_rate)*-1) as nd_disc1, "+
                "getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),coalesce(b.hfee_amount*a.ccy_rate,0)*-1) as nd_hfee, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_comm1*a.ccy_rate,0)) + (coalesce(a.nd_comm2*a.ccy_rate,0))),(coalesce(b.comm_amount*a.ccy_rate,0))*-1) as nd_comm1, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_comm3*a.ccy_rate,0)) + (coalesce(a.nd_comm4*a.ccy_rate,0))),0) as nd_comm3, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0))),0) as nd_feebase1," +
                "getpremiend(b.entity_id,((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))),(coalesce(b.broker_amount*a.ccy_rate,0))*-1) as nd_brok1," +
                "getpremiend(b.entity_id,(coalesce(a.nd_taxcomm1*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm2*a.ccy_rate,0)),0) as nd_taxcomm1, "+
                "getpremiend(b.entity_id,(coalesce(a.nd_taxcomm3*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm4*a.ccy_rate,0)),0) as nd_taxcomm3 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id"
                );
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        } else {
            sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        }
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        sqa.addClause("a.effective_flag='Y'");
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCoinsurerID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stCustStatus!=null) {
            sqa.addClause("e.customer_status = ?");
            sqa.addPar(stCustStatus);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("b.ref12 is null");
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "      a.pol_no,b.entity_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPP() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.cc_code,a.create_date,a.policy_date,a.period_start,a.period_end,a.pol_id,a.create_who,a.prod_id,a.pol_no,b.entity_id as entity_id, "+
                "getname(a.ins_policy_type_grp_id in (7,8),a.ref5,a.cust_name) as cust_name, "+
                "getpremiend(b.entity_id,coalesce(a.insured_amount*a.ccy_rate,0),0) as insured_amount, "+
                "getpremiend(b.entity_id,coalesce(a.premi_total*a.ccy_rate,0),coalesce(b.premi_amt*a.ccy_rate,0)*-1) as premi_amt, "+
                "getpremiend(b.entity_id,coalesce(a.nd_pcost*a.ccy_rate,0),0) as nd_pcost, "+
                "getpremiend(b.entity_id,coalesce(a.nd_sfee*a.ccy_rate,0),0) as nd_sfee, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))),(coalesce(b.disc_amount*a.ccy_rate,0))*-1) as diskon_premi, "+
                "getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),coalesce(b.hfee_amount*a.ccy_rate,0)*-1) as nd_hfee, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_comm1*a.ccy_rate,0)) + (coalesce(a.nd_comm2*a.ccy_rate,0))),(coalesce(b.comm_amount*a.ccy_rate,0))*-1) as nd_comm1, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_comm3*a.ccy_rate,0)) + (coalesce(a.nd_comm4*a.ccy_rate,0))),0) as nd_comm3, "+
                "getpremiend(b.entity_id,((coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0))),0) as nd_feebase," +
                "getpremiend(b.entity_id,((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))),(coalesce(b.broker_amount*a.ccy_rate,0))*-1) as brok," +
                "getpremiend(b.entity_id,(coalesce(a.nd_taxcomm1*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm2*a.ccy_rate,0)),0) as nd_taxcomm1, "+
                "getpremiend(b.entity_id,(coalesce(a.nd_taxcomm3*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm4*a.ccy_rate,0)),0) as nd_taxcomm3 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id"
                );
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        sqa.addClause("a.effective_flag='Y'");
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        } else {
            sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCoinsurerID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        if (stCustStatus!=null) {
            sqa.addClause("e.customer_status = ?");
            sqa.addPar(stCustStatus);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("b.ref12 is null");
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "      a.pol_no,b.entity_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_CONS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.policy_date,a.period_start,a.period_end,substr(a.period_start::text,1,4) as u_year,a.pol_no,a.status,a.pol_id,a.cust_name, "+
                "getpostcode(a.pol_type_id,b.ref6d,b.ref9d) as postal_code,getzone2(b.ref6d) as zone_code,b.ref1,b.risk_class,c.ins_risk_cat_code,b.ref3,c.description,b.ref5, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=6,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as building, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=39,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as machine, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=56,z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as stock, "+
                "(	select coalesce(round(sum(getkoas(z.ins_tsi_cat_id not in (6,39,56),z.insured_amount)),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id)  "+
                "	as other,b.insured_amount as total_tsi, "+
                "(select round(sum(x.rate),4)||' '||a.rate_method_desc "+
                "from ins_policy y "+
                "inner join ins_pol_cover x on x.pol_id = y.pol_id "+
                "where y.pol_id = a.pol_id) as premi_rate, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FACO',i.tsi_amount)),2),0) as tsi_amount, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FACO',i.premi_amount)),2),0) as premi_amount, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FACO',i.ricomm_amt)),2),0) as komisi_amount"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ins_risk_cat c on b.ins_risk_cat_id = c.ins_risk_cat_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("a.pol_type_id=2");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = sqa.getSQL()+" group by a.policy_date,a.period_start,a.period_end,a.pol_no,a.status,a.pol_id,a.cust_name, "+
                "a.pol_type_id,b.ref6d,b.ref9d,b.ref1,b.risk_class,c.ins_risk_cat_code,b.ref3,c.description,b.ref5,b.ins_pol_obj_id, "+
                "b.insured_amount,a.rate_method_desc "+
                "order by a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_FAC() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("c.ref6d as kode_pos,m.ins_risk_cat_code as risk_code,c.risk_class,h.ins_pol_tre_det_id,i.ri_slip_no, "+
                "(case c.risk_class when '1' then m.tre_limit1 when '2' then m.tre_limit2 when '3' then m.tre_limit3 else '0' end) as treaty_limit, "+
                "a.policy_date,a.period_start,a.period_end,a.pol_id,a.pol_no,a.cust_name,c.ins_pol_obj_id, "+
                "c.ref1 as objek,a.pol_type_id,f.short_desc,k.reas_ent_id as ref_ent_id,a.ccy,a.ccy_rate,k.ent_name,a.insured_amount as tsi_polis, "+
                "(	select coalesce(round(sum(y.amount),0),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id=1 "+
                "	where y.policy_id=a.pol_id) "+
                "	as tsi_askrida, "+
                "coalesce(c.insured_amount,0) as tsi_per_objek, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FAC',i.tsi_amount)),2),0) as tsi_fac, "+
                "coalesce(a.premi_total,0) as premi_polis, "+
                "(	select coalesce(sum(y.premi_amt),0) "+
                "	from ins_policy x "+
                "	inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id=1 "+
                "	where y.policy_id=a.pol_id) "+
                "	as premi_askrida, "+
                "coalesce(c.premi_total,0) as premi_per_objek, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FAC',i.premi_amount)),2),0) as premi_fac, "+
                "coalesce(round(sum(checkreas(j.treaty_type='FAC',i.ricomm_amt)),2),0) as komisi_fac "
                );
        
        sqa.addQuery("from ins_policy a "+
                "left join ent_master b on b.ent_id = a.entity_id "+
                "inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "inner join ent_master k on k.ent_id = i.member_ent_id "+
                "left join ins_risk_cat m on m.ins_risk_cat_id = c.ins_risk_cat_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("j.treaty_type = 'FAC'");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by a.pol_no,a.period_start,a.period_end,a.pol_id,a.policy_date,a.cust_name,"+
                "c.ref1,c.ref6d,a.pol_type_id,a.ccy,a.ccy_rate,m.ins_risk_cat_code,c.risk_class,"+
                "m.tre_limit1,m.tre_limit2,m.tre_limit3,a.pol_type_id,c.ins_pol_obj_id,c.insured_amount,c.premi_total,"+
                "f.short_desc,a.insured_amount,a.premi_total,c.refn2,a.ccy_rate_treaty,i.ri_slip_no,k.ent_name,k.reas_ent_id,h.ins_pol_tre_det_id "+
                "order by pol_type_id, pol_no,ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_SAHAM() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("substr(a.period_start::text,1,4) as u_year,substr(a.period_end::text,1,4) as u_year2,a.ins_policy_type_grp_id, a.pol_type_id, f.short_desc,a.cc_code,"+
                "j.treaty_type,a.policy_date,a.pol_no,k.reas_ent_id as ref_ent_id,k.short_name as reasuradur,a.ccy,a.ccy_rate,i.sharepct,"+
                "coalesce(i.tsi_amount,0) as tsi_reas,coalesce(i.premi_amount,0) as premi_reas,coalesce(i.ricomm_amt,0) as komisi_reas, "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id1 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc1,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id1) as kode_captive1,  "+
                "i.premi_cover1,round(((i.premi_cover1*i.ricomm_rate)/100),0) as komisi1,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id2 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc2,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id2) as kode_captive2,  "+
                "i.premi_cover2,round(((i.premi_cover2*i.ricomm_rate)/100),0) as komisi2,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id3 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc3,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id3) as kode_captive3,  "+
                "i.premi_cover3,round(((i.premi_cover3*i.ricomm_rate)/100),0) as komisi3,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id4 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc4,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id4) as kode_captive4,  "+
                "i.premi_cover4,round(((i.premi_cover4*i.ricomm_rate)/100),0) as komisi4,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id5 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc5,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id5) as kode_captive5,  "+
                "i.premi_cover5,round(((i.premi_cover5*i.ricomm_rate)/100),0) as komisi5,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id6 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc6,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id6) as kode_captive6,  "+
                "i.premi_cover6,round(((i.premi_cover6*i.ricomm_rate)/100),0) as komisi6,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id7 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc7,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id7) as kode_captive7,  "+
                "i.premi_cover7,round(((i.premi_cover7*i.ricomm_rate)/100),0) as komisi7,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id8 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc8,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id8) as kode_captive8,  "+
                "i.premi_cover8,round(((i.premi_cover8*i.ricomm_rate)/100),0) as komisi8,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id9 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc9,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id9) as kode_captive9,  "+
                "i.premi_cover9,round(((i.premi_cover9*i.ricomm_rate)/100),0) as komisi9,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id10 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc10,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id10) as kode_captive10,  "+
                "i.premi_cover10,round(((i.premi_cover10*i.ricomm_rate)/100),0) as komisi10,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id11 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc11,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id11) as kode_captive11,  "+
                "i.premi_cover11,round(((i.premi_cover11*i.ricomm_rate)/100),0) as komisi11,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id12 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc12,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id12) as kode_captive12,  "+
                "i.premi_cover12,round(((i.premi_cover12*i.ricomm_rate)/100),0) as komisi12,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id13 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc13,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id13) as kode_captive13,  "+
                "i.premi_cover13,round(((i.premi_cover13*i.ricomm_rate)/100),0) as komisi13,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id14 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc14,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id14) as kode_captive14,  "+
                "i.premi_cover14,round(((i.premi_cover14*i.ricomm_rate)/100),0) as komisi14,  "+
                "(select l.description "+
                "from ins_cover l "+
                "inner join ins_pol_ri z on z.ins_cover_id15 = l.ins_cover_id  "+
                "where z.ins_pol_ri_id = i.ins_pol_ri_id) as desc15,getcaptive(substr(a.pol_no,2,1),i.ins_cover_id15) as kode_captive15,  "+
                "i.premi_cover15,round(((i.premi_cover15*i.ricomm_rate)/100),0) as komisi15  "
                
                );
        
        sqa.addQuery("from ins_policy a "+
                "left join ent_master b on b.ent_id = a.entity_id "+
                "inner join ins_pol_obj c on c.pol_id=a.pol_id "+
                "inner join ins_policy_types f on a.pol_type_id = f.pol_type_id  "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "inner join ent_master k on k.ent_id = i.member_ent_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5','OR','FAC','BPDAN','PARK','FACO')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = sqa.getSQL()+" order by substr(a.period_start::text,1,4), a.pol_type_id, a.pol_no,c.ins_pol_obj_id,k.reas_ent_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_REKAP1() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("substr(a.pol_no,2,1) as bus_source,a.cc_code,e.description, "+
                " sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi, "+
                " sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon"
                );
        
        sqa.addQuery(" from       ins_policy a "+
                " left join ent_master b on b.ent_id = a.entity_id "+
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "+
                " left join gl_cost_center e on e.cc_code = a.cc_code  "
                );
        
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.ref12 = 'Y'");
        }
        
        String sql = " select cc_code,description, "+
                " sum(getkoas(bus_source='1',(premi-diskon))) as umum, "+
                " sum(getkoas(bus_source='2',(premi-diskon))) as pemda, "+
                " sum(getkoas(bus_source='3',(premi-diskon))) as perusda, "+
                " sum(getkoas(bus_source='4',(premi-diskon))) as bpd, "+
                " coalesce(sum(premi-diskon),0) as premi_total_adisc from ( "+sqa.getSQL()+
                " group by substr(a.pol_no,2,1),a.cc_code,e.description "+
                " ) z group by cc_code,description ";
        
        if (Tools.isYes(stIndex)) {
            sql = sql + " order by premi_total_adisc";
        }
        
        if (Tools.isNo(stIndex)) {
            sql = sql + " order by cc_code";
        }
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_REKAP7() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("substr(a.pol_no,2,1) as bus_source,a.pol_type_id,e.description, "+
                " sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi, "+
                " sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon"
                );
        
        sqa.addQuery(" from       ins_policy a "+
                " left join ent_master b on b.ent_id = a.entity_id "+
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "+
                " left join ins_policy_types e on e.pol_type_id = a.pol_type_id  "
                );
        
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.ref12 = 'Y'");
        }
        
        String sql = " select pol_type_id,description, "+
                " sum(getkoas(bus_source='1',(premi-diskon))) as umum, "+
                " sum(getkoas(bus_source='2',(premi-diskon))) as pemda, "+
                " sum(getkoas(bus_source='3',(premi-diskon))) as perusda, "+
                " sum(getkoas(bus_source='4',(premi-diskon))) as bpd, "+
                " coalesce(sum(premi-diskon),0) as premi_total_adisc from ( "+sqa.getSQL()+
                " group by substr(a.pol_no,2,1),a.pol_type_id,e.description "+
                " ) z group by pol_type_id,description ";
        
        if (Tools.isYes(stIndex)) {
            sql = sql + " order by premi_total_adisc";
        }
        
        if (Tools.isNo(stIndex)) {
            sql = sql + " order by pol_type_id";
        }
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPP_JENIS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" cabang,jenis,count(pol_no) as pol_no,status,pol_type_id, "+
                "sum(premi_amt) as premi_amt,sum(nd_pcost) as nd_pcost, "+
                "sum(nd_sfee) as nd_sfee,sum(diskon_premi) as diskon_premi, "+
                "sum(nd_hfee) as nd_hfee,sum(nd_comm1+nd_comm3) as komisi, "+
                "sum(brok) as brok,sum(feebase) as feebase,sum(nd_taxcomm1+nd_taxcomm3) as tax "+
                "from (  "+
                "select c.description as cabang,d.description as jenis,a.status,a.pol_type_id,a.pol_no, "+
                "sum(getpremiend(b.entity_id,a.premi_total*a.ccy_rate,(b.premi_amt*a.ccy_rate)*-1)) as premi_amt, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_pcost*a.ccy_rate,0),0)) as nd_pcost, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_sfee*a.ccy_rate,0),0)) as nd_sfee, "+
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))),coalesce(b.disc_amount*a.ccy_rate,0)*-1)) as diskon_premi, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),coalesce(b.hfee_amount*a.ccy_rate,0)*-1)) as nd_hfee, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm1*a.ccy_rate,0)) + (coalesce(a.nd_comm2*a.ccy_rate,0)),coalesce(b.comm_amount*a.ccy_rate,0)*-1)) as nd_comm1, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm3*a.ccy_rate,0)) + (coalesce(a.nd_comm4*a.ccy_rate,0)),0)) as nd_comm3, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0)),0)) as feebase," +
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))),coalesce(b.broker_amount*a.ccy_rate,0)*-1)) as brok, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_taxcomm1*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm2*a.ccy_rate,0)),0)) as nd_taxcomm1, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_taxcomm3*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm4*a.ccy_rate,0)),0)) as nd_taxcomm3 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                " inner join ent_master e on e.ent_id = a.entity_id" +
                " inner join ins_pol_coins b on b.policy_id = a.pol_id " +
                " inner join gl_cost_center c on c.cc_code = a.cc_code " +
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id"
                );
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = " select cabang,jenis, " +
                "sum(checkreas(status in ('POLICY','RENEWAL'),pol_no)) as polis, " +
                "sum(checkreas(status='ENDORSE',pol_no)) as endorse, " +
                "sum(premi_amt) as premi_amt,sum(nd_pcost) as nd_pcost," +
                "sum(nd_sfee) as nd_sfee,sum(diskon_premi) as diskon_premi," +
                "sum(nd_hfee) as nd_hfee,sum(komisi) as komisi,sum(feebase) as feebase," +
                "sum(brok) as brok,sum(tax) as tax " +
                "from ( "+ sqa.getSQL()+ " group by a.pol_type_id,c.description,d.description,a.status,a.pol_no "+
                " ) x group by cabang,jenis,pol_type_id,status "+
                " ) x group by cabang,jenis,pol_type_id order by cabang,pol_type_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList RPP_JENIS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" pol_type_id,count(pol_no) as pol_no,status, "+
                "sum(premi_amt) as premi_amt,sum(nd_pcost) as nd_pcost, "+
                "sum(nd_sfee) as nd_sfee,sum(diskon_premi) as diskon_premi, "+
                "sum(nd_hfee) as nd_hfee,sum(komisi) as komisi, "+
                "sum(brok) as brok,sum(tax) as tax "+
                "from (  "+
                "select a.status,a.pol_type_id,a.pol_no, "+
                "sum(getpremiend(b.entity_id,a.premi_total*a.ccy_rate,b.premi_amt*a.ccy_rate*-1)) as premi_amt, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_pcost,0)*a.ccy_rate,0)) as nd_pcost, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_sfee,0)*a.ccy_rate,0)) as nd_sfee, "+
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(b.disc_amount,0))*a.ccy_rate)*-1)) as diskon_premi, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_hfee,0),b.hfee_amount*-1)) as nd_hfee, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate),((coalesce(b.comm_amount,0))*a.ccy_rate)*-1)) as komisi, "+
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)),b.broker_amount*-1)) as brok, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_taxcomm1,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm2,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm3,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm4,0)*a.ccy_rate),0)) as tax "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id"
                );
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = " select pol_type_id," +
                "sum(checkreas(status in ('POLICY','RENEWAL'),pol_no)) as polis," +
                "sum(checkreas(status='ENDORSE',pol_no)) as jumlah, " +
                "sum(premi_amt) as premi_amt,sum(nd_pcost) as nd_pcost," +
                "sum(nd_sfee) as nd_sfee,sum(diskon_premi) as diskon_premi," +
                "sum(nd_hfee) as nd_hfee,sum(komisi) as komisi," +
                "sum(brok) as brok,sum(tax) as tax " +
                "from ( "+ sqa.getSQL()+ " group by a.pol_type_id,a.status,a.pol_no "+
                " ) x group by pol_type_id,status "+
                " ) x group by pol_type_id order by pol_type_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPP_COMPANY() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("c.cc_code,c.description,e.ent_id,e.ent_name as cust_name,e.address,e.gl_code, "+
                "sum(getpremiend(b.entity_id,a.premi_total*a.ccy_rate,(b.premi_amt*a.ccy_rate)*-1)) as premi_amt, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_pcost*a.ccy_rate,0),0)) as nd_pcost, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_sfee*a.ccy_rate,0),0)) as nd_sfee, "+
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))),coalesce(b.disc_amount*a.ccy_rate,0)*-1)) as diskon_premi, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),coalesce(b.hfee_amount*a.ccy_rate,0)*-1)) as nd_hfee, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm1*a.ccy_rate,0)) + (coalesce(a.nd_comm2*a.ccy_rate,0)),coalesce(b.comm_amount*a.ccy_rate,0)*-1)) as nd_comm1, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm3*a.ccy_rate,0)) + (coalesce(a.nd_comm4*a.ccy_rate,0)),0)) as nd_comm3, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0)),0)) as feebase," +
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))),coalesce(b.broker_amount*a.ccy_rate,0)*-1)) as brok, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_taxcomm1*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm2*a.ccy_rate,0)),0)) as nd_taxcomm1, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_taxcomm3*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm4*a.ccy_rate,0)),0)) as nd_taxcomm3 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                //"	inner join ent_master f on f.ent_id = a.prod_id " +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id" +
                "	inner join gl_cost_center c on c.cc_code = a.cc_code"
                );
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stCompTypeID!=null) {
            sqa.addClause("e.ref1 = ?");
            sqa.addPar(stCompTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by c.cc_code,e.ent_id,e.ent_name,e.address,e.gl_code,c.description,a.cc_code order by a.cc_code,e.ent_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPP_COMPANY_ALL() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" c.cc_code,c.description,a.ent_id,a.ent_name, sum(premi_amt-diskon_premi) as premi_adisc," +
                " sum(premi_amt) as premi_amt, sum(nd_pcost) as nd_pcost, "+
                " sum(nd_sfee) as nd_sfee, sum(diskon_premi) as diskon_premi," +
                " sum(nd_hfee) as nd_hfee, sum(nd_comm1+nd_comm3) as komisi,sum(brok) as brok,sum(feebase) as feebase ");
        
        String sql = " left join ( select a.entity_id,substr(a.pol_no,2,1) as bus_source,a.cc_code, "+
                "sum(getpremiend(b.entity_id,a.premi_total*a.ccy_rate,(b.premi_amt*a.ccy_rate)*-1)) as premi_amt, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_pcost*a.ccy_rate,0),0)) as nd_pcost, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_sfee*a.ccy_rate,0),0)) as nd_sfee, "+
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))),coalesce(b.disc_amount*a.ccy_rate,0)*-1)) as diskon_premi, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),coalesce(b.hfee_amount*a.ccy_rate,0)*-1)) as nd_hfee, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm1*a.ccy_rate,0)) + (coalesce(a.nd_comm2*a.ccy_rate,0)),coalesce(b.comm_amount*a.ccy_rate,0)*-1)) as nd_comm1, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm3*a.ccy_rate,0)) + (coalesce(a.nd_comm4*a.ccy_rate,0)),0)) as nd_comm3, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0)),0)) as feebase," +
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))),b.broker_amount*-1)) as brok "+
                " from       ins_policy a "+
                " inner join ins_pol_coins b on b.policy_id = a.pol_id "+
                " where a.status in ('POLICY','ENDORSE','RENEWAL') "+
                " and (b.entity_id <> 1 or b.coins_type <> 'COINS_COVER') "+
                " and a.effective_flag='Y'";
        
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getStPolicyTypeGroupID()!=null) {
            sql = sql + " and a.ins_policy_type_grp_id = ?";
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (getStPolicyTypeID()!=null) {
            sql = sql + " and a.pol_type_id = ?";
            sqa.addPar(stPolicyTypeID);
        }
        
        if(getStFltCoverType()!=null) {
            sql = sql + " and a.cover_type_code = ?";
            sqa.addPar(stFltCoverType);
        }
        
        sqa.addQuery(" from ent_master a "+ sql + " group by a.entity_id,a.pol_no,a.cc_code order by a.entity_id ) as x on a.ent_id = x.entity_id "+
                " inner join gl_cost_center c on c.cc_code = a.cc_code "
                );
        
        if (stBranch!=null) {
            sqa.addClause("x.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("x.bus_source = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("a.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        sql = sqa.getSQL() + " group by c.cc_code,c.description,a.ent_id,a.ent_name,a.cc_code order by a.cc_code,a.ent_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPP_COMPANY100_ALL() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" c.cc_code,c.description,a.ent_id,a.ent_name, sum(premi_amt-diskon_premi) as premi_adisc," +
                " sum(premi_amt) as premi_amt, sum(nd_pcost) as nd_pcost, "+
                " sum(nd_sfee) as nd_sfee, sum(diskon_premi) as diskon_premi," +
                " sum(nd_hfee) as nd_hfee, sum(nd_comm1+nd_comm3) as komisi,sum(brok) as brok,sum(feebase) as feebase ");
        
        String sql = " left join ( select a.entity_id,substr(a.pol_no,2,1) as bus_source,a.cc_code, "+
                " sum(coalesce(a.premi_total*a.ccy_rate,0)) as premi_amt, "+
                " sum(coalesce(a.nd_pcost*a.ccy_rate,0)) as nd_pcost, "+
                " sum(coalesce(a.nd_sfee*a.ccy_rate,0)) as nd_sfee, "+
                " sum((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))) as diskon_premi, "+
                " sum(coalesce(a.nd_hfee*a.ccy_rate,0)) as nd_hfee, "+
                " sum((coalesce(a.nd_comm1*a.ccy_rate,0)) + (coalesce(a.nd_comm2*a.ccy_rate,0))) as nd_comm1, "+
                " sum((coalesce(a.nd_comm3*a.ccy_rate,0)) + (coalesce(a.nd_comm4*a.ccy_rate,0))) as nd_comm3, "+
                " sum((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))) as brok, "+
                " sum((coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0))) as feebase "+
                " from       ins_policy a "+
                " where a.status in ('POLICY','ENDORSE','RENEWAL') "+
                " and a.effective_flag='Y'";
        
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getStPolicyTypeGroupID()!=null) {
            sql = sql + " and a.ins_policy_type_grp_id = ?";
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (getStPolicyTypeID()!=null) {
            sql = sql + " and a.pol_type_id = ?";
            sqa.addPar(stPolicyTypeID);
        }
        
        if(getStFltCoverType()!=null) {
            sql = sql + " and a.cover_type_code = ?";
            sqa.addPar(stFltCoverType);
        }
        
        sqa.addQuery(" from ent_master a "+ sql + " group by a.entity_id,a.pol_no,a.cc_code order by a.entity_id ) as x on a.ent_id = x.entity_id "+
                " inner join gl_cost_center c on c.cc_code = a.cc_code "
                );
        
        if (stBranch!=null) {
            sqa.addClause("x.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("x.bus_source = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("a.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        sql = sqa.getSQL() + " group by c.cc_code,c.description,a.ent_id,a.ent_name,a.cc_code order by a.cc_code,a.ent_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPP_COMPANY_ALLTYPE() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" c.description,a.ent_id,a.ent_name,a.category1,a.gl_code, "+
                " sum(getkoas(pol_type_id='1',premi)) as FR_premi, sum(getkoas(pol_type_id='1',diskon)) as FR_disc, "+
                " sum(getkoas(pol_type_id='2',premi)) as CONS_premi, sum(getkoas(pol_type_id='2',diskon)) as CONS_disc, "+
                " sum(getkoas(pol_type_id='3',premi)) as MV_premi, sum(getkoas(pol_type_id='3',diskon)) as MV_disc, "+
                " sum(getkoas(pol_type_id='4',premi)) as PA_premi, sum(getkoas(pol_type_id='4',diskon)) as PA_disc, "+
                " sum(getkoas(pol_type_id='5',premi)) as CIS_premi, sum(getkoas(pol_type_id='5',diskon)) as CIS_disc, "+
                " sum(getkoas(pol_type_id='6',premi)) as CAR_premi, sum(getkoas(pol_type_id='6',diskon)) as CAR_disc, "+
                " sum(getkoas(pol_type_id='7',premi)) as EAR_premi, sum(getkoas(pol_type_id='7',diskon)) as EAR_disc, "+
                " sum(getkoas(pol_type_id='8',premi)) as MB_premi, sum(getkoas(pol_type_id='8',diskon)) as MB_disc, "+
                " sum(getkoas(pol_type_id='9',premi)) as CPM_premi, sum(getkoas(pol_type_id='9',diskon)) as CPM_disc, "+
                " sum(getkoas(pol_type_id='10',premi)) as EEI_premi, sum(getkoas(pol_type_id='10',diskon)) as EEI_disc, "+
                " sum(getkoas(pol_type_id='11',premi)) as PLiab_premi, sum(getkoas(pol_type_id='11',diskon)) as PLiab_disc, "+
                " sum(getkoas(pol_type_id='12',premi)) as BURG_premi, sum(getkoas(pol_type_id='12',diskon)) as BURG_disc, "+
                " sum(getkoas(pol_type_id='13',premi)) as MC_premi, sum(getkoas(pol_type_id='13',diskon)) as MC_disc, "+
                " sum(getkoas(pol_type_id='14',premi)) as CIT_premi, sum(getkoas(pol_type_id='14',diskon)) as CIT_disc, "+
                " sum(getkoas(pol_type_id='15',premi)) as HULL_premi, sum(getkoas(pol_type_id='15',diskon)) as HULL_disc, "+
                " sum(getkoas(pol_type_id='16',premi)) as GOLF_premi, sum(getkoas(pol_type_id='16',diskon)) as GOLF_disc, "+
                " sum(getkoas(pol_type_id='17',premi)) as GA_premi, sum(getkoas(pol_type_id='17',diskon)) as GA_disc, "+
                " sum(getkoas(pol_type_id='18',premi)) as AV_premi, sum(getkoas(pol_type_id='18',diskon)) as AV_disc, "+
                " sum(getkoas(pol_type_id='19',premi)) as EQ_premi, sum(getkoas(pol_type_id='19',diskon)) as EQ_disc, "+
                " sum(getkoas(pol_type_id='20',premi)) as PJTKI_premi, sum(getkoas(pol_type_id='20',diskon)) as PJTKI_disc, "+
                " sum(getkoas(pol_type_id='21',premi)) as KREASI_premi, sum(getkoas(pol_type_id='21',diskon)) as KREASI_disc, "+
                " sum(getkoas(pol_type_id='22',premi)) as OIL_premi, sum(getkoas(pol_type_id='22',diskon)) as OIL_disc, "+
                " sum(getkoas(pol_type_id='23',premi)) as TS_premi, sum(getkoas(pol_type_id='23',diskon)) as TS_disc, "+
                " sum(getkoas(pol_type_id='24',premi)) as HE_premi, sum(getkoas(pol_type_id='24',diskon)) as HE_disc, "+
                " sum(getkoas(pol_type_id='31',premi)) as SIMPEDA_premi, sum(getkoas(pol_type_id='31',diskon)) as SIMPEDA_disc, "+
                " sum(getkoas(pol_type_id='32',premi)) as NSIMPEDA_premi, sum(getkoas(pol_type_id='32',diskon)) as NSIMPEDA_disc, "+
                " sum(getkoas(pol_type_id='33',premi)) as HAJI_premi, sum(getkoas(pol_type_id='33',diskon)) as HAJI_disc, "+
                " sum(getkoas(pol_type_id='41',premi)) as CITCM_premi, sum(getkoas(pol_type_id='41',diskon)) as CITCM_disc, "+
                " sum(getkoas(pol_type_id='42',premi)) as CISCM_premi, sum(getkoas(pol_type_id='42',diskon)) as CISCM_disc, "+
                " sum(getkoas(pol_type_id='51',premi)) as SBBB_premi, sum(getkoas(pol_type_id='51',diskon)) as SBBB_disc, "+
                " sum(getkoas(pol_type_id='52',premi)) as SBPB_premi, sum(getkoas(pol_type_id='52',diskon)) as SBPB_disc, "+
                " sum(getkoas(pol_type_id='53',premi)) as SBAPB_premi, sum(getkoas(pol_type_id='53',diskon)) as SBAPB_disc, "+
                " sum(getkoas(pol_type_id='54',premi)) as SBMB_premi, sum(getkoas(pol_type_id='54',diskon)) as SBMB_disc, "+
                " sum(getkoas(pol_type_id='55',premi)) as KBGBB_premi, sum(getkoas(pol_type_id='55',diskon)) as KBGBB_disc, "+
                " sum(getkoas(pol_type_id='56',premi)) as KBGPB_premi, sum(getkoas(pol_type_id='56',diskon)) as KBGPB_disc, "+
                " sum(getkoas(pol_type_id='57',premi)) as KBGAPB_premi, sum(getkoas(pol_type_id='57',diskon)) as KBGAPB_disc, "+
                " sum(getkoas(pol_type_id='58',premi)) as KBGMB_premi, sum(getkoas(pol_type_id='58',diskon)) as KBGMB_disc, "+
                " sum(getkoas(pol_type_id='61',premi)) as AUTO_premi, sum(getkoas(pol_type_id='61',diskon)) as AUTO_disc, "+
                " sum(getkoas(pol_type_id='62',premi)) as CGL_premi, sum(getkoas(pol_type_id='62',diskon)) as CGL_disc, "+
                " sum(getkoas(pol_type_id='63',premi)) as EL_premi, sum(getkoas(pol_type_id='63',diskon)) as EL_disc, "+
                " sum(getkoas(pol_type_id='65',premi)) as MAR_premi, sum(getkoas(pol_type_id='65',diskon)) as MAR_disc, "+
                " sum(getkoas(pol_type_id='66',premi)) as GLASS_premi, sum(getkoas(pol_type_id='66',diskon)) as GLASS_disc, "+
                " sum(getkoas(pol_type_id='67',premi)) as PI_premi, sum(getkoas(pol_type_id='67',diskon)) as PI_disc, "+
                " sum(getkoas(pol_type_id='68',premi)) as BOILER_premi, sum(getkoas(pol_type_id='68',diskon)) as BOILER_disc, "+
                " sum(getkoas(pol_type_id='69',premi)) as WCA_premi, sum(getkoas(pol_type_id='69',diskon)) as WCA_disc, "+
                " sum(getkoas(pol_type_id='70',premi)) as PPJU_premi, sum(getkoas(pol_type_id='70',diskon)) as PPJU_disc, "+
                " sum(getkoas(pol_type_id='71',premi)) as HEALTH_premi, sum(getkoas(pol_type_id='71',diskon)) as HEALTH_disc, "+
                " sum(getkoas(pol_type_id='81',premi)) as PAR_premi, sum(getkoas(pol_type_id='81',diskon)) as PAR_disc, "+
                " sum(getkoas(pol_type_id='82',premi)) as CECR_premi, sum(getkoas(pol_type_id='82',diskon)) as CECR_disc, "+
                " sum(getkoas(pol_type_id='84',premi)) as FG_premi, sum(getkoas(pol_type_id='84',diskon)) as FG_disc, "+
                " sum(getkoas(pol_type_id='92',premi)) as HOLE_premi, sum(getkoas(pol_type_id='92',diskon)) as HOLE_disc, "+
                " coalesce(sum(premi),0) as total_premi,coalesce(sum(diskon),0) as total_diskon ");
        
        String sql = " inner join ( select a.entity_id,a.pol_type_id,substr(a.pol_no,2,1) as bus_source, "+
                " sum(getpremiend(b.entity_id,a.premi_total*a.ccy_rate,b.premi_amt*a.ccy_rate*-1)) as premi, "+
                " sum(getpremiend(b.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(b.disc_amount,0))*a.ccy_rate)*-1)) as diskon "+
                " from       ins_policy a "+
                " inner join ins_pol_coins b on b.policy_id = a.pol_id "+
                " where (b.entity_id <> 1 or b.coins_type <> 'COINS_COVER') "+
                " and a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'";
        
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getStPolicyTypeGroupID()!=null) {
            sql = sql + " and a.ins_policy_type_grp_id = ?";
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (getStPolicyTypeID()!=null) {
            sql = sql + " and a.pol_type_id = ?";
            sqa.addPar(stPolicyTypeID);
        }
        
        if(getStFltCoverType()!=null) {
            sql = sql + " and a.cover_type_code = ?";
            sqa.addPar(stFltCoverType);
        }
        
        sqa.addQuery(" from ent_master a "+ sql + " group by a.entity_id,a.pol_type_id,a.pol_no order by a.entity_id ) as x on a.ent_id = x.entity_id "+
                " inner join gl_cost_center c on c.cc_code = a.cc_code "
                );
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("x.bus_source = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("a.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        sql = sqa.getSQL() + " group by c.description,a.ent_id,a.ent_name,a.cc_code,a.category1,a.gl_code order by a.cc_code,a.ent_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList RPP_COMPANY() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("e.ent_name as cust_name, "+
                "sum(getpremiend(b.entity_id,a.premi_total*a.ccy_rate,b.premi_amt*a.ccy_rate*-1)) as premi_amt, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_pcost*a.ccy_rate,0),0)) as nd_pcost, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_sfee*a.ccy_rate,0),0)) as nd_sfee, "+
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(b.disc_amount,0))*a.ccy_rate)*-1)) as diskon_premi, "+
                "sum(getpremiend(b.entity_id,coalesce(a.nd_hfee,0),b.hfee_amount*-1)) as nd_hfee, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate),((coalesce(b.comm_amount,0))*a.ccy_rate)*-1)) as komisi, "+
                "sum(getpremiend(b.entity_id,((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)),b.broker_amount*-1)) as brok, "+
                "sum(getpremiend(b.entity_id,(coalesce(a.nd_taxcomm1,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm2,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm3,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm4,0)*a.ccy_rate),0)) as tax "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                //"	inner join ent_master f on f.ent_id = a.prod_id" +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id"
                );
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stCompTypeID!=null) {
            sqa.addClause("e.ref1 = ?");
            sqa.addPar(stCompTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by e.ent_id,e.ent_name order by e.ent_id  ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPP_COMPANY100() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("c.cc_code,c.description,e.ent_id,e.ent_name as cust_name, "+
                " sum(coalesce(a.premi_total*a.ccy_rate,0)) as premi_amt, "+
                " sum(coalesce(a.nd_pcost*a.ccy_rate,0)) as nd_pcost, "+
                " sum(coalesce(a.nd_sfee*a.ccy_rate,0)) as nd_sfee, "+
                " sum((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))) as diskon_premi, "+
                " sum(coalesce(a.nd_hfee*a.ccy_rate,0)) as nd_hfee, "+
                " sum((coalesce(a.nd_comm1*a.ccy_rate,0)) + (coalesce(a.nd_comm2*a.ccy_rate,0))) as nd_comm1, "+
                " sum((coalesce(a.nd_comm3*a.ccy_rate,0)) + (coalesce(a.nd_comm4*a.ccy_rate,0))) as nd_comm3, "+
                " sum((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))) as brok, "+
                " sum((coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0))) as nd_feebase, "+
                " sum((coalesce(a.nd_taxcomm1*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm2*a.ccy_rate,0))) as nd_taxcomm1, "+
                " sum((coalesce(a.nd_taxcomm3*a.ccy_rate,0)) + (coalesce(a.nd_taxcomm4*a.ccy_rate,0))) as nd_taxcomm3 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                //"	inner join ent_master f on f.ent_id = a.prod_id " +
                "	inner join gl_cost_center c on c.cc_code = a.cc_code"
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stCompTypeID!=null) {
            sqa.addClause("e.ref1 = ?");
            sqa.addPar(stCompTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by c.cc_code,e.ent_id,e.ent_name,c.description,a.cc_code order by a.cc_code,e.ent_id  ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList RPP_COMPANY100() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("e.ent_name as cust_name, "+
                " sum(coalesce(a.premi_total*a.ccy_rate,0)) as premi_amt, "+
                " sum(coalesce(a.nd_pcost*a.ccy_rate,0)) as nd_pcost, "+
                " sum(coalesce(a.nd_sfee*a.ccy_rate,0)) as nd_sfee, "+
                " sum((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)) as diskon_premi, "+
                " sum(coalesce(a.nd_hfee,0)) as nd_hfee, "+
                " sum((coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate)) as komisi, "+
                " sum((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)) as brok, "+
                " sum((coalesce(a.nd_taxcomm1,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm2,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm3,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm4,0)*a.ccy_rate)) as tax "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id"//+
                //"	inner join ent_master f on f.ent_id = a.prod_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stCompTypeID!=null) {
            sqa.addClause("e.ref1 = ?");
            sqa.addPar(stCompTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by e.ent_id,e.ent_name order by e.ent_id  ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList RPP_COMM() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.create_date,a.policy_date,a.pol_no,b.entity_id as entity_id, "+
                "getname(a.ins_policy_type_grp_id in (7,8),a.ref5,a.cust_name) as cust_name, "+
                "getpremiend(b.entity_id,coalesce(a.premi_total,0)*a.ccy_rate,coalesce(b.premi_amt,0)*a.ccy_rate*-1) as premi_total,"+
                "getpremiend(b.entity_id,coalesce(a.nd_pcost,0)*a.ccy_rate,0) as nd_pcost, "+
                "getpremiend(b.entity_id,coalesce(a.nd_sfee,0)*a.ccy_rate,0) as nd_sfee, "+
                "getpremiend(b.entity_id,(coalesce(a.nd_disc1*a.ccy_rate,0) + (coalesce(a.nd_disc2*a.ccy_rate,0))),(((coalesce(b.disc_amount,0))*a.ccy_rate)*-1)) as nd_disc1,"+
                "getpremiend(b.entity_id,(coalesce(a.nd_comm1*a.ccy_rate,0)),((coalesce(b.comm_amount*a.ccy_rate,0))*-1)) as nd_comm1,"+
                "getpremiend(b.entity_id,coalesce(a.nd_comm2*a.ccy_rate,0),0) as nd_comm2,"+
                "getpremiend(b.entity_id,coalesce(a.nd_comm3*a.ccy_rate,0),0) as nd_comm3,"+
                "getpremiend(b.entity_id,coalesce(a.nd_comm4*a.ccy_rate,0),0) as nd_comm4,"+
                "getpremiend(b.entity_id,((coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0))),0) as nd_feebase1," +
                "getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),((b.hfee_amount*a.ccy_rate)*-1)) as nd_hfee,"+
                "getpremiend(b.entity_id,coalesce(a.nd_brok1*a.ccy_rate,0),((b.broker_amount*a.ccy_rate)*-1)) as nd_brok1,"+
                "getpremiend(b.entity_id,coalesce(a.nd_brok2*a.ccy_rate,0),0) as nd_brok2 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id"
                );
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "      a.pol_no,b.entity_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        //HashDTO.class
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPPCOMM() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.pol_id::text,a.create_date,a.policy_date,a.create_who,a.prod_id,a.pol_no,b.entity_id as entity_id,a.ref1, "+
                "getname(a.ins_policy_type_grp_id in (7,8),a.ref5,a.cust_name) as cust_name, "+
                "getpremiend(b.entity_id,coalesce(a.premi_total*a.ccy_rate,0),coalesce(b.premi_amt*a.ccy_rate,0)*-1) as premi_total,"+
                "getpremiend(b.entity_id,coalesce(a.nd_pcost*a.ccy_rate,0),0) as nd_pcost, "+
                "getpremiend(b.entity_id,coalesce(a.nd_sfee*a.ccy_rate,0),0) as nd_sfee, "+
                "getpremiend(b.entity_id,(coalesce(a.nd_disc1*a.ccy_rate,0) + (coalesce(a.nd_disc2*a.ccy_rate,0))),(((coalesce(b.disc_amount,0))*a.ccy_rate)*-1)) as nd_disc1,"+
                "getpremiend(b.entity_id,(coalesce(a.nd_comm1*a.ccy_rate,0)),((coalesce(b.comm_amount*a.ccy_rate,0))*-1)) as nd_comm1,"+
                "getpremiend(b.entity_id,coalesce(a.nd_comm2*a.ccy_rate,0),0) as nd_comm2,"+
                "getpremiend(b.entity_id,coalesce(a.nd_comm3*a.ccy_rate,0),0) as nd_comm3,"+
                "getpremiend(b.entity_id,coalesce(a.nd_comm4*a.ccy_rate,0),0) as nd_comm4,"+
                "getpremiend(b.entity_id,coalesce(a.nd_feebase1*a.ccy_rate,0),0) as nd_feebase1," +
                "getpremiend(b.entity_id,coalesce(a.nd_feebase2*a.ccy_rate,0),0) as nd_feebase2," +
                "getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),coalesce(b.hfee_amount*a.ccy_rate,0)*-1) as nd_hfee,"+
                "getpremiend(b.entity_id,coalesce(a.nd_brok1*a.ccy_rate,0),coalesce(b.broker_amount*a.ccy_rate,0)*-1) as nd_brok1,"+
                "getpremiend(b.entity_id,coalesce(a.nd_brok2*a.ccy_rate,0),0) as nd_brok2, "+
                "getpremiend(b.entity_id,coalesce(a.nd_taxcomm1*a.ccy_rate,0),0) as nd_taxcomm1,"+
                "getpremiend(b.entity_id,coalesce(a.nd_taxcomm2*a.ccy_rate,0),0) as nd_taxcomm2,"+
                "getpremiend(b.entity_id,coalesce(a.nd_taxcomm3*a.ccy_rate,0),0) as nd_taxcomm3,"+
                "getpremiend(b.entity_id,coalesce(a.nd_taxcomm4*a.ccy_rate,0),0) as nd_taxcomm4 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_coins b on b.policy_id = a.pol_id"
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "      a.pol_no,b.entity_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RPPCOMM100() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.cc_code,b.description,a.pol_id::text,a.create_date,a.policy_date,a.create_who,a.prod_id,a.pol_no,a.ref1, "+
                "getname(a.ins_policy_type_grp_id in (7,8),a.ref5,a.cust_name) as cust_name,a.ccy_rate, "+
                "coalesce(a.premi_total*a.ccy_rate,0) as premi_total,"+
                "coalesce(a.nd_pcost*a.ccy_rate,0) as nd_pcost, "+
                "coalesce(a.nd_sfee*a.ccy_rate,0) as nd_sfee, "+
                "(coalesce(a.nd_disc1*a.ccy_rate,0) + (coalesce(a.nd_disc2*a.ccy_rate,0))) as nd_disc1,"+
                "coalesce(a.nd_comm1*a.ccy_rate,0) as nd_comm1,"+
                "coalesce(a.nd_comm2*a.ccy_rate,0) as nd_comm2,"+
                "coalesce(a.nd_comm3*a.ccy_rate,0) as nd_comm3,"+
                "coalesce(a.nd_comm4*a.ccy_rate,0) as nd_comm4,"+
                "coalesce(a.nd_feebase1*a.ccy_rate,0) as nd_feebase1,"+
                "coalesce(a.nd_feebase2*a.ccy_rate,0) as nd_feebase2,"+
                "coalesce(a.nd_hfee*a.ccy_rate,0) as nd_hfee,"+
                "coalesce(a.nd_brok1*a.ccy_rate,0) as nd_brok1,"+
                "coalesce(a.nd_brok2*a.ccy_rate,0) as nd_brok2, "+
                "coalesce(a.nd_taxcomm1*a.ccy_rate,0) as nd_taxcomm1,"+
                "coalesce(a.nd_taxcomm2*a.ccy_rate,0) as nd_taxcomm2,"+
                "coalesce(a.nd_taxcomm3*a.ccy_rate,0) as nd_taxcomm3,"+
                "coalesce(a.nd_taxcomm4*a.ccy_rate,0) as nd_taxcomm4 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id "+
                "	left join gl_cost_center b on b.cc_code = a.cc_code "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        sqa.addClause("a.effective_flag='Y'");
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        final String sql = sqa.getSQL()+"   order by a.cc_code,a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList OUTSTANDINGPREMITEMP() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "b.cc_code,b.pol_id,b.policy_date,b.pol_no,b.ref6,b.cust_name,b.ccy_rate," +
                "sum(getpremi2(d.category = 'PREMIG', c.amount)) as premi_total," +
                "sum(getpremi2(d.category = 'STAMPDUTY', c.amount)) as nd_sfee," +
                "sum(getpremi2(d.category = 'PCOST', c.amount)) as nd_pcost," +
                "sum(getpremi2(d.category = 'COMMISSION', c.amount)) as nd_comm1," +
                "sum(getpremi2(d.category = 'TAXCOMM', c.amount)) as nd_taxcomm1," +
                "sum(getpremi2(d.category = 'HFEE', c.amount)) as nd_hfee," +
                "sum(getpremi2(d.category = 'TAXHFEE', c.amount)) as nd_taxhfee," +
                "sum(getpremi2(d.category = 'BROKERAGE', c.amount)) as nd_brok1," +
                "sum(getpremi2(d.category = 'TAXBROK', c.amount)) as nd_taxbrok1," +
                "sum(getpremi2(d.category = 'DISC', c.amount)) as nd_disc1,coalesce(sum(c.amount_settled),0) as premi_paid "
                );
        
        sqa.addQuery(
                " from ar_invoice a " +
                " inner join ins_policy b on b.pol_id = a.attr_pol_id" +
                " inner join ar_invoice_details c on c.ar_invoice_id = a.ar_invoice_id" +
                " left join ar_trx_line d on d.ar_trx_line_id = c.ar_trx_line_id " +
                " left join ent_master e on e.ent_id = b.entity_id "
                );
        
        sqa.addClause("b.status IN ('POLICY','RENEWAL')");
        sqa.addClause("b.effective_flag = 'Y'");
        sqa.addClause("a.invoice_type = 'AR'");
        sqa.addClause("a.ar_trx_type_id in (5,6,7)");
        sqa.addClause("a.amount - coalesce(a.amount_settled,0) > 0");
        sqa.addClause("b.ref6 is not null");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL() +" group by b.cc_code,b.pol_id,b.policy_date,b.ref6,b.pol_no,b.cust_name,b.ccy_rate,a.ar_invoice_id " +
                " order by b.cc_code,b.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList OUTSTANDINGPREMI() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "b.cc_code,b.pol_id,b.policy_date,b.pol_no,b.cust_name,b.ccy_rate," +
                "sum(getpremi2(d.category = 'PREMIG', c.amount)) as premi_total," +
                "sum(getpremi2(d.category = 'STAMPDUTY', c.amount)) as nd_sfee," +
                "sum(getpremi2(d.category = 'PCOST', c.amount)) as nd_pcost," +
                "sum(getpremi2(d.category = 'COMMISSION', c.amount)) as nd_comm1," +
                "sum(getpremi2(d.category = 'TAXCOMM', c.amount)) as nd_taxcomm1," +
                "sum(getpremi2(d.category = 'HFEE', c.amount)) as nd_hfee," +
                "sum(getpremi2(d.category = 'TAXHFEE', c.amount)) as nd_taxhfee," +
                "sum(getpremi2(d.category = 'BROKERAGE', c.amount)) as nd_brok1," +
                "sum(getpremi2(d.category = 'TAXBROK', c.amount)) as nd_taxbrok1," +
                "sum(getpremi2(d.category = 'DISC', c.amount)) as nd_disc1,coalesce(sum(c.amount_settled),0) as premi_paid "
                );
        
        sqa.addQuery(
                " from ar_invoice a " +
                " inner join ins_policy b on b.pol_id = a.attr_pol_id" +
                " inner join ar_invoice_details c on c.ar_invoice_id = a.ar_invoice_id" +
                " left join ar_trx_line d on d.ar_trx_line_id = c.ar_trx_line_id " +
                " left join ent_master e on e.ent_id = b.entity_id "
                );
        
        sqa.addClause("b.status IN ('POLICY','RENEWAL','ENDORSE')");
        sqa.addClause("b.effective_flag = 'Y'");
        sqa.addClause("a.invoice_type = 'AR'");
        sqa.addClause("a.ar_trx_type_id in (5,6,7)");
        sqa.addClause("a.amount - coalesce(a.amount_settled,0) > 0");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL() +" group by b.cc_code,b.pol_id,b.policy_date,b.pol_no,b.cust_name,b.ccy_rate,a.ar_invoice_id " +
                " order by b.cc_code,b.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList OUTSTANDINGCOMM() throws Exception {
        final boolean FLT_OUTS_COMM = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_COMM"));
        final boolean FLT_OUTS_TAX = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_TAX"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "b.cc_code,b.pol_id,b.policy_date,b.pol_no,b.cust_name,b.ccy_rate," +
                "round(b.premi_total,0) as premi_total,round(coalesce(b.nd_pcost,0),0) as nd_pcost,round(coalesce(b.nd_sfee,0),0) as nd_sfee," +
                "(round(coalesce(b.nd_disc1,0),0) + round(coalesce(b.nd_disc2,0),0)) as nd_disc1," +
                "(round(coalesce(b.nd_comm1,0),0) + round(coalesce(b.nd_comm2,0),0) + round(coalesce(b.nd_comm3,0),0) + round(coalesce(b.nd_comm4,0),0)) as nd_comm1," +
                "(round(coalesce(b.nd_brok1,0),0) + round(coalesce(b.nd_brok2,0),0)) as nd_brok1," +
                "(round(coalesce(b.nd_hfee,0),0)) as nd_hfee," +
                "(round(coalesce(b.nd_taxcomm1,0),0) + round(coalesce(b.nd_taxcomm2,0),0) + round(coalesce(b.nd_taxcomm3,0),0) + round(coalesce(b.nd_taxcomm4,0),0)) as nd_taxcomm1," +
                "(round(coalesce(b.nd_taxbrok1,0),0) + round(coalesce(b.nd_taxbrok2,0),0)) as nd_taxbrok1," +
                "(round(coalesce(b.nd_taxhfee,0),0)) as nd_taxhfee," +
                "round(b.premi_netto,0) as premi_netto,round(b.total_due,0) as total_due,round(coalesce(a.amount_settled,0),0) as ap_comis_p"
                );
        
        sqa.addQuery(
                " from ar_invoice a " +
                " left join ins_policy b on b.pol_id = a.pol_id "
                );
        
        sqa.addClause("b.status IN ('POLICY','RENEWAL')");
        sqa.addClause("b.effective_flag = 'Y'");
        sqa.addClause("a.invoice_type = 'AP'");
        sqa.addClause("a.ar_trx_type_id = 11");
        sqa.addClause("a.amount - coalesce(a.amount_settled,0) > 0");
        
        if (FLT_OUTS_COMM) {
            sqa.addClause("substr(a.refid2,0,4) = 'POL'");
        }
        
        if (FLT_OUTS_TAX) {
            sqa.addClause("substr(a.refid2,0,4) = 'TAX'");
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        final String sql = sqa.getSQL() +" order by b.cc_code,b.pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_LAPKEU() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                " a.pol_id,a.pol_no,substr(a.policy_date::text,6,2) as month,a.cc_code,c.description as cabang,d.description as jenis,a.pol_type_id," +
                " sum(getpremiend(b.entity_id,coalesce(a.premi_total*a.ccy_rate,0),coalesce(b.premi_amt*a.ccy_rate,0)*-1)) as premi_total, " +
                " sum(getpremiend(b.entity_id,coalesce(a.nd_pcost*a.ccy_rate,0),0)) as nd_pcost, " +
                " sum(getpremiend(b.entity_id,coalesce(a.nd_sfee*a.ccy_rate,0),0)) as nd_sfee, " +
                " sum(getpremiend(b.entity_id,((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))),(coalesce(b.disc_amount*a.ccy_rate,0))*-1)) as nd_disc1, " +
                " sum(getpremiend(b.entity_id,((coalesce(a.nd_feebase1*a.ccy_rate,0)) + (coalesce(a.nd_feebase2*a.ccy_rate,0))),0)) as nd_feebase," +
                " sum(getpremiend(b.entity_id,((coalesce(a.nd_brok1*a.ccy_rate,0)) + (coalesce(a.nd_brok2*a.ccy_rate,0))),(coalesce(b.broker_amount*a.ccy_rate,0))*-1)) as nd_brok1," +
                " sum(getpremiend(b.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),coalesce(b.hfee_amount*a.ccy_rate,0)*-1)) as nd_hfee, " +
                " (select sum(x.amount)  from ins_pol_items x " +
                " where a.pol_id = x.pol_id and x.ins_item_id in (11,18,25,32) and tax_code = 1) as comm21, " +
                " (select sum(x.amount)  from ins_pol_items x  " +
                " where a.pol_id = x.pol_id and x.ins_item_id in (11,18,25,32) and tax_code = 2) as comm23,  " +
                " (select sum(x.tax_amount)  from ins_pol_items x " +
                " where a.pol_id = x.pol_id and x.ins_item_id in (11,18,25,32) and tax_code = 1) as tax_comm21, " +
                " (select sum(x.tax_amount)  from ins_pol_items x " +
                " where a.pol_id = x.pol_id and x.ins_item_id in (11,18,25,32) and tax_code = 2) as tax_comm23 "
                );
        
        sqa.addQuery(
                " from ins_policy a " +
                " inner join ins_pol_coins b on b.policy_id = a.pol_id " +
                " inner join gl_cost_center c on c.cc_code = a.cc_code " +
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id " +
                " left join ent_master e on e.ent_id = a.entity_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        sqa.addClause("a.effective_flag='Y'");
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = " select month,cc_code as kode,cabang," +
                " sum(coalesce(premi_total,0)) as premi,sum(coalesce(nd_disc1,0)) as diskon," +
                "sum(coalesce(nd_feebase,0)) as feebase, sum(coalesce((nd_hfee+nd_brok1),0)) as bfee_hfee," +
                " sum(coalesce(comm21,0)) as comm21,sum(coalesce(comm23,0)) as comm23, " +
                " sum(coalesce(tax_comm21,0)) as tax_comm21,sum(coalesce(tax_comm23,0)) as tax_comm23 " +
                " from ( "+ sqa.getSQL() +" group by a.pol_id,a.pol_no,substr(a.policy_date::text,6,2),a.cc_code,c.description,d.description,a.pol_type_id " +
                " ) x group by month,cc_code,cabang order by month,cc_code ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_LAPKEU()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("bulan");
            row0.createCell(1).setCellValue("kode");
            row0.createCell(2).setCellValue("cabang");
            row0.createCell(3).setCellValue("premi");
            row0.createCell(4).setCellValue("diskon");
            row0.createCell(5).setCellValue("feebase");
            row0.createCell(6).setCellValue("komisi 23");
            row0.createCell(7).setCellValue("komisi 21");
            row0.createCell(8).setCellValue("Pajak Komisi 23");
            row0.createCell(9).setCellValue("Pajak Komisi 21");
            
            BigDecimal comm = BDUtil.add(h.getFieldValueByFieldNameBD("comm23"), h.getFieldValueByFieldNameBD("bfee_hfee"));
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("month"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("kode"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("cabang"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("premi").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("diskon").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("feebase").doubleValue());
            row.createCell(6).setCellValue(comm.doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("comm21").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("tax_comm23").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("tax_comm21").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList PREMIPAID() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "b.create_who,d.cc_code,d.policy_date,d.cust_name,d.ccy_rate," +
                "d.pol_no,round(d.premi_total,0) as premi_total,round(d.premi_netto,0) as premi_netto,round(d.total_due,0) as total_due," +
                "round(coalesce(d.nd_pcost,0),0) as nd_pcost,round(coalesce(d.nd_sfee,0),0) as nd_sfee, "+
                "(round(coalesce(d.nd_disc1,0),0) + round(coalesce(d.nd_disc2,0),0)) as nd_disc1," +
                "(round(coalesce(d.nd_comm1,0),0) + round(coalesce(d.nd_comm2,0),0) + round(coalesce(d.nd_comm3,0),0) + round(coalesce(d.nd_comm4,0),0)) as nd_comm1," +
                "(round(coalesce(d.nd_brok1,0),0) + round(coalesce(d.nd_brok2,0),0)) as nd_brok1," +
                "(round(coalesce(d.nd_hfee,0),0)) as nd_hfee," +
                "(round(coalesce(d.nd_taxcomm1,0),0) + round(coalesce(d.nd_taxcomm2,0),0) + round(coalesce(d.nd_taxcomm3,0),0) + round(coalesce(d.nd_taxcomm4,0),0)) as nd_taxcomm1," +
                "(round(coalesce(d.nd_taxbrok1,0),0) + round(coalesce(d.nd_taxbrok2,0),0)) as nd_taxbrok1," +
                "(round(coalesce(d.nd_taxhfee,0),0)) as tax_hfee," +
                "sum(getpremi2(e.category = 'PREMIG',round(a.amount,0))) as premi_paid," +
                "sum(getpremi2(e.category = 'COMMISSION' and a.f_comission = 'Y',round(a.amount,0))) as ap_comis_p," +
                "sum(getpremi2(e.category like 'TAX%' and a.f_comission = 'Y',round(a.amount,0))) as ap_tax_p"
                );
        
        sqa.addQuery(
                "from ar_invoice_details a " +
                "inner join ar_receipt_lines b on b.ar_invoice_dtl_id = a.ar_invoice_dtl_id and b.ar_invoice_dtl_root_id is not null " +
                "left join ar_invoice c on c.ar_invoice_id = a.ar_invoice_id " +
                "left join ins_policy d on d.pol_id = c.attr_pol_id " +
                "left join ar_trx_line e on e.ar_trx_line_id = a.ar_trx_line_id " +
                "left join ar_receipt f on f.ar_receipt_id = b.receipt_id "+
                "left join ent_master g on g.ent_id = d.entity_id "
                );
        
        sqa.addClause("f.status = 'POST'");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (paymentDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.receipt_date) >= ?");
            sqa.addPar(paymentDateFrom);
        }
        
        if (paymentDateTo!=null) {
            sqa.addClause("date_trunc('day',b.receipt_date) <= ?");
            sqa.addPar(paymentDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("d.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("d.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("d.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("d.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("d.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("g.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql =  sqa.getSQL() +
                "group by b.create_who,d.policy_date,d.cust_name,d.cc_code,d.ccy_rate," +
                "d.pol_no,d.premi_total,d.premi_netto,d.total_due,d.nd_pcost,d.nd_sfee,d.nd_comm1,d.nd_comm2,d.nd_comm3,d.nd_comm4,d.nd_disc1,d.nd_disc2,d.nd_brok1,d.nd_brok2,d.nd_hfee," +
                "d.nd_taxcomm1,d.nd_taxcomm2,d.nd_taxcomm3,d.nd_taxcomm4,d.nd_taxbrok1,d.nd_taxbrok2,d.nd_taxhfee " +
                "order by d.cc_code,d.pol_no ";
        
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList PREMIRECEIPT() throws Exception {
        final boolean FLT_PAID_PREMI = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_PREMI"));
        final boolean FLT_PAID_COMM = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_COMM"));
        final boolean FLT_PAID_TAX = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_TAX"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "f.create_who,d.cc_code,b.receipt_no as description,b.receipt_date as period_start,d.policy_date,d.cust_name,d.ccy_rate," +
                "d.pol_no,round(d.premi_total,0) as premi_total,round(d.premi_netto,0) as premi_netto,round(d.total_due,0) as total_due," +
                "round(coalesce(d.nd_pcost,0),0) as nd_pcost,round(coalesce(d.nd_sfee,0),0) as nd_sfee, "+
                "(round(coalesce(d.nd_disc1,0),0) + round(coalesce(d.nd_disc2,0),0)) as nd_disc1," +
                "(round(coalesce(d.nd_comm1,0),0) + round(coalesce(d.nd_comm2,0),0) + round(coalesce(d.nd_comm3,0),0) + round(coalesce(d.nd_comm4,0),0)) as nd_comm1," +
                "(round(coalesce(d.nd_brok1,0),0) + round(coalesce(d.nd_brok2,0),0)) as nd_brok1," +
                "(round(coalesce(d.nd_hfee,0),0)) as nd_hfee," +
                "(round(coalesce(d.nd_taxcomm1,0),0) + round(coalesce(d.nd_taxcomm2,0),0) + round(coalesce(d.nd_taxcomm3,0),0) + round(coalesce(d.nd_taxcomm4,0),0)) as nd_taxcomm1," +
                "(round(coalesce(d.nd_taxbrok1,0),0) + round(coalesce(d.nd_taxbrok2,0),0)) as nd_taxbrok1," +
                "(round(coalesce(d.nd_taxhfee,0),0)) as nd_taxhfee," +
                "sum(getpremi2(e.category = 'PREMIG',round(a.amount,0))) as premi_paid," +
                "sum(getpremi2(e.category = 'COMMISSION' and a.f_comission = 'Y',round(a.amount,0))) as ap_comis_p," +
                "sum(getpremi2(e.category like 'TAX%' and a.f_comission = 'Y',round(a.amount,0))) as ap_tax_p"
                );
        
        sqa.addQuery(
                "from ar_invoice_details a " +
                "inner join ar_receipt_lines b on b.ar_invoice_dtl_id = a.ar_invoice_dtl_id and b.ar_invoice_dtl_root_id is not null " +
                "left join ar_invoice c on c.ar_invoice_id = a.ar_invoice_id " +
                "left join ins_policy d on d.pol_id = c.attr_pol_id " +
                "left join ar_trx_line e on e.ar_trx_line_id = a.ar_trx_line_id " +
                "left join ar_receipt f on f.ar_receipt_id = b.receipt_id "+
                "left join ent_master g on g.ent_id = d.entity_id "
                );
        
        sqa.addClause("f.status = 'POST'");
        
        if (FLT_PAID_PREMI) {
            sqa.addClause("f.ar_settlement_id = 1");
        }
        
        if (FLT_PAID_COMM) {
            sqa.addClause("f.ar_settlement_id = 2");
        }
        
        if (FLT_PAID_TAX) {
            sqa.addClause("f.ar_settlement_id = 8");
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (paymentDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.receipt_date) >= ?");
            sqa.addPar(paymentDateFrom);
        }
        
        if (paymentDateTo!=null) {
            sqa.addClause("date_trunc('day',b.receipt_date) <= ?");
            sqa.addPar(paymentDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("d.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("d.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("d.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("d.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stReceiptNo!=null) {
            sqa.addClause("b.receipt_no like ?");
            sqa.addPar('%'+stReceiptNo+'%');
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("g.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if(stTax!=null) {
            if(stTax.equalsIgnoreCase("1")){
                sqa.addClause("e.ar_trx_line_id in (14,17,20,30,33,36,46,49,52)");
            } else {
                sqa.addClause("e.ar_trx_line_id in (15,18,21,31,34,37,47,50,53)");
            }
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("d.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        
        final String sql =  sqa.getSQL() +
                "group by f.create_who,b.receipt_date,b.receipt_no,d.policy_date,d.cust_name,d.cc_code,d.ccy_rate," +
                "d.pol_no,d.premi_total,d.premi_netto,d.total_due,d.nd_pcost,d.nd_sfee,d.nd_comm1,d.nd_comm2,d.nd_comm3,d.nd_comm4,d.nd_disc1,d.nd_disc2,d.nd_brok1,d.nd_brok2,d.nd_hfee," +
                "d.nd_taxcomm1,d.nd_taxcomm2,d.nd_taxcomm3,d.nd_taxcomm4,d.nd_taxbrok1,d.nd_taxbrok2,d.nd_taxhfee " +
                "order by b.receipt_date,d.pol_no ";
        
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_OS_PREMI() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                " distinct a.entity_id,a.pol_no,a.cust_name,a.policy_date,coalesce(a.premi_total,0) as premi_total,coalesce(a.premi_total_adisc,0) as premi_total_adisc,"+
                " coalesce(a.total_fee,0) as total_fee,coalesce(a.total_due,0) as total_due,coalesce(a.premi_netto,0) as premi_netto, "+
                " (coalesce ((select sum(amount_settled) from ar_invoice where ar_invoice.refid0='PREMI/'||a.pol_id and commit_flag='Y'),0)) as premi_paid,"+
              " (select coalesce(sum(getpremi2(q.ins_item_cat='COMM',y.amount)),0) "+
                "	from ins_policy x  "+
                "	inner join ins_pol_items y on y.pol_id = x.pol_id "+
                "	inner join ins_items q on q.ins_item_id = y.ins_item_id "+
                "	where y.pol_id=a.pol_id) as komisi, "+
                " (select coalesce(sum(y.tax_amount),0) "+
                " 	from ins_policy x "+
                " 	inner join ins_pol_items y on y.pol_id = x.pol_id "+
                " 	where y.pol_id=a.pol_id and y.item_class='PRM' and y.tax_code is not null) as tax ");
        
        sqa.addQuery(
                " from ins_policy a "+
                " left join ent_master c on c.ent_id = a.entity_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL')");
        
        sqa.addClause("a.effective_flag = 'Y'");
        
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("c.ent_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("d.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql ="select  entity_id,pol_no,cust_name,policy_date,premi_total,(premi_total-premi_total_adisc) as diskon,"+
                "total_fee as biaya_adm,total_due as tag_netto,"+
                "(komisi-tax) as total_komisi,tax as pajak,premi_netto,premi_paid as premi_dibayar,ap_comis_p as komisi_dibayar,"+
                "ap_brok_p as broker_dibayar,(premi_netto-premi_paid) as out_premi,"+
                "(ap_comis-ap_comis_p) as out_comm,(ap_brok-ap_brok_p) as out_broker from ( "+sqa.getSQL()+" ) x "+
                " where premi_paid < premi_netto "+
                "order by entity_id,pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_OS_PREMI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Entity_ID");
            row0.createCell(1).setCellValue("Nomor Polis");
            row0.createCell(2).setCellValue("Nama Tertanggung");
            row0.createCell(3).setCellValue("Tanggal Polis");
            row0.createCell(4).setCellValue("Premi Total");
            row0.createCell(5).setCellValue("Diskon");
            row0.createCell(6).setCellValue("Biaya Adm");
            row0.createCell(7).setCellValue("Tagihan Netto");
            row0.createCell(8).setCellValue("Total Komisi");
            row0.createCell(9).setCellValue("Pajak");
            row0.createCell(10).setCellValue("Premi Netto");
            row0.createCell(11).setCellValue("Premi Dibayar");
            row0.createCell(12).setCellValue("Komisi Dibayar");
            row0.createCell(13).setCellValue("Brokerage Dibayar");
            row0.createCell(14).setCellValue("Outstanding Premi");
            row0.createCell(15).setCellValue("Outstanding Komisi");
            row0.createCell(16).setCellValue("Outstanding Brokerage");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(String.valueOf(h.getFieldValueByFieldNameBD("entity_id")));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("diskon").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("biaya_adm").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("tag_netto").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("total_komisi").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("pajak").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("premi_netto").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("premi_dibayar").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("komisi_dibayar").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("broker_dibayar").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("out_premi").doubleValue());
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("out_comm").doubleValue());
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("out_broker").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList RISK_CONTROL() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.pol_no,a.period_start,a.period_end,a.ccy,a.insured_amount,b.insured_amount as insured_amount_e,b.premi_total as premi_total,"+
                "b.ref9d as kode_pos,getpostcode(a.pol_type_id,b.ref7,coalesce(null,'')) as kode_acc,"+
                "(	select sum(getkoas(z.ins_tsi_cat_id=6,z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as total_due, "+
                "(	select sum(getkoas(z.ins_tsi_cat_id in (39,40),z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as total_fee, "+
                "(	select sum(getkoas(z.ins_tsi_cat_id in (56,57,58),z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as premi_rate, "+
                "(	select sum(getkoas(z.ins_tsi_cat_id not in (6,39,40,56,57,58),z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as premi_netto, "+
                "sum(checkreas(j.treaty_type='BPDAN',i.premi_amount)) as premi_bpdan, "+
                "sum(checkreas(j.treaty_type='PARK',i.premi_amount)) as premi_park, "+
                "sum(checkreas(j.treaty_type='OR',i.premi_amount)) as premi_or, "+
                "sum(checkreas(j.treaty_type='SPL',i.premi_amount)) as premi_spl, "+
                "sum(checkreas(j.treaty_type='FAC',i.premi_amount)) as premi_fac"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join  ins_zone_limit d on d.zone_id = getzone3(a.pol_type_id in (1,81), b.ref7)::bigint "+
                "left join  ins_risk_cat e on e.ins_risk_cat_id = b.ins_risk_cat_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(periodEndFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(periodEndFrom);
        }
        
        if(periodEndTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(periodEndTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if (stPostCode!=null) {
            sqa.addClause("b.ref9 = ?");
            sqa.addPar(stPostCode);
        }
        
        if (stPostCodeDesc2!=null) {
            sqa.addClause("b.ref9d = ?");
            sqa.addPar(stPostCodeDesc2);
        }
        
        if (stZoneCode!=null) {
            sqa.addClause("b.ref7 = ?");
            sqa.addPar(stZoneCode);
        }
        
        if (stZoneEquakeName!=null) {
            sqa.addClause("b.ref2d = ?");
            sqa.addPar(stZoneEquakeName);
        }
        
        if (stRiskCode!=null) {
            sqa.addClause("e.ins_risk_cat_code = ?");
            sqa.addPar(stRiskCode);
        }
        
        
        final String sql = sqa.getSQL()+" group by a.pol_no,a.period_start,a.period_end,a.ccy,a.insured_amount,b.insured_amount,b.premi_total,b.ins_pol_obj_id,a.pol_type_id,b.ref7,b.ref9d "+
                "order by a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_MAIPARK() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	coalesce(null,'') as ref1,coalesce(null,'') as ref2,a.pol_no as nopol,coalesce(null,'') as ref4,coalesce(null,'') as ref5,c.risk_class as risk_no,a.cust_name,a.cust_address as alamat,c.ref8 as zona_gempa,"+
                "	coalesce(null,'') as ref10,coalesce(null,'') as ref11,coalesce(null,'') as ref12,c.ref9d as postal_code,m.ins_risk_cat_code as occupation_code,c.ref4 as build_cat,"+
                "	c.ref3 as class_construction,c.ref7 as year_build,coalesce(null,'') as ref18,a.period_start,a.period_end,a.ccy,"+
                "	sum(getkoas(d.ins_tsi_cat_id=6,d.insured_amount)) as building,"+
                "	sum(getkoas(d.ins_tsi_cat_id=39,d.insured_amount)) as machine,"+
                "	sum(getkoas(d.ins_tsi_cat_id=56,d.insured_amount)) as stock,"+
                "	sum(getkoas(d.ins_tsi_cat_id not in (6,39,56),d.insured_amount)) as other,"+
                "	c.insured_amount as total_tsi,"+
                "	a.cover_type_code as coins_status,(round(a.share_pct,2)||' %') as coins_share,coalesce(null,'') as ref29,a.status as status_policy,coalesce(null,'') as ref31,"+
                "	a.insured_amount as tsi,a.premi_total as premi,"+
                "	coalesce(null,'') as ref34,coalesce(null,'') as ref35,coalesce(null,'') as ref36,coalesce(null,'') as ref37,coalesce(null,'') as ref38,coalesce(null,'') as ref39,coalesce(null,'') as ref40,coalesce(null,'') as ref41,coalesce(null,'') as ref42,"+
                "	substr(a.period_start::text,1,4) as under_year,coalesce(null,'') as ref44"
                );
        
        sqa.addQuery("from ins_policy a "+
                "	left join ent_master b on b.ent_id = a.entity_id "+
                "	inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "	inner join ins_pol_tsi d on d.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "	left join ins_risk_cat m on m.ins_risk_cat_id = c.ins_risk_cat_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause(" a.pol_type_id = 19");
        
        sqa.addClause(" j.treaty_type = 'PARK'");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.effective_flag = 'Y'");
        }
        
        if (Tools.isNo(stIndex)) {
            sqa.addClause("a.effective_flag = 'N'");
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+" group by a.pol_no,a.cust_name,a.cust_address,a.period_start,a.period_end,a.ccy,a.premi_total,c.ins_pol_obj_id,a.policy_date, "+
                "c.insured_amount,a.insured_amount,i.premi_amount,c.ref9d,m.ins_risk_cat_code,c.risk_class,c.ref4,c.ref3,c.ref7,c.ref8,c.ref10, "+
                "a.cover_type_code,a.share_pct,a.status "+
                "order by a.policy_date,a.pol_no,c.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    
    private DTOList defaultQuery() throws Exception {
        final boolean joinObject = "Y".equalsIgnoreCase((String) refPropMap.get("JOIN_OBJECT"));
        final boolean joinObject2 = "Y".equalsIgnoreCase((String) refPropMap.get("JOIN_OBJECT2"));
        final boolean joinRI = "Y".equalsIgnoreCase((String) refPropMap.get("JOIN_RI"));
        final boolean TRANSPOSE_RI_PREMI = "Y".equalsIgnoreCase((String) refPropMap.get("TRANSPOSE_RI_PREMI"));
        final boolean TRANSPOSE_RI_CLAIM = "Y".equalsIgnoreCase((String) refPropMap.get("TRANSPOSE_RI_CLAIM"));
        final boolean TRANSPOSE_RI_TSI = "Y".equalsIgnoreCase((String) refPropMap.get("TRANSPOSE_RI_TSI"));
        final boolean USE_HASH = "Y".equalsIgnoreCase((String) refPropMap.get("USE_HASH"));
        final boolean USE_PREMI = "Y".equalsIgnoreCase((String) refPropMap.get("USE_PREMI"));
        final boolean FLT_OUTS_PREMI = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_PREMI"));
        final boolean FLT_PAID_PREMI = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_PREMI"));
        final boolean USE_EXT = "Y".equalsIgnoreCase((String) refPropMap.get("USE_EXT")) || USE_PREMI;
        final String FLT_POL_TYPE = (String) refPropMap.get("FLT_POL_TYPE");
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        
        final boolean groupAll = "Y".equalsIgnoreCase((String) refPropMap.get("GROUP_ALL"));
        
        if (FLT_POL_TYPE!=null) stPolicyTypeID = FLT_POL_TYPE;
        
        final String groupBy = (String)refPropMap.get("GROUP");
        
        final boolean groupOn = groupBy!=null||groupAll;
        
        SQLAssembler sqa = new SQLAssembler();
        
        for (int i = 0; i < policyFields.length; i++) {
            String[] policyField = policyFields[i];
            
            if (groupOn)
                sqa.addSelect("summ("+policyField[0]+") as "+policyField[1]);
            else
                if(i == 0) sqa.addSelect(" distinct "+policyField[0]+" as "+policyField[1]);
                else sqa.addSelect(policyField[0]+" as "+policyField[1]);
        }
        
        if (joinObject)
            for (int i = 0; i < objectFields.length; i++) {
            String[] f = objectFields[i];
            
            if (groupOn)
                sqa.addSelect("summ("+f[0]+") as "+f[1]);
            else
                sqa.addSelect(f[0]+" as "+f[1]);
            }
        
        if (joinObject2) {
            for (int i = 0; i < objectFields2.length; i++) {
                String[] f = objectFields2[i];
                
                if (groupOn)
                    sqa.addSelect("summ("+f[0]+") as "+f[1]);
                else
                    sqa.addSelect(f[0]+" as "+f[1]);
            }
            
            sqa.addSelect(
                    "( select sum(claim_amount) from ins_policy where effective_flag='Y' and status='CLAIM' \n" +
                    "and\n" +
                    "pol_id in (select pol_id from ins_pol_obj where ins_pol_obj_ref_id = b.ins_pol_obj_id)) as obj_claim_amount"
                    );
            
        }
        
        //sqa.addSelect("a.*");
        
        sqa.addQuery(
                "   from  " +
                "      ins_policy a"
                );
        
        if (joinObject || joinObject2)
            sqa.addQuery(" inner join ins_pol_obj b on b.pol_id=a.pol_id");
        
        
          
        sqa.addQuery(
                "         left join ent_master c on c.ent_id = a.entity_id "
                );
        
        
        if (joinRI) {
            sqa.addQuery(" inner join ins_pol_treaty e on e.ins_pol_obj_id = b.ins_pol_obj_id");
            sqa.addQuery(" inner join ins_pol_treaty_detail f on e.ins_pol_treaty_id = f.ins_pol_treaty_id");
            sqa.addQuery(" inner join ins_pol_ri g on g.ins_pol_tre_det_id = f.ins_pol_tre_det_id");
            sqa.addQuery(" inner join ent_master h on h.ent_id = g.member_ent_id");
            sqa.addQuery(" inner join ins_treaty_detail i on i.ins_treaty_detail_id = f.ins_treaty_detail_id");
            
            addAutoSumm(sqa, groupOn, "h.ent_id","ri_ent_id");
            addAutoSumm(sqa, groupOn, "h.ent_name","ri_ent_name");
            addAutoSumm(sqa, groupOn, "g.claim_amount","ri_claim_amount");
            addAutoSumm(sqa, groupOn, "g.premi_amount","ri_premi_amount");
            addAutoSumm(sqa, groupOn, "g.sharepct","ri_sharepct");
            addAutoSumm(sqa, groupOn, "g.tsi_amount","ri_tsi_amount");
            addAutoSumm(sqa, groupOn, "i.treaty_type","treaty_type");
            
            DTOList treTypes = getTreatyTypes();
            
            if (groupOn)
                for (int i = 0; i < treTypes.size(); i++) {
                InsuranceTreatyTypesView tt = (InsuranceTreatyTypesView) treTypes.get(i);
                
                if (TRANSPOSE_RI_PREMI)
                    sqa.addSelect("summ(case when i.treaty_type='"+tt.getStInsuranceTreatyTypeID()+"' then g.premi_amount else 0 end) as ri_premi_amt_"+tt.getStInsuranceTreatyTypeID());
                
                if (TRANSPOSE_RI_CLAIM)
                    sqa.addSelect("summ(case when i.treaty_type='"+tt.getStInsuranceTreatyTypeID()+"' then g.claim_amount else 0 end) as ri_claim_amt_"+tt.getStInsuranceTreatyTypeID());
                
                if (TRANSPOSE_RI_TSI)
                    sqa.addSelect("summ(case when i.treaty_type='"+tt.getStInsuranceTreatyTypeID()+"' then g.tsi_amount else 0 end) as ri_tsi_amt_"+tt.getStInsuranceTreatyTypeID());
                }
            
            if (stInsCompanyID!=null) {
                sqa.addClause("g.member_ent_id = ?");
                sqa.addPar(stInsCompanyID);
            }
            
            if (stFltTreatyType!=null) {
                sqa.addClause("i.treaty_type = ?");
                sqa.addPar(stFltTreatyType);
            }
            
        }
        
        if (stFltClaimStatus!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(stFltClaimStatus);
        }
        
        if (status!=null) {
            if (FinCodec.PolicyStatus.POLICY.equalsIgnoreCase(status)) {
                sqa.addClause("a.status in (?,?,?)");
                sqa.addPar(FinCodec.PolicyStatus.POLICY);
                sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
                sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
            } else {
                sqa.addClause("a.status = ?");
                sqa.addPar(status);
            }
        }
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        if (periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start)>=?");
            sqa.addPar(periodFrom);
        }
        
        if (periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start)<=?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date)>=?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date)<=?");
            sqa.addPar(policyDateTo);
        }
        
        if (entryDateFrom!=null) {
            sqa.addClause("a.create_date>=?");
            sqa.addPar(entryDateFrom);
        }
       
        if (expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end)>=?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id=?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end)<=?");
            sqa.addPar(expirePeriodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code=?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("c.category1 = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final SQLAssembler sqaobj = new SQLAssembler();
        
        sqaobj.addSelect("distinct pol_id");
        sqaobj.addQuery("from ins_pol_obj a ");
        
        if (stRiskLocation!=null) {
            sqaobj.addClause("upper(risk_location) like ?");
            sqaobj.addPar(stRiskLocation.toUpperCase());
        }
        
        if (stPostCode!=null) {
            sqaobj.addClause("a.ref6d like ?");
            sqaobj.addPar('%'+stPostCode+'%');
        }
        
        if (stRiskCode!=null) {
            sqaobj.addClause("a.ins_risk_cat_id like ?");
            sqaobj.addPar('%'+stRiskCode+'%');
        }
        
        if (stZoneCode!=null) {
            sqaobj.addQuery(" inner join ins_pol_cover b on b.ins_pol_obj_id = a.ins_pol_obj_id");
            sqaobj.addClause("b.zone_id like ?");
            sqaobj.addPar('%'+stZoneCode+'%');
        }
        
                
        if (stRiskCardNo!=null) {
            sqaobj.addClause("a.riskcardno like ?");
            sqaobj.addPar(stRiskCardNo.toUpperCase());
        }
        
        if (sqaobj.hasClause()) {
            sqa.addClause("pol_id in ("+sqaobj.getSQL()+")");
            sqa.getPar().addAll(sqaobj.getPar());
        }
        
        if (USE_PREMI) {
            sqa.addSelect("(coalesce ((select sum(amount_settled) from ar_invoice where ar_invoice.refid0='PREMI/'||a.pol_id and commit_flag='Y'),0)) as premi_paid" );
        }
        
        if (USE_EXT) {
            sqa.addSelect("(coalesce((select sum(amount) from ar_pol2 where ins_item_cat='COMM' and pol_id=a.pol_id),0)) as ap_comis");
            sqa.addSelect("(coalesce((select sum(amount_settled) from ar_pol2 where ins_item_cat='COMM' and pol_id=a.pol_id),0)) as ap_comis_p");
            sqa.addSelect("(coalesce((select sum(amount) from ar_pol2 where ins_item_cat='BROKR' and pol_id=a.pol_id ),0)) as ap_brok");
            sqa.addSelect("(coalesce((select sum(amount_settled) from ar_pol2 where ins_item_cat='BROKR' and pol_id=a.pol_id),0)) as ap_brok_p");
        }
        
        //tes
        
        if (groupAll)
            for (int i = 0; i < objectFields.length; i++) {
            String[] f = objectFields[i];
            
            if (groupAll)
                //sqa.addSelect("summ("+f[0]+") as "+f[1]);
                sqa.addGroup(f[0]);
            
            }
        
        for (int i = 0; i < policyFields.length; i++) {
            String[] policyField = policyFields[i];
            
            if (groupAll)
                //sqa.addSelect("summ("+policyField[0]+") as "+policyField[1]);
                sqa.addGroup(policyField[0]);
            
        }
        
//      if (groupAll)
//         for (int i = 0; i < objectFields.length; i++) {
//            String[] f = objectFields[i];
//
//            if (groupAll)
//               //sqa.addSelect("summ("+f[0]+") as "+f[1]);
//               sqa.addGroup(policyField[0]);
//           // else
//               //sqa.addSelect(f[0]+" as "+f[1]);
//         }
        //finish
        
        
        if(groupBy!=null)
            sqa.addGroup(groupBy);
        //else
        //sqa.addOrder("date_trunc('day',a.policy_date)");
        
        boolean isClaim = FinCodec.PolicyStatus.CLAIM.equalsIgnoreCase(status);
        
        if (!isClaim){
            sqa.addClause("a.effective_flag = 'Y'");
            //sqa.addClause(" d.pol_id=a.pol_id and d.tax_amount != 0");
        }
        
        if (EFFECTIVE){
            sqa.addClause("a.effective_flag = 'Y'");
            //sqa.addClause(" d.pol_id=a.pol_id and d.tax_amount != 0");
        }
        
        
        boolean USE_BLANKET = FLT_OUTS_PREMI || FLT_PAID_PREMI;
        
        if (USE_BLANKET) {
            String gquery = sqa.getSQL();
            ArrayList vpat = sqa.getPar();
            
            sqa=new SQLAssembler();
            sqa.setPar(vpat);
            sqa.addQuery(" from ("+gquery+") x");
            sqa.addSelect("x.*");
        }
        
        if (FLT_OUTS_PREMI) {
            sqa.addClause("premi_paid+ap_comis_p+ap_brok_p < premi_netto+ap_comis+ap_brok");
        }
        
        if (FLT_PAID_PREMI) {
            sqa.addClause("premi_paid+ap_comis_p+ap_brok_p = premi_netto+ap_comis+ap_brok");
        }
        
     
        
        
        DTOList l;
        //DTOList m;
        
        if (USE_HASH)
            l = sqa.getList(HashDTO.class);
        else{
            l = sqa.getList(InsurancePolicyView.class);
            //m = sql2.getList(InsurancePolicyItemsView.class);
            
        }
        
        return l;
    }
    
    public String getStInsCompanyID() {
        return stInsCompanyID;
    }
    
    public void setStInsCompanyID(String stInsCompanyID) {
        this.stInsCompanyID = stInsCompanyID;
    }
    
    public String getStInsCompanyName() {
        return stInsCompanyName;
    }
    
    public void setStInsCompanyName(String stInsCompanyName) {
        this.stInsCompanyName = stInsCompanyName;
    }
    
    private void addAutoSumm(SQLAssembler sqa, boolean groupOn, String field, String alias) {
        if (groupOn)
            sqa.addSelect("summ("+field+") as "+alias);
        else
            sqa.addSelect(field+" as "+alias);
    }
    
    private DTOList getTreatyTypes() throws Exception {
        return ListUtil.getDTOListFromQuery("select ins_treaty_type_id from ins_treaty_types", InsuranceTreatyTypesView.class);
    }
    
    public void marketing() {
        
    }
    
    public void uwrit() {
        enableRiskFilter = true;
    }
    
    public void chgform() {
        
    }
    
    public void go() {
        stPrintForm = (String) getAttribute("rpt");
        enableSelectForm = false;
        
        stReportTitle = LOVManager.getInstance().getDescription(stPrintForm,"VS_PROD_PRINTING");
    }
    
    public String getStReportTitle() {
        return stReportTitle;
    }
    
    public void setStReportTitle(String stReportTitle) {
        this.stReportTitle = stReportTitle;
    }
    
    public String getStZoneCode() {
        return stZoneCode;
    }
    
    public void setStZoneCode(String stZoneCode) {
        this.stZoneCode = stZoneCode;
    }
    
    public String getStZoneCodeName() {
        return stZoneCodeName;
    }
    
    public void setStZoneCodeName(String stZoneCodeName) {
        this.stZoneCodeName = stZoneCodeName;
    }
    
    public String getStPolicyTypeGroupDesc() {
        return stPolicyTypeGroupDesc;
    }
    
    public void setStPolicyTypeGroupDesc(String stPolicyTypeGroupDesc) {
        this.stPolicyTypeGroupDesc = stPolicyTypeGroupDesc;
    }
    
    public void updateABAProdukByDate(DTOList data) throws Exception {
        try {
            
            if(true) throw new RuntimeException("test");
            
            final SQLUtil S = new SQLUtil();
            
            final DTOList produk2 = new DTOList();
            
            produk2.markAllUpdate();
            
            for (int i = 0; i < data.size(); i++) {
                InsuranceProdukView produk = (InsuranceProdukView) data.get(i);
                
                if(true) throw new RuntimeException(produk.getStPolicyID());
                
                produk2.add(produk);
                
                produk.markUpdate();
                
                produk.setStFlag("Y");
            }
            
            S.store(produk2);
            S.release();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
        }
    }
    
    public String getStNoUrut() {
        return stNoUrut;
    }
    
    public void setStNoUrut(String stNoUrut) {
        this.stNoUrut = stNoUrut;
    }
    
    public DTOList SOA() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        final SQLAssembler sqa1 = new SQLAssembler();
        
        sqa.addSelect(
                "	e.description as cover_type_code,j.treaty_type as co_treaty_id, a.ccy,"+
                "	sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(h.premi_amount*a.ccy_rate)),0)) as premi_amt,"+
                "	j.comm_ri_pct as nd_brok1pct,"+
                "	sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(h.comm_amt*a.ccy_rate)),0)) as nd_brok2pct,"+
                "	sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(h.premi_amount*a.ccy_rate)),0))-sum(coalesce((((d.premi_new*a.ccy_rate)/(getvalid(a.premi_total=0,a.premi_total)*a.ccy_rate))*(h.comm_amt*a.ccy_rate)),0)) as premi_netto, "+
                "	i.sharepct as nd_hfeepct"
                );
        
        
        sqa.addQuery(
                " from ins_policy a"+
                "	inner join ins_pol_obj c on c.pol_id=a.pol_id"+
                "	inner join ins_pol_cover d on a.pol_id = d.pol_id"+
                "	inner join ins_cover e on d.ins_cover_id = e.ins_cover_id"+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id"+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id"+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id"+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"+
                "	inner join ent_master m on m.ent_id = i.member_ent_id ");
        
        
        sqa.addClause("a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("a.effective_flag = 'Y'");
        
        sqa.addClause("j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("m.ent_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        final String sql = "select * from ( "+sqa.getSQL()+" group by d.ins_cover_id,e.description,j.treaty_type,j.comm_ri_pct,a.ccy,h.claim_amount,i.sharepct " +
                " ) a where premi_amt <> 0 or nd_brok2pct <> 0 order by cover_type_code ";
        
        sqa1.addSelect(
                " e.description as cover_type_code, sum(i.claim_amount) as claim_amount "
                );
        
        sqa1.addQuery(
                " from ins_policy a"+
                "	inner join ins_pol_obj c on c.pol_id=a.pol_id"+
                "	inner join ins_pol_cover d on a.pol_id = d.pol_id"+
                "	inner join ins_cover e on d.ins_cover_id = e.ins_cover_id"+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id"+
                "	inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id"+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id"+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"+
                "	inner join ent_master m on m.ent_id = i.member_ent_id ");
        
        
        sqa1.addClause("a.status IN ('CLAIM')");
        sqa1.addClause("a.claim_status = 'DLA'");
        sqa1.addClause("a.claim_effective_flag = 'Y'");
        sqa1.addClause("j.treaty_type not in ('XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        if(periodFrom!=null) {
            sqa1.addClause("date_trunc('day',a.period_start) >= ?");
            sqa1.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa1.addClause("date_trunc('day',a.period_start) <= ?");
            sqa1.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa1.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa1.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa1.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa1.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa1.addClause("a.cc_code = ?");
            sqa1.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa1.addClause("m.ent_id = ?");
            sqa1.addPar(stEntityID);
        }
        
        if(stPolicyTypeID!=null){
            sqa1.addClause("a.pol_type_id = ?");
            sqa1.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa1.addClause("a.ins_policy_type_grp_id = ?");
            sqa1.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa1.addClause("j.treaty_type = ?");
            sqa1.addPar(stFltTreatyType);
        }
        
        final String sql1 = "select * from ( "+sqa1.getSQL()+" group by e.description,a.pol_id,a.pol_no,a.dla_no " +
                " ) a where claim_amount <> 0 order by cover_type_code ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        final DTOList m = ListUtil.getDTOListFromQuery(
                sql1,
                sqa1.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPS", m);
        
        return l;
    }
    
    public void EXPORT_OBJEK()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        BigDecimal komisi = new BigDecimal(0);
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("policy_date");
            row0.createCell(1).setCellValue("period_start");
            row0.createCell(2).setCellValue("period_end");
            row0.createCell(3).setCellValue("pol_no");
            row0.createCell(4).setCellValue("cust_name");
            row0.createCell(5).setCellValue("ref1");
            row0.createCell(6).setCellValue("ref3");
            row0.createCell(7).setCellValue("ref4");
            row0.createCell(8).setCellValue("ref5");
            row0.createCell(9).setCellValue("ref6");
            row0.createCell(10).setCellValue("postal_code");
            row0.createCell(11).setCellValue("risk_class");
            row0.createCell(12).setCellValue("ins_risk_cat_code");
            row0.createCell(13).setCellValue("description");
            row0.createCell(14).setCellValue("ccy");
            row0.createCell(15).setCellValue("ccy_rate");
            row0.createCell(16).setCellValue("insured_amount");
            row0.createCell(17).setCellValue("premi_total");
            row0.createCell(18).setCellValue("disc");
            row0.createCell(19).setCellValue("comm");
            row0.createCell(20).setCellValue("deduct");
            if (getStPolicyTypeID().equalsIgnoreCase("3"))
                row0.createCell(21).setCellValue("coverage");
            
            komisi = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_comm2"));
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            if (h.getFieldValueByFieldNameDT("policy_date")!=null);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            if (h.getFieldValueByFieldNameDT("period_start")!=null);
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            if (h.getFieldValueByFieldNameDT("period_end")!=null);
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            if (h.getFieldValueByFieldNameST("pol_no")!=null);
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            if (h.getFieldValueByFieldNameST("cust_name")!=null);
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            if (h.getFieldValueByFieldNameST("ref1")!=null);
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            if (h.getFieldValueByFieldNameST("ref3")!=null);
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("ref3"));
            if (h.getFieldValueByFieldNameST("ref4")!=null);
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("ref4"));
            if (h.getFieldValueByFieldNameST("ref5")!=null);
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("ref5"));
            if (h.getFieldValueByFieldNameST("ref6")!=null);
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("ref6"));
            if (h.getFieldValueByFieldNameST("postal_code")!=null);
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("postal_code"));
            if (h.getFieldValueByFieldNameST("risk_class")!=null);
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("risk_class"));
            if (h.getFieldValueByFieldNameST("ins_risk_cat_code")!=null);
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("ins_risk_cat_code"));
            if (h.getFieldValueByFieldNameST("description")!=null);
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_disc1")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("nd_disc1").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(19).setCellValue(komisi.doubleValue());
            if (h.getFieldValueByFieldNameBD("deduct")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("deduct").doubleValue());
            if (getStPolicyTypeID().equalsIgnoreCase("3"))
                if (h.getFieldValueByFieldNameST("jaminan1")!=null||
                    h.getFieldValueByFieldNameST("jaminan2")!=null||
                    h.getFieldValueByFieldNameST("jaminan3")!=null||
                    h.getFieldValueByFieldNameST("jaminan4")!=null||
                    h.getFieldValueByFieldNameST("jaminan5")!=null||
                    h.getFieldValueByFieldNameST("jaminan6")!=null)
                    row.createCell(21).setCellValue(
                            LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan1"))+", "+
                            LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan2"))+", "+
                            LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan3"))+", "+
                            LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan4"))+", "+
                            LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan5"))+", "+
                            LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan6")));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_OBJEK() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.policy_date,a.period_start,a.period_end,a.pol_no,a.cust_name,a.pol_type_id,"+
                " b.ref1,b.ref2d,b.ref3,b.ref4,b.ref5,b.ref6,b.ref7d,b.ref9d as postal_code,b.risk_class,c.ins_risk_cat_code,c.description,"+
                " a.ccy,a.ccy_rate,b.insured_amount,b.premi_total,(a.nd_disc1+a.nd_disc2) as nd_disc1," +
                " (a.nd_comm1+a.nd_comm2) as nd_comm1,(a.nd_comm3+a.nd_comm4) as nd_comm2," +
                " (select sum(amount) from ins_pol_deduct x " +
                " where x.ins_pol_obj_id = b.ins_pol_obj_id ) as deduct," +
                " (select cekstatus(x.ins_cover_id = '2',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '2' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan1," +
                " (select cekstatus(x.ins_cover_id = '107',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '107' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan2," +
                " (select cekstatus(x.ins_cover_id = '108',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '108' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan3," +
                " (select cekstatus(x.ins_cover_id = '101',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '101' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan4," +
                " (select cekstatus(x.ins_cover_id = '22',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '22' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan5," +
                " (select cekstatus(x.ins_cover_id = '123',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id= '123' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan6 "
                );
        
        sqa.addQuery(" from ins_policy a "+
                " inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                " left join ins_risk_cat c on b.ins_risk_cat_id = c.ins_risk_cat_id"+
                " inner join ent_master e on e.ent_id = a.entity_id "
                );
        
        sqa.addClause(" a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        sqa.addClause(" a.effective_flag='Y'");
        
        //sqa.addClause(" a.print_code is not null");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_ACCUMULATION() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.policy_date,a.period_start,a.period_end,substr(a.period_start::text,1,4) as u_year,a.pol_no,a.status,a.cust_name, "+
                "b.ref9d as postal_code,b.ref1 as occupation,b.risk_class,b.ref3 as risk_code,b.ref5 as address,a.ccy,a.ccy_rate, "+
                "a.insured_amount,  a.premi_total, "+
                "(case b.risk_class when 1 then c.tre_limit1 when 2 then c.tre_limit2 when 3 then c.tre_limit3 else 0 end) as treaty_limit, "+
                "(       select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=6,z.insured_amount)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as building, "+
                "(       select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=39,z.insured_amount)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as machine, "+
                "(       select coalesce(round(sum(getkoas(z.ins_tsi_cat_id=56,z.insured_amount)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as stock, "+
                "(       select coalesce(round(sum(getkoas(z.ins_tsi_cat_id not in (6,39,56),z.insured_amount)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as other, "+
                "b.insured_amount as total_tsi, "+
                "(       select coalesce(round(sum(getkoas(y.ins_cover_id=27,y.premi)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_cover y on y.pol_id = x.pol_id "+
                "inner join ins_cover z on z.ins_cover_id = y.ins_cover_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as cov_fire, "+
                "(       select coalesce(round(sum(getkoas(y.ins_cover_id in (90,91,92,93,94),y.premi)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_cover y on y.pol_id = x.pol_id "+
                "inner join ins_cover z on z.ins_cover_id = y.ins_cover_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as cov_riot, "+
                "(       select coalesce(round(sum(getkoas(y.ins_cover_id in (21,22),y.premi)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_cover y on y.pol_id = x.pol_id "+
                "inner join ins_cover z on z.ins_cover_id = y.ins_cover_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as cov_earthquake, "+
                "(       select coalesce(round(sum(getkoas(y.ins_cover_id=29,y.premi)),0),0) "+
                "        from ins_policy x "+
                "inner join ins_pol_cover y on y.pol_id = x.pol_id "+
                "inner join ins_cover z on z.ins_cover_id = y.ins_cover_id  "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as cov_flood, "+
                "(       select coalesce(round(sum(getkoas(y.ins_cover_id=114,y.premi)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_cover y on y.pol_id = x.pol_id "+
                "inner join ins_cover z on z.ins_cover_id = y.ins_cover_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id) as cov_water_damage, "+
                "(       select coalesce(round(sum(getkoas(y.ins_cover_id=87,y.premi)),0),0) "+
                "from ins_policy x "+
                "inner join ins_pol_cover y on y.pol_id = x.pol_id "+
                "inner join ins_cover z on z.ins_cover_id = y.ins_cover_id "+
                "where y.ins_pol_obj_id=b.ins_pol_obj_id)                as cov_prop_all_risk, "+
                "coalesce(round(sum(checkreas(j.treaty_type='SPL',i.tsi_amount)),2),0) as tsi_spl, "+
                "coalesce(round(sum(checkreas(j.treaty_type='SPL',i.premi_amount)),2),0) as premi_spl, "+
                "coalesce(round(sum(checkreas(j.treaty_type='SPL',i.ricomm_amt)),2),0) as komisi_spl "
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ins_risk_cat c on b.ins_risk_cat_id = c.ins_risk_cat_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("(a.pol_type_id=1 or a.pol_type_id=81 or a.pol_type_id=19)");
        
        sqa.addClause("j.treaty_type = 'SPL'");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = sqa.getSQL()+" group by a.policy_date,a.period_start,a.period_end,substr(a.period_start::text,1,4),a.pol_no,a.status,a.pol_id,a.cust_name,a.insured_amount,a.premi_total, "+
                "b.ref1,b.risk_class,b.ref3,c.description,b.ref5,a.ccy,a.ccy_rate,b.insured_amount,a.rate_method_desc,b.ref6d, "+
                "c.tre_limit1,c.tre_limit2,c.tre_limit3,b.ins_pol_obj_id,a.pol_type_id,b.ref9d,c.ins_risk_cat_code,b.ref2d,c.exc_risk_flag "+
                "order by a.pol_type_id,substr(a.period_start::text,1,4),a.pol_no,b.ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_ACCUMULATION()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("policy_date");
            row0.createCell(1).setCellValue("period_start");
            row0.createCell(2).setCellValue("period_end");
            row0.createCell(3).setCellValue("u_year");
            row0.createCell(4).setCellValue("pol_no");
            row0.createCell(5).setCellValue("status");
            row0.createCell(6).setCellValue("cust_name");
            row0.createCell(7).setCellValue("postal_code");
            row0.createCell(8).setCellValue("occupation");
            row0.createCell(9).setCellValue("risk_class");
            row0.createCell(10).setCellValue("risk_code");
            row0.createCell(11).setCellValue("address");
            row0.createCell(12).setCellValue("ccy");
            row0.createCell(13).setCellValue("ccy_rate");
            row0.createCell(14).setCellValue("insured_amount");
            row0.createCell(15).setCellValue("premi_total");
            row0.createCell(16).setCellValue("treaty_limit");
            row0.createCell(17).setCellValue("building");
            row0.createCell(18).setCellValue("machine");
            row0.createCell(19).setCellValue("stock");
            row0.createCell(20).setCellValue("other");
            row0.createCell(21).setCellValue("total_tsi");
            row0.createCell(22).setCellValue("cov_fire");
            row0.createCell(23).setCellValue("cov_riot");
            row0.createCell(24).setCellValue("cov_earthquake");
            row0.createCell(25).setCellValue("cov_flood");
            row0.createCell(26).setCellValue("cov_water_damage");
            row0.createCell(27).setCellValue("cov_prop_all_risk");
            row0.createCell(28).setCellValue("tsi_spl");
            row0.createCell(29).setCellValue("premi_spl");
            row0.createCell(30).setCellValue("komisi_spl");
            
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("u_year"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("postal_code"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("occupation"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("risk_class"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("risk_code"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("address"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("treaty_limit").doubleValue());
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("building").doubleValue());
            row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("machine").doubleValue());
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("stock").doubleValue());
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("other").doubleValue());
            row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("total_tsi").doubleValue());
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("cov_fire").doubleValue());
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("cov_riot").doubleValue());
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("cov_earthquake").doubleValue());
            row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("cov_flood").doubleValue());
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("cov_water_damage").doubleValue());
            row.createCell(27).setCellValue(h.getFieldValueByFieldNameBD("cov_prop_all_risk").doubleValue());
            row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("tsi_spl").doubleValue());
            row.createCell(29).setCellValue(h.getFieldValueByFieldNameBD("premi_spl").doubleValue());
            row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("komisi_spl").doubleValue());
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public String getStNama() {
        return stNama;
    }
    
    public void setStNama(String stNama) {
        this.stNama = stNama;
    }
    
    public DTOList EXCEL_KREASI2() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.cc_code,a.pol_no,a.pol_type_id,e.ref_ent_id,substr(a.policy_date::text,6,2) as bulan,substr(a.policy_date::text,3,2) as tahun,"+
                "c.ref1 as nama,c.refd1 as tgl_lhr,c.refd2 as tgl_cair,c.refd3 as tgl_akhir,c.ref2 as umur,c.ref6 as lama,"+
                "getpremi(a.status='ENDORSE' and a.create_who='administrator',c.refn4,c.insured_amount) as insured,"+
                "c.insured_amount as insured_amount,"+
                "c.refn2 as premi,c.refn9 as comm1,a.kreasi_type_desc,e.short_name,b.description, "+
                "(select d.share_pct from ins_pol_coins d where d.policy_id = a.pol_id and d.entity_id = 1 and d.coins_type= 'COINS') as share_pct  "
                );
        
        sqa.addQuery("   from ins_policy a "+
                "	inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "	left join ent_master e on e.ent_id = c.ref8::bigint "+
                "	left join gl_cost_center b on b.cc_code = a.cc_code"
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stCoinsurerID!=null) {
            sqa.addClause("c.ref8 = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stWilayahID!=null) {
            if (stWilayahID.equalsIgnoreCase("1")){
                sqa.addClause("a.cc_code in ('10','13','17','20','21','22','40','43','70')");
            } else {
                sqa.addClause("a.cc_code not in ('10','13','17','20','21','22','40','43','70')");
            }
        }
        
        if (stRekapNo!=null) {
            if (stCoinsurerID.equalsIgnoreCase("96")) {
                sqa.addClause("a.ref4 = ?");
            }else{
                sqa.addClause("a.ref3 = ?");
            }
            sqa.addPar(stRekapNo);
        }
        
        final String sql = "select *,round(((insured_amount*share_pct)/100),0) as insured_amount,"+
                " round(((premi*share_pct)/100),0) as premi_koas,"+
                " round(((comm1*share_pct)/100),0) as nd_comm1"+
                " from ( "+sqa.getSQL()+" ) x order by cc_code,pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_KREASI4() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.cc_code,a.attr_pol_no as pol_no,substr(a.mutation_date::text,6,2) as bulan,substr(a.mutation_date::text,3,2) as tahun," +
                "c.ref1 as nama,c.refd1 as tgl_lhr,c.refd2 as tgl_cair,c.refd3 as tgl_akhir,c.ref2 as umur,c.ref6 as lama,b.description," +
                "c.insured_amount as insured, c.refn2 as premi_ko,c.refn9 as comm1,d.ref_ent_id,d.short_name,e.kreasi_type_desc," +
                "(select d.share_pct from ins_pol_coins d where d.policy_id = a.attr_pol_id and d.entity_id = 1 and d.coins_type= 'COINS') as share_pct " );
        
        sqa.addQuery(" from ar_invoice a " +
                " left join gl_cost_center b on b.cc_code = a.cc_code " +
                " inner join ins_pol_obj c on c.pol_id = a.attr_pol_id " +
                " left join ent_master d on d.ent_id::text = c.ref8 " +
                " left join ins_policy e on e.pol_id = a.attr_pol_id " );
        
        sqa.addClause("a.ar_trx_type_id = 10");
        sqa.addClause("a.attr_pol_type_id = '21'");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.mutation_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.mutation_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stKreasiID!=null) {
            sqa.addClause("c.ref8 = ?");
            sqa.addPar(stKreasiID);
        }
        
        if(stKreasiID!=null) {
            sqa.addClause("a.ent_id = ?");
            sqa.addPar(stKreasiID);
        }
        
        if(stKreasiName!=null) {
            sqa.addClause("a.no_surat_hutang = ?");
            sqa.addPar(stKreasiName);
        }
        
        if (stWilayahID!=null) {
            if (stWilayahID.equalsIgnoreCase("1")){
                sqa.addClause("a.cc_code in ('10','13','17','20','21','22','40','43','70')");
            } else {
                sqa.addClause("a.cc_code not in ('10','13','17','20','21','22','40','43','70')");
            }
        }
        
        final String sql = "select *,round(((insured*share_pct)/100),0) as insured_amount,"+
                " round(((premi_ko*share_pct)/100),0) as premi_koas,"+
                " round(((comm1*share_pct)/100),0) as nd_comm1"+
                " from ( "+sqa.getSQL()+" ) x order by cc_code,pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_KREASI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        //HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        //HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        int counter = 1;
        int norut = 0;
        //BigDecimal insured = null;
        //BigDecimal premiBruto = null;
        //BigDecimal premiNetto = null;
        //BigDecimal rate = null;
        //String polTypeDesc = getStPolicyTypeDesc();
        for (int i=0;i < list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header0
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("REKAPITULASI DAFTAR PESERTA ASURANSI KREASI");
            
            //bikin header1
            XSSFRow row1 = sheet.createRow(1);
            row1.createCell(0).setCellValue("PT. ASURANSI BANGUN ASKRIDA");
            
            //bikin header2
            XSSFRow row2 = sheet.createRow(2);
            row2.createCell(0).setCellValue("BULAN : "+DateUtil.getDateStr(getPolicyDateFrom())+" sd "+DateUtil.getDateStr(getPolicyDateTo()));
            
          
            
            //bikin header3
            XSSFRow row3 = sheet.createRow(3);
            row3.createCell(0).setCellValue("NO. REK : "+getStKreasiName());
            
            //bikin header4
            XSSFRow row5 = sheet.createRow(4);
            row5.createCell(0).setCellValue("Nomor Polis");
            row5.createCell(1).setCellValue("Nomor Registrasi");
            row5.createCell(2).setCellValue("Nama");
            row5.createCell(3).setCellValue("No. Urut");
            row5.createCell(4).setCellValue("Tanggal Lahir");
            row5.createCell(5).setCellValue("Tanggal Cair");
            row5.createCell(6).setCellValue("Tanggal Akhir");
            row5.createCell(7).setCellValue("Umur");
            row5.createCell(8).setCellValue("Bulan");
            row5.createCell(9).setCellValue("Insured Amount");
            row5.createCell(10).setCellValue("Premi");
            row5.createCell(11).setCellValue("Komisi");
            row5.createCell(12).setCellValue("Keterangan");
            row5.createCell(13).setCellValue("Daerah");
            
            //rate = BDUtil.getRateFromPct(h.getFieldValueByFieldNameBD("share_pct"));
            //insured = BDUtil.mul(h.getFieldValueByFieldNameBD("insured"), rate);
            //premiBruto = BDUtil.mul(h.getFieldValueByFieldNameBD("premi"), rate);
            //premiNetto = BDUtil.sub(premiBruto, h.getFieldValueByFieldNameBD("comm1"));
            
            norut++;
            
            if(i>0){
                HashDTO s = (HashDTO) list.get(i-1);
                String nopol = s.getFieldValueByFieldNameST("pol_no");
                String nopol2 = h.getFieldValueByFieldNameST("pol_no");
                if(!nopol.equalsIgnoreCase(nopol2)){
                    counter++;
                    
                    norut = 1;
                }
            }
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+5);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(1).setCellValue(String.valueOf(counter)+"/AK.21/"+h.getFieldValueByFieldNameST("ref_ent_id")+"/"+h.getFieldValueByFieldNameST("bulan")+"/"+h.getFieldValueByFieldNameST("tahun"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("nama"));
            row.createCell(3).setCellValue(String.valueOf(norut));
            if (h.getFieldValueByFieldNameDT("tgl_lhr")!=null)
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("tgl_lhr"));
            if (h.getFieldValueByFieldNameDT("tgl_cair")!=null)
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameDT("tgl_cair"));
            if (h.getFieldValueByFieldNameDT("tgl_akhir")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameDT("tgl_akhir"));
            if (h.getFieldValueByFieldNameST("umur")!=null)
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("umur"));
            if (h.getFieldValueByFieldNameST("lama")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("lama"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_koas")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("premi_koas").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("nd_comm1").doubleValue());
            if (h.getFieldValueByFieldNameST("kreasi_type_desc")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("kreasi_type_desc"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("description"));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_REAS_TREATY() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	m.short_desc,a.status,a.pol_no,a.period_start,a.period_end,a.policy_date,i.ri_slip_no as f_ri_finish,l.reas_ent_id,l.ent_name,a.ccy,a.ccy_rate,(a.premi_total) as premi_base,"+
                "sum(coalesce(i.premi_amount,0)) as premi_total,sum(coalesce(i.ricomm_amt,0)) as nd_comm1 "
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "left join ent_master k on k.ent_id = a.entity_id "+
                "left join ent_master l on l.ent_id = i.member_ent_id "+
                "left join ins_policy_types m on m.pol_type_id = a.pol_type_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('OR','XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("k.category1 = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        }
        
        if (stYearTreaty!=null){
            sqa.addClause("substr(i.valid_ri_date::text,1,4) = ?");
            sqa.addPar(stYearTreaty);
        }
        
        if (stCoinsurerID!=null) {
            sqa.addClause("i.member_ent_id = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        final String sql = " select short_desc,reas_ent_id,ent_name,status,pol_no,period_start,period_end,policy_date,f_ri_finish,ccy,ccy_rate,sum(premi_base) as premi_base,sum(premi_total) as premi_total,sum(nd_comm1) as nd_comm1,sum(premi_total-nd_comm1) as premi_total_adisc from ( "+
                sqa.getSQL()+" group by a.status,a.ccy,a.pol_no,a.period_start,a.period_end,a.policy_date,a.ccy_rate,a.premi_total,i.ri_slip_no,l.reas_ent_id,l.ent_name,m.short_desc "+
                " ) x group by short_desc,reas_ent_id,ent_name,status,pol_no,period_start,period_end,policy_date,f_ri_finish,ccy,ccy_rate order by pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_REAS_TREATY()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            XSSFRow row1 = sheet.createRow(0);
            row1.createCell(0).setCellValue(getStCoinsurerName());
            
            //bikin header
            XSSFRow row0 = sheet.createRow(1);
            row0.createCell(0).setCellValue("pol_no");
            row0.createCell(1).setCellValue("status");
            row0.createCell(2).setCellValue("period_start");
            row0.createCell(3).setCellValue("period_end");
            row0.createCell(4).setCellValue("policy_date");
            row0.createCell(5).setCellValue("ri_slip_no");
            row0.createCell(6).setCellValue("bisnis");
            row0.createCell(7).setCellValue("ent_id");
            row0.createCell(8).setCellValue("name");
            row0.createCell(9).setCellValue("ccy");
            row0.createCell(10).setCellValue("ccy_rate");
            row0.createCell(11).setCellValue("premi_total");
            row0.createCell(12).setCellValue("premi_reas");
            row0.createCell(13).setCellValue("komisi_reas");
            row0.createCell(14).setCellValue("netto_reas");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+2);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("f_ri_finish"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("short_desc"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("reas_ent_id"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("premi_base").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("nd_comm1").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("premi_total_adisc").doubleValue());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList REAS_TREATY() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.pol_no,a.period_start,a.period_end,a.policy_date,i.ri_slip_no as f_ri_finish," +
                "a.ccy,a.ccy_rate,(c.premi_total) as premi_base,c.ref5 as ref5,c.ref7d as ref7,c.risk_class as ref2,"+
                "(select sum(x.rate) from ins_pol_cover x where x.ins_pol_obj_id = c.ins_pol_obj_id group by x.ins_pol_obj_id) as refn1, "+
                "sum(coalesce(i.premi_amount,0)) as premi_total,sum(coalesce(i.ricomm_amt,0)) as nd_comm1 "
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "left join ent_master k on k.ent_id = a.entity_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('OR','XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        }
        
        if (stYearTreaty!=null){
            sqa.addClause("substr(i.valid_ri_date::text,1,4) = ?");
            sqa.addPar(stYearTreaty);
        }
        
        if (stCoinsurerID!=null) {
            sqa.addClause("i.member_ent_id = ?");
            sqa.addPar(stCoinsurerID);
        }
        
        final String sql = " select pol_no,period_start,period_end,policy_date,f_ri_finish,ccy,ccy_rate,ref5,ref7,ref2,refn1,sum(premi_base) as premi_base,sum(premi_total) as premi_total,sum(nd_comm1) as nd_comm1,sum(premi_total-nd_comm1) as premi_total_adisc from ( "+
                sqa.getSQL()+" group by a.ccy,a.pol_no,a.period_start,a.period_end,a.policy_date,a.ccy_rate,c.premi_total,i.ri_slip_no,c.ins_pol_obj_id,c.ref5,c.ref7d,c.risk_class"+
                " ) x group by pol_no,period_start,period_end,policy_date,f_ri_finish,ccy,ccy_rate,ref5,ref7,ref2,refn1 order by pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList REKAPCAB100() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("substr(a.pol_no,2,1) as bus_source,a.cc_code, b.ins_inward_flag as inward_flag," +
                "sum(a.claim_amount_approved*a.ccy_rate) as claim_amount_approved_kurs, " +
                "sum(a.claim_amount*a.ccy_rate) as claim_amount_kurs," +
                "sum(a.premi_total*a.ccy_rate) as premi_total_adisc,"+
                "sum(a.nd_disc1*a.ccy_rate) as nd_disc1, "+
                "sum(a.nd_disc2*a.ccy_rate) as nd_disc2 " );
        
        sqa.addQuery("   from " +
                "      ins_policy a" +
                "      inner join ent_master b on b.ent_id = a.entity_id "
                );
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = sqa.getSQL()+"   group by " +
                "      substr(a.pol_no,2,1),b.ins_inward_flag,a.cc_code";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList REKAPTYPE100() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("substr(a.pol_no,2,1) as bus_source,a.pol_type_id, b.ins_inward_flag as inward_flag," +
                "sum(a.claim_amount_approved*a.ccy_rate) as claim_amount_approved_kurs, " +
                "sum(a.claim_amount*a.ccy_rate) as claim_amount_kurs," +
                "sum(a.premi_total*a.ccy_rate) as premi_total_adisc, "+
                "sum(a.nd_disc1*a.ccy_rate) as nd_disc1, "+
                "sum(a.nd_disc2*a.ccy_rate) as nd_disc2 " );
        
        sqa.addQuery("   from " +
                "      ins_policy a" +
                "      inner join ent_master b on b.ent_id = a.entity_id "
                );
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = sqa.getSQL()+"   group by " +
                "      substr(a.pol_no,2,1),b.ins_inward_flag,a.pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStPolicyTypeID()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_RPP_COMPANY_ALL()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("code");
            row0.createCell(1).setCellValue("cabang");
            row0.createCell(2).setCellValue("ID");
            row0.createCell(3).setCellValue("nama");
            row0.createCell(4).setCellValue("premi_adisc");
            row0.createCell(5).setCellValue("premi");
            row0.createCell(6).setCellValue("bpol");
            row0.createCell(7).setCellValue("bmat");
            row0.createCell(8).setCellValue("diskon");
            row0.createCell(9).setCellValue("hfee");
            row0.createCell(10).setCellValue("komisi");
            row0.createCell(11).setCellValue("feebase");
            row0.createCell(12).setCellValue("bfee");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("ent_id").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_adisc").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("premi_amt").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("diskon_premi").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("feebase").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_RPP_COMPANY_ALLTYPE()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            
            //bikin header
            XSSFRow row1 = sheet.createRow(0);
            row1.createCell(0).setCellValue("description");
            row1.createCell(1).setCellValue("ent_id");
            row1.createCell(2).setCellValue("ent_name");
            row1.createCell(3).setCellValue("sumbis");
            row1.createCell(4).setCellValue("gl_code");
            row1.createCell(5).setCellValue("fr_premi");
            row1.createCell(6).setCellValue("fr_disc");
            row1.createCell(7).setCellValue("cons_premi");
            row1.createCell(8).setCellValue("cons_disc");
            row1.createCell(9).setCellValue("mv_premi");
            row1.createCell(10).setCellValue("mv_disc");
            row1.createCell(11).setCellValue("pa_premi");
            row1.createCell(12).setCellValue("pa_disc");
            row1.createCell(13).setCellValue("cis_premi");
            row1.createCell(14).setCellValue("cis_disc");
            row1.createCell(15).setCellValue("car_premi");
            row1.createCell(16).setCellValue("car_disc");
            row1.createCell(17).setCellValue("ear_premi");
            row1.createCell(18).setCellValue("ear_disc");
            row1.createCell(19).setCellValue("mb_premi");
            row1.createCell(20).setCellValue("mb_disc");
            row1.createCell(21).setCellValue("cpm_premi");
            row1.createCell(22).setCellValue("cpm_disc");
            row1.createCell(23).setCellValue("eei_premi");
            row1.createCell(24).setCellValue("eei_disc");
            row1.createCell(25).setCellValue("pliab_premi");
            row1.createCell(26).setCellValue("pliab_disc");
            row1.createCell(27).setCellValue("burg_premi");
            row1.createCell(28).setCellValue("burg_disc");
            row1.createCell(29).setCellValue("mc_premi");
            row1.createCell(30).setCellValue("mc_disc");
            row1.createCell(31).setCellValue("cit_premi");
            row1.createCell(32).setCellValue("cit_disc");
            row1.createCell(33).setCellValue("hull_premi");
            row1.createCell(34).setCellValue("hull_disc");
            row1.createCell(35).setCellValue("golf_premi");
            row1.createCell(36).setCellValue("golf_disc");
            row1.createCell(37).setCellValue("ga_premi");
            row1.createCell(38).setCellValue("ga_disc");
            row1.createCell(39).setCellValue("av_premi");
            row1.createCell(40).setCellValue("av_disc");
            row1.createCell(41).setCellValue("eq_premi");
            row1.createCell(42).setCellValue("eq_disc");
            row1.createCell(43).setCellValue("pjtki_premi");
            row1.createCell(44).setCellValue("pjtki_disc");
            row1.createCell(45).setCellValue("kreasi_premi");
            row1.createCell(46).setCellValue("kreasi_disc");
            row1.createCell(47).setCellValue("oil_premi");
            row1.createCell(48).setCellValue("oil_disc");
            row1.createCell(49).setCellValue("ts_premi");
            row1.createCell(50).setCellValue("ts_disc");
            row1.createCell(51).setCellValue("he_premi");
            row1.createCell(52).setCellValue("he_disc");
            row1.createCell(53).setCellValue("simpeda_premi");
            row1.createCell(54).setCellValue("simpeda_disc");
            row1.createCell(55).setCellValue("nsimpeda_premi");
            row1.createCell(56).setCellValue("nsimpeda_disc");
            row1.createCell(57).setCellValue("haji_premi");
            row1.createCell(58).setCellValue("haji_disc");
            row1.createCell(59).setCellValue("citcm_premi");
            row1.createCell(60).setCellValue("citcm_disc");
            row1.createCell(61).setCellValue("ciscm_premi");
            row1.createCell(62).setCellValue("ciscm_disc");
            row1.createCell(63).setCellValue("sbbb_premi");
            row1.createCell(64).setCellValue("sbbb_disc");
            row1.createCell(65).setCellValue("sbpb_premi");
            row1.createCell(66).setCellValue("sbpb_disc");
            row1.createCell(67).setCellValue("sbapb_premi");
            row1.createCell(68).setCellValue("sbapb_disc");
            row1.createCell(69).setCellValue("sbmb_premi");
            row1.createCell(70).setCellValue("sbmb_disc");
            row1.createCell(71).setCellValue("kbgapb_premi");
            row1.createCell(72).setCellValue("kbgapb_disc");
            row1.createCell(73).setCellValue("kbgpb_premi");
            row1.createCell(74).setCellValue("kbgpb_disc");
            row1.createCell(75).setCellValue("kbgbb_premi");
            row1.createCell(76).setCellValue("kbgbb_disc");
            row1.createCell(77).setCellValue("kbgmb_premi");
            row1.createCell(78).setCellValue("kbgmb_disc");
            row1.createCell(79).setCellValue("auto_premi");
            row1.createCell(80).setCellValue("auto_disc");
            row1.createCell(81).setCellValue("cgl_premi");
            row1.createCell(82).setCellValue("cgl_disc");
            row1.createCell(83).setCellValue("el_premi");
            row1.createCell(84).setCellValue("el_disc");
            row1.createCell(85).setCellValue("mar_premi");
            row1.createCell(86).setCellValue("mar_disc");
            row1.createCell(87).setCellValue("glass_premi");
            row1.createCell(88).setCellValue("glass_disc");
            row1.createCell(89).setCellValue("pi_premi");
            row1.createCell(90).setCellValue("pi_disc");
            row1.createCell(91).setCellValue("boiler_premi");
            row1.createCell(92).setCellValue("boiler_disc");
            row1.createCell(93).setCellValue("wca_premi");
            row1.createCell(94).setCellValue("wca_disc");
            row1.createCell(95).setCellValue("ppju_premi");
            row1.createCell(96).setCellValue("ppju_disc");
            row1.createCell(97).setCellValue("health_premi");
            row1.createCell(98).setCellValue("health_disc");
            row1.createCell(99).setCellValue("par_premi");
            row1.createCell(100).setCellValue("par_disc");
            row1.createCell(101).setCellValue("cecr_premi");
            row1.createCell(102).setCellValue("cecr_disc");
            row1.createCell(103).setCellValue("fg_premi");
            row1.createCell(104).setCellValue("fg_disc");
            row1.createCell(105).setCellValue("hole_premi");
            row1.createCell(106).setCellValue("hole_disc");
            row1.createCell(107).setCellValue("total_premi");
            row1.createCell(108).setCellValue("total_diskon");
            
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("ent_id").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("category1"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("gl_code"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("fr_premi").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("fr_disc").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("cons_premi").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("cons_disc").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("mv_premi").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("mv_disc").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("pa_premi").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("pa_disc").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("cis_premi").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("cis_disc").doubleValue());
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("car_premi").doubleValue());
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("car_disc").doubleValue());
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("ear_premi").doubleValue());
            row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("ear_disc").doubleValue());
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("mb_premi").doubleValue());
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("mb_disc").doubleValue());
            row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("cpm_premi").doubleValue());
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("cpm_disc").doubleValue());
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("eei_premi").doubleValue());
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("eei_disc").doubleValue());
            row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("pliab_premi").doubleValue());
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("pliab_disc").doubleValue());
            row.createCell(27).setCellValue(h.getFieldValueByFieldNameBD("burg_premi").doubleValue());
            row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("burg_disc").doubleValue());
            row.createCell(29).setCellValue(h.getFieldValueByFieldNameBD("mc_premi").doubleValue());
            row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("mc_disc").doubleValue());
            row.createCell(31).setCellValue(h.getFieldValueByFieldNameBD("cit_premi").doubleValue());
            row.createCell(32).setCellValue(h.getFieldValueByFieldNameBD("cit_disc").doubleValue());
            row.createCell(33).setCellValue(h.getFieldValueByFieldNameBD("hull_premi").doubleValue());
            row.createCell(34).setCellValue(h.getFieldValueByFieldNameBD("hull_disc").doubleValue());
            row.createCell(35).setCellValue(h.getFieldValueByFieldNameBD("golf_premi").doubleValue());
            row.createCell(36).setCellValue(h.getFieldValueByFieldNameBD("golf_disc").doubleValue());
            row.createCell(37).setCellValue(h.getFieldValueByFieldNameBD("ga_premi").doubleValue());
            row.createCell(38).setCellValue(h.getFieldValueByFieldNameBD("ga_disc").doubleValue());
            row.createCell(39).setCellValue(h.getFieldValueByFieldNameBD("av_premi").doubleValue());
            row.createCell(40).setCellValue(h.getFieldValueByFieldNameBD("av_disc").doubleValue());
            row.createCell(41).setCellValue(h.getFieldValueByFieldNameBD("eq_premi").doubleValue());
            row.createCell(42).setCellValue(h.getFieldValueByFieldNameBD("eq_disc").doubleValue());
            row.createCell(43).setCellValue(h.getFieldValueByFieldNameBD("pjtki_premi").doubleValue());
            row.createCell(44).setCellValue(h.getFieldValueByFieldNameBD("pjtki_disc").doubleValue());
            row.createCell(45).setCellValue(h.getFieldValueByFieldNameBD("kreasi_premi").doubleValue());
            row.createCell(46).setCellValue(h.getFieldValueByFieldNameBD("kreasi_disc").doubleValue());
            row.createCell(47).setCellValue(h.getFieldValueByFieldNameBD("oil_premi").doubleValue());
            row.createCell(48).setCellValue(h.getFieldValueByFieldNameBD("oil_disc").doubleValue());
            row.createCell(49).setCellValue(h.getFieldValueByFieldNameBD("ts_premi").doubleValue());
            row.createCell(50).setCellValue(h.getFieldValueByFieldNameBD("ts_disc").doubleValue());
            row.createCell(51).setCellValue(h.getFieldValueByFieldNameBD("he_premi").doubleValue());
            row.createCell(52).setCellValue(h.getFieldValueByFieldNameBD("he_disc").doubleValue());
            row.createCell(53).setCellValue(h.getFieldValueByFieldNameBD("simpeda_premi").doubleValue());
            row.createCell(54).setCellValue(h.getFieldValueByFieldNameBD("simpeda_disc").doubleValue());
            row.createCell(55).setCellValue(h.getFieldValueByFieldNameBD("nsimpeda_premi").doubleValue());
            row.createCell(56).setCellValue(h.getFieldValueByFieldNameBD("nsimpeda_disc").doubleValue());
            row.createCell(57).setCellValue(h.getFieldValueByFieldNameBD("haji_premi").doubleValue());
            row.createCell(58).setCellValue(h.getFieldValueByFieldNameBD("haji_disc").doubleValue());
            row.createCell(59).setCellValue(h.getFieldValueByFieldNameBD("citcm_premi").doubleValue());
            row.createCell(60).setCellValue(h.getFieldValueByFieldNameBD("citcm_disc").doubleValue());
            row.createCell(61).setCellValue(h.getFieldValueByFieldNameBD("ciscm_premi").doubleValue());
            row.createCell(62).setCellValue(h.getFieldValueByFieldNameBD("ciscm_disc").doubleValue());
            row.createCell(63).setCellValue(h.getFieldValueByFieldNameBD("sbbb_premi").doubleValue());
            row.createCell(64).setCellValue(h.getFieldValueByFieldNameBD("sbbb_disc").doubleValue());
            row.createCell(65).setCellValue(h.getFieldValueByFieldNameBD("sbpb_premi").doubleValue());
            row.createCell(66).setCellValue(h.getFieldValueByFieldNameBD("sbpb_disc").doubleValue());
            row.createCell(67).setCellValue(h.getFieldValueByFieldNameBD("sbapb_premi").doubleValue());
            row.createCell(68).setCellValue(h.getFieldValueByFieldNameBD("sbapb_disc").doubleValue());
            row.createCell(69).setCellValue(h.getFieldValueByFieldNameBD("sbmb_premi").doubleValue());
            row.createCell(70).setCellValue(h.getFieldValueByFieldNameBD("sbmb_disc").doubleValue());
            row.createCell(71).setCellValue(h.getFieldValueByFieldNameBD("kbgapb_premi").doubleValue());
            row.createCell(72).setCellValue(h.getFieldValueByFieldNameBD("kbgapb_disc").doubleValue());
            row.createCell(73).setCellValue(h.getFieldValueByFieldNameBD("kbgpb_premi").doubleValue());
            row.createCell(74).setCellValue(h.getFieldValueByFieldNameBD("kbgpb_disc").doubleValue());
            row.createCell(75).setCellValue(h.getFieldValueByFieldNameBD("kbgbb_premi").doubleValue());
            row.createCell(76).setCellValue(h.getFieldValueByFieldNameBD("kbgbb_disc").doubleValue());
            row.createCell(77).setCellValue(h.getFieldValueByFieldNameBD("kbgmb_premi").doubleValue());
            row.createCell(78).setCellValue(h.getFieldValueByFieldNameBD("kbgmb_disc").doubleValue());
            row.createCell(79).setCellValue(h.getFieldValueByFieldNameBD("auto_premi").doubleValue());
            row.createCell(80).setCellValue(h.getFieldValueByFieldNameBD("auto_disc").doubleValue());
            row.createCell(81).setCellValue(h.getFieldValueByFieldNameBD("cgl_premi").doubleValue());
            row.createCell(82).setCellValue(h.getFieldValueByFieldNameBD("cgl_disc").doubleValue());
            row.createCell(83).setCellValue(h.getFieldValueByFieldNameBD("el_premi").doubleValue());
            row.createCell(84).setCellValue(h.getFieldValueByFieldNameBD("el_disc").doubleValue());
            row.createCell(85).setCellValue(h.getFieldValueByFieldNameBD("mar_premi").doubleValue());
            row.createCell(86).setCellValue(h.getFieldValueByFieldNameBD("mar_disc").doubleValue());
            row.createCell(87).setCellValue(h.getFieldValueByFieldNameBD("glass_premi").doubleValue());
            row.createCell(88).setCellValue(h.getFieldValueByFieldNameBD("glass_disc").doubleValue());
            row.createCell(89).setCellValue(h.getFieldValueByFieldNameBD("pi_premi").doubleValue());
            row.createCell(90).setCellValue(h.getFieldValueByFieldNameBD("pi_disc").doubleValue());
            row.createCell(91).setCellValue(h.getFieldValueByFieldNameBD("boiler_premi").doubleValue());
            row.createCell(92).setCellValue(h.getFieldValueByFieldNameBD("boiler_disc").doubleValue());
            row.createCell(93).setCellValue(h.getFieldValueByFieldNameBD("wca_premi").doubleValue());
            row.createCell(94).setCellValue(h.getFieldValueByFieldNameBD("wca_disc").doubleValue());
            row.createCell(95).setCellValue(h.getFieldValueByFieldNameBD("ppju_premi").doubleValue());
            row.createCell(96).setCellValue(h.getFieldValueByFieldNameBD("ppju_disc").doubleValue());
            row.createCell(97).setCellValue(h.getFieldValueByFieldNameBD("health_premi").doubleValue());
            row.createCell(98).setCellValue(h.getFieldValueByFieldNameBD("health_disc").doubleValue());
            row.createCell(99).setCellValue(h.getFieldValueByFieldNameBD("par_premi").doubleValue());
            row.createCell(100).setCellValue(h.getFieldValueByFieldNameBD("par_disc").doubleValue());
            row.createCell(101).setCellValue(h.getFieldValueByFieldNameBD("cecr_premi").doubleValue());
            row.createCell(102).setCellValue(h.getFieldValueByFieldNameBD("cecr_disc").doubleValue());
            row.createCell(103).setCellValue(h.getFieldValueByFieldNameBD("fg_premi").doubleValue());
            row.createCell(104).setCellValue(h.getFieldValueByFieldNameBD("fg_disc").doubleValue());
            row.createCell(105).setCellValue(h.getFieldValueByFieldNameBD("hole_premi").doubleValue());
            row.createCell(106).setCellValue(h.getFieldValueByFieldNameBD("hole_disc").doubleValue());
            row.createCell(107).setCellValue(h.getFieldValueByFieldNameBD("total_premi").doubleValue());
            row.createCell(108).setCellValue(h.getFieldValueByFieldNameBD("total_diskon").doubleValue());
            
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_RPP_COMPANY()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("code");
            row0.createCell(1).setCellValue("cabang");
            row0.createCell(2).setCellValue("ID");
            row0.createCell(3).setCellValue("nama");
            row0.createCell(4).setCellValue("alamat");
            row0.createCell(5).setCellValue("gl code");
            row0.createCell(6).setCellValue("premi");
            row0.createCell(7).setCellValue("bpol");
            row0.createCell(8).setCellValue("bmat");
            row0.createCell(9).setCellValue("diskon");
            row0.createCell(10).setCellValue("hfee");
            row0.createCell(11).setCellValue("komisi");
            row0.createCell(12).setCellValue("feebase");
            row0.createCell(13).setCellValue("bfee");
            row0.createCell(14).setCellValue("pajak");
            
            BigDecimal nd_comm = null;
            BigDecimal nd_taxcomm = null;
            nd_comm         = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_comm3"));
            nd_taxcomm      = BDUtil.add(h.getFieldValueByFieldNameBD("nd_taxcomm1"), h.getFieldValueByFieldNameBD("nd_taxcomm3"));
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("ent_id").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("address"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("gl_code"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("premi_amt").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("diskon_premi").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            row.createCell(11).setCellValue(nd_comm.doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("feebase").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            row.createCell(14).setCellValue(nd_taxcomm.doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_RPP_COMPANY100()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("code");
            row0.createCell(1).setCellValue("cabang");
            row0.createCell(2).setCellValue("ID");
            row0.createCell(3).setCellValue("nama");
            row0.createCell(4).setCellValue("premi");
            row0.createCell(5).setCellValue("bpol");
            row0.createCell(6).setCellValue("bmat");
            row0.createCell(7).setCellValue("diskon");
            row0.createCell(8).setCellValue("hfee");
            row0.createCell(9).setCellValue("komisi");
            row0.createCell(10).setCellValue("nd_feebase");
            row0.createCell(11).setCellValue("bfee");
            row0.createCell(12).setCellValue("pajak");
            
            BigDecimal nd_comm      = null;
            BigDecimal nd_taxcomm   = null;
            nd_comm     = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_comm3"));
            nd_taxcomm  = BDUtil.add(h.getFieldValueByFieldNameBD("nd_taxcomm1"), h.getFieldValueByFieldNameBD("nd_taxcomm3"));
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("ent_id").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_amt").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("diskon_premi").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            row.createCell(9).setCellValue(nd_comm.doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("nd_feebase").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            row.createCell(12).setCellValue(nd_taxcomm.doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_RPP_JENIS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("cabang");
            row0.createCell(1).setCellValue("jenis");
            row0.createCell(2).setCellValue("polis");
            row0.createCell(3).setCellValue("endorse");
            row0.createCell(4).setCellValue("premi");
            row0.createCell(5).setCellValue("bpol");
            row0.createCell(6).setCellValue("bmat");
            row0.createCell(7).setCellValue("diskon");
            row0.createCell(8).setCellValue("hfee");
            row0.createCell(9).setCellValue("komisi");
            row0.createCell(10).setCellValue("feebase");
            row0.createCell(11).setCellValue("bfee");
            row0.createCell(12).setCellValue("pajak");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cabang"));
            row.createCell(1).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jenis")));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("polis").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("endorse").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_amt").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("diskon_premi").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("feebase").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("tax").doubleValue());
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_RPP_JENIS100()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("cabang");
            row0.createCell(1).setCellValue("jenis");
            row0.createCell(2).setCellValue("polis");
            row0.createCell(3).setCellValue("endorse");
            row0.createCell(4).setCellValue("premi");
            row0.createCell(5).setCellValue("bpol");
            row0.createCell(6).setCellValue("bmat");
            row0.createCell(7).setCellValue("diskon");
            row0.createCell(8).setCellValue("hfee");
            row0.createCell(9).setCellValue("komisi");
            row0.createCell(10).setCellValue("feebase");
            row0.createCell(11).setCellValue("bfee");
            row0.createCell(12).setCellValue("pajak");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cabang"));
            row.createCell(1).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jenis")));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("polis").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("endorse").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_amt").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("diskon_premi").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("feebase").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("tax").doubleValue());
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_REKAP7()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("pol_type_id");
            row0.createCell(1).setCellValue("description");
            row0.createCell(2).setCellValue("umum");
            row0.createCell(3).setCellValue("pemda");
            row0.createCell(4).setCellValue("perusda");
            row0.createCell(5).setCellValue("bpd");
            row0.createCell(6).setCellValue("premi (setelah diskon)");
            
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            row.createCell(1).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("description")));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("umum").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("pemda").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("perusda").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("bpd").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("premi_total_adisc").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_REKAP1()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("cc_code");
            row0.createCell(1).setCellValue("description");
            row0.createCell(2).setCellValue("umum");
            row0.createCell(3).setCellValue("pemda");
            row0.createCell(4).setCellValue("perusda");
            row0.createCell(5).setCellValue("bpd");
            row0.createCell(6).setCellValue("premi (setelah diskon)");
            
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("umum").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("pemda").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("perusda").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("bpd").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("premi_total_adisc").doubleValue());
            
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public String getStBranchName() {
        return stBranchName;
    }
    
    public void setStBranchName(String stBranchName) {
        this.stBranchName = stBranchName;
    }
    
    public DTOList REKAP_RESTITUSI() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.pol_no,b.ref1,b.ref6,b.refd2,b.refd5, "+
                " b.insured_amount,b.ref15 as ref2,b.refn5,b.refn6 as refn4,b.refn12 as refn3"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ent_master e on e.ent_id = a.entity_id"
                );
        
        sqa.addClause("b.refd5 is not null");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (restFrom!=null) {
            sqa.addClause("date_trunc('day',b.refd5) >= ?");
            sqa.addPar(restFrom);
        }
        
        if (restTo!=null) {
            sqa.addClause("date_trunc('day',b.refd5) <= ?");
            sqa.addPar(restTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList REKAP_REST_BROKER() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.pol_no,a.cust_name,b.ref1,b.ref12,b.ref6,b.refd2,b.refd5, "+
                " b.insured_amount,b.ref15 as ref2,b.refn5,b.refn6 as refn4,b.refn12 as refn3, a.pol_id"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ent_master e on e.ent_id = a.entity_id"
                );
        
        sqa.addClause("b.refd5 is not null");
        
        //sqa.addClause("b.ref12 is not null");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (restFrom!=null) {
            sqa.addClause("date_trunc('day',b.refd5) >= ?");
            sqa.addPar(restFrom);
        }
        
        if (restTo!=null) {
            sqa.addClause("date_trunc('day',b.refd5) <= ?");
            sqa.addPar(restTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stNoUrut!=null) {
            sqa.addClause("b.ref12 like ?");
            sqa.addPar('%'+stNoUrut+'%');
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_REKAP_COINS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.pol_no,e.ent_name,g.vs_description,a.cust_name, "+
                " (select count(y.ref1) "+
                " from ins_policy x "+
                " inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                " where x.pol_id = a.pol_id) as debitur, "+
                " b.share_pct,(a.premi_total*a.ccy_rate) as premi,(b.premi_amt*a.ccy_rate) as premi_amt, "+
                " getpremiend(b.entity_id,((coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate)),coalesce(b.comm_amount,0)*a.ccy_rate) as komisi, "+
                " getpremiend(b.entity_id,(coalesce(a.nd_hfee,0)*a.ccy_rate),coalesce(b.hfee_amount,0)*a.ccy_rate) as nd_hfee, "+
                " getpremiend(b.entity_id,((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)),coalesce(b.broker_amount,0)*a.ccy_rate) as brok"
                );
        
        sqa.addQuery("from       ins_policy a "+
                " inner join ins_pol_coins b on b.policy_id = a.pol_id "+
                " left join ent_master e on e.ent_id = b.entity_id "+
                " left join ent_master f on f.ent_id = a.entity_id "+
                " left join s_company_group g on g.vs_code = f.ref2::bigint"
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        sqa.addClause("b.coins_type = 'COINS'");
        sqa.addClause("a.cover_type_code = 'COINSOUTSELF'");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no,b.entity_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_REKAP_RESTITUSI() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.pol_no,b.ref1,b.ref6,b.refd2,b.refd5, "+
                " (b.insured_amount*-1) as insured_amount,b.ref15,(round(b.insured_amount*(b.refn5/1000),0)*-1) as premi,(b.refn6*-1) as refn6,b.refn12"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ent_master e on e.ent_id = a.entity_id"
                );
        
        sqa.addClause("b.refd5 is not null");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (restFrom!=null) {
            sqa.addClause("date_trunc('day',b.refd5) >= ?");
            sqa.addPar(restFrom);
        }
        
        if (restTo!=null) {
            sqa.addClause("date_trunc('day',b.refd5) <= ?");
            sqa.addPar(restTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_REKAP_REST_BROKER() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.pol_no,a.cust_name,b.ref1,b.ref12,b.ref6,b.refd2,b.refd5, "+
                "(b.insured_amount*-1) as insured_amount,b.ref15,(round(b.insured_amount*(b.refn5/1000),0)*-1) as premi,(b.refn6*-1) as refn6,b.refn12"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join ent_master e on e.ent_id = a.entity_id"
                );
        
        sqa.addClause("b.refd5 is not null");
        
        //sqa.addClause("b.ref12 is not null");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (restFrom!=null) {
            sqa.addClause("date_trunc('day',b.refd5) >= ?");
            sqa.addPar(restFrom);
        }
        
        if (restTo!=null) {
            sqa.addClause("date_trunc('day',b.refd5) <= ?");
            sqa.addPar(restTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stNoUrut!=null) {
            sqa.addClause("b.ref12 like ?");
            sqa.addPar('%'+stNoUrut+'%');
        }
        
        final String sql = sqa.getSQL()+" order by a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_REKAP_COINS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header0
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("REKAP PENERIMAAN PREMI");
            
            //bikin header1
            XSSFRow row1 = sheet.createRow(1);
            row1.createCell(0).setCellValue("DARI "+ h.getFieldValueByFieldNameST("vs_description") +" MELALUI BROKER PT.PAN");
            
            //bikin header2
            XSSFRow row2 = sheet.createRow(2);
            row2.createCell(0).setCellValue("PERIODE : "+DateUtil.getDateStr(getPolicyDateFrom())+" s/d "+DateUtil.getDateStr(getPolicyDateTo()));
            
            //bikin header1
            XSSFRow row3 = sheet.createRow(4);
            row3.createCell(0).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            
            //bikin header
            XSSFRow row4 = sheet.createRow(5);
            row4.createCell(0).setCellValue("POLIS");
            row4.createCell(1).setCellValue("NAMA CABANG/KCP BJB");
            row4.createCell(2).setCellValue("JUMLAH");
            row4.createCell(3).setCellValue("PREMI BRUTO");
            row4.createCell(4).setCellValue("SHARE "+String.valueOf(h.getFieldValueByFieldNameBD("share_pct").doubleValue())+" %");
            row4.createCell(5).setCellValue("KOMISI");
            row4.createCell(6).setCellValue("BFEE");
            row4.createCell(7).setCellValue("HFEE");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+6);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("debitur").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("premi").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_amt").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_REKAP_RESTITUSI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("No Polis");
            row0.createCell(1).setCellValue("Nama Peserta");
            row0.createCell(2).setCellValue("Jangka Waktu");
            row0.createCell(3).setCellValue("Tanggal Realisasi");
            row0.createCell(4).setCellValue("Tanggal Restitusi");
            row0.createCell(5).setCellValue("Harga Pertanggungan");
            row0.createCell(6).setCellValue("Sisa Kontrak");
            row0.createCell(7).setCellValue("Premi");
            row0.createCell(8).setCellValue("Pengembalian Premi");
            
           
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("ref6"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("refd2"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("refd5"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("ref15"));
            if (h.getFieldValueByFieldNameBD("refn12")!=null) {
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("refn12").doubleValue());
            } else {
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("premi").doubleValue());
            }
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("refn6").doubleValue());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_REKAP_REST_BROKER()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Nama Cabang/KCP BJB");
            row0.createCell(1).setCellValue("No Polis");
            row0.createCell(2).setCellValue("Nama Peserta");
            row0.createCell(3).setCellValue("Jangka Waktu");
            row0.createCell(4).setCellValue("Tanggal Realisasi");
            row0.createCell(5).setCellValue("Tanggal Restitusi");
            row0.createCell(6).setCellValue("Harga Pertanggungan");
            row0.createCell(7).setCellValue("Sisa Kontrak");
            row0.createCell(8).setCellValue("Premi");
            row0.createCell(9).setCellValue("Pengembalian Premi");
            
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("ref6"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("refd2"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameDT("refd5"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("ref15"));
            if (h.getFieldValueByFieldNameBD("refn12")!=null) {
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("refn12").doubleValue());
            } else {
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("premi").doubleValue());
            }
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("refn6").doubleValue());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public String getStCreateID() {
        return stCreateID;
    }
    
    public void setStCreateID(String stCreateID) {
        this.stCreateID = stCreateID;
    }
    
    public String getStCreateName() {
        return stCreateName;
    }
    
    public void setStCreateName(String stCreateName) {
        this.stCreateName = stCreateName;
    }
    
    public DTOList RKP_CONFIRM() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "a.pol_id,a.pol_no,a.claim_object_id,b.ref1,a.ccy,a.claim_amount,a.claim_cust_amount,a.cc_code,a.pol_type_id,a.claim_letter_no, "+
                "(select x.ins_item_id from ins_pol_items x where x.pol_id = a.pol_id and x.ins_item_id = '54') as a, "+
                "(select x.ins_item_id from ins_pol_items x where x.pol_id = a.pol_id and x.ins_item_id = '50') as b "
                );
        
        sqa.addQuery("   from ins_policy a "+
                "	inner join ins_pol_obj b on b.ins_pol_obj_id = a.claim_object_id"
                );
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stNoUrut!=null) {
            sqa.addClause("a.claim_letter_no like ?");
            sqa.addPar('%'+stNoUrut+'%');
        }
        
        final String sql = "select pol_id,pol_no,claim_object_id,ref1,ccy,claim_amount,claim_cust_amount,cc_code,pol_type_id,claim_letter_no,"+
                "coalesce(a,b) as parent_id from ( "+sqa.getSQL()+" ) x order by pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public Date getClaimDateFrom() {
        return claimDateFrom;
    }
    
    public void setClaimDateFrom(Date claimDateFrom) {
        this.claimDateFrom = claimDateFrom;
    }
    
    public Date getClaimDateTo() {
        return claimDateTo;
    }
    
    public void setClaimDateTo(Date claimDateTo) {
        this.claimDateTo = claimDateTo;
    }
    
    public String getStRekapNo() {
        return stRekapNo;
    }
    
    public void setStRekapNo(String stRekapNo) {
        this.stRekapNo = stRekapNo;
    }
    
    public String getStAuthorized() {
        return stAuthorized;
    }
    
    public void setStAuthorized(String stAuthorized) {
        this.stAuthorized = stAuthorized;
    }
    
    public DTOList EXCEL_KLAIM_POS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	c.description,a.ins_policy_type_grp_id,a.dla_no,a.status,a.pol_id,a.pol_no,a.policy_date, "+
                " getname(a.ins_policy_type_grp_id=10,a.claim_client_name,f.ref1) as cust_name,d.short_desc,f.insured_amount, "+
                " getpremi(a.cover_type_code = 'DIRECT' or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUT'),(a.claim_amount*a.ccy_rate),getbordero3((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER') or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id = 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS' and b.entity_id = 1),(a.claim_amount*a.ccy_rate))) as claim_amount, "+
                " getpremi(a.cover_type_code = 'DIRECT' or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUT'),(b.claim_amt*a.ccy_rate),getbordero3((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER') or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id = 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS' and b.entity_id = 1),(a.claim_amount*a.ccy_rate))) as hutang, "+
                " getbordero3((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER' and b.entity_id <> 1) or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id <> 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS' and b.entity_id <> 1),(b.claim_amt*a.ccy_rate)) as piutang, "+
                " f.refd1,f.refd2,f.refd3,a.claim_date,a.dla_date,a.claim_approved_date,checkstatus(b.entity_id = 1,'OR',e.short_name) as short_name,a.claim_cause_desc, "+
                " (select g.claim_no "+
                " from ar_invoice g "+
                " where g.attr_pol_id = a.pol_id and " +
                " ((INVOICE_NO LIKE 'L%' AND CLAIM_NO IS NOT NULL) or (INVOICE_NO like 'K%' AND CLAIM_NO IS NOT NULL)) " +
                " group by g.claim_no) as claim_no "
                );
        
        sqa.addQuery(" from ins_policy a "+
                " inner join ins_pol_coins b on b.policy_id = a.pol_id "+
                " inner join ins_pol_obj f on f.ins_pol_obj_id = a.claim_object_id "+
                " left join gl_cost_center c on c.cc_code = a.cc_code "+
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id "+
                " left join ent_master e on e.ent_id = b.entity_id "+
                " left join ent_master g on g.ent_id = a.entity_id "
                );
        
        sqa.addClause("a.claim_status = 'DLA'");
        sqa.addClause("b.claim_amt <> 0");
        sqa.addClause("((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER') or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id <> 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS'))");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (stFltClaimStatus!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(stFltClaimStatus);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("g.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL()+" order by a.cc_code,a.ins_policy_type_grp_id,a.dla_no,b.coins_type,b.entity_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList KLAIM2() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" a.* ");
        
        sqa.addQuery(" from claim a ");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("a.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stItemClaimID!=null) {
            if (stItemClaimID.equalsIgnoreCase("1")){
                sqa.addClause("a.item_klaim = 54 ");
            } else {
                sqa.addClause("a.item_klaim = 50 ");
            }
        }
        
        final String sql = sqa.getSQL();
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStPolicyTypeID()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        return l;
        
    }
    
    public void EXPORT_KLAIM_POS()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        BigDecimal total = new BigDecimal(0);
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Daerah");
            row0.createCell(1).setCellValue("No. LKS");
            row0.createCell(2).setCellValue("No. LKP");
            row0.createCell(3).setCellValue("No. Polis");
            row0.createCell(4).setCellValue("Nama Bank");
            row0.createCell(5).setCellValue("Nama Tertanggung");
            row0.createCell(6).setCellValue("K.O.B");
            row0.createCell(7).setCellValue("Insured Amount");
            row0.createCell(8).setCellValue("Claim Amount");
            row0.createCell(9).setCellValue("Koas Dibayar");
            row0.createCell(10).setCellValue("Koas Diterima");
            row0.createCell(11).setCellValue("Hutang Klaim");
            row0.createCell(12).setCellValue("Piutang Klaim");
            row0.createCell(13).setCellValue("Tanggal Klaim");
            row0.createCell(14).setCellValue("Tanggal LKP");
            row0.createCell(15).setCellValue("Tanggal Setujui");
            row0.createCell(16).setCellValue("Tanggal Polis");
            row0.createCell(17).setCellValue("Penyebab Klaim");
            row0.createCell(18).setCellValue("Keterangan");
            row0.createCell(19).setCellValue("No Klaim");
            row0.createCell(20).setCellValue("Pol ID");
            if (h.getFieldValueByFieldNameDT("refd1")!=null)
                row0.createCell(21).setCellValue("Tanggal Lahir");
            if (h.getFieldValueByFieldNameDT("refd2")!=null)
                row0.createCell(22).setCellValue("Tanggal Awal");
            if (h.getFieldValueByFieldNameDT("refd3")!=null)
                row0.createCell(23).setCellValue("Tanggal Akhir");
            row0.createCell(24).setCellValue("LKS Amount");
            
//            String endorse = h.getFieldValueByFieldNameST("status");
//            if (endorse.equalsIgnoreCase("CLAIM ENDORSE")) {
//                claim = h.getFieldValueByFieldNameBD("endorse");
//            } else {
//                claim = h.getFieldValueByFieldNameBD("claim_amount");
//            }
            
            
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("pla_no"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("dla_no"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("customer_name"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("short_desc"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("claim_amount").doubleValue());
            row.createCell(9).setCellValue(total.doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm1")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm1").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount_endorse")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("claim_amount_endorse").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm1")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm1").doubleValue());
            if (h.getFieldValueByFieldNameDT("claim_date")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameDT("claim_date"));
            if (h.getFieldValueByFieldNameDT("dla_date")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameDT("dla_date"));
            if (h.getFieldValueByFieldNameDT("claim_approved_date")!=null)
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameDT("claim_approved_date"));
            if (h.getFieldValueByFieldNameDT("policy_date")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            if (h.getFieldValueByFieldNameST("claim_cause_desc")!=null)
                row.createCell(17).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("claim_cause_desc")));
            if (h.getFieldValueByFieldNameST("coinsurer_name")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameST("coinsurer_name"));
            if (h.getFieldValueByFieldNameST("claim_no")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameST("claim_no"));
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameST("pol_id"));
            if (h.getFieldValueByFieldNameDT("refd1")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameDT("refd1"));
            if (h.getFieldValueByFieldNameDT("refd2")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameDT("refd2"));
            if (h.getFieldValueByFieldNameDT("refd3")!=null)
                row.createCell(23).setCellValue(h.getFieldValueByFieldNameDT("refd3"));
            row.createCell(24).setCellValue(getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getDbClaimAmount().doubleValue());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public void EXPORT_KLAIM_POS_PLA()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        BigDecimal total = new BigDecimal(0);
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("Daerah");
            row0.createCell(1).setCellValue("No. LKS");
            row0.createCell(2).setCellValue("No. Polis");
            row0.createCell(3).setCellValue("Nama Tertanggung");
            row0.createCell(4).setCellValue("K.O.B");
            row0.createCell(5).setCellValue("Insured Amount");
            row0.createCell(6).setCellValue("Claim Amount");
            row0.createCell(7).setCellValue("Koas Dibayar");
            row0.createCell(8).setCellValue("Koas Diterima");
            row0.createCell(9).setCellValue("Hutang Klaim");
            row0.createCell(10).setCellValue("Piutang Klaim");
            row0.createCell(11).setCellValue("Tanggal Klaim");
            row0.createCell(12).setCellValue("Tanggal LKS");
            row0.createCell(13).setCellValue("Tanggal Setujui");
            row0.createCell(14).setCellValue("Tanggal Polis");
            row0.createCell(15).setCellValue("Penyebab Klaim");
            row0.createCell(16).setCellValue("Keterangan");
            row0.createCell(17).setCellValue("Pol ID");
            if (h.getFieldValueByFieldNameDT("refd1")!=null)
                row0.createCell(18).setCellValue("Tanggal Lahir");
            if (h.getFieldValueByFieldNameDT("refd2")!=null)
                row0.createCell(19).setCellValue("Tanggal Awal");
            if (h.getFieldValueByFieldNameDT("refd3")!=null)
                row0.createCell(20).setCellValue("Tanggal Akhir");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("pla_no"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("short_desc"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("claim_amount").doubleValue());
            row.createCell(7).setCellValue(total.doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm1")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm1").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount_endorse")!=null)
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("claim_amount_endorse").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_taxcomm1")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("nd_taxcomm1").doubleValue());
            if (h.getFieldValueByFieldNameDT("claim_date")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameDT("claim_date"));
            if (h.getFieldValueByFieldNameDT("pla_date")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameDT("pla_date"));
            if (h.getFieldValueByFieldNameDT("approved_date")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameDT("approved_date"));
            if (h.getFieldValueByFieldNameDT("policy_date")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            if (h.getFieldValueByFieldNameST("claim_cause_desc")!=null)
                row.createCell(15).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("claim_cause_desc")));
            if (h.getFieldValueByFieldNameST("coinsurer_name")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("coinsurer_name"));
            if (h.getFieldValueByFieldNameBD("pol_id")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            if (h.getFieldValueByFieldNameDT("refd1")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameDT("refd1"));
            if (h.getFieldValueByFieldNameDT("refd2")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameDT("refd2"));
            if (h.getFieldValueByFieldNameDT("refd3")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameDT("refd3"));
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_REKAP_KLAIM_JENIS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        BigDecimal total = new BigDecimal(0);
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            if (claimDateFrom!=null) {
                XSSFRow row1 = sheet.createRow(0);
                row1.createCell(0).setCellValue("TANGGAL KLAIM : "+DateUtil.getDateStr(getClaimDateFrom())+" sd "+DateUtil.getDateStr(getClaimDateTo()));
            }
            
            if (DLADateFrom!=null) {
                XSSFRow row2 = sheet.createRow(1);
                row2.createCell(0).setCellValue("TANGGAL DLA : "+DateUtil.getDateStr(getDLADateFrom())+" sd "+DateUtil.getDateStr(getDLADateTo()));
            }
            
            if (appDateFrom!=null) {
                XSSFRow row3 = sheet.createRow(2);
                row3.createCell(0).setCellValue("TANGGAL SETUJUI : "+DateUtil.getDateStr(getAppDateFrom())+" sd "+DateUtil.getDateStr(getAppDateTo()));
            }
            
            if (stBranch!=null) {
                XSSFRow row4 = sheet.createRow(3);
                row4.createCell(0).setCellValue("CABANG : "+ getStBranchDesc().toUpperCase());
            }
            
            //bikin header
            XSSFRow row0 = sheet.createRow(5);
            row0.createCell(0).setCellValue("Code");
            row0.createCell(1).setCellValue("Policy Type");
            row0.createCell(2).setCellValue("Claim Amount");
            row0.createCell(3).setCellValue("Premi Total");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+6);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            row.createCell(1).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("description")));
            if (h.getFieldValueByFieldNameBD("claim_amt")!=null)
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("claim_amt").doubleValue());
            if (getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getParentPolicy().getDbPremiTotal()!=null)
                row.createCell(3).setCellValue(getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getParentPolicy().getDbPremiTotal().doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList REKAPCABNONKOMISI() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("substr(a.pol_no,2,1) as bus_source ,"+
                "a.cc_code,b.ins_inward_flag as inward_flag,"+
                "sum(a.claim_amount_approved*a.ccy_rate) as claim_amount_approved_kurs, "+
                "sum(a.claim_amount*a.ccy_rate) as claim_amount_kurs,"+
                "sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi_amt,"+
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon_premi,"+
                "sum(getpremiend(d.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),(d.hfee_amount*a.ccy_rate)*-1)) as nd_hfee, "+
                "sum(getpremiend(d.entity_id,(coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate),((coalesce(d.comm_amount,0))*a.ccy_rate)*-1)) as komisi,"+
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)),(d.broker_amount*a.ccy_rate)*-1)) as brok");
        
        sqa.addQuery("   from " +
                "   ins_policy a" +
                "   inner join ent_master b on b.ent_id = a.entity_id " +
                "	inner join ins_pol_coins d on d.policy_id = a.pol_id "
                );
        
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        //sqa.addClause("d.entity_id = 1");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = "select bus_source,cc_code,inward_flag,claim_amount_approved_kurs,claim_amount_kurs,(premi_amt-diskon_premi-nd_hfee-komisi-brok) as premi_total_adisc from ("+
                sqa.getSQL()+" group by substr(a.pol_no,2,1),b.ins_inward_flag,a.cc_code ) x" +
                " order by bus_source,cc_code";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList REKAPJENISNONKOMISI() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("substr(a.pol_no,2,1) as bus_source ,"+
                "a.pol_type_id,b.ins_inward_flag as inward_flag,"+
                "sum(a.claim_amount_approved*a.ccy_rate) as claim_amount_approved_kurs, "+
                "sum(a.claim_amount*a.ccy_rate) as claim_amount_kurs,"+
                "sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi_amt,"+
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon_premi,"+
                "sum(getpremiend(d.entity_id,coalesce(a.nd_hfee*a.ccy_rate,0),(d.hfee_amount*a.ccy_rate)*-1)) as nd_hfee, "+
                "sum(getpremiend(d.entity_id,(coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate),((coalesce(d.comm_amount,0))*a.ccy_rate)*-1)) as komisi,"+
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)),(d.broker_amount*a.ccy_rate)*-1)) as brok");
        
        sqa.addQuery("   from " +
                "   ins_policy a" +
                "   inner join ent_master b on b.ent_id = a.entity_id " +
                "	inner join ins_pol_coins d on d.policy_id = a.pol_id "
                );
        
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        //sqa.addClause("d.entity_id = 1");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (status==null) {
            sqa.addClause("a.status in (?,?,?)");
            sqa.addPar(FinCodec.PolicyStatus.ENDORSE);
            sqa.addPar(FinCodec.PolicyStatus.POLICY);
            sqa.addPar(FinCodec.PolicyStatus.RENEWAL);
        }
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = "select bus_source,pol_type_id,inward_flag,claim_amount_approved_kurs,claim_amount_kurs,(premi_amt-diskon_premi-nd_hfee-komisi-brok) as premi_total_adisc from ("+
                sqa.getSQL()+" group by substr(a.pol_no,2,1),b.ins_inward_flag,a.pol_type_id ) x " +
                " order by bus_source,pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStPolicyTypeID()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public String getStPostCodeDesc() {
        return stPostCodeDesc;
    }
    
    public void setStPostCodeDesc(String stPostCodeDesc) {
        this.stPostCodeDesc = stPostCodeDesc;
    }
    
    private String stPostCode2;
    
    private String stPostCodeDesc2;
    
    public String getStPostCode2() {
        return stPostCode2;
    }
    
    public void setStPostCode2(String stPostCode2) {
        this.stPostCode2 = stPostCode2;
    }
    
    public String getStPostCodeDesc2() {
        return stPostCodeDesc2;
    }
    
    public void setStPostCodeDesc2(String stPostCodeDesc2) {
        this.stPostCodeDesc2 = stPostCodeDesc2;
    }
    
    public PostalCodeView getPostCode(String stPostCode) {
        final PostalCodeView postcode = (PostalCodeView) DTOPool.getInstance().getDTO(PostalCodeView.class, stPostCode);
        
        return postcode;
    }
    
    public DTOList EXCEL_REAS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.entity_id,a.policy_date,a.pol_type_id,a.period_start,a.period_end,a.pol_id,a.pol_no,a.cust_name as cust_name,b.ref5,b.risk_class,b.ref3,a.ccy,a.insured_amount,a.premi_total, "+
                "	(round(sum(i.premi_rate),4)||' %') as rate_method_desc,(round(a.share_pct,2)||' %') as rate_method,"+
                "(   	select sum(getkoas(z.ins_tsi_cat_id=6,z.insured_amount)) "+
                "		from ins_policy x "+
                "		inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "		inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "		where x.pol_id=a.pol_id) as building,  "+
                "(      select sum(getkoas(z.ins_tsi_cat_id=39,z.insured_amount)) "+
                "		from ins_policy x "+
                "		inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "		inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "		where x.pol_id=a.pol_id) as mesin, "+
                "(        select sum(getkoas(z.ins_tsi_cat_id=56,z.insured_amount)) "+
                "		from ins_policy x "+
                "		inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "		inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "		where x.pol_id=a.pol_id) as stock, "+
                "(       select sum(getkoas(z.ins_tsi_cat_id not in (6,39,56),z.insured_amount)) "+
                "		from ins_policy x "+
                "		inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "		inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "		where x.pol_id=a.pol_id) as inventaris, "+
                "		(	select coalesce(sum(y.amount),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id=1 "+
                "		where y.policy_id=a.pol_id) as tsi_askrida, "+
                "		(	select coalesce(sum(y.premi_amt),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id=1 "+
                "		where y.policy_id=a.pol_id) as premi_askrida, "+
                "		(	select coalesce(sum(y.amount),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id<>1 "+
                "		where y.policy_id=a.pol_id) as tsi_ko, "+
                "		(	select coalesce(sum(y.premi_amt),0) "+
                "		from ins_policy x "+
                "		inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id<>1 "+
                "		where y.policy_id=a.pol_id) as premi_ko, "+
                "	sum(checkreas(j.treaty_type='BPDAN',i.tsi_amount)) as tsi_bpdan, "+
                "	sum(checkreas(j.treaty_type='BPDAN',i.premi_amount)) as premi_bpdan, "+
                "	sum(checkreas(j.treaty_type='OR',i.tsi_amount)) as tsi_or, "+
                "	sum(checkreas(j.treaty_type='OR',i.premi_amount)) as premi_or, "+
                "	sum(checkreas(j.treaty_type='QS',i.tsi_amount)) as tsi_qs, "+
                "	sum(checkreas(j.treaty_type='QS',i.premi_amount)) as premi_qs, "+
                "	sum(checkreas(j.treaty_type='SPL',i.tsi_amount)) as tsi_spl, "+
                "	sum(checkreas(j.treaty_type='SPL',i.premi_amount)) as premi_spl, "+
                "	sum(checkreas(j.treaty_type='FAC',i.tsi_amount)) as tsi_fac, "+
                "	sum(checkreas(j.treaty_type='FAC',i.premi_amount)) as premi_fac, "+
                "	sum(checkreas(j.treaty_type='PARK',i.tsi_amount)) as tsi_park, "+
                "	sum(checkreas(j.treaty_type='PARK',i.premi_amount)) as premi_park, "+
                "	sum(checkreas(j.treaty_type='FACO',i.tsi_amount)) as tsi_faco, "+
                "	sum(checkreas(j.treaty_type='FACO',i.premi_amount)) as premi_faco, "+
                "	sum(checkreas(j.treaty_type='BPDAN',i.ricomm_amt)) as comm_bpdan, "+
                "	sum(checkreas(j.treaty_type='OR',i.ricomm_amt)) as comm_or, "+
                "	sum(checkreas(j.treaty_type='QS',i.ricomm_amt)) as comm_qs, "+
                "	sum(checkreas(j.treaty_type='SPL',i.ricomm_amt)) as comm_spl, "+
                "	sum(checkreas(j.treaty_type='FAC',i.ricomm_amt)) as comm_fac, "+
                "	sum(checkreas(j.treaty_type='PARK',i.ricomm_amt)) as comm_park, "+
                "	sum(checkreas(j.treaty_type='FACO',i.ricomm_amt)) as comm_faco, "+
                "	sum(checkreas(j.treaty_type='XOL1',i.tsi_amount)) as tsi_xol1, "+
                "	sum(checkreas(j.treaty_type='XOL2',i.tsi_amount)) as tsi_xol2, "+
                "	sum(checkreas(j.treaty_type='XOL3',i.tsi_amount)) as tsi_xol3, "+
                "	sum(checkreas(j.treaty_type='XOL4',i.tsi_amount)) as tsi_xol4, "+
                "	sum(checkreas(j.treaty_type='XOL5',i.tsi_amount)) as tsi_xol5, "+
                "	sum(checkreas(j.treaty_type='XOL1',i.premi_amount)) as premi_xol1, "+
                "	sum(checkreas(j.treaty_type='XOL2',i.premi_amount)) as premi_xol2, "+
                "	sum(checkreas(j.treaty_type='XOL3',i.premi_amount)) as premi_xol3, "+
                "	sum(checkreas(j.treaty_type='XOL4',i.premi_amount)) as premi_xol4, "+
                "	sum(checkreas(j.treaty_type='XOL5',i.premi_amount)) as premi_xol5"
                );
        
        sqa.addQuery("from "+
                "	ins_policy a "+
                "	inner join ins_pol_obj b on b.pol_id=a.pol_id "+
                "	inner join ins_policy_types f on f.pol_type_id =a.pol_type_id "+
                "	inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "	inner join ins_pol_treaty_detail h on h.ins_pol_treaty_id = g.ins_pol_treaty_id "+
                "	inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "	inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "	inner join ent_master k on k.ent_id = a.entity_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("k.category1 = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        }
        
        final String sql = sqa.getSQL()+" group by a.entity_id,a.policy_date,a.pol_type_id,a.period_start,a.period_end,a.pol_id,a.pol_no,a.cust_name," +
                " b.ref5,b.risk_class,b.ref3,a.ccy,a.insured_amount,a.premi_total,a.share_pct "+
                " order by a.pol_no asc";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_REAS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("policy date");
            row0.createCell(1).setCellValue("pol type id");
            row0.createCell(2).setCellValue("period start");
            row0.createCell(3).setCellValue("period end");
            row0.createCell(4).setCellValue("pol id");
            row0.createCell(5).setCellValue("pol no");
            row0.createCell(6).setCellValue("entity id");
            row0.createCell(7).setCellValue("cust name");
            row0.createCell(8).setCellValue("alamat");
            row0.createCell(9).setCellValue("kelas");
            row0.createCell(10).setCellValue("kode resiko");
            row0.createCell(11).setCellValue("ccy");
            row0.createCell(12).setCellValue("insured amount");
            row0.createCell(13).setCellValue("building");
            row0.createCell(14).setCellValue("machine");
            row0.createCell(15).setCellValue("stocks");
            row0.createCell(16).setCellValue("inventaris");
            row0.createCell(17).setCellValue("premi total");
            row0.createCell(18).setCellValue("rate method desc");
            row0.createCell(19).setCellValue("rate method");
            row0.createCell(20).setCellValue("tsi askrida");
            row0.createCell(21).setCellValue("premi askrida");
            row0.createCell(22).setCellValue("tsi ko");
            row0.createCell(23).setCellValue("premi ko");
            row0.createCell(24).setCellValue("tsi bpdan");
            row0.createCell(25).setCellValue("premi bpdan");
            row0.createCell(26).setCellValue("tsi or");
            row0.createCell(27).setCellValue("premi or");
            row0.createCell(28).setCellValue("tsi qs");
            row0.createCell(29).setCellValue("premi qs");
            row0.createCell(30).setCellValue("tsi spl");
            row0.createCell(31).setCellValue("premi spl");
            row0.createCell(32).setCellValue("tsi fac");
            row0.createCell(33).setCellValue("premi fac");
            row0.createCell(34).setCellValue("tsi park");
            row0.createCell(35).setCellValue("premi park");
            row0.createCell(36).setCellValue("tsi faco");
            row0.createCell(37).setCellValue("premi faco");
            row0.createCell(38).setCellValue("comm bpdan");
            row0.createCell(39).setCellValue("comm or");
            row0.createCell(40).setCellValue("comm qs");
            row0.createCell(41).setCellValue("comm spl");
            row0.createCell(42).setCellValue("comm fac");
            row0.createCell(43).setCellValue("comm park");
            row0.createCell(44).setCellValue("comm faco");
            row0.createCell(45).setCellValue("tsi xol1");
            row0.createCell(46).setCellValue("tsi xol2");
            row0.createCell(47).setCellValue("tsi xol3");
            row0.createCell(48).setCellValue("tsi xol4");
            row0.createCell(49).setCellValue("tsi xol5");
            row0.createCell(50).setCellValue("premi xol1");
            row0.createCell(51).setCellValue("premi xol2");
            row0.createCell(52).setCellValue("premi xol3");
            row0.createCell(53).setCellValue("premi xol4");
            row0.createCell(54).setCellValue("premi xol5");
            row0.createCell(55).setCellValue("trans date");
            row0.createCell(56).setCellValue("trans flag");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("entity_id"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            if (h.getFieldValueByFieldNameST("ref5")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("ref5"));
            if (h.getFieldValueByFieldNameST("risk_class")!=null)
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("risk_class"));
            if (h.getFieldValueByFieldNameST("ref3")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("ref3"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("building").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("mesin").doubleValue());
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("stock").doubleValue());
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("inventaris").doubleValue());
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            if (h.getFieldValueByFieldNameST("rate_method_desc")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameST("rate_method_desc"));
            if (h.getFieldValueByFieldNameST("rate_method")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameST("rate_method"));
            if (h.getFieldValueByFieldNameBD("tsi_askrida")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("tsi_askrida").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_askrida")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("premi_askrida").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_ko")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("tsi_ko").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_ko")!=null)
                row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("premi_ko").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_bpdan")!=null)
                row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("tsi_bpdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_bpdan")!=null)
                row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("premi_bpdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_or")!=null)
                row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("tsi_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_or")!=null)
                row.createCell(27).setCellValue(h.getFieldValueByFieldNameBD("premi_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_qs")!=null)
                row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("tsi_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_qs")!=null)
                row.createCell(29).setCellValue(h.getFieldValueByFieldNameBD("premi_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_spl")!=null)
                row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("tsi_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_spl")!=null)
                row.createCell(31).setCellValue(h.getFieldValueByFieldNameBD("premi_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_fac")!=null)
                row.createCell(32).setCellValue(h.getFieldValueByFieldNameBD("tsi_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_fac")!=null)
                row.createCell(33).setCellValue(h.getFieldValueByFieldNameBD("premi_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_park")!=null)
                row.createCell(34).setCellValue(h.getFieldValueByFieldNameBD("tsi_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_park")!=null)
                row.createCell(35).setCellValue(h.getFieldValueByFieldNameBD("premi_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_faco")!=null)
                row.createCell(36).setCellValue(h.getFieldValueByFieldNameBD("tsi_faco").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_faco")!=null)
                row.createCell(37).setCellValue(h.getFieldValueByFieldNameBD("premi_faco").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_bpdan")!=null)
                row.createCell(38).setCellValue(h.getFieldValueByFieldNameBD("comm_bpdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_or")!=null)
                row.createCell(39).setCellValue(h.getFieldValueByFieldNameBD("comm_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_qs")!=null)
                row.createCell(40).setCellValue(h.getFieldValueByFieldNameBD("comm_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_spl")!=null)
                row.createCell(41).setCellValue(h.getFieldValueByFieldNameBD("comm_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_fac")!=null)
                row.createCell(42).setCellValue(h.getFieldValueByFieldNameBD("comm_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_park")!=null)
                row.createCell(43).setCellValue(h.getFieldValueByFieldNameBD("comm_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_faco")!=null)
                row.createCell(44).setCellValue(h.getFieldValueByFieldNameBD("comm_faco").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_xol1")!=null)
                row.createCell(45).setCellValue(h.getFieldValueByFieldNameBD("tsi_xol1").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_xol2")!=null)
                row.createCell(46).setCellValue(h.getFieldValueByFieldNameBD("tsi_xol2").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_xol3")!=null)
                row.createCell(47).setCellValue(h.getFieldValueByFieldNameBD("tsi_xol3").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_xol4")!=null)
                row.createCell(48).setCellValue(h.getFieldValueByFieldNameBD("tsi_xol4").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_xol5")!=null)
                row.createCell(49).setCellValue(h.getFieldValueByFieldNameBD("tsi_xol5").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_xol1")!=null)
                row.createCell(50).setCellValue(h.getFieldValueByFieldNameBD("premi_xol1").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_xol2")!=null)
                row.createCell(51).setCellValue(h.getFieldValueByFieldNameBD("premi_xol2").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_xol3")!=null)
                row.createCell(52).setCellValue(h.getFieldValueByFieldNameBD("premi_xol3").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_xol4")!=null)
                row.createCell(53).setCellValue(h.getFieldValueByFieldNameBD("premi_xol4").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_xol5")!=null)
                row.createCell(54).setCellValue(h.getFieldValueByFieldNameBD("premi_xol5").doubleValue());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public String getStStatus() {
        return stStatus;
    }
    
    public void setStStatus(String stStatus) {
        this.stStatus = stStatus;
    }
    
    public String getStYearTreaty() {
        return stYearTreaty;
    }
    
    public void setStYearTreaty(String stYearTreaty) {
        this.stYearTreaty = stYearTreaty;
    }
    
    public DTOList LAPDAN() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.pol_no,a.cc_code,a.ccy,a.ccy_rate,coalesce(a.premi_total,0) as premi_base,"+
                "sum(coalesce(i.premi_amount,0)) as premi_total,sum(coalesce(i.ricomm_amt,0)) as nd_comm1"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "left join ent_master k on k.ent_id = a.entity_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('OR','XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("k.category1 = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        }
        
        if (stYearTreaty!=null){
            sqa.addClause("substr(i.valid_ri_date::text,1,4) = ?");
            sqa.addPar(stYearTreaty);
        }
        
        final String sql = " select cc_code,ccy,sum(premi_base) as premi_base,sum(premi_total) as premi_total,sum(nd_comm1) as nd_comm1,sum(premi_total-nd_comm1) as premi_total_adisc "+
                " from ( "+sqa.getSQL()+" group by a.cc_code,a.ccy,a.ccy_rate,a.premi_total,a.pol_no ) x group by cc_code,ccy "+
                " order by cc_code";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList LAPDANPERBULAN() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.pol_no,a.cc_code,a.ccy,a.ccy_rate,coalesce(a.premi_total*a.ccy_rate,0) as premi_base,"+
                "sum(coalesce(i.premi_amount*a.ccy_rate,0)) as premi_total,sum(coalesce(i.ricomm_amt*a.ccy_rate,0)) as nd_comm1"
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj c on c.pol_id = a.pol_id "+
                "inner join ins_policy_types f on a.pol_type_id = f.pol_type_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = c.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id "+
                "left join ent_master k on k.ent_id = a.entity_id "
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        sqa.addClause("	j.treaty_type not in ('OR','XOL1','XOL2','XOL3','XOL4','XOL5')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("f.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("k.category1 = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stStatus!=null){
            sqa.addClause("a.status = ?");
            sqa.addPar(stStatus);
        }
        
        if (stYearTreaty!=null){
            sqa.addClause("substr(i.valid_ri_date::text,1,4) = ?");
            sqa.addPar(stYearTreaty);
        }
        
        final String sql = " select sum(premi_base) as premi_base,sum(premi_total) as premi_total,sum(nd_comm1) as nd_comm1,sum(premi_total-nd_comm1) as premi_total_adisc "+
                " from ( "+sqa.getSQL()+" group by a.cc_code,a.ccy,a.ccy_rate,a.premi_total,a.pol_no ) x ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_RISK_CONTROL() throws Exception {
        final boolean NON_EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("NON_EFFECTIVE"));
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                " a.create_who,a.endorse_notes,a.period_start,a.period_end," +
                " a.policy_date,(substr(a.period_end::text,1,4)::numeric-substr(a.period_start::text,1,4)::numeric)::text as years," +
                " a.status,a.pol_no,a.ref1 as nomor_pp,a.cust_name,a.ccy_rate,b.ins_pol_obj_id,b.ref1,b.ref2,b.ref3,b.ref4,b.ref5,b.ref6,b.ref7,b.ref8,b.ref9d as kode_pos,b.ref10,b.ref11, "+
                " b.ref1d,b.ref2d,b.ref3d,b.ref4d,b.ref5d,b.ref6d,b.ref7d,b.ref8d,b.ref11,b.risk_class,b.refd1,b.refd2,b.refd3, "+
                " f.ins_risk_cat_code, a.ccy,a.insured_amount,a.premi_total,b.insured_amount as insured_amount_e,b.premi_total_bcoins as premi_total_e,b.premi_total as premi_total_d, "+
                " round(((sum(i.premi_amount)/sum(case i.tsi_amount when 0 then 1 else i.tsi_amount end))*100),4) as rate_method_desc, "+
                " round(sum(i.premi_rate),5) as premi_rate,b.order_no, "+
                " round(a.share_pct,2) as rate_method, "+
                " (	select round(sum(z.rate),5) "+
                " from ins_policy x "+
                " inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                " inner join ins_pol_cover z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                " where y.ins_pol_obj_id=b.ins_pol_obj_id) as rate_cover, "+
                "(	select sum(getkoas(z.ins_tsi_cat_id=6,z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as building, "+
                "(	select sum(getkoas(z.ins_tsi_cat_id in (39,40),z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as machine, "+
                "(	select sum(getkoas(z.ins_tsi_cat_id in (56,57,58),z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as stock, "+
                "(	select sum(getkoas(z.ins_tsi_cat_id not in (6,39,40,56,57,58),z.insured_amount)) "+
                "	from ins_policy x "+
                "	inner join ins_pol_obj y on y.pol_id = x.pol_id "+
                "	inner join ins_pol_tsi z on z.ins_pol_obj_id = y.ins_pol_obj_id "+
                "	where y.ins_pol_obj_id=b.ins_pol_obj_id) as other, "+
                " round(sum(checkreas(j.treaty_type='OR',i.tsi_amount)),2) as tsi_or, "+
                " round(sum(checkreas(j.treaty_type='OR',i.premi_amount)),2) as premi_or, "+
                " round(sum(checkreas(j.treaty_type='OR',i.ricomm_amt)),2) as komisi_or, "+
                " round(sum(checkreas(j.treaty_type='BPDAN',i.tsi_amount)),2) as tsi_bppdan, "+
                " round(sum(checkreas(j.treaty_type='BPDAN',i.premi_amount)),2) as premi_bppdan, "+
                " round(sum(checkreas(j.treaty_type='BPDAN',i.ricomm_amt)),2) as komisi_bppdan, "+
                " round(sum(checkreas(j.treaty_type='SPL',i.tsi_amount)),2) as tsi_spl, "+
                " round(sum(checkreas(j.treaty_type='SPL',i.premi_amount)),2) as premi_spl, "+
                " round(sum(checkreas(j.treaty_type='SPL',i.ricomm_amt)),2) as komisi_spl, "+
                " round(sum(checkreas(j.treaty_type='FAC',i.tsi_amount)),2) as tsi_fac, "+
                " round(sum(checkreas(j.treaty_type='FAC',i.premi_amount)),2) as premi_fac, "+
                " round(sum(checkreas(j.treaty_type='FAC',i.ricomm_amt)),2) as komisi_fac, "+
                " round(sum(checkreas(j.treaty_type='QS',i.tsi_amount)),2) as tsi_qs, "+
                " round(sum(checkreas(j.treaty_type='QS',i.premi_amount)),2) as premi_qs, "+
                " round(sum(checkreas(j.treaty_type='QS',i.ricomm_amt)),2) as komisi_qs, "+
                " round(sum(checkreas(j.treaty_type='PARK',i.tsi_amount)),2) as tsi_park, "+
                " round(sum(checkreas(j.treaty_type='PARK',i.premi_amount)),2) as premi_park, "+
                " round(sum(checkreas(j.treaty_type='PARK',i.ricomm_amt)),2) as komisi_park, "+
                " round(sum(checkreas(j.treaty_type='FACO',i.tsi_amount)),2) as tsi_faco1, "+
                " round(sum(checkreas(j.treaty_type='FACO',i.premi_amount)),2) as premi_faco1, "+
                " round(sum(checkreas(j.treaty_type='FACO',i.ricomm_amt)),2) as komisi_faco1, "+
                " round(sum(checkreas(j.treaty_type='FACO3',i.tsi_amount)),2) as tsi_faco2, "+
                " round(sum(checkreas(j.treaty_type='FACO3',i.premi_amount)),2) as premi_faco2, "+
                " round(sum(checkreas(j.treaty_type='FACO3',i.ricomm_amt)),2) as komisi_faco2, "+
                " a.cover_type_code, "+
                " checkpremi(a.cover_type_code = 'COINSIN',(select y.share_pct "+
                " from ins_policy x "+
                " inner join ins_pol_coins y on y.policy_id = x.pol_id and y.entity_id = 1 "+
                " where x.pol_id = a.pol_id),a.share_pct) as member "
                );
        
        sqa.addQuery("from ins_policy a "+
                "inner join ins_pol_obj b on b.pol_id = a.pol_id "+
                "left join  ins_risk_cat f on f.ins_risk_cat_id = b.ins_risk_cat_id "+
                "inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id "+
                "inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id "+
                "inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id "+
                "inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause(" a.status IN ('POLICY','ENDORSE','RENEWAL','ENDORSE RI')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(periodEndFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(periodEndFrom);
        }
        
        if(periodEndTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(periodEndTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if (stPostCode!=null) {
            sqa.addClause("b.ref9 = ?");
            sqa.addPar(stPostCode);
        }
        
        if (stPostCodeDesc2!=null) {
            sqa.addClause("b.ref9d = ?");
            sqa.addPar(stPostCodeDesc2);
        }
        
        if (stZoneCode!=null) {
            sqa.addClause("d.zone_id = ?");
            sqa.addPar(stZoneCode);
        }
        
        if (stZoneEquakeName!=null) {
            sqa.addClause("b.ref2d = ?");
            sqa.addPar(stZoneEquakeName);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("j.treaty_type = ?");
            sqa.addPar(stFltTreatyType);
        }
        
        if (stYearTreaty!=null){
            sqa.addClause("substr(i.valid_ri_date::text,1,4) = ?");
            sqa.addPar(stYearTreaty);
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.effective_flag = 'Y'");
        }
        
        if (Tools.isNo(stIndex)) {
            sqa.addClause("a.effective_flag = 'N'");
        }
        
        String sql = "select * from ( " +sqa.getSQL()+ " group by a.endorse_notes,a.ref1,a.pol_id,a.status,a.pol_no,a.cust_name,a.period_start,a.period_end,a.policy_date,b.ref1,b.ref2,b.ref3,b.ref4,b.ref5,b.ref6,b.ref7,b.ref8,b.ref9d,b.ref10,b.ref11,f.ins_risk_cat_code,b.refd1,b.refd2,b.refd3, "+
                " a.create_who,a.ccy,a.ccy_rate,a.insured_amount,a.premi_total,b.insured_amount,b.premi_total_bcoins,b.premi_total,a.cover_type_code,a.share_pct,b.ins_pol_obj_id,b.ref1d,b.ref2d,b.ref3d,b.ref4d,b.ref5d,b.ref6d,b.ref7d,b.ref8d,b.risk_class,b.order_no "+
                " ) x ";
        
        if (getStTime()!=null) {
            sql = sql + " where years > '1' ";
        }
        
        sql = sql + "order by pol_no,ins_pol_obj_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_RISK_CONTROL()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        int norut = 0;
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("period_start");
            row0.createCell(1).setCellValue("period_end");
            row0.createCell(2).setCellValue("policy_date");
            row0.createCell(3).setCellValue("status");
            row0.createCell(4).setCellValue("pol_no");
            row0.createCell(5).setCellValue("cust_name");
            row0.createCell(6).setCellValue("norut");
            row0.createCell(7).setCellValue("ref1");
            row0.createCell(8).setCellValue("ref2");
            row0.createCell(9).setCellValue("ref3");
            row0.createCell(10).setCellValue("ref4");
            row0.createCell(11).setCellValue("ref5");
            row0.createCell(12).setCellValue("ref6");
            row0.createCell(13).setCellValue("ref7");
            row0.createCell(14).setCellValue("ref8");
            row0.createCell(15).setCellValue("kode_pos");
            row0.createCell(16).setCellValue("ins_risk_cat_code");
            row0.createCell(17).setCellValue("ccy");
            row0.createCell(18).setCellValue("kurs");
            row0.createCell(19).setCellValue("insured_amount");
            row0.createCell(20).setCellValue("premi_total");
            row0.createCell(21).setCellValue("insured_amount_e");
            row0.createCell(22).setCellValue("premi_total_e");
            row0.createCell(23).setCellValue("premi_total_d");
            row0.createCell(24).setCellValue("rate_method_desc");
            row0.createCell(25).setCellValue("premi_rate");
            row0.createCell(26).setCellValue("rate_method");
            row0.createCell(27).setCellValue("rate_cover");
            row0.createCell(28).setCellValue("building");
            row0.createCell(29).setCellValue("machine");
            row0.createCell(30).setCellValue("stock");
            row0.createCell(31).setCellValue("other");
            row0.createCell(32).setCellValue("tsi_or");
            row0.createCell(33).setCellValue("premi_or");
            row0.createCell(34).setCellValue("komisi_or");
            row0.createCell(35).setCellValue("tsi_bppdan");
            row0.createCell(36).setCellValue("premi_bppdan");
            row0.createCell(37).setCellValue("komisi_bppdan");
            row0.createCell(38).setCellValue("tsi_spl");
            row0.createCell(39).setCellValue("premi_spl");
            row0.createCell(40).setCellValue("komisi_spl");
            row0.createCell(41).setCellValue("tsi_fac");
            row0.createCell(42).setCellValue("premi_fac");
            row0.createCell(43).setCellValue("komisi_fac");
            row0.createCell(44).setCellValue("tsi_qs");
            row0.createCell(45).setCellValue("premi_qs");
            row0.createCell(46).setCellValue("komisi_qs");
            row0.createCell(47).setCellValue("tsi_park");
            row0.createCell(48).setCellValue("premi_park");
            row0.createCell(49).setCellValue("komisi_park");
            row0.createCell(50).setCellValue("tsi_faco1");
            row0.createCell(51).setCellValue("premi_faco1");
            row0.createCell(52).setCellValue("komisi_faco1");
            row0.createCell(53).setCellValue("tsi_faco2");
            row0.createCell(54).setCellValue("premi_faco2");
            row0.createCell(55).setCellValue("komisi_faco2");
            row0.createCell(56).setCellValue("cover_type_code");
            row0.createCell(57).setCellValue("member");
            row0.createCell(58).setCellValue("ref1d");
            row0.createCell(59).setCellValue("ref2d");
            row0.createCell(60).setCellValue("ref3d");
            row0.createCell(61).setCellValue("ref4d");
            row0.createCell(62).setCellValue("ref5d");
            row0.createCell(63).setCellValue("ref6d");
            row0.createCell(64).setCellValue("ref7d");
            row0.createCell(65).setCellValue("ref8d");
            row0.createCell(66).setCellValue("ref10");
            row0.createCell(67).setCellValue("ref11");
            row0.createCell(68).setCellValue("risk_class");
            row0.createCell(69).setCellValue("refd1");
            row0.createCell(70).setCellValue("refd2");
            row0.createCell(71).setCellValue("refd3");
            row0.createCell(72).setCellValue("jangka waktu");
            row0.createCell(73).setCellValue("endorse notes");
            row0.createCell(74).setCellValue("no urut debitur");
            
            if (getStYearTreaty()!=null) {
                
                stTreatyYear = String.valueOf(Integer.parseInt(getStYearTreaty()) + 1);
            }
            
            norut++;
            
            if(i>0){
                HashDTO s = (HashDTO) list.get(i-1);
                String nopol = s.getFieldValueByFieldNameST("pol_no");
                String nopol2 = h.getFieldValueByFieldNameST("pol_no");
                if(!nopol.equalsIgnoreCase(nopol2)){
                    
                    norut = 1;
                }
            }
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            if (getStYearTreaty()!=null){
                row.createCell(0).setCellValue(DateUtil.getDateStr(h.getFieldValueByFieldNameDT("period_start"),"dd/MM")+"/"+getStYearTreaty());
                row.createCell(1).setCellValue(DateUtil.getDateStr(h.getFieldValueByFieldNameDT("period_end"),"dd/MM")+"/"+stTreatyYear);
            } else {
                row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
                row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            }
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(6).setCellValue(String.valueOf(norut));
            if (h.getFieldValueByFieldNameST("ref1")!=null)
                row.createCell(7).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref1")));
            if (h.getFieldValueByFieldNameST("ref2")!=null)
                row.createCell(8).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref2")));
            if (h.getFieldValueByFieldNameST("ref3")!=null)
                row.createCell(9).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref3")));
            if (h.getFieldValueByFieldNameST("ref4")!=null)
                row.createCell(10).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref4")));
            if (h.getFieldValueByFieldNameST("ref5")!=null)
                row.createCell(11).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref5")));
            if (h.getFieldValueByFieldNameST("ref6")!=null)
                row.createCell(12).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref6")));
            if (h.getFieldValueByFieldNameST("ref7")!=null)
                row.createCell(13).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref7")));
            if (h.getFieldValueByFieldNameST("ref8")!=null)
                row.createCell(14).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref8")));
            if (h.getFieldValueByFieldNameST("kode_pos")!=null)
                row.createCell(15).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("kode_pos")));
            if (h.getFieldValueByFieldNameST("ins_risk_cat_code")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("ins_risk_cat_code"));
            if (h.getFieldValueByFieldNameST("ccy")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            if (h.getFieldValueByFieldNameBD("ccy_rate")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            if (h.getFieldValueByFieldNameBD("insured_amount_e")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("insured_amount_e").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total_e")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("premi_total_e").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total_d")!=null)
                row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("premi_total_d").doubleValue());
            if (h.getFieldValueByFieldNameBD("rate_method_desc")!=null)
                row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("rate_method_desc").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_rate")!=null)
                row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("premi_rate").doubleValue());
            if (h.getFieldValueByFieldNameBD("rate_method")!=null)
                row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("rate_method").doubleValue());
            if (h.getFieldValueByFieldNameBD("rate_cover")!=null)
                row.createCell(27).setCellValue(h.getFieldValueByFieldNameBD("rate_cover").doubleValue());
            if (h.getFieldValueByFieldNameBD("building")!=null)
                row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("building").doubleValue());
            if (h.getFieldValueByFieldNameBD("machine")!=null)
                row.createCell(29).setCellValue(h.getFieldValueByFieldNameBD("machine").doubleValue());
            if (h.getFieldValueByFieldNameBD("stock")!=null)
                row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("stock").doubleValue());
            if (h.getFieldValueByFieldNameBD("other")!=null)
                row.createCell(31).setCellValue(h.getFieldValueByFieldNameBD("other").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_or")!=null)
                row.createCell(32).setCellValue(h.getFieldValueByFieldNameBD("tsi_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_or")!=null)
                row.createCell(33).setCellValue(h.getFieldValueByFieldNameBD("premi_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_or")!=null)
                row.createCell(34).setCellValue(h.getFieldValueByFieldNameBD("komisi_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_bppdan")!=null)
                row.createCell(35).setCellValue(h.getFieldValueByFieldNameBD("tsi_bppdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_bppdan")!=null)
                row.createCell(36).setCellValue(h.getFieldValueByFieldNameBD("premi_bppdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_bppdan")!=null)
                row.createCell(37).setCellValue(h.getFieldValueByFieldNameBD("komisi_bppdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_spl")!=null)
                row.createCell(38).setCellValue(h.getFieldValueByFieldNameBD("tsi_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_spl")!=null)
                row.createCell(39).setCellValue(h.getFieldValueByFieldNameBD("premi_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_spl")!=null)
                row.createCell(40).setCellValue(h.getFieldValueByFieldNameBD("komisi_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_fac")!=null)
                row.createCell(41).setCellValue(h.getFieldValueByFieldNameBD("tsi_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_fac")!=null)
                row.createCell(42).setCellValue(h.getFieldValueByFieldNameBD("premi_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_fac")!=null)
                row.createCell(43).setCellValue(h.getFieldValueByFieldNameBD("komisi_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_qs")!=null)
                row.createCell(44).setCellValue(h.getFieldValueByFieldNameBD("tsi_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_qs")!=null)
                row.createCell(45).setCellValue(h.getFieldValueByFieldNameBD("premi_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_qs")!=null)
                row.createCell(46).setCellValue(h.getFieldValueByFieldNameBD("komisi_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_park")!=null)
                row.createCell(47).setCellValue(h.getFieldValueByFieldNameBD("tsi_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_park")!=null)
                row.createCell(48).setCellValue(h.getFieldValueByFieldNameBD("premi_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_park")!=null)
                row.createCell(49).setCellValue(h.getFieldValueByFieldNameBD("komisi_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_qs")!=null)
                row.createCell(50).setCellValue(h.getFieldValueByFieldNameBD("tsi_faco1").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_qs")!=null)
                row.createCell(51).setCellValue(h.getFieldValueByFieldNameBD("premi_faco1").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_qs")!=null)
                row.createCell(52).setCellValue(h.getFieldValueByFieldNameBD("komisi_faco1").doubleValue());
            if (h.getFieldValueByFieldNameBD("tsi_park")!=null)
                row.createCell(53).setCellValue(h.getFieldValueByFieldNameBD("tsi_faco2").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_park")!=null)
                row.createCell(54).setCellValue(h.getFieldValueByFieldNameBD("premi_faco2").doubleValue());
            if (h.getFieldValueByFieldNameBD("komisi_park")!=null)
                row.createCell(55).setCellValue(h.getFieldValueByFieldNameBD("komisi_faco2").doubleValue());
            if (h.getFieldValueByFieldNameST("cover_type_code")!=null)
                row.createCell(56).setCellValue(h.getFieldValueByFieldNameST("cover_type_code"));
            if (h.getFieldValueByFieldNameBD("member")!=null)
                row.createCell(57).setCellValue(h.getFieldValueByFieldNameBD("member").doubleValue());
            if (h.getFieldValueByFieldNameST("ref1d")!=null)
                row.createCell(58).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref1d")));
            if (h.getFieldValueByFieldNameST("ref2d")!=null)
                row.createCell(59).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref2d")));
            if (h.getFieldValueByFieldNameST("ref3d")!=null)
                row.createCell(60).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref3d")));
            if (h.getFieldValueByFieldNameST("ref4d")!=null)
                row.createCell(61).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref4d")));
            if (h.getFieldValueByFieldNameST("ref5d")!=null)
                row.createCell(62).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref5d")));
            if (h.getFieldValueByFieldNameST("ref6d")!=null)
                row.createCell(63).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref6d")));
            if (h.getFieldValueByFieldNameST("ref7d")!=null)
                row.createCell(64).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref7d")));
            if (h.getFieldValueByFieldNameST("ref8d")!=null)
                row.createCell(65).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref8d")));
            if (h.getFieldValueByFieldNameST("ref10")!=null)
                row.createCell(66).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref10")));
            if (h.getFieldValueByFieldNameST("ref11")!=null)
                row.createCell(67).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref11")));
            if (h.getFieldValueByFieldNameST("risk_class")!=null)
                row.createCell(68).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("risk_class")));
            if (h.getFieldValueByFieldNameDT("refd1")!=null)
                row.createCell(69).setCellValue(h.getFieldValueByFieldNameDT("refd1"));
            if (h.getFieldValueByFieldNameDT("refd2")!=null)
                row.createCell(70).setCellValue(h.getFieldValueByFieldNameDT("refd2"));
            if (h.getFieldValueByFieldNameDT("refd3")!=null)
                row.createCell(71).setCellValue(h.getFieldValueByFieldNameDT("refd3"));
            row.createCell(72).setCellValue(h.getFieldValueByFieldNameST("years"));
            row.createCell(73).setCellValue(h.getFieldValueByFieldNameST("endorse_notes"));
            if (h.getFieldValueByFieldNameBD("order_no")!=null)
                row.createCell(74).setCellValue(h.getFieldValueByFieldNameBD("order_no").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_RPP_JENIS100() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("c.description as cabang,d.short_desc as jenis,a.pol_type_id, "+
                " count(a.pol_no) as pol_no,a.status, "+
                " coalesce(a.premi_total*a.ccy_rate,0) as premi_amt, "+
                " coalesce(a.nd_pcost*a.ccy_rate,0) as nd_pcost, "+
                " coalesce(a.nd_sfee*a.ccy_rate,0) as nd_sfee, "+
                " (coalesce(a.nd_disc1*a.ccy_rate,0) + coalesce(a.nd_disc2*a.ccy_rate,0)) as diskon_premi, "+
                " coalesce(a.nd_hfee*a.ccy_rate,0) as nd_hfee, "+
                " (coalesce(a.nd_comm1*a.ccy_rate,0) + coalesce(a.nd_comm2*a.ccy_rate,0)) as nd_comm1, "+
                " (coalesce(a.nd_comm3*a.ccy_rate,0) + coalesce(a.nd_comm4*a.ccy_rate,0)) as nd_comm3, "+
                " (coalesce(a.nd_brok1*a.ccy_rate,0) + coalesce(a.nd_brok2*a.ccy_rate,0)) as brok, "+
                " (coalesce(a.nd_feebase1*a.ccy_rate,0) + coalesce(a.nd_feebase2*a.ccy_rate,0)) as feebase, "+
                " (coalesce(a.nd_taxcomm1*a.ccy_rate,0) + coalesce(a.nd_taxcomm2*a.ccy_rate,0)) as nd_taxcomm1, "+
                " (coalesce(a.nd_taxcomm3*a.ccy_rate,0) + coalesce(a.nd_taxcomm4*a.ccy_rate,0)) as nd_taxcomm3 "
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id " +
                "	inner join gl_cost_center c on c.cc_code = a.cc_code  " +
                "	inner join ins_policy_types d on d.pol_type_id = a.pol_type_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = "select cabang,jenis, "+
                " sum(checkreas(status in ('POLICY','RENEWAL'),pol_no)) as polis, "+
                " sum(checkreas(status='ENDORSE',pol_no)) as endorse, "+
                " sum(premi_amt) as premi_amt, "+
                " sum(nd_pcost) as nd_pcost, "+
                " sum(nd_sfee) as nd_sfee, "+
                " sum(diskon_premi) as diskon_premi, "+
                " sum(nd_hfee) as nd_hfee, "+
                " sum(nd_comm1+nd_comm3) as komisi,sum(feebase) as feebase, "+
                " sum(brok) as brok,sum(nd_taxcomm1+nd_taxcomm3) as tax "+
                " from ("+ sqa.getSQL()+
                " group by a.pol_type_id,d.short_desc,a.pol_no,a.status,a.ccy_rate,a.premi_total,a.nd_pcost,a.nd_sfee,a.nd_disc1,a.nd_disc2, "+
                " a.nd_hfee,a.nd_comm1,a.nd_comm2,a.nd_comm3,a.nd_comm4,a.nd_feebase1,a.nd_feebase2,a.nd_brok1,a.nd_brok2,a.nd_brok2,a.nd_taxcomm1,a.nd_taxcomm2,a.nd_taxcomm3,a.nd_taxcomm4,a.pol_no,c.description "+
                " order by a.pol_type_id,a.pol_no "+
                " ) x group by cabang,jenis,pol_type_id "+
                " order by cabang,pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList RPP_JENIS100() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("pol_type_id, "+
                "	sum(checkreas(status in ('POLICY','RENEWAL'),pol_no)) as polis, "+
                "	sum(checkreas(status='ENDORSE',pol_no)) as jumlah, "+
                "	sum(premi_amt) as premi_amt, "+
                "	sum(nd_pcost) as nd_pcost, "+
                "	sum(nd_sfee) as nd_sfee, "+
                "	sum(diskon_premi) as diskon_premi, "+
                "	sum(nd_hfee) as nd_hfee, "+
                "	sum(komisi) as komisi, "+
                "	sum(brok) as brok,sum(tax) as tax "+
                "	from (  "+
                "	select a.pol_type_id,count(a.pol_no) as pol_no,a.status, "+
                "			(a.premi_total*a.ccy_rate) as premi_amt, "+
                "	(coalesce(a.nd_pcost,0)*a.ccy_rate) as nd_pcost,  "+
                "	(coalesce(a.nd_sfee,0)*a.ccy_rate) as nd_sfee,  "+
                "	((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)) as diskon_premi, "+
                "	(coalesce(a.nd_hfee*a.ccy_rate,0)) as nd_hfee, "+
                "	((coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate)) as komisi, "+
                "	((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)) as brok, "+
                "	((coalesce(a.nd_taxcomm1,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm2,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm3,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm4,0)*a.ccy_rate)) as tax"
                );
        
        sqa.addQuery("   from       ins_policy a " +
                "	inner join ent_master e on e.ent_id = a.entity_id"
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        final String sql = sqa.getSQL()+"   group by a.pol_type_id,a.pol_no,a.status,a.ccy_rate,a.premi_total,a.nd_pcost,a.nd_sfee,a.nd_disc1,a.nd_disc2, "+
                " a.nd_hfee,a.nd_comm1,a.nd_comm2,a.nd_comm3,a.nd_comm4,a.nd_brok1,a.nd_brok2,a.nd_taxcomm1,a.nd_taxcomm2,a.nd_taxcomm3,a.nd_taxcomm4,a.nd_brok2,a.pol_no "+
                " order by a.pol_type_id,a.pol_no "+
                " ) x group by pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_ABA_PRODUK() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" b.cc_code,a.pol_id,a.nopol,a.tglpol,a.nama,a.harper,a.preto,a.biapol,a.biamat,a.komisi,a.tglm,a.tgla,"+
                "a.relasi,tglent,a.kali,a.dollar,a.kodeko,a.persko,a.diskon,a.h_fee,a.b_fee,a.entity_id,a.flag,coalesce(a.feebase,0) as feebase "
                );
        
        sqa.addQuery("from aba_produk a  "+
                "left join ins_policy b on b.pol_id = a.pol_id"
                );
        
        //sqa.addClause(" a.flag is null ");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if(policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.flag = 'Y'");
        }
        
        if (Tools.isNo(stABAFlag)) {
            sqa.addClause("a.flag is null");
        }
        
        final String sql = sqa.getSQL()+" order by a.nopol,a.kodeko";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        final DTOList m = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        //if (Tools.isNo(stABAFlag)) {
       //     getRemoteInsurance().updateTransferProduk(m, this);
       //     getRemoteInsurance().updateTransferProd(m, this);
        //}
        
                 
        return l;
    }
    
    public void EXPORT_ABA_PRODUK()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("produk");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("pol_id");
            row0.createCell(1).setCellValue("nopol");
            row0.createCell(2).setCellValue("nobuk");
            row0.createCell(3).setCellValue("nopolm");
            row0.createCell(4).setCellValue("cnoplm");
            row0.createCell(5).setCellValue("tglpol");
            row0.createCell(6).setCellValue("nama");
            row0.createCell(7).setCellValue("harper");
            row0.createCell(8).setCellValue("preto");
            row0.createCell(9).setCellValue("biapol");
            row0.createCell(10).setCellValue("biamat");
            row0.createCell(11).setCellValue("komisi");
            row0.createCell(12).setCellValue("batal");
            row0.createCell(13).setCellValue("tglm");
            row0.createCell(14).setCellValue("tgla");
            row0.createCell(15).setCellValue("relasi");
            row0.createCell(16).setCellValue("tglent");
            row0.createCell(17).setCellValue("flnd");
            row0.createCell(18).setCellValue("cetdn");
            row0.createCell(19).setCellValue("kali");
            row0.createCell(20).setCellValue("dollar");
            row0.createCell(21).setCellValue("fltutup");
            row0.createCell(22).setCellValue("kodeko");
            row0.createCell(23).setCellValue("persko");
            row0.createCell(24).setCellValue("nomorko");
            row0.createCell(25).setCellValue("clerk");
            row0.createCell(26).setCellValue("tglketik");
            row0.createCell(27).setCellValue("flpro");
            row0.createCell(28).setCellValue("diskon");
            row0.createCell(29).setCellValue("h_fee");
            row0.createCell(30).setCellValue("b_fee");
            row0.createCell(31).setCellValue("feebase");
            row0.createCell(32).setCellValue("agen");
            row0.createCell(33).setCellValue("tgltran");
            row0.createCell(34).setCellValue("tglrest");
            row0.createCell(35).setCellValue("entity_id");
            row0.createCell(36).setCellValue("flag");
            row0.createCell(37).setCellValue("cabang");
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            //if(h.getFieldValueByFieldNameBD("pol_id")!=null)
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            //if(h.getFieldValueByFieldNameST("nopol")!=null)
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("nopol"));
            //if(h.getFieldValueByFieldNameDT("tglpol")!=null)
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameDT("tglpol"));
            //if(h.getFieldValueByFieldNameST("nama")!=null)
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("nama"));
            //if(h.getFieldValueByFieldNameBD("harper")!=null)
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("harper").doubleValue());
            //if(h.getFieldValueByFieldNameBD("preto")!=null)
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("preto").doubleValue());
            //if(h.getFieldValueByFieldNameBD("biapol")!=null)
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("biapol").doubleValue());
            //if(h.getFieldValueByFieldNameBD("biamat")!=null)
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("biamat").doubleValue());
            //if(h.getFieldValueByFieldNameBD("komisi")!=null)
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            //if(h.getFieldValueByFieldNameDT("tglm")!=null)
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameDT("tglm"));
            //if(h.getFieldValueByFieldNameDT("tgla")!=null)
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameDT("tgla"));
            //if(h.getFieldValueByFieldNameST("relasi")!=null)
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameST("relasi"));
            if(h.getFieldValueByFieldNameDT("tglent")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameDT("tglent"));
            //if(h.getFieldValueByFieldNameST("kali")!=null)
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameST("kali"));
            //if(h.getFieldValueByFieldNameBD("dollar")!=null)
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("dollar").doubleValue());
            //if(h.getFieldValueByFieldNameST("diskon")!=null)
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameST("kodeko"));
            if(h.getFieldValueByFieldNameBD("persko")!=null)
                row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("persko").doubleValue());
            //if(h.getFieldValueByFieldNameBD("diskon")!=null)
            row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("diskon").doubleValue());
            //if(h.getFieldValueByFieldNameBD("h_fee")!=null)
            row.createCell(29).setCellValue(h.getFieldValueByFieldNameBD("h_fee").doubleValue());
            //if(h.getFieldValueByFieldNameBD("b_fee")!=null)
            row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("b_fee").doubleValue());
            if (h.getFieldValueByFieldNameBD("feebase")!=null)
                row.createCell(31).setCellValue(h.getFieldValueByFieldNameBD("feebase").doubleValue());
            //if(h.getFieldValueByFieldNameBD("entity_id")!=null)
            row.createCell(35).setCellValue(h.getFieldValueByFieldNameBD("entity_id").doubleValue());
            row.createCell(36).setCellValue(h.getFieldValueByFieldNameST("flag"));
            row.createCell(37).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public DTOList EXCEL_ABA_BAYAR() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect( "a.pol_id " );
        
        sqa.addQuery("from aba_produk a  "+
                "left join ins_policy b on b.pol_id = a.pol_id"
                );
        
        //sqa.addClause(" a.flag is null ");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if(policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.flag = 'Y'");
        }
        
        if (Tools.isNo(stABAFlag)) {
            sqa.addClause("a.flag is null");
        }
        
        final String sql = " select a.* from aba_bayar1 a where a.pol_id in ( "+sqa.getSQL()+" ) order by a.nopol,a.kodeko";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_ABA_BAYAR()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("bayar");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("nopol");
            row0.createCell(1).setCellValue("konter");
            row0.createCell(2).setCellValue("kodeko");
            row0.createCell(3).setCellValue("nobuk");
            row0.createCell(4).setCellValue("norek");
            row0.createCell(5).setCellValue("preto");
            row0.createCell(6).setCellValue("jtempo");
            row0.createCell(7).setCellValue("komisi");
            row0.createCell(8).setCellValue("diskon");
            row0.createCell(9).setCellValue("h_fee");
            row0.createCell(10).setCellValue("b_fee");
            row0.createCell(11).setCellValue("feebase");
            row0.createCell(12).setCellValue("tglbay");
            row0.createCell(13).setCellValue("bayar");
            row0.createCell(14).setCellValue("keter");
            row0.createCell(15).setCellValue("tglent");
            row0.createCell(16).setCellValue("kodent");
            row0.createCell(17).setCellValue("kodecet");
            row0.createCell(18).setCellValue("nobukdn");
            row0.createCell(19).setCellValue("tglketik");
            row0.createCell(20).setCellValue("tgbre");
            row0.createCell(21).setCellValue("komre");
            row0.createCell(22).setCellValue("tgltran");
            row0.createCell(23).setCellValue("tglrest");
            row0.createCell(24).setCellValue("tgltran1");
            row0.createCell(25).setCellValue("tglrest1");
            row0.createCell(26).setCellValue("pol_id");
            //row0.createCell(27).setCellValue("flag");
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("nopol"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("konter").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("kodeko"));
            //row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("nobuk"));
            //row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("norek"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("preto").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameDT("jtempo"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("diskon").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("h_fee").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("b_fee").doubleValue());
            if (h.getFieldValueByFieldNameBD("feebase")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("feebase").doubleValue());
            //row.createCell(11).setCellValue(h.getFieldValueByFieldNameDT("tglbay"));
            //row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("bayar").doubleValue());
            //row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("keter"));
            //row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("tglent"));
            //row.createCell(15).setCellValue(h.getFieldValueByFieldNameST("kodent"));
            //row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("kodecet"));
            //row.createCell(17).setCellValue(h.getFieldValueByFieldNameST("nobukdn"));
            //row.createCell(18).setCellValue(h.getFieldValueByFieldNameDT("tglketik"));
            //row.createCell(19).setCellValue(h.getFieldValueByFieldNameDT("tgbre"));
            //row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("komre").doubleValue());
            //row.createCell(21).setCellValue(h.getFieldValueByFieldNameDT("tgltran"));
            //row.createCell(22).setCellValue(h.getFieldValueByFieldNameDT("tglrest"));
            //row.createCell(23).setCellValue(h.getFieldValueByFieldNameDT("tgltran1"));
            //row.createCell(24).setCellValue(h.getFieldValueByFieldNameDT("tglrest1"));
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            //row.createCell(26).setCellValue(h.getFieldValueByFieldNameST("flag"));
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public DTOList EXCEL_ABA_HUTANG() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect( "a.pol_id " );
        
        sqa.addQuery("from aba_produk a  "+
                "left join ins_policy b on b.pol_id = a.pol_id"
                );
        
        //sqa.addClause(" a.flag is null ");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if(policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.flag = 'Y'");
        }
        
        if (Tools.isNo(stABAFlag)) {
            sqa.addClause("a.flag is null");
        }
        
        final String sql = " select a.* from aba_hutang a where a.pol_id in ( "+sqa.getSQL()+" ) order by a.nopol,a.kodeko";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_ABA_HUTANG()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("hutang");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("pol_id");
            row0.createCell(1).setCellValue("nopol");
            row0.createCell(2).setCellValue("konter");
            row0.createCell(3).setCellValue("kodeko");
            row0.createCell(4).setCellValue("nobuk1");
            row0.createCell(5).setCellValue("norek1");
            row0.createCell(6).setCellValue("nila");
            row0.createCell(7).setCellValue("tglb1");
            row0.createCell(8).setCellValue("bayhut1");
            row0.createCell(9).setCellValue("ket1");
            row0.createCell(10).setCellValue("tglent1");
            row0.createCell(11).setCellValue("kodent1");
            row0.createCell(12).setCellValue("nobuk2");
            row0.createCell(13).setCellValue("norek2");
            row0.createCell(14).setCellValue("nilb");
            row0.createCell(15).setCellValue("tglb2");
            row0.createCell(16).setCellValue("bayhut2");
            row0.createCell(17).setCellValue("ket2");
            row0.createCell(18).setCellValue("tglent2");
            row0.createCell(19).setCellValue("kodent2");
            row0.createCell(20).setCellValue("nilc");
            row0.createCell(21).setCellValue("nobuk3");
            row0.createCell(22).setCellValue("norek3");
            row0.createCell(23).setCellValue("tglb3");
            row0.createCell(24).setCellValue("bayhut3");
            row0.createCell(25).setCellValue("ket3");
            row0.createCell(26).setCellValue("tglent3");
            row0.createCell(27).setCellValue("kodent3");
            row0.createCell(28).setCellValue("nobuk4");
            row0.createCell(29).setCellValue("norek4");
            row0.createCell(30).setCellValue("nild");
            row0.createCell(31).setCellValue("tglb4");
            row0.createCell(32).setCellValue("bayhut4");
            row0.createCell(33).setCellValue("ket4");
            row0.createCell(34).setCellValue("tglent4");
            row0.createCell(35).setCellValue("kodent4");
            row0.createCell(36).setCellValue("nobuk5");
            row0.createCell(37).setCellValue("norek5");
            row0.createCell(38).setCellValue("tglb5");
            row0.createCell(39).setCellValue("bayhut5");
            row0.createCell(40).setCellValue("ket5");
            row0.createCell(41).setCellValue("tglent5");
            row0.createCell(42).setCellValue("kodent5");
            row0.createCell(43).setCellValue("feebase");
            row0.createCell(44).setCellValue("tgltran1");
            row0.createCell(45).setCellValue("tglrest1");
            row0.createCell(46).setCellValue("tgltran2");
            row0.createCell(47).setCellValue("tglrest2");
            row0.createCell(48).setCellValue("tgltran3");
            row0.createCell(49).setCellValue("tglrest3");
            row0.createCell(50).setCellValue("tgltran4");
            row0.createCell(51).setCellValue("tglrest4");
            row0.createCell(52).setCellValue("tgltran5");
            row0.createCell(53).setCellValue("tglrest5");
            row0.createCell(54).setCellValue("tglrest");
            row0.createCell(55).setCellValue("tgltran");
            //row0.createCell(56).setCellValue("flag");
            row0.createCell(56).setCellValue("kdpajaka");
            row0.createCell(57).setCellValue("kdpajakb");
            row0.createCell(58).setCellValue("kdpajakc");
            row0.createCell(59).setCellValue("kdpajakd");
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("nopol"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("konter").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("kodeko"));
//row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("nobuk1"));
//row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("norek1"));
            if (h.getFieldValueByFieldNameBD("nila")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("nila").doubleValue());
//row.createCell(7).setCellValue(h.getFieldValueByFieldNameDT("tglb1"));
//row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("bayhut1").doubleValue());
//row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("ket1"));
//row.createCell(10).setCellValue(h.getFieldValueByFieldNameDT("tglent1"));
//row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("kodent1"));
//row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("nobuk2"));
//row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("norek2"));
            if (h.getFieldValueByFieldNameBD("nilb")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("nilb").doubleValue());
//row.createCell(15).setCellValue(h.getFieldValueByFieldNameDT("tglb2"));
//row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("bayhut2").doubleValue());
//row.createCell(17).setCellValue(h.getFieldValueByFieldNameST("ket2"));
//row.createCell(18).setCellValue(h.getFieldValueByFieldNameDT("tglent2"));
//row.createCell(19).setCellValue(h.getFieldValueByFieldNameST("kodent2"));
            if (h.getFieldValueByFieldNameBD("nilc")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("nilc").doubleValue());
//row.createCell(21).setCellValue(h.getFieldValueByFieldNameST("nobuk3"));
//row.createCell(22).setCellValue(h.getFieldValueByFieldNameST("norek3"));
//row.createCell(23).setCellValue(h.getFieldValueByFieldNameDT("tglb3"));
//row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("bayhut3").doubleValue());
//row.createCell(25).setCellValue(h.getFieldValueByFieldNameST("ket3"));
//row.createCell(26).setCellValue(h.getFieldValueByFieldNameDT("tglent3"));
//row.createCell(27).setCellValue(h.getFieldValueByFieldNameST("kodent3"));
//row.createCell(28).setCellValue(h.getFieldValueByFieldNameST("nobuk4"));
//row.createCell(29).setCellValue(h.getFieldValueByFieldNameST("norek4"));
            if (h.getFieldValueByFieldNameBD("nild")!=null)
                row.createCell(30).setCellValue(h.getFieldValueByFieldNameBD("nild").doubleValue());
//row.createCell(31).setCellValue(h.getFieldValueByFieldNameDT("tglb4"));
//row.createCell(32).setCellValue(h.getFieldValueByFieldNameBD("bayhut4").doubleValue());
//row.createCell(33).setCellValue(h.getFieldValueByFieldNameST("ket4"));
//row.createCell(34).setCellValue(h.getFieldValueByFieldNameDT("tglent4"));
//row.createCell(35).setCellValue(h.getFieldValueByFieldNameST("kodent4"));
//row.createCell(36).setCellValue(h.getFieldValueByFieldNameST("nobuk5"));
//row.createCell(37).setCellValue(h.getFieldValueByFieldNameST("norek5"));
//row.createCell(38).setCellValue(h.getFieldValueByFieldNameDT("tglb5"));
            if (h.getFieldValueByFieldNameBD("bayhut5")!=null)
                row.createCell(39).setCellValue(h.getFieldValueByFieldNameBD("bayhut5").doubleValue());
            if (h.getFieldValueByFieldNameBD("nile")!=null)
                row.createCell(43).setCellValue(h.getFieldValueByFieldNameBD("nile").doubleValue());
//row.createCell(40).setCellValue(h.getFieldValueByFieldNameST("ket5"));
//row.createCell(41).setCellValue(h.getFieldValueByFieldNameDT("tglent5"));
//row.createCell(42).setCellValue(h.getFieldValueByFieldNameST("kodent5"));
//row.createCell(43).setCellValue(h.getFieldValueByFieldNameDT("tgltran1"));
//row.createCell(44).setCellValue(h.getFieldValueByFieldNameDT("tglrest1"));
//row.createCell(45).setCellValue(h.getFieldValueByFieldNameDT("tgltran2"));
//row.createCell(46).setCellValue(h.getFieldValueByFieldNameDT("tglrest2"));
//row.createCell(47).setCellValue(h.getFieldValueByFieldNameDT("tgltran3"));
//row.createCell(48).setCellValue(h.getFieldValueByFieldNameDT("tglrest3"));
//row.createCell(49).setCellValue(h.getFieldValueByFieldNameDT("tgltran4"));
//row.createCell(50).setCellValue(h.getFieldValueByFieldNameDT("tglrest4"));
//row.createCell(51).setCellValue(h.getFieldValueByFieldNameDT("tgltran5"));
//row.createCell(52).setCellValue(h.getFieldValueByFieldNameDT("tglrest5"));
//row.createCell(53).setCellValue(h.getFieldValueByFieldNameDT("tglrest"));
//row.createCell(54).setCellValue(h.getFieldValueByFieldNameDT("tgltran"));
            //row.createCell(56).setCellValue(h.getFieldValueByFieldNameST("flag"));
            if (h.getFieldValueByFieldNameBD("kdpajaka")!=null)
                row.createCell(56).setCellValue(h.getFieldValueByFieldNameBD("kdpajaka").doubleValue());
            if (h.getFieldValueByFieldNameBD("kdpajakb")!=null)
                row.createCell(57).setCellValue(h.getFieldValueByFieldNameBD("kdpajakb").doubleValue());
            if (h.getFieldValueByFieldNameBD("kdpajakc")!=null)
                row.createCell(58).setCellValue(h.getFieldValueByFieldNameBD("kdpajakc").doubleValue());
            if (h.getFieldValueByFieldNameBD("kdpajakd")!=null)
                row.createCell(59).setCellValue(h.getFieldValueByFieldNameBD("kdpajakd").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public DTOList EXCEL_ABA_PAJAK() throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect( "a.pol_id " );
        
        sqa.addQuery("from aba_produk a  "+
                "left join ins_policy b on b.pol_id = a.pol_id"
                );
        
        //sqa.addClause(" a.flag is null ");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if(policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',b.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.flag = 'Y'");
        }
        
        if (Tools.isNo(stABAFlag)) {
            sqa.addClause("a.flag is null");
        }
        
        final String sql = " select a.* from aba_pajak a where a.pol_id in ( "+sqa.getSQL()+" ) order by a.nopol,a.kodeko";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_ABA_PAJAK()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("pajak");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("pol_id");
            row0.createCell(1).setCellValue("nopol");
            row0.createCell(2).setCellValue("kodeko");
            row0.createCell(3).setCellValue("konter");
            row0.createCell(4).setCellValue("pajak_a");
            row0.createCell(5).setCellValue("pajak_b");
            row0.createCell(6).setCellValue("pajak_c");
            row0.createCell(7).setCellValue("pajak_d");
            row0.createCell(8).setCellValue("b_fee");
            row0.createCell(9).setCellValue("baypaj_a");
            row0.createCell(10).setCellValue("baypaj_b");
            row0.createCell(11).setCellValue("baypaj_c");
            row0.createCell(12).setCellValue("baypaj_d");
            row0.createCell(13).setCellValue("bayb_fee");
            row0.createCell(14).setCellValue("tglbay_a");
            row0.createCell(15).setCellValue("tglbay_b");
            row0.createCell(16).setCellValue("tglbay_c");
            row0.createCell(17).setCellValue("tglbay_d");
            row0.createCell(18).setCellValue("tglb_fee");
            row0.createCell(19).setCellValue("nobuk_a");
            row0.createCell(20).setCellValue("nobuk_b");
            row0.createCell(21).setCellValue("nobuk_c");
            row0.createCell(22).setCellValue("nobuk_d");
            row0.createCell(23).setCellValue("nobukb_fee");
            row0.createCell(24).setCellValue("norek_a");
            row0.createCell(25).setCellValue("norek_b");
            row0.createCell(26).setCellValue("norek_c");
            row0.createCell(27).setCellValue("norek_d");
            row0.createCell(28).setCellValue("norekb_fee");
            row0.createCell(29).setCellValue("tglent_a");
            row0.createCell(30).setCellValue("tglent_b");
            row0.createCell(31).setCellValue("tglent_c");
            row0.createCell(32).setCellValue("tglent_d");
            row0.createCell(33).setCellValue("tglentb_fee");
            row0.createCell(34).setCellValue("tgltran");
            row0.createCell(35).setCellValue("tglrest");
            row0.createCell(36).setCellValue("npwp1");
            row0.createCell(37).setCellValue("npwp2");
            row0.createCell(38).setCellValue("npwp3");
            row0.createCell(39).setCellValue("npwp4");
            row0.createCell(40).setCellValue("npwp5");
            //row0.createCell(41).setCellValue("flag");
            row0.createCell(41).setCellValue("kdpajaka");
            row0.createCell(42).setCellValue("kdpajakb");
            row0.createCell(43).setCellValue("kdpajakc");
            row0.createCell(44).setCellValue("kdpajakd");
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("nopol"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("kodeko"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("konter").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("pajak_a").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("pajak_b").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("pajak_c").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("pajak_d").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("b_fee").doubleValue());
            if (h.getFieldValueByFieldNameST("npwp1")!=null)
                row.createCell(36).setCellValue(h.getFieldValueByFieldNameST("npwp1"));
            if (h.getFieldValueByFieldNameST("npwp2")!=null)
                row.createCell(37).setCellValue(h.getFieldValueByFieldNameST("npwp2"));
            if (h.getFieldValueByFieldNameST("npwp3")!=null)
                row.createCell(38).setCellValue(h.getFieldValueByFieldNameST("npwp3"));
            if (h.getFieldValueByFieldNameST("npwp4")!=null)
                row.createCell(39).setCellValue(h.getFieldValueByFieldNameST("npwp4"));
            if (h.getFieldValueByFieldNameST("npwp5")!=null)
                row.createCell(40).setCellValue(h.getFieldValueByFieldNameST("npwp5"));
            //if (h.getFieldValueByFieldNameST("flag")!=null)
            //row.createCell(41).setCellValue(h.getFieldValueByFieldNameST("flag"));
            if (h.getFieldValueByFieldNameBD("kdpajaka")!=null)
                row.createCell(41).setCellValue(h.getFieldValueByFieldNameBD("kdpajaka").doubleValue());
            if (h.getFieldValueByFieldNameBD("kdpajakb")!=null)
                row.createCell(42).setCellValue(h.getFieldValueByFieldNameBD("kdpajakb").doubleValue());
            if (h.getFieldValueByFieldNameBD("kdpajakc")!=null)
                row.createCell(43).setCellValue(h.getFieldValueByFieldNameBD("kdpajakc").doubleValue());
            if (h.getFieldValueByFieldNameBD("kdpajakd")!=null)
                row.createCell(44).setCellValue(h.getFieldValueByFieldNameBD("kdpajakd").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public EntityView getCoinsurer() {
        final EntityView entity = (EntityView) DTOPool.getInstance().getDTO(EntityView.class, stCoinsurerID);
        
        return entity;
    }
    
    public EntityView getEntity() {
        final EntityView entity = (EntityView) DTOPool.getInstance().getDTO(EntityView.class, stEntityID);
        
        return entity;
    }
    
    public String getEntityShortName() {
        
        final EntityView shortname = getEntity();
        
        if (shortname == null) return null;
        
        return shortname.getStShortName();
    }
    
    public String getEntityRefEntity() {
        
        final EntityView refent = getEntity();
        
        if (refent == null) return null;
        
        return refent.getStRefEntityID();
    }
    
    public String getEntityAddress() {
        
        final EntityView address = getEntity();
        
        if (address == null) return null;
        
        return address.getStAddress();
    }
    
    public String getStNumber() {
        return stNumber;
    }
    
    public void setStNumber(String stNumber) {
        this.stNumber = stNumber;
    }
    
    public String getStCoinsurerID() {
        return stCoinsurerID;
    }
    
    public void setStCoinsurerID(String stCoinsurerID) {
        this.stCoinsurerID = stCoinsurerID;
    }
    
    public String getStCoinsurerName() {
        return stCoinsurerName;
    }
    
    public void setStCoinsurerName(String stCoinsurerName) {
        this.stCoinsurerName = stCoinsurerName;
    }
    
    public String getStABAFlag() {
        return stABAFlag;
    }
    
    public void setStABAFlag(String stABAFlag) {
        this.stABAFlag = stABAFlag;
    }
    
    public String getStRiskCodeName() {
        return stRiskCodeName;
    }
    
    public void setStRiskCodeName(String stRiskCodeName) {
        this.stRiskCodeName = stRiskCodeName;
    }
    
    public Date getAppDateFrom() {
        return appDateFrom;
    }
    
    public void setAppDateFrom(Date appDateFrom) {
        this.appDateFrom = appDateFrom;
    }
    
    public Date getAppDateTo() {
        return appDateTo;
    }
    
    public void setAppDateTo(Date appDateTo) {
        this.appDateTo = appDateTo;
    }
    
    public String getStIndex() {
        return stIndex;
    }
    
    public void setStIndex(String stIndex) {
        this.stIndex = stIndex;
    }
    
    public Date getPLADateFrom() {
        return PLADateFrom;
    }
    
    public void setPLADateFrom(Date PLADateFrom) {
        this.PLADateFrom = PLADateFrom;
    }
    
    public Date getPLADateTo() {
        return PLADateTo;
    }
    
    public void setPLADateTo(Date PLADateTo) {
        this.PLADateTo = PLADateTo;
    }
    
    public Date getDLADateFrom() {
        return DLADateFrom;
    }
    
    public void setDLADateFrom(Date DLADateFrom) {
        this.DLADateFrom = DLADateFrom;
    }
    
    public Date getDLADateTo() {
        return DLADateTo;
    }
    
    public void setDLADateTo(Date DLADateTo) {
        this.DLADateTo = DLADateTo;
    }
    
    public String getStObject() {
        return stObject;
    }
    
    public void setStObject(String stObject) {
        this.stObject = stObject;
    }
    
    public Date getPaymentDateFrom() {
        return paymentDateFrom;
    }
    
    public void setPaymentDateFrom(Date paymentDateFrom) {
        this.paymentDateFrom = paymentDateFrom;
    }
    
    public Date getPaymentDateTo() {
        return paymentDateTo;
    }
    
    public void setPaymentDateTo(Date paymentDateTo) {
        this.paymentDateTo = paymentDateTo;
    }
    
    public String getStReceiptNo() {
        return stReceiptNo;
    }
    
    public void setStReceiptNo(String stReceiptNo) {
        this.stReceiptNo = stReceiptNo;
    }
    
    public DTOList EXCEL_RPP_JENIS100AAUI() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("group_name,count(pol_no) as pol_no,status,ins_policy_type_grp_id, " +
                "sum(premi) as premi,sum(nd_pcost) as nd_pcost,  " +
                "sum(nd_sfee) as nd_sfee,sum(diskon_premi) as diskon_premi,  " +
                "sum(nd_hfee) as nd_hfee,sum(komisi) as komisi,  " +
                "sum(brok) as brok,sum(tax) as tax,  " +
                "sum(premi_ko) as premi_ko,sum(brok_ko) as brok_ko,sum(hfee_ko) as hfee_ko " +
                "from ( select f.ins_policy_type_grp_id,f.group_name,a.status,a.pol_no," +
                "sum(checkkoas(b.entity_id=1,a.premi_total*a.ccy_rate)) as premi, " +
                "sum(checkkoas(b.entity_id=1,coalesce(a.nd_pcost,0)*a.ccy_rate)) as nd_pcost, " +
                "sum(checkkoas(b.entity_id=1,coalesce(a.nd_sfee,0)*a.ccy_rate)) as nd_sfee, " +
                "sum(checkkoas(b.entity_id=1,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)))) as diskon_premi, " +
                "sum(checkkoas(b.entity_id=1,coalesce(a.nd_hfee,0))) as nd_hfee, " +
                "sum(checkkoas(b.entity_id=1,(coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate))) as komisi," +
                "sum(checkkoas(b.entity_id=1,((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate)))) as brok, " +
                "sum(checkkoas(b.entity_id=1,(coalesce(a.nd_taxcomm1,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm2,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm3,0)*a.ccy_rate) + (coalesce(a.nd_taxcomm4,0)*a.ccy_rate))) as tax," +
                "sum(checkkoas(b.entity_id<>1,b.premi_amt*a.ccy_rate)) as premi_ko, " +
                "sum(checkkoas(b.entity_id<>1,b.hfee_amount)) as hfee_ko, " +
                "sum(checkkoas(b.entity_id<>1,b.broker_amount)) as brok_ko"
                );
        
        sqa.addQuery("   from       ins_policy a  " +
                "inner join ins_pol_coins b on b.policy_id = a.pol_id  " +
                "inner join ins_policy_types d on d.pol_type_id = a.pol_type_id   " +
                "inner join ins_policy_type_grp f on f.ins_policy_type_grp_id = d.ins_policy_type_grp_id2  "
                );
        
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        sqa.addClause("a.effective_flag='Y'");
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = "select group_name," +
                "coalesce(sum(checkreas(status in ('POLICY','RENEWAL'),pol_no)),0) as polis, " +
                "coalesce(sum(checkreas(status='ENDORSE',pol_no)),0) as endorse, " +
                "sum(premi) as premi,sum(nd_pcost) as nd_pcost,  " +
                "sum(nd_sfee) as nd_sfee,sum(diskon_premi) as diskon_premi,  " +
                "sum(nd_hfee) as nd_hfee,sum(komisi) as komisi,  " +
                "sum(brok) as brok,sum(tax) as tax, " +
                "sum(premi_ko) as premi_ko,sum(brok_ko) as brok_ko,sum(hfee_ko) as hfee_ko " +
                "from (" + sqa.getSQL() +
                " group by f.ins_policy_type_grp_id,f.group_name,a.status,a.pol_no " +
                ") x group by group_name,ins_policy_type_grp_id,status " +
                ") x group by group_name,ins_policy_type_grp_id order by ins_policy_type_grp_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_RPP_JENIS100AAUI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("group_name");
            row0.createCell(1).setCellValue("polis");
            row0.createCell(2).setCellValue("endorse");
            row0.createCell(3).setCellValue("premi");
            row0.createCell(4).setCellValue("bpol");
            row0.createCell(5).setCellValue("bmat");
            row0.createCell(6).setCellValue("diskon");
            row0.createCell(7).setCellValue("hfee");
            row0.createCell(8).setCellValue("komisi");
            row0.createCell(9).setCellValue("bfee");
            row0.createCell(10).setCellValue("tax");
            row0.createCell(11).setCellValue("premi_ko");
            row0.createCell(12).setCellValue("brok_ko");
            row0.createCell(13).setCellValue("hfee_ko");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("group_name"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("polis").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("endorse").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("premi").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("diskon_premi").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("komisi").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("brok").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("tax").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("premi_ko").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("brok_ko").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("hfee_ko").doubleValue());
            
            
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_KLAIM_AAUI() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	e.ins_policy_type_grp_id,e.group_name,a.dla_no,count(a.dla_no) as jumlah,a.status, "+
                " getpremi(a.cover_type_code = 'DIRECT' or (a.pol_type_id = '21' and a.cover_type_code = 'COINSOUT'),(a.claim_amount*a.ccy_rate),getbordero3((a.pol_type_id = '21' and b.coins_type = 'COINS_COVER') or (a.pol_type_id = '21' and a.cover_type_code = 'COINSOUTSELF' and b.entity_id = '1') or (a.pol_type_id <> '21' and b.coins_type = 'COINS' and b.entity_id = '1'),(a.claim_amount*a.ccy_rate))) as claim_amount, "+
                " getbordero3((a.pol_type_id = '21' and b.coins_type = 'COINS_COVER' and b.entity_id <> '1') or (a.pol_type_id = '21' and a.cover_type_code = 'COINSOUTSELF' and b.entity_id <> '1') or (a.pol_type_id <> '21' and b.coins_type = 'COINS' and b.entity_id <> '1'),(b.claim_amt*a.ccy_rate)) as piutang_klaim " );
        
        sqa.addQuery(" from ins_policy a "+
                " inner join ins_pol_coins b on b.policy_id = a.pol_id "+
                " inner join ins_pol_obj c on c.ins_pol_obj_id = a.claim_object_id "+
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id "+
                " inner join ins_policy_type_grp e on e.ins_policy_type_grp_id = d.ins_policy_type_grp_id2 "
                );
        
        sqa.addClause("a.claim_status = 'DLA'");
        sqa.addClause("b.claim_amt <> 0");
        sqa.addClause("a.effective_flag='Y'");
        sqa.addClause("a.status in('CLAIM','CLAIM ENDORSE')");
        sqa.addClause("((a.pol_type_id = 21 and b.coins_type = 'COINS_COVER') or (a.pol_type_id = 21 and a.cover_type_code = 'COINSOUTSELF' and b.entity_id <> 1) or (a.pol_type_id <> 21 and b.coins_type = 'COINS'))");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = " select group_name, "+
                " sum(checkreas(status='CLAIM',jumlah)) as claim, "+
                " sum(checkreas(status='CLAIM ENDORSE',jumlah)) as claim_endorse, "+
                " sum(claim_amount) as claim_amount, "+
                " sum(piutang_klaim) as piutang_klaim "+
                " from ( "+ sqa.getSQL()+ " group by e.ins_policy_type_grp_id,e.group_name,a.dla_no,a.status,a.ccy_rate,a.cover_type_code,a.pol_type_id, "+
                " a.claim_amount,b.coins_type,b.entity_id,b.claim_amt ) x " +
                " group by group_name,ins_policy_type_grp_id " +
                " order by ins_policy_type_grp_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_KLAIM_AAUI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("group_name");
            row0.createCell(1).setCellValue("claim");
            row0.createCell(2).setCellValue("claim endorse");
            row0.createCell(3).setCellValue("amount");
            row0.createCell(4).setCellValue("piutang");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("group_name"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("claim").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("claim_endorse").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("claim_amount").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("piutang_klaim").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_RKP_REINS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "substr(a.period_start::text,1,4) as uy,a.period_start,a.period_end,a.pol_type_id::character varying,a.pol_id::character varying,a.claim_date, " +
                "coalesce(a.dla_date,null) as dla_date,a.policy_date,a.pol_no,a.pla_no,a.dla_no,a.cust_name,upper(checkstatus(a.ins_policy_type_grp_id=10,b.ref2,b.ref1)) as name," +
                "coalesce((b.insured_amount*a.ccy_rate),0) as insured_amount,coalesce((a.claim_amount_est*a.ccy_rate),0) as claim_amount_est," +
                "coalesce((a.claim_amount*a.ccy_rate),0) as claim_amount,coalesce((a.claim_amount_approved*a.ccy_rate),0) as claim_amount_approved," +
                "coalesce(checkreas(a.pol_type_id=21,b.refn2*a.ccy_rate),0) as coins_amount, "+
                "(select coalesce(e.short_name,'') from ent_master e where a.coinsurer_id::bigint = e.ent_id) as coins_name," +
                "round(sum(checkreas(j.treaty_type='OR',i.claim_amount)),2) as claim_or,  " +
                "round(sum(checkreas(j.treaty_type='BPDAN',i.claim_amount)),2) as claim_bppdan, " +
                "round(sum(checkreas(j.treaty_type='SPL',i.claim_amount)),2) as claim_spl, " +
                "round(sum(checkreas(j.treaty_type='FAC',i.claim_amount)),2) as claim_fac, " +
                "round(sum(checkreas(j.treaty_type='QS',i.claim_amount)),2) as claim_qs, " +
                "round(sum(checkreas(j.treaty_type='PARK',i.claim_amount)),2) as claim_park   "
                );
        
        sqa.addQuery("   from ins_policy a "+
                "   inner join ent_master e on e.ent_id = a.entity_id" +
                "   inner join ins_pol_obj b on b.ins_pol_obj_id = a.claim_object_id " +
                "   inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id " +
                "   inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id " +
                "   inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id " +
                "   inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause("a.status IN ('CLAIM','CLAIM ENDORSE')");
        sqa.addClause("a.claim_status = 'DLA'");
        sqa.addClause("a.claim_effective_flag = 'Y'");
        
        if(appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stObject!=null) {
            if (stPolicyTypeGroupID.equalsIgnoreCase("10"))
                sqa.addClause("upper(b.ref2) like ?");
            else
                sqa.addClause("upper(b.ref1) like ?");
            sqa.addPar('%'+stObject.toUpperCase()+'%');
        }
        
        final String sql = sqa.getSQL()+"  group by a.coinsurer_id,a.period_start,a.period_end,a.pol_type_id,a.pol_id,a.dla_date,a.policy_date,a.pol_no,a.pla_no,a.dla_no,a.cust_name,a.ins_policy_type_grp_id,b.ref2,b.ref1, "+
                " b.insured_amount,a.ccy_rate,a.claim_amount_est,a.claim_amount,a.claim_amount_approved,a.claim_date,b.refn2,a.pol_type_id "+
                " order by a.dla_date,a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_RKP_REINS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("uy");
            row0.createCell(1).setCellValue("period_start");
            row0.createCell(2).setCellValue("period_end");
            row0.createCell(3).setCellValue("pol_id");
            row0.createCell(4).setCellValue("dla_date");
            row0.createCell(5).setCellValue("policy_date");
            row0.createCell(6).setCellValue("pol_no");
            row0.createCell(7).setCellValue("pla_no");
            row0.createCell(8).setCellValue("dla_no");
            row0.createCell(9).setCellValue("cust_name");
            row0.createCell(10).setCellValue("name");
            row0.createCell(11).setCellValue("coins_name");
            row0.createCell(12).setCellValue("insured_amount");
            row0.createCell(13).setCellValue("claim_amount");
            row0.createCell(14).setCellValue("claim_amount_est");
            row0.createCell(15).setCellValue("claim_amount_approved");
            row0.createCell(16).setCellValue("claim_or");
            row0.createCell(17).setCellValue("claim_bppdan");
            row0.createCell(18).setCellValue("claim_spl");
            row0.createCell(19).setCellValue("claim_fac");
            row0.createCell(20).setCellValue("claim_qs");
            row0.createCell(21).setCellValue("claim_park");
            row0.createCell(22).setCellValue("coins_amount");
            row0.createCell(23).setCellValue("status");
            row0.createCell(24).setCellValue("cob");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("uy"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_id"));
            if (h.getFieldValueByFieldNameDT("dla_date")!=null)
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("dla_date"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("pla_no"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("dla_no"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("name"));
            if (h.getFieldValueByFieldNameST("coins_name")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("coins_name"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("claim_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount_est")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("claim_amount_est").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount_approved")!=null)
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("claim_amount_approved").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_or")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("claim_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_bppdan")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("claim_bppdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_spl")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("claim_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_fac")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("claim_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_qs")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("claim_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_park")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("claim_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("coins_amount")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("coins_amount").doubleValue());
            if (getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getParentPolicy().getStStatus()!=null);
            row.createCell(23).setCellValue(getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getParentPolicy().getStStatus());
            row.createCell(24).setCellValue(getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getStPolicyTypeDesc());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_RKS_REINS() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "substr(a.period_start::text,1,4) as uy,a.period_start,a.period_end,a.pol_type_id::character varying,a.pol_id::character varying,a.claim_date,a.pla_date, " +
                "coalesce(a.pla_date,null) as pla_date,a.policy_date,a.pol_no,a.pla_no,a.cust_name,upper(checkstatus(a.ins_policy_type_grp_id=10,b.ref2,b.ref1)) as name," +
                "coalesce((b.insured_amount*a.ccy_rate),0) as insured_amount,coalesce((a.claim_amount_est*a.ccy_rate),0) as claim_amount_est," +
                "coalesce((a.claim_amount*a.ccy_rate),0) as claim_amount,coalesce((a.claim_amount_approved*a.ccy_rate),0) as claim_amount_approved," +
                "coalesce(checkreas(a.pol_type_id=21,b.refn2*a.ccy_rate),0) as coins_amount, "+
                "(select coalesce(e.short_name,'') from ent_master e where a.coinsurer_id::bigint = e.ent_id) as coins_name," +
                "round(sum(checkreas(j.treaty_type='OR',i.claim_amount)),2) as claim_or,  " +
                "round(sum(checkreas(j.treaty_type='BPDAN',i.claim_amount)),2) as claim_bppdan, " +
                "round(sum(checkreas(j.treaty_type='SPL',i.claim_amount)),2) as claim_spl, " +
                "round(sum(checkreas(j.treaty_type='FAC',i.claim_amount)),2) as claim_fac, " +
                "round(sum(checkreas(j.treaty_type='QS',i.claim_amount)),2) as claim_qs, " +
                "round(sum(checkreas(j.treaty_type='PARK',i.claim_amount)),2) as claim_park   "
                );
        
        sqa.addQuery("   from ins_policy a "+
                "	inner join ent_master e on e.ent_id = a.entity_id" +
                "	inner join ins_pol_obj b on b.ins_pol_obj_id = a.claim_object_id" +
                "   inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id " +
                "   inner join ins_pol_treaty_detail h on g.ins_pol_treaty_id = h.ins_pol_treaty_id " +
                "   inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id " +
                "   inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id"
                );
        
        sqa.addClause("a.pol_id not in ( " +
                "select a.parent_id " +
                "from ins_policy a " +
                "where a.claim_status = 'DLA' " +
                "and a.status in ('CLAIM','CLAIM ENDORSE')) ");
        
        sqa.addClause("a.status IN ('CLAIM')");
        sqa.addClause("a.claim_status = 'PLA'");
        sqa.addClause("a.effective_flag = 'Y'");
        
        if(appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (PLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.pla_date) >= ?");
            sqa.addPar(PLADateFrom);
        }
        
        if (PLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.pla_date) <= ?");
            sqa.addPar(PLADateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stObject!=null) {
            if (stPolicyTypeGroupID.equalsIgnoreCase("10"))
                sqa.addClause("upper(b.ref2) like ?");
            else
                sqa.addClause("upper(b.ref1) like ?");
            sqa.addPar('%'+stObject.toUpperCase()+'%');
        }
        
        final String sql = sqa.getSQL()+"   group by a.coinsurer_id,a.period_start,a.period_end,a.pol_type_id,a.pol_id,a.pla_date,a.policy_date,a.claim_date,a.pol_no,a.pla_no,a.cust_name,a.ins_policy_type_grp_id,b.ref2,b.ref1, "+
                " b.insured_amount,a.ccy_rate,a.claim_amount_est,a.claim_amount,a.claim_amount_approved,b.refn2,a.pol_type_id"+
                " order by a.pla_date,a.pol_no";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_RKS_REINS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("uy");
            row0.createCell(1).setCellValue("period_start");
            row0.createCell(2).setCellValue("period_end");
            row0.createCell(3).setCellValue("claim_date");
            row0.createCell(4).setCellValue("pla_date");
            row0.createCell(5).setCellValue("policy_date");
            row0.createCell(6).setCellValue("pol_no");
            row0.createCell(7).setCellValue("pla_no");
            row0.createCell(8).setCellValue("cust_name");
            row0.createCell(9).setCellValue("name");
            row0.createCell(10).setCellValue("coins_name");
            row0.createCell(11).setCellValue("insured_amount");
            row0.createCell(12).setCellValue("claim_amount");
            row0.createCell(13).setCellValue("claim_amount_est");
            row0.createCell(14).setCellValue("claim_or");
            row0.createCell(15).setCellValue("claim_bppdan");
            row0.createCell(16).setCellValue("claim_spl");
            row0.createCell(17).setCellValue("claim_fac");
            row0.createCell(18).setCellValue("claim_qs");
            row0.createCell(19).setCellValue("claim_park");
            row0.createCell(20).setCellValue("coins_amount");
            row0.createCell(21).setCellValue("status");
            row0.createCell(22).setCellValue("cob");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("uy"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            if (h.getFieldValueByFieldNameDT("claim_date")!=null)
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("claim_date"));
            if (h.getFieldValueByFieldNameDT("pla_date")!=null)
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("pla_date"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("pla_no"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("name"));
            if (h.getFieldValueByFieldNameST("coins_name")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("coins_name"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("claim_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_amount_est")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("claim_amount_est").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_or")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("claim_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_bppdan")!=null)
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("claim_bppdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_spl")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("claim_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_fac")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("claim_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_qs")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("claim_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_park")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("claim_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("coins_amount")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("coins_amount").doubleValue());
            if (getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getStStatus()!=null)
                row.createCell(21).setCellValue(getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getStStatus());
            if (getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getStPolicyTypeDesc()!=null)
                row.createCell(22).setCellValue(getPolicy(h.getFieldValueByFieldNameST("pol_id")).getParentPolicy().getStPolicyTypeDesc());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public DTOList OUTSTANDING() throws Exception {
        final boolean FLT_OUTS_CLAIM = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_CLAIM"));
        final boolean FLT_OUTS_CLAIM_CO = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_CLAIM_CO"));
        final boolean FLT_OUTS_CLAIM_RI = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_CLAIM_RI"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                " b.create_who,a.cc_code,a.pol_id,b.ar_cust_id as entity_id,a.policy_date,a.dla_date,a.pol_no,a.ccy_rate,a.dla_no,b.no_surat_hutang as cust_name," +
                "round(a.insured_amount,0) as insured_amount,round(a.premi_total,0) as premi_total," +
                "round(coalesce(a.nd_pcost,0),0) as nd_pcost,round(coalesce(a.nd_sfee,0),0) as nd_sfee," +
                "round(coalesce(a.claim_amount_approved,0),0) as claim_amount_approved,round(coalesce(b.amount,0),0) as total_due," +
                "round(coalesce(b.amount_settled,0),0) as ap_comis_p "
                );
        
        sqa.addQuery(
                " from ar_invoice b " +
                " left join ins_policy a on a.pol_id = b.attr_pol_id " +
                " left join ent_master c on c.ent_id = a.entity_id "
                );
        
        if (FLT_OUTS_CLAIM) {
            sqa.addClause("invoice_type = 'AP'");
            sqa.addClause("ar_trx_type_id = 12");
        }
        
        if (FLT_OUTS_CLAIM_RI) {
            sqa.addClause("invoice_type = 'AR'");
            sqa.addClause("ar_trx_type_id = 14");
        }
        
        if (FLT_OUTS_CLAIM_CO) {
            sqa.addClause("invoice_type = 'AR'");
            sqa.addClause("ar_trx_type_id = 16");
        }
        
        sqa.addClause("b.amount - coalesce(b.amount_settled,0) > 0");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityName!=null) {
            sqa.addClause("a.ent_id = ?");
            sqa.addPar(stEntityName);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("b.no_surat_hutang like ?");
            sqa.addPar('%'+stFltTreatyType+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("c.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL() +" order by a.cc_code,a.pol_no,b.ar_cust_id,b.no_surat_hutang ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList OUTSTANDINGCOREINS() throws Exception {
        final boolean FLT_OUTS_COINS = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_COINS"));
        final boolean FLT_OUTS_REINS = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OUTS_REINS"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("a.ar_invoice_id,b.policy_date,b.create_who,a.cc_code,b.pol_id,b.pol_no,a.ar_cust_id as entity_id,a.ccy_rate,a.no_surat_hutang as cust_name," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=66,c.amount)),0),0) as nd_brok1," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=66,c.amount_settled)),0),0) as nd_brok1pct," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=67,c.amount)),0),0) as nd_brok2," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=67,c.amount_settled)),0),0) as nd_brok2pct," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=55,c.amount)),0),0) as refn1," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=55,c.amount_settled)),0),0) as refn2," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=73,c.amount)),0),0) as refn3," +
                "round(coalesce(sum(getpremi2(c.ar_trx_line_id=73,c.amount_settled)),0),0) as refn4 ");
        
        sqa.addQuery(
                " from ar_invoice a " +
                " left join ins_policy b on b.pol_id = a.attr_pol_id " +
                " left join ar_invoice_details c on c.ar_invoice_id = a.ar_invoice_id " +
                " left join ent_master d on d.ent_id = b.entity_id "
                );
        
        if (FLT_OUTS_COINS) {
            sqa.addClause("invoice_type = 'AP'");
            sqa.addClause("ar_trx_type_id = 10");
        }
        
        if (FLT_OUTS_REINS) {
            sqa.addClause("invoice_type = 'AP'");
            sqa.addClause("ar_trx_type_id = 13");
        }
        
        sqa.addClause("case when a.amount < 0 then (a.amount*-1) - coalesce(a.amount_settled,0) > 0 else a.amount - coalesce(a.amount_settled,0) > 0 end ");
        sqa.addClause("a.used_flag is null");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("d.ent_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("a.no_surat_hutang like ?");
            sqa.addPar('%'+stFltTreatyType+'%');
        }
        
        if(stKreasiName!=null) {
            sqa.addClause("a.no_surat_hutang = ?");
            sqa.addPar(stKreasiName);
        }
        
        if (stReinsName!=null) {
            sqa.addClause("a.no_surat_hutang = ?");
            sqa.addPar(stReinsName);
        }
        
        if(stCreateID!=null) {
            sqa.addClause("b.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("d.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL() +" group by a.ar_invoice_id,b.policy_date,b.create_who,a.cc_code," +
                " b.pol_id,b.pol_no,a.ar_cust_id,a.ccy_rate,a.no_surat_hutang,a.invoice_type " +
                " order by a.cc_code,b.pol_no,a.ar_cust_id,a.no_surat_hutang ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList RECEIPT() throws Exception {
        final boolean FLT_PAID_COINS = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_COINS"));
        final boolean FLT_PAID_REINS = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_REINS"));
        final boolean FLT_PAID_CLAIM = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_CLAIM"));
        final boolean FLT_PAID_CLAIM_CO = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_CLAIM_CO"));
        final boolean FLT_PAID_CLAIM_RI = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_PAID_CLAIM_RI"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "e.create_who,e.receipt_no as description,e.receipt_date as period_start,d.cc_code,d.pol_id,d.policy_date," +
                "d.dla_date,d.pol_no,d.ccy_rate,d.dla_no,d.pol_type_id,f.ar_cust_id as entity_id,f.no_surat_hutang as cust_name," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=66,a.amount)),0),0) as nd_brok1," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=66,a.amount_settled)),0),0) as nd_brok1pct," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=67,a.amount)),0),0) as nd_brok2," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=67,a.amount_settled)),0),0) as nd_brok2pct," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=55,a.amount)),0),0) as refn1," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=55,a.amount_settled)),0),0) as refn2," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=73,a.amount)),0),0) as refn3," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=73,a.amount_settled)),0),0) as refn4," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=57,a.amount)),0),0) as nd_comm1," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id in (58,59,64),a.amount)),0),0) as nd_comm2," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id in (60,61,62,63,65),a.amount)),0),0) as nd_comm3," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=57,a.amount_settled)),0),0) as nd_comm4," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=68,a.amount)),0),0) as nd_taxcomm1," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=68,a.amount_settled)),0),0) as nd_taxcomm2," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=69,a.amount)),0),0) as nd_taxcomm3," +
                "round(coalesce(sum(getpremi2(a.ar_trx_line_id=69,a.amount_settled)),0),0) as nd_taxcomm4"
                );
        
        sqa.addQuery(
                " from ar_invoice_details a " +
                " inner join ar_receipt_lines b on b.ar_invoice_dtl_id = a.ar_invoice_dtl_id " +
                " left join ins_policy d on d.pol_id = b.pol_id " +
                " left join ar_receipt e on e.ar_receipt_id = b.receipt_id" +
                " left join ar_invoice f on f.ar_invoice_id = b.ar_invoice_id "+
                " left join ent_master g on g.ent_id = d.entity_id "
                );
        
        sqa.addClause("e.status = 'POST'");
        
        if (FLT_PAID_REINS) {
            sqa.addClause("e.ar_settlement_id = 9");
        }
        
        if (FLT_PAID_CLAIM) {
            sqa.addClause("e.ar_settlement_id = 10");
        }
        
        if (FLT_PAID_CLAIM_RI) {
            sqa.addClause("e.ar_settlement_id = 11");
        }
        
        if (FLT_PAID_COINS) {
            sqa.addClause("e.ar_settlement_id = 13");
        }
        
        if (FLT_PAID_CLAIM_CO) {
            sqa.addClause("e.ar_settlement_id = 14");
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (paymentDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.receipt_date) >= ?");
            sqa.addPar(paymentDateFrom);
        }
        
        if (paymentDateTo!=null) {
            sqa.addClause("date_trunc('day',b.receipt_date) <= ?");
            sqa.addPar(paymentDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("d.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("d.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("d.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("d.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stReceiptNo!=null) {
            sqa.addClause("e.receipt_no like ?");
            sqa.addPar('%'+stReceiptNo+'%');
        }
        
        if(stFltTreatyType!=null){
            sqa.addClause("f.no_surat_hutang like ?");
            sqa.addPar('%'+stFltTreatyType+'%');
        }
        
        if(stReinsName!=null){
            sqa.addClause("f.no_surat_hutang = ?");
            sqa.addPar(stReinsName);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("g.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL() +
                " group by e.create_who,e.receipt_no,e.receipt_date,d.cc_code,d.pol_id,d.policy_date,d.dla_date,d.pol_no,d.ccy_rate,f.ar_cust_id," +
                " d.dla_no,d.pol_type_id,f.no_surat_hutang order by e.receipt_date,d.pol_no,f.no_surat_hutang ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_PREMI_PERWEEK() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.lvl,count(b.pol_no) as jumlah,coalesce(round(sum(b.insured_amount),2),0) as insured," +
                "coalesce(round(sum(b.premi_total),2),0) as premi "
                );
        
        sqa.addQuery(" from band_level_char a" +
                " left join ins_policy b on substr(b.policy_date::text,9,2) between a.ref1 and a.ref2 "
                );
        
        sqa.addClause("a.ref3 = 'date'");
        sqa.addClause("b.status in ('POLICY','ENDORSE','RENEWAL') and b.effective_flag = 'Y'");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = sqa.getSQL()+ " group by a.lvl order by a.lvl";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_PREMI_PERWEEK()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        int norut = 0;
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            norut++;
            
            XSSFRow row1 = sheet.createRow(1);
            row1.createCell(0).setCellValue("LAPORAN PRODUKSI KONTRA BANK GARANSI");
            
            XSSFRow row2 = sheet.createRow(2);
            row2.createCell(0).setCellValue("KANTOR OPERASIONAL " + getCostCenter().getStDescription().toUpperCase());
            
            XSSFRow row3 = sheet.createRow(3);
            row3.createCell(0).setCellValue("BULAN " + DateUtil.getMonth(getPolicyDateTo()).toUpperCase());
            
            //bikin header
            XSSFRow row0 = sheet.createRow(5);
            row0.createCell(0).setCellValue("No");
            row0.createCell(1).setCellValue("Mingguan");
            row0.createCell(2).setCellValue("Jumlah Sertifikat");
            row0.createCell(3).setCellValue("Nilai Jaminan");
            row0.createCell(4).setCellValue("Premi");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+6);
            row.createCell(0).setCellValue(norut);
            row.createCell(1).setCellValue("Minggu " + String.valueOf(h.getFieldValueByFieldNameBD("lvl").doubleValue()));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("jumlah").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("insured").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public GLCostCenterView getCostCenter() {
        final GLCostCenterView costcenter = (GLCostCenterView) DTOPool.getInstance().getDTO(GLCostCenterView.class, stBranch);
        
        return costcenter;
    }
    
    public InsurancePolicyView getPolicy(String stParentID) {
        return (InsurancePolicyView) DTOPool.getInstance().getDTO(InsurancePolicyView.class, stParentID);
    }
    
    public DTOList EXCEL_PERIOD_UW_PAKREASI() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.lvl,a.ref4,a.ref5," +
                "coalesce(count(b.pol_no),0) as jumlah," +
                "coalesce(sum(b.insured_amount),0) as insured_amount," +
                "coalesce(sum(b.premi_or),0) as premi_or," +
                "coalesce(sum(b.premi_koas),0) as premi_koas "
                );
        
        String sql = " left join ( " +
                " select pol_no, insured_amount," +
                " round(((premi_or*share_pct)/100),0) as premi_or,round(((premi_koas*share_pct)/100),0) as premi_koas " +
                " from (select a.pol_id,a.cc_code,a.pol_no," +
                " getpositive(c.insured_amount < 0,c.insured_amount*-1,c.insured_amount) as insured_amount," +
                " (c.refn6) as premi_or,(c.refn2) as premi_koas, "+
                " (select d.share_pct from ins_pol_coins d where d.policy_id = a.pol_id and d.entity_id = 1 and d.coins_type= 'COINS') as share_pct  " +
                " from ins_policy a " +
                " inner join ins_pol_obj c on c.pol_id = a.pol_id " +
                " where a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y' " +
                " and a.ins_policy_type_grp_id = 9 and a.pol_type_id = 21 ";
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getPeriodFrom()!=null) {
            sql = sql + " and date_trunc('day',c.refd2) >= ?";
            sqa.addPar(periodFrom);
        }
        
        if (getPeriodTo()!=null) {
            sql = sql + " and date_trunc('day',c.refd2) <= ?";
            sqa.addPar(periodTo);
        }
        
        if (getStBranch()!=null) {
            sql = sql + " and a.cc_code = ?";
            sqa.addPar(stBranch);
        }
        
        sqa.addQuery(" from band_level a "+ sql + " ) x ) as b on b.insured_amount between a.ref1 and a.ref2 " );
        
        sqa.addClause(" a.pol_type_grp_id = 9 ");
        sqa.addClause(" a.pol_type_id = 21 ");
        sqa.addClause(" a.group_desc = 'PERIOD_UW' ");
        
        sql = sqa.getSQL() + " group by a.lvl,a.ref4,a.ref5 order by a.lvl ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList EXCEL_LOSS_PROFILE_RI_PAKREASI() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.lvl,a.ref4,a.ref5," +
                " coalesce(count(b.pol_no),0) as jumlah," +
                " coalesce(sum(b.premi_or)-sum(premi_koas),0) as premi_total "
                );
        
        String sql = "left join ( " +
                " select pol_no,insured_amount," +
                " round(((premi_or*share_pct)/100),0) as premi_or,round(((premi_koas*share_pct)/100),0) as premi_koas " +
                " from (select a.pol_id,a.cc_code,a.pol_no," +
                " getpositive(c.insured_amount < 0,c.insured_amount*-1,c.insured_amount) as insured_amount," +
                " (c.refn6) as premi_or,(c.refn2) as premi_koas, "+
                " (select d.share_pct from ins_pol_coins d where d.policy_id = a.pol_id and d.entity_id = 1 and d.coins_type= 'COINS') as share_pct  " +
                " from ins_policy a " +
                " inner join ins_pol_obj c on c.pol_id = a.pol_id " +
                " where a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y' " +
                " and a.ins_policy_type_grp_id = 9 and a.pol_type_id = 21 ";
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getPeriodFrom()!=null) {
            sql = sql + " and date_trunc('day',c.refd2) >= ?";
            sqa.addPar(periodFrom);
        }
        
        if (getPeriodTo()!=null) {
            sql = sql + " and date_trunc('day',c.refd2) <= ?";
            sqa.addPar(periodTo);
        }
        
        if (getStBranch()!=null) {
            sql = sql + " and a.cc_code = ?";
            sqa.addPar(stBranch);
        }
        
        sqa.addQuery(" from band_level a "+ sql + " ) x ) as b on b.insured_amount between a.ref1 and a.ref2 " );
        
        sqa.addClause(" a.pol_type_grp_id = 9 ");
        sqa.addClause(" a.pol_type_id = 21 ");
        sqa.addClause(" a.group_desc = 'RISK_LOSS_PROFILE' ");
        
        sql = sqa.getSQL() + " group by a.lvl,a.ref4,a.ref5 order by a.lvl ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList EXCEL_LOSS_PROFILE_PROD() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.lvl,a.ref4,a.ref5," +
                " coalesce(count(b.pol_no),0) as jumlah,coalesce(sum(b.premi_total)-sum(disc),0) as premi_total "
                );
        
        String sql = "left join ( " +
                " select e.ins_policy_type_grp_id2,a.pol_no," +
                " sum(getpremi(a.status = 'ENDORSE',getpremi(a.insured_amount_e < 0,(a.insured_amount_e*a.ccy_rate)*-1,a.insured_amount_e*a.ccy_rate),a.insured_amount*a.ccy_rate)) as insured_amount," +
                " sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi_total, " +
                " sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1*a.ccy_rate,0)) + (coalesce(a.nd_disc2*a.ccy_rate,0))),(coalesce(d.disc_amount*a.ccy_rate,0))*-1)) as disc " +
                " from ins_policy a" +
                " inner join ins_pol_coins d on d.policy_id = a.pol_id " +
                " left join ins_policy_types e on e.pol_type_id = a.pol_type_id " +
                " where a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'" +
                " and (d.entity_id <> 1 or d.coins_type <> 'COINS_COVER') ";
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getPeriodFrom()!=null) {
            sql = sql + " and date_trunc('day',a.period_start) >= ?";
            sqa.addPar(periodFrom);
        }
        
        if (getPeriodTo()!=null) {
            sql = sql + " and date_trunc('day',a.period_start) <= ?";
            sqa.addPar(periodTo);
        }
        
        if (getStBranch()!=null) {
            sql = sql + " and a.cc_code = ?";
            sqa.addPar(stBranch);
        }
        
        if (getStGroupID()!=null) {
            sql = sql + " and e.ins_policy_type_grp_id2 = ?";
            sqa.addPar(stGroupID);
        }
        
        sqa.addQuery(" from band_level a "+ sql + " group by e.ins_policy_type_grp_id2,pol_no " +
                " ) as b on b.insured_amount between a.ref1 and a.ref2 "
                );
        
        if (stGroupID!=null) {
            sqa.addClause("a.pol_type_grp_id = ?");
            sqa.addPar(stGroupID);
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.enabled = 'Y'");
        }
        
        sqa.addClause(" a.group_desc = 'PEFINDO' and b.ins_policy_type_grp_id2 = a.pol_type_grp_id ");
        
        sql = sqa.getSQL() + " group by a.lvl,a.ref4,a.ref5 order by a.lvl ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList EXCEL_LOSS_PROFILE_RI() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.lvl,a.ref4,a.ref5," +
                " coalesce(count(b.pol_no),0) as jumlah,coalesce(sum(b.premi_total),0) as premi_total"
                );
        
        String sql = "left join ( " +
                " select a.pol_no," +
                " sum(getpremi(a.status = 'ENDORSE',getpremi(a.insured_amount_e < 0,(a.insured_amount_e*a.ccy_rate)*-1,a.insured_amount_e*a.ccy_rate),a.insured_amount*a.ccy_rate)) as insured_amount," +
                " sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi_total" +
                " from ins_policy a" +
                " inner join ins_pol_coins d on d.policy_id = a.pol_id  " +
                " where a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'" +
                " and (d.entity_id <> 1 or d.coins_type <> 'COINS_COVER') ";
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',a.policy_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getPeriodFrom()!=null) {
            sql = sql + " and date_trunc('day',a.period_start) >= ?";
            sqa.addPar(periodFrom);
        }
        
        if (getPeriodTo()!=null) {
            sql = sql + " and date_trunc('day',a.period_start) <= ?";
            sqa.addPar(periodTo);
        }
        
        if (getStBranch()!=null) {
            sql = sql + " and a.cc_code = ?";
            sqa.addPar(stBranch);
        }
        
        if (getStPolicyTypeGroupID()!=null) {
            sql = sql + " and a.ins_policy_type_grp_id = ?";
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (getStPolicyTypeID()!=null) {
            sql = sql + " and a.pol_type_id = ?";
            sqa.addPar(stPolicyTypeID);
        }
        
        sqa.addQuery(" from band_level a "+ sql + " group by pol_no " +
                " ) as b on b.insured_amount between a.ref1 and a.ref2 "
                );
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.pol_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.enabled = 'Y'");
        }
        
        sqa.addClause(" a.group_desc = 'RISK_LOSS_PROFILE' ");
        
        sql = sqa.getSQL() + " group by a.lvl,a.ref4,a.ref5 order by a.lvl ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList EXCEL_LOSS_PROFILE_CL() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.lvl,a.ref4,a.ref5," +
                " coalesce(count(b.pol_no),0) as jumlah,coalesce(sum(b.claim_amount),0) as claim_amount"
                );
        
        String sql = "left join ( " +
                " select policy_date,substr(policy_date::text,1,4) as years,pol_no,status," +
                " sum(insured_amount*ccy_rate) as insured_amount,sum(claim_amount*ccy_rate) as claim_amount" +
                " from ins_policy " +
                " where status in ('CLAIM','CLAIM ENDORSE') and claim_status = 'DLA' and effective_flag = 'Y'";
        
        if (getAppDateFrom()!=null) {
            sql = sql + " and date_trunc('day',claim_approved_date) >= ?";
            sqa.addPar(appDateFrom);
        }
        
        if (getAppDateTo()!=null) {
            sql = sql + " and date_trunc('day',claim_approved_date) <= ?";
            sqa.addPar(appDateTo);
        }
        
        if (getClaimDateFrom()!=null) {
            sql = sql + " and date_trunc('day',claim_date) >= ?";
            sqa.addPar(claimDateFrom);
        }
        
        if (getClaimDateTo()!=null) {
            sql = sql + " and date_trunc('day',claim_date) <= ?";
            sqa.addPar(claimDateTo);
        }
        
        if (getStBranch()!=null) {
            sql = sql + " and cc_code = ?";
            sqa.addPar(stBranch);
        }
        
        if (getStPolicyTypeGroupID()!=null) {
            sql = sql + " and ins_policy_type_grp_id = ?";
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (getStPolicyTypeID()!=null) {
            sql = sql + " and pol_type_id = ?";
            sqa.addPar(stPolicyTypeID);
        }
        
        sqa.addQuery(" from band_level a "+ sql + " group by policy_date,substr(policy_date::text,1,4),pol_no,status" +
                " order by substr(policy_date::text,1,4) ) as b on b.insured_amount between a.ref1 and a.ref2 "
                );
        
        if (stPolicyTypeGroupID!=null) {
            sqa.addClause("a.pol_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        sqa.addClause(" a.group_desc = 'RISK_LOSS_PROFILE' ");
        
        sql = sqa.getSQL() + " group by a.lvl,a.ref4,a.ref5 order by a.lvl ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_LOSS_PROFILE_RI_PAKREASI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("RISK AND LOSS PROFILES OF PERSONAL ACCIDENT INSURANCE (PA KREASI)");
            
            //bikin header
            XSSFRow row1 = sheet.createRow(1);
            row1.createCell(0).setCellValue("PA KREASI");
            
            //bikin header
            XSSFRow row2 = sheet.createRow(2);
            row2.createCell(0).setCellValue("POLICY DATE : " + DateUtil.getDateStr(getPolicyDateFrom()) + " TO " + DateUtil.getDateStr(getPolicyDateTo()));
            
            //bikin header
            XSSFRow row3 = sheet.createRow(3);
            if (getPeriodFrom()!=null)
                row3.createCell(0).setCellValue("UNDERWRITING YEAR : " + DateUtil.getYear(getPeriodFrom()));
            
            //bikin header
            XSSFRow row4 = sheet.createRow(4);
            if (getStBranch()!=null)
                row4.createCell(0).setCellValue("BRANCH : " + getStBranch());
            
            //bikin header
            XSSFRow row5 = sheet.createRow(6);
            row5.createCell(0).setCellValue("SUM INSURED");
            row5.createCell(1).setCellValue("PREMIUM");
            
            //bikin header
            XSSFRow row6 = sheet.createRow(7);
            row6.createCell(0).setCellValue("RISK BASIS");
            row6.createCell(1).setCellValue("IN AMOUNT");
            row6.createCell(2).setCellValue("NO");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+8);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("ref4") + " - " + h.getFieldValueByFieldNameST("ref5"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("jumlah").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_PERIOD_UW_PAKREASI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row1 = sheet.createRow(0);
            row1.createCell(0).setCellValue("PA KREASI");
            
            //bikin header
            XSSFRow row2 = sheet.createRow(1);
            row2.createCell(0).setCellValue("POLICY DATE : " + DateUtil.getDateStr(getPolicyDateFrom()) + " TO " + DateUtil.getDateStr(getPolicyDateTo()));
            
            //bikin header
            XSSFRow row3 = sheet.createRow(2);
            if (getPeriodFrom()!=null)
                row3.createCell(0).setCellValue("UNDERWRITING YEAR : " + DateUtil.getYear(getPeriodFrom()));
            
            //bikin header
            XSSFRow row4 = sheet.createRow(3);
            if (getStBranch()!=null)
                row4.createCell(0).setCellValue("BRANCH : " + getStBranch());
            
            //bikin header
            XSSFRow row6 = sheet.createRow(5);
            row6.createCell(0).setCellValue("RISK BASIS");
            row6.createCell(1).setCellValue("PREMI 100");
            row6.createCell(2).setCellValue("PREMI KO");
            row6.createCell(3).setCellValue("JUMLAH");
            row6.createCell(4).setCellValue("HARGA PERTANGGUNGAN");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+6);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("ref4") + " - " + h.getFieldValueByFieldNameST("ref5"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("premi_or").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("premi_koas").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("jumlah").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_LOSS_PROFILE_RI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("RISK AND LOSS PROFILES OF " + getStPolicyTypeGroupDesc().toUpperCase() + " INSURANCE");
            
            //bikin header
            XSSFRow row1 = sheet.createRow(1);
            if (getStPolicyTypeDesc()!=null)
                row1.createCell(0).setCellValue(getStPolicyTypeDesc().toUpperCase());
            
            //bikin header
            XSSFRow row2 = sheet.createRow(2);
            row2.createCell(0).setCellValue("POLICY DATE : " + DateUtil.getDateStr(getPolicyDateFrom()) + " TO " + DateUtil.getDateStr(getPolicyDateTo()));
            
            //bikin header
            XSSFRow row3 = sheet.createRow(3);
            if (getPeriodFrom()!=null)
                row3.createCell(0).setCellValue("UNDERWRITING YEAR : " + DateUtil.getYear(getPeriodFrom()));
            
            //bikin header
            XSSFRow row4 = sheet.createRow(4);
            if (getStBranch()!=null)
                row4.createCell(0).setCellValue("BRANCH : " + getStBranch());
            
            //bikin header
            XSSFRow row5 = sheet.createRow(6);
            row5.createCell(0).setCellValue("SUM INSURED");
            row5.createCell(1).setCellValue("PREMIUM");
            
            //bikin header
            XSSFRow row6 = sheet.createRow(7);
            row6.createCell(0).setCellValue("RISK BASIS");
            row6.createCell(1).setCellValue("IN AMOUNT");
            row6.createCell(2).setCellValue("NO");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+8);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("ref4") + " - " + h.getFieldValueByFieldNameST("ref5"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("jumlah").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_LOSS_PROFILE_PROD()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("RISK AND LOSS PROFILES OF " + getStGroupName().toUpperCase() + " INSURANCE");
            
            //bikin header
            XSSFRow row2 = sheet.createRow(2);
            row2.createCell(0).setCellValue("POLICY DATE : " + DateUtil.getDateStr(getPolicyDateFrom()) + " TO " + DateUtil.getDateStr(getPolicyDateTo()));
            
            //bikin header
            XSSFRow row3 = sheet.createRow(3);
            if (getPeriodFrom()!=null)
                row3.createCell(0).setCellValue("UNDERWRITING YEAR : " + DateUtil.getYear(getPeriodFrom()));
            
            //bikin header
            XSSFRow row4 = sheet.createRow(4);
            if (getStBranch()!=null)
                row4.createCell(0).setCellValue("BRANCH : " + getStBranch());
            
            //bikin header
            XSSFRow row5 = sheet.createRow(6);
            row5.createCell(0).setCellValue("SUM INSURED");
            row5.createCell(1).setCellValue("PREMIUM");
            
            //bikin header
            XSSFRow row6 = sheet.createRow(7);
            row6.createCell(0).setCellValue("RISK BASIS");
            row6.createCell(1).setCellValue("IN AMOUNT");
            row6.createCell(2).setCellValue("NO");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+8);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("ref4") + " - " + h.getFieldValueByFieldNameST("ref5"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("jumlah").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public void EXPORT_LOSS_PROFILE_CL()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("RISK AND LOSS PROFILES OF " + getStPolicyTypeGroupDesc().toUpperCase() + " INSURANCE");
            
            //bikin header
            XSSFRow row1 = sheet.createRow(1);
            if (getStPolicyTypeDesc()!=null)
                row1.createCell(0).setCellValue(getStPolicyTypeDesc().toUpperCase());
            
            //bikin header
            XSSFRow row2 = sheet.createRow(2);
            row2.createCell(0).setCellValue("POLICY DATE : " + DateUtil.getDateStr(getPolicyDateFrom()) + " TO " + DateUtil.getDateStr(getPolicyDateTo()));
            
            //bikin header
            XSSFRow row3 = sheet.createRow(3);
            if (getPeriodFrom()!=null)
                row3.createCell(0).setCellValue("UNDERWRITING YEAR : " + DateUtil.getYear(getPeriodFrom()));
            
            //bikin header
            XSSFRow row4 = sheet.createRow(4);
            if (getStBranch()!=null)
                row4.createCell(0).setCellValue("BRANCH : " + getStBranch());
            
            //bikin header
            XSSFRow row5 = sheet.createRow(6);
            row5.createCell(0).setCellValue("SUM INSURED");
            row5.createCell(1).setCellValue("INCURRED CLAIM");
            
            //bikin header
            XSSFRow row6 = sheet.createRow(7);
            row6.createCell(0).setCellValue("RISK BASIS");
            row6.createCell(1).setCellValue("IN AMOUNT");
            row6.createCell(2).setCellValue("NO");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+8);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("ref4") + " - " + h.getFieldValueByFieldNameST("ref5"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("claim_amount").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("jumlah").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public String getStCustStatus() {
        return stCustStatus;
    }
    
    public void setStCustStatus(String stCustStatus) {
        this.stCustStatus = stCustStatus;
    }
    
    public Date getPeriodEndFrom() {
        return periodEndFrom;
    }
    
    public void setPeriodEndFrom(Date periodEndFrom) {
        this.periodEndFrom = periodEndFrom;
    }
    
    public Date getPeriodEndTo() {
        return periodEndTo;
    }
    
    public void setPeriodEndTo(Date periodEndTo) {
        this.periodEndTo = periodEndTo;
    }
    
    public DTOList REKAP_CAB() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	substr(a.pol_no,2,1) as bus_source,a.cc_code," +
                "sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi," +
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon, "
                );
        
        String sql = " ( select sum(checkreas(d.ar_trx_line_id in ('1','4','77','79'),d.amount)) " +
                " from ins_pol_inward c inner join ins_pol_inward_details d on d.ar_invoice_id = c.ar_invoice_id " +
                " where c.ar_trx_type_id in (1,2,3)";
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',c.mutation_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',c.mutation_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        if (getStPolicyTypeID()!=null) {
            sql = sql + " and a.attr_pol_type_id = ?";
            sqa.addPar(stPolicyTypeID);
        }
        
        sqa.addQuery( sql + " ) as premi_base from ins_policy a  " +
                " left join ent_master b on b.ent_id = a.entity_id " +
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'");
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCreditID!=null) {
            sqa.addClause("a.kreasi_type_id = ?");
            sqa.addPar(stCreditID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.ref12 = 'Y'");
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.create_who <> 'administrator'");
        }
        
        sql = "select e.cc_code," +
                "sum(getkoas(bus_source='1',(premi-diskon))) as nd_comm1," +
                "sum(getkoas(bus_source='2',(premi-diskon))) as nd_comm2," +
                "sum(getkoas(bus_source='3',(premi-diskon))) as nd_comm3," +
                "sum(getkoas(bus_source='4',(premi-diskon))) as nd_comm4," +
                "sum(premi-diskon) as premi_total_adisc,premi_base " +
                "from gl_cost_center e " +
                "left join ( " +
                sqa.getSQL() + " group by substr(a.pol_no,2,1),a.cc_code "+
                ") z on z.cc_code = e.cc_code " +
                "group by e.cc_code,premi_base order by e.cc_code";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList REKAP_JENIS() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	substr(a.pol_no,2,1) as bus_source,a.pol_type_id," +
                "sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi," +
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon, "
                );
        
        String sql = " ( select sum(checkreas(d.ar_trx_line_id in ('1','4','77','79'),d.amount)) " +
                " from ins_pol_inward c inner join ins_pol_inward_details d on d.ar_invoice_id = c.ar_invoice_id " +
                " where c.ar_trx_type_id in (1,2,3)";
        
        if (getPolicyDateFrom()!=null) {
            sql = sql + " and date_trunc('day',c.mutation_date) >= ?";
            sqa.addPar(policyDateFrom);
        }
        
        if (getPolicyDateTo()!=null) {
            sql = sql + " and date_trunc('day',c.mutation_date) <= ?";
            sqa.addPar(policyDateTo);
        }
        
        sqa.addQuery( sql + " ) as premi_base from ins_policy a  " +
                " left join ent_master b on b.ent_id = a.entity_id " +
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'");
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.ref12 = 'Y'");
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.create_who <> 'administrator'");
        }
        
        sql = "select e.pol_type_id," +
                "sum(getkoas(bus_source='1',(premi-diskon))) as nd_comm1," +
                "sum(getkoas(bus_source='2',(premi-diskon))) as nd_comm2," +
                "sum(getkoas(bus_source='3',(premi-diskon))) as nd_comm3," +
                "sum(getkoas(bus_source='4',(premi-diskon))) as nd_comm4," +
                "sum(premi-diskon) as premi_total_adisc,premi_base " +
                "from ins_policy_types e " +
                "left join ( " +
                sqa.getSQL() + " group by substr(a.pol_no,2,1),a.pol_type_id "+
                ") z on z.pol_type_id = e.pol_type_id " +
                "group by e.pol_type_id,premi_base order by e.pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStPolicyTypeID()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public String getStTime() {
        return stTime;
    }
    
    public void setStTime(String stTime) {
        this.stTime = stTime;
    }
    
    public DTOList CUSTOMER() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect( " e.ent_id as pol_id,e.ent_name as cust_name,e.address as cust_address,a.vs_description as print_code " );
        
        sqa.addQuery(" from ent_master e " +
                "  left join s_valueset a on a.vs_code = e.category1 " );
        
        sqa.addClause(" vs_group = 'ASK_BUS_SOURCE' ");
        
        if (stBranch!=null) {
            sqa.addClause("e.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCustStatus!=null) {
            sqa.addClause("e.customer_status = ?");
            sqa.addPar(stCustStatus);
        }
        
        final String sql =sqa.getSQL()+" order by e.ent_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList EXCEL_REKAP_JENIS() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	substr(a.pol_no,2,1) as bus_source,a.pol_type_id," +
                "sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi," +
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon "
                );
        
        sqa.addQuery( " from ins_policy a  " +
                " left join ent_master b on b.ent_id = a.entity_id " +
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'");
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.ref12 = 'Y'");
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.create_who <> 'administrator'");
        }
        
        String sql = "select z.pol_type_id,z.description,nd_comm1,nd_comm2,nd_comm3,nd_comm4," +
                " coalesce(premi_total_adisc,0) as premi_total_adisc,sum(amount) as amount from ( " +
                " select e.pol_type_id,e.description," +
                " sum(getkoas(bus_source='1',(premi-diskon))) as nd_comm1," +
                " sum(getkoas(bus_source='2',(premi-diskon))) as nd_comm2," +
                " sum(getkoas(bus_source='3',(premi-diskon))) as nd_comm3," +
                " sum(getkoas(bus_source='4',(premi-diskon))) as nd_comm4," +
                " sum(premi-diskon) as premi_total_adisc " +
                " from ins_policy_types e " +
                " left join ( " +
                sqa.getSQL() + " group by substr(a.pol_no,2,1),a.pol_type_id "+
                " ) z on z.pol_type_id = e.pol_type_id " +
                " group by e.pol_type_id,e.description" +
                " ) z left join ins_statistic_product a on a.pol_type_id = z.pol_type_id ";
        
        if (getStBranch()!=null) {
            sql = sql + " where a.cc_code = ? ";
            sqa.addPar(stBranch);
        }
        
        sql = sql + " group by z.pol_type_id,z.description,nd_comm1,nd_comm2,nd_comm3,nd_comm4,premi_total_adisc" +
                " order by z.pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_REKAP_JENIS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            XSSFRow row1 = sheet.createRow(0);
            row1.createCell(0).setCellValue(DateUtil.getDateStr(getPolicyDateFrom())+" sd "+DateUtil.getDateStr(getPolicyDateTo()));
            
            XSSFRow row2 = sheet.createRow(1);
            if (stPolicyTypeGroupID!=null)
                row2.createCell(0).setCellValue(getStBranch().toUpperCase());
            
            XSSFRow row0 = sheet.createRow(2);
            row0.createCell(0).setCellValue("pol_type_id");
            row0.createCell(1).setCellValue("description");
            row0.createCell(2).setCellValue("umum");
            row0.createCell(3).setCellValue("pemda");
            row0.createCell(4).setCellValue("perusda");
            row0.createCell(5).setCellValue("bpd");
            row0.createCell(6).setCellValue("jumlah");
            row0.createCell(7).setCellValue("target");
            
            final Date perStart = getPolicyDateFrom();
            final Date perEnd = getPolicyDateTo();
            
            DateTime startDate = new DateTime(perStart);
            DateTime endDate = new DateTime(perEnd);
            Months m = Months.monthsBetween(startDate, endDate);
            int mon = m.getMonths()+1;
            
            BigDecimal a = new BigDecimal(12000);
            BigDecimal b = new BigDecimal(1000);
            String month = String.valueOf(mon);
            BigDecimal c = new BigDecimal(month);
            BigDecimal target = h.getFieldValueByFieldNameBD("amount");
            target = BDUtil.roundUp(BDUtil.div(target, a));
            target = BDUtil.roundUp(BDUtil.mul(target, b));
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+3);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            row.createCell(1).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("description")));
            if(h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("nd_comm1").doubleValue());
            if(h.getFieldValueByFieldNameBD("nd_comm2")!=null)
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("nd_comm2").doubleValue());
            if(h.getFieldValueByFieldNameBD("nd_comm3")!=null)
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("nd_comm3").doubleValue());
            if(h.getFieldValueByFieldNameBD("nd_comm4")!=null)
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("nd_comm4").doubleValue());
            if(h.getFieldValueByFieldNameBD("premi_total_adisc")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("premi_total_adisc").doubleValue());
            if(h.getFieldValueByFieldNameBD("amount")!=null)
                row.createCell(7).setCellValue(BDUtil.mul(target, c).doubleValue());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_REKAP_CAB() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	substr(a.pol_no,2,1) as bus_source,a.cc_code," +
                "sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi," +
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon "
                );
        
        sqa.addQuery( " from ins_policy a  " +
                " left join ent_master b on b.ent_id = a.entity_id " +
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'");
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if(stEntityID!=null){
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (Tools.isYes(stABAFlag)) {
            sqa.addClause("a.ref12 = 'Y'");
        }
        
        if (Tools.isYes(stIndex)) {
            sqa.addClause("a.create_who <> 'administrator'");
        }
        
        String sql = "select z.cc_code,z.description,nd_comm1,nd_comm2,nd_comm3,nd_comm4," +
                " coalesce(premi_total_adisc,0) as premi_total_adisc,sum(amount) as amount from ( " +
                " select e.cc_code,e.description," +
                " sum(getkoas(bus_source='1',(premi-diskon))) as nd_comm1," +
                " sum(getkoas(bus_source='2',(premi-diskon))) as nd_comm2," +
                " sum(getkoas(bus_source='3',(premi-diskon))) as nd_comm3," +
                " sum(getkoas(bus_source='4',(premi-diskon))) as nd_comm4," +
                " sum(premi-diskon) as premi_total_adisc " +
                " from gl_cost_center e " +
                " left join ( " +
                sqa.getSQL() + " group by substr(a.pol_no,2,1),a.cc_code "+
                " ) z on z.cc_code = e.cc_code " +
                " group by e.cc_code,e.description" +
                " ) z left join ins_statistic_product a on a.cc_code = z.cc_code ";
        
        if (getStPolicyTypeGroupID()!=null) {
            sql = sql + " where a.ins_policy_type_grp_id = ? ";
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (getStPolicyTypeID()!=null) {
            sql = sql + " and a.pol_type_id = ? ";
            sqa.addPar(stPolicyTypeID);
        }
        
        sql = sql + " group by z.cc_code,z.description,nd_comm1,nd_comm2,nd_comm3,nd_comm4,premi_total_adisc " +
                " order by z.cc_code";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_REKAP_CAB()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            XSSFRow row1 = sheet.createRow(0);
            row1.createCell(0).setCellValue(DateUtil.getDateStr(getPolicyDateFrom())+" sd "+DateUtil.getDateStr(getPolicyDateTo()));
            
            XSSFRow row2 = sheet.createRow(1);
            if (stPolicyTypeGroupID!=null)
                row2.createCell(0).setCellValue(getStPolicyTypeGroupDesc().toUpperCase()+ " -- " +getStPolicyTypeDesc().toUpperCase());
            
            //bikin header
            XSSFRow row0 = sheet.createRow(2);
            row0.createCell(0).setCellValue("cc_code");
            row0.createCell(1).setCellValue("description");
            row0.createCell(2).setCellValue("umum");
            row0.createCell(3).setCellValue("pemda");
            row0.createCell(4).setCellValue("perusda");
            row0.createCell(5).setCellValue("bpd");
            row0.createCell(6).setCellValue("jumlah");
            row0.createCell(7).setCellValue("target");
            
            final Date perStart = getPolicyDateFrom();
            final Date perEnd = getPolicyDateTo();
            
            DateTime startDate = new DateTime(perStart);
            DateTime endDate = new DateTime(perEnd);
            Months m = Months.monthsBetween(startDate, endDate);
            int mon = m.getMonths()+1;
            
            BigDecimal a = new BigDecimal(12000);
            BigDecimal b = new BigDecimal(1000);
            String month = String.valueOf(mon);
            BigDecimal c = new BigDecimal(month);
            BigDecimal target = h.getFieldValueByFieldNameBD("amount");
            target = BDUtil.roundUp(BDUtil.div(target, a));
            target = BDUtil.roundUp(BDUtil.mul(target, b));
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+3);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            if(h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("nd_comm1").doubleValue());
            if(h.getFieldValueByFieldNameBD("nd_comm2")!=null)
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("nd_comm2").doubleValue());
            if(h.getFieldValueByFieldNameBD("nd_comm3")!=null)
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("nd_comm3").doubleValue());
            if(h.getFieldValueByFieldNameBD("nd_comm4")!=null)
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("nd_comm4").doubleValue());
            if(h.getFieldValueByFieldNameBD("premi_total_adisc")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("premi_total_adisc").doubleValue());
            if(h.getFieldValueByFieldNameBD("amount")!=null)
                row.createCell(7).setCellValue(BDUtil.mul(target, c).doubleValue());
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_REKAP_YEAR() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	substr(a.policy_date::text,6,2) as month,a.cc_code," +
                "sum(getpremiend(d.entity_id,a.premi_total*a.ccy_rate,d.premi_amt*a.ccy_rate*-1)) as premi," +
                "sum(getpremiend(d.entity_id,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate)),((coalesce(d.disc_amount,0))*a.ccy_rate)*-1)) as diskon "
                );
        
        sqa.addQuery( " from ins_policy a  " +
                " left join ent_master b on b.ent_id = a.entity_id " +
                " inner join ins_pol_coins d on d.policy_id = a.pol_id "
                );
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL') and a.effective_flag='Y'");
        sqa.addClause("(d.entity_id <> 1 or d.coins_type <> 'COINS_COVER')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = "select e.cc_code,e.description," +
                "sum(getkoas(month='01',(premi-diskon))) as jan," +
                "sum(getkoas(month='02',(premi-diskon))) as feb," +
                "sum(getkoas(month='03',(premi-diskon))) as mar," +
                "sum(getkoas(month='04',(premi-diskon))) as apr," +
                "sum(getkoas(month='05',(premi-diskon))) as mei," +
                "sum(getkoas(month='06',(premi-diskon))) as jun," +
                "sum(getkoas(month='07',(premi-diskon))) as jul," +
                "sum(getkoas(month='08',(premi-diskon))) as aug," +
                "sum(getkoas(month='09',(premi-diskon))) as sep," +
                "sum(getkoas(month='10',(premi-diskon))) as okt," +
                "sum(getkoas(month='11',(premi-diskon))) as nov," +
                "sum(getkoas(month='12',(premi-diskon))) as des," +
                "coalesce(sum(premi-diskon),0) as premi_total_adisc " +
                "from gl_cost_center e " +
                "left join ( " +
                sqa.getSQL() + " group by substr(a.policy_date::text,6,2),a.cc_code "+
                ") z on z.cc_code = e.cc_code " +
                "group by e.cc_code,e.description order by e.cc_code";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_REKAP_YEAR()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("cc_code");
            row0.createCell(1).setCellValue("description");
            row0.createCell(2).setCellValue("jan");
            row0.createCell(3).setCellValue("feb");
            row0.createCell(4).setCellValue("mar");
            row0.createCell(5).setCellValue("apr");
            row0.createCell(6).setCellValue("mei");
            row0.createCell(7).setCellValue("jun");
            row0.createCell(8).setCellValue("jul");
            row0.createCell(9).setCellValue("aug");
            row0.createCell(10).setCellValue("sep");
            row0.createCell(11).setCellValue("okt");
            row0.createCell(12).setCellValue("nov");
            row0.createCell(13).setCellValue("des");
            row0.createCell(14).setCellValue("jumlah");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("jan").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("feb").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("mar").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("apr").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("mei").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("jun").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("jul").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("aug").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("sep").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("okt").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("nov").doubleValue());
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("des").doubleValue());
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("premi_total_adisc").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public String getStTax() {
        return stTax;
    }
    
    public void setStTax(String stTax) {
        this.stTax = stTax;
    }
    
    public String getStTaxDesc() {
        return stTaxDesc;
    }
    
    public void setStTaxDesc(String stTaxDesc) {
        this.stTaxDesc = stTaxDesc;
    }
    
    public DTOList EXCEL_FOXPRO() throws Exception {
        
        String jenpol = null;
        if (stPolicyTypeID.length()==1) {
            jenpol = "0"+stPolicyTypeID;
        } else {
            jenpol = stPolicyTypeID;
        }
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(" a.entity_id as ent_id,b.ent_name,b.gl_code,substr(a.nopol,5,2) as cc_code,c.description,substr(a.nopol,2,1) as bus_source,substr(a.tglpol::text,1,4) as tahun, sum(preto-diskon) as preto," +
                "sum(biapol) as biapol,sum(biamat) as biamat, sum(komisi) as komisi,sum(diskon) as diskon,sum(h_fee) as h_fee, sum(b_fee) as b_fee ");
        
        sqa.addQuery("from aba_produk a  " +
                "left join ent_master b on b.ent_id = a.entity_id " +
                "left join gl_cost_center c on c.cc_code = substr(a.nopol,5,2)"
                );
        
        sqa.addClause("a.flag='Y'");
        sqa.addClause("a.pol_id is null");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.tglpol) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.tglpol) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("substr(a.nopol,3,2) = ?");
            sqa.addPar(jenpol);
        }
        
        if (stBranch!=null) {
            sqa.addClause("c.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("b.bus_source = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stCompTypeID!=null) {
            sqa.addClause("b.ref1 = ?");
            sqa.addPar(stCompTypeID);
        }
        
        final String sql = "select cc_code,description,ent_id,ent_name,a.gl_code," +
                "sum(getkoas(tahun='2006',preto-diskon)) as th2006," +
                "sum(getkoas(tahun='2007',preto-diskon)) as th2007," +
                "sum(getkoas(tahun='2008',preto-diskon)) as th2008," +
                "sum(getkoas(tahun='2009',preto-diskon)) as th2009," +
                "sum(getkoas(tahun='2010',preto-diskon)) as th2010 from ( "+
                sqa.getSQL() + " group by a.entity_id,substr(a.nopol,5,2),substr(a.nopol,2,1),substr(a.tglpol::text,1,4),b.ent_name,b.gl_code,c.description "+
                " ) a " +
                "group by cc_code,description,ent_id,ent_name,a.gl_code order by ent_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public void EXPORT_FOXPRO()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("CODE");
            row0.createCell(1).setCellValue("DAERAH");
            row0.createCell(2).setCellValue("ID");
            row0.createCell(3).setCellValue("GL CODE");
            row0.createCell(4).setCellValue("NAMA BPD");
            row0.createCell(5).setCellValue("S/D "+ DateUtil.getMonth(getPolicyDateTo()).toUpperCase() +" 2006");
            row0.createCell(6).setCellValue("S/D "+ DateUtil.getMonth(getPolicyDateTo()).toUpperCase() +" 2007");
            row0.createCell(7).setCellValue("S/D "+ DateUtil.getMonth(getPolicyDateTo()).toUpperCase() +" 2008");
            row0.createCell(8).setCellValue("S/D "+ DateUtil.getMonth(getPolicyDateTo()).toUpperCase() +" 2009");
            row0.createCell(9).setCellValue("S/D "+ DateUtil.getMonth(getPolicyDateTo()).toUpperCase() +" 2010");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("ent_id").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("gl_code"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("th2006").doubleValue());
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("th2007").doubleValue());
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("th2008").doubleValue());
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("th2009").doubleValue());
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("th2010").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public DTOList EXCEL_CLAIM_REAS() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	substr(a.period_start::text,1,4) as uw,a.period_start,a.period_end,a.claim_date," +
                "a.pol_id,a.pol_no,a.dla_no,b.ref1,b.ref2,a.status," +
                "(select cause_desc from ins_clm_cause x where x.ins_clm_caus_id = a.claim_cause) as cause_desc," +
                "sum(checkreas(j.treaty_type='BPDAN',i.claim_amount)) as claim_bpdan," +
                "sum(checkreas(j.treaty_type='OR',i.claim_amount)) as claim_or," +
                "sum(checkreas(j.treaty_type='QS',i.claim_amount)) as claim_qs," +
                "sum(checkreas(j.treaty_type='SPL',i.claim_amount)) as claim_spl," +
                "sum(checkreas(j.treaty_type='FAC',i.claim_amount)) as claim_fac," +
                "sum(checkreas(j.treaty_type='PARK',i.claim_amount)) as claim_park," +
                "sum(checkreas(j.treaty_type='FACO',i.claim_amount)) as claim_faco," +
                "sum(checkreas(j.treaty_type='XOL1',i.claim_amount)) as claim_xol1," +
                "sum(checkreas(j.treaty_type='XOL2',i.claim_amount)) as claim_xol2," +
                "sum(checkreas(j.treaty_type='XOL3',i.claim_amount)) as claim_xol3," +
                "sum(checkreas(j.treaty_type='XOL4',i.claim_amount)) as claim_xol4," +
                "sum(checkreas(j.treaty_type='XOL5',i.claim_amount)) as claim_xol5"
                );
        
        sqa.addQuery(" from ins_policy a" +
                " inner join ins_pol_obj b on b.ins_pol_obj_id=a.claim_object_id" +
                " inner join ins_policy_types f on f.pol_type_id =a.pol_type_id" +
                " inner join ins_pol_treaty g on g.ins_pol_obj_id = b.ins_pol_obj_id" +
                " inner join ins_pol_treaty_detail h on h.ins_pol_treaty_id = g.ins_pol_treaty_id" +
                " inner join ins_pol_ri i on i.ins_pol_tre_det_id = h.ins_pol_tre_det_id" +
                " inner join ins_treaty_detail j on j.ins_treaty_detail_id = h.ins_treaty_detail_id" +
                " inner join ent_master k on k.ent_id = a.entity_id"
                );
        
        sqa.addClause(" a.status IN ('CLAIM','CLAIM ENDORSE')");
        sqa.addClause(" a.claim_status IN ('DLA')");
        sqa.addClause(" a.effective_flag='Y'");
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if(appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = sqa.getSQL()+" group by a.claim_date,a.period_start,a.period_end,a.pol_id,a.pol_no,a.dla_no,substr(a.period_start::text,1,4),a.status,b.ref1,b.ref2,a.claim_cause "+
                " order by a.pol_no asc";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_CLAIM_REAS()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("uw");
            row0.createCell(1).setCellValue("period_start");
            row0.createCell(2).setCellValue("period_end");
            row0.createCell(3).setCellValue("claim_date");
            row0.createCell(4).setCellValue("pol_id");
            row0.createCell(5).setCellValue("pol_no");
            row0.createCell(6).setCellValue("dla_no");
            row0.createCell(7).setCellValue("nama");
            row0.createCell(8).setCellValue("usia");
            row0.createCell(9).setCellValue("status");
            row0.createCell(10).setCellValue("Penyebab Klaim");
            row0.createCell(11).setCellValue("claim_bpdan");
            row0.createCell(12).setCellValue("claim_or");
            row0.createCell(13).setCellValue("claim_qs");
            row0.createCell(14).setCellValue("claim_spl");
            row0.createCell(15).setCellValue("claim_fac");
            row0.createCell(16).setCellValue("claim_park");
            row0.createCell(17).setCellValue("claim_faco");
            row0.createCell(18).setCellValue("claim_xol1");
            row0.createCell(19).setCellValue("claim_xol2");
            row0.createCell(20).setCellValue("claim_xol3");
            row0.createCell(21).setCellValue("claim_xol4");
            row0.createCell(22).setCellValue("claim_xol5");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("uw"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameDT("claim_date"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("dla_no"));
            if (h.getFieldValueByFieldNameST("ref1")!=null)
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            if (h.getFieldValueByFieldNameST("ref2")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("ref2"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(10).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("cause_desc")));
            if (h.getFieldValueByFieldNameBD("claim_bpdan")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("claim_bpdan").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_or")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("claim_or").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_qs")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("claim_qs").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_spl")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("claim_spl").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_fac")!=null)
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("claim_fac").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_park")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("claim_park").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_faco")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("claim_faco").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_xol1")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("claim_xol1").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_xol2")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("claim_xol2").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_xol3")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("claim_xol3").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_xol4")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("claim_xol4").doubleValue());
            if (h.getFieldValueByFieldNameBD("claim_xol5")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("claim_xol5").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public Date getRestFrom() {
        return restFrom;
    }
    
    public void setRestFrom(Date restFrom) {
        this.restFrom = restFrom;
    }
    
    public Date getRestTo() {
        return restTo;
    }
    
    public void setRestTo(Date restTo) {
        this.restTo = restTo;
    }
    
    public String getStCompTypeID() {
        return stCompTypeID;
    }
    
    public void setStCompTypeID(String stCompTypeID) {
        this.stCompTypeID = stCompTypeID;
    }
    
    public String getStCompTypeName() {
        return stCompTypeName;
    }
    
    public void setStCompTypeName(String stCompTypeName) {
        this.stCompTypeName = stCompTypeName;
    }
    
    public Date getRemarkDateFrom() {
        return remarkDateFrom;
    }
    
    public void setRemarkDateFrom(Date remarkDateFrom) {
        this.remarkDateFrom = remarkDateFrom;
    }
    
    public Date getRemarkDateTo() {
        return remarkDateTo;
    }
    
    public void setRemarkDateTo(Date remarkDateTo) {
        this.remarkDateTo = remarkDateTo;
    }
    
    public Date getReceiveDateFrom() {
        return receiveDateFrom;
    }
    
    public void setReceiveDateFrom(Date receiveDateFrom) {
        this.receiveDateFrom = receiveDateFrom;
    }
    
    public Date getReceiveDateTo() {
        return receiveDateTo;
    }
    
    public void setReceiveDateTo(Date receiveDateTo) {
        this.receiveDateTo = receiveDateTo;
    }
    
    public DTOList PKS() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect( " * " );
        
        sqa.addQuery(" from perjanjian_kerjasama a " +
                "  left join ent_master b on b.ent_id = a.entity_id " );
        
        if(receiveDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.receive_date) >= ?");
            sqa.addPar(receiveDateFrom);
        }
        
        if(receiveDateTo!=null) {
            sqa.addClause("date_trunc('day',a.receive_date) <= ?");
            sqa.addPar(receiveDateTo);
        }
        
        if(remarkDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(remarkDateFrom);
        }
        
        if(remarkDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(remarkDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql =sqa.getSQL()+" order by a.pks_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                PerjanjianKerjasamaView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public String getStCreditID() {
        return stCreditID;
    }
    
    public void setStCreditID(String stCreditID) {
        this.stCreditID = stCreditID;
    }
    
    public String getStCreditName() {
        return stCreditName;
    }
    
    public void setStCreditName(String stCreditName) {
        this.stCreditName = stCreditName;
    }
    
    public String getStItemClaimID() {
        return stItemClaimID;
    }
    
    public void setStItemClaimID(String stItemClaimID) {
        this.stItemClaimID = stItemClaimID;
    }
    
    public String getStItemClaimName() {
        return stItemClaimName;
    }
    
    public void setStItemClaimName(String stItemClaimName) {
        this.stItemClaimName = stItemClaimName;
    }
    
    public String getStWilayahID() {
        return stWilayahID;
    }
    
    public void setStWilayahID(String stWilayahID) {
        this.stWilayahID = stWilayahID;
    }
    
    public String getStWilayahName() {
        return stWilayahName;
    }
    
    public void setStWilayahName(String stWilayahName) {
        this.stWilayahName = stWilayahName;
    }
    
    public DTOList COMM() throws Exception {
        final boolean FLT_OS_COMM = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OS_COMM"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                " b.policy_date,b.pol_id,b.pol_no,b.cust_name,b.premi_total,b.premi_netto," +
                " coalesce(b.nd_pcost,0) as nd_pcost,coalesce(b.nd_sfee,0) as nd_sfee," +
                " (coalesce(b.nd_disc1,0)+coalesce(b.nd_disc2,0)) as nd_disc1," +
                " (coalesce(b.nd_brok1,0)+coalesce(b.nd_brok2,0)) as nd_brok1,coalesce(b.nd_hfee,0) as nd_sfee," +
                " (coalesce(b.nd_taxbrok1,0)+coalesce(b.nd_taxbrok2,0)) as nd_taxbrok1,coalesce(b.nd_taxhfee,0) as nd_taxhfee," +
                " (coalesce(b.nd_comm1,0)+coalesce(b.nd_comm2,0)) as nd_comm1,(coalesce(b.nd_comm3,0)+coalesce(b.nd_comm4,0)) as nd_comm2," +
                " (coalesce(b.nd_taxcomm1,0)+coalesce(b.nd_taxcomm2,0)) as nd_taxcomm1,(coalesce(b.nd_taxcomm3,0)+coalesce(b.nd_taxcomm4,0)) as nd_taxcomm2," +
                " sum(coalesce(a.amount_settled,0)) as ap_comis_p "
                );
        
        sqa.addQuery(
                " from ar_invoice a " +
                " left join ins_policy b on b.pol_id = a.attr_pol_id " +
                " left join ar_receipt c on c.ar_ap_invoice_id = a.ar_invoice_id " +
                " left join ent_master d on d.ent_id = b.entity_id "
                );
        
        sqa.addClause("substr(a.refid2,1,4) = 'POLI'");
        sqa.addClause("a.ar_trx_type_id = 11");
        
        if (FLT_OS_COMM) {
            sqa.addClause("case when a.amount < 0 then (a.amount*-1) - coalesce(a.amount_settled,0) > 0 else a.amount - coalesce(a.amount_settled,0) > 0 end ");
            sqa.addClause("a.used_flag is null ");
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',b.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (paymentDateFrom!=null) {
            sqa.addClause("date_trunc('day',c.receipt_date) >= ?");
            sqa.addPar(paymentDateFrom);
        }
        
        if (paymentDateTo!=null) {
            sqa.addClause("date_trunc('day',c.receipt_date) <= ?");
            sqa.addPar(paymentDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("b.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("b.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("b.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("b.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stCreateID!=null) {
            sqa.addClause("c.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("d.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = sqa.getSQL() +" group by b.policy_date,b.pol_id,b.pol_no,b.cust_name,b.premi_total," +
                " b.premi_netto,b.nd_pcost,b.nd_sfee,b.nd_disc1,b.nd_disc2,a.attr_pol_no," +
                " b.nd_taxcomm1,b.nd_taxcomm2,b.nd_taxcomm3,b.nd_taxcomm4,b.nd_comm1,b.nd_comm2,b.nd_comm3," +
                " b.nd_comm4,b.nd_brok1,b.nd_brok2,b.nd_hfee,b.nd_taxbrok1,b.nd_taxbrok2,b.nd_taxhfee order by a.attr_pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList PAJAK() throws Exception {
        final boolean FLT_OS_TAX = "Y".equalsIgnoreCase((String) refPropMap.get("FLT_OS_TAX"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        String tax = null;
        
        if (stTax!=null) {
            if (stTax.equalsIgnoreCase("1")){
                tax = "a.tax_code in (1,4,7)";
            } else {
                tax = "a.tax_code in (2,5,8)";
            }
        }
        
        sqa.addSelect(
                " a.ar_invoice_id,a.no_surat_hutang,b.ent_name as prod_name,coalesce(a.amount_settled,0) as ap_tax_p, " +
                " e.receipt_no as description,e.receipt_date as period_start,e.create_who, "+
                " d.policy_date,d.pol_id,d.pol_no,d.cust_name,d.premi_total,coalesce(d.nd_pcost,0) as nd_pcost,coalesce(d.nd_sfee,0) as nd_sfee," +
                " (coalesce(d.nd_disc1,0)+coalesce(d.nd_disc2,0)) as nd_disc1, " +
                " (select sum(coalesce(a.amount,0)) from ins_pol_items a " +
                " where a.pol_id = d.pol_id and a.ins_item_id in (11,12,13,18,19,20,25,26,27,32,33,34) and " +
                tax + " ) as nd_comm1," +
                " (select sum(coalesce(a.tax_amount,0)) from ins_pol_items a " +
                " where a.pol_id = d.pol_id and a.ins_item_id in (11,12,13,18,19,20,25,26,27,32,33,34) and " +
                tax + " ) as nd_taxcomm1 "
                );
        
        sqa.addQuery(
                " from ar_invoice a " +
                " left join ent_master b on b.ent_id = a.ent_id " +
                " inner join ar_invoice_details c on a.ar_invoice_id = c.ar_invoice_id " +
                " left join ins_policy d on d.pol_id = a.attr_pol_id " +
                " left join ar_receipt e on e.ar_ap_invoice_id = a.ar_invoice_id "
                );
        
        sqa.addClause("a.no_surat_hutang is not null");
        sqa.addClause("a.invoice_type = 'AP'");
        sqa.addClause("a.ar_trx_type_id = 11");
        
        if (FLT_OS_TAX) {
            sqa.addClause("case when a.amount > 0 then a.amount else (a.amount*-1) end - coalesce(a.amount_settled,0) > 0");
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',d.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (paymentDateFrom!=null) {
            sqa.addClause("date_trunc('day',e.receipt_date) >= ?");
            sqa.addPar(paymentDateFrom);
        }
        
        if (paymentDateTo!=null) {
            sqa.addClause("date_trunc('day',e.receipt_date) <= ?");
            sqa.addPar(paymentDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("d.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stEntityID!=null) {
            sqa.addClause("d.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("d.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("d.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if(stCreateID!=null) {
            sqa.addClause("e.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("b.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if(stTax!=null) {
            if(stTax.equalsIgnoreCase("1")){
                sqa.addClause("c.ar_trx_line_id in (14,17,20,30,33,36,46,49,52)");
            } else {
                sqa.addClause("c.ar_trx_line_id in (15,18,21,31,34,37,47,50,53)");
            }
        }
        
        if (stReceiptNo!=null) {
            sqa.addClause("e.receipt_no like ?");
            sqa.addPar('%'+stReceiptNo+'%');
        }
        
        final String sql = sqa.getSQL() +" order by d.cc_code,d.pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public String getStKreasiID() {
        return stKreasiID;
    }
    
    public void setStKreasiID(String stKreasiID) {
        this.stKreasiID = stKreasiID;
    }
    
    public String getStKreasiName() {
        return stKreasiName;
    }
    
    public void setStKreasiName(String stKreasiName) {
        this.stKreasiName = stKreasiName;
    }
    
    public DTOList EXCEL_KLAIM_MV() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.cc_code as cabang,a.dla_no,f.ref4 as rangka,f.ref5 as mesin,f.ref1 as polisi,a.pol_no,a.status," +
                " a.claim_date as tgl_klaim,a.dla_date as tgl_LKP,a.claim_approved_date as tgl_setujui,a.event_location as tempat_kejadian," +
                " a.claim_cause_desc as penyebab_klaim,a.claim_chronology as kronologi,a.ccy as mata_uang,a.claim_loss_status as status_klaim," +
                " a.claim_amount_est as klaim_ajukan,a.claim_amount_approved as klaim_disetujui,a.claim_amount as biaya_klaim," +
                " (select sum(checkreas(x.ins_item_id = '47',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as deduct," +
                " (select sum(checkreas(x.ins_item_id = '48',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as subrogation," +
                " (select sum(checkreas(x.ins_item_id = '49',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as Wreck," +
                " (select sum(checkreas(x.ins_item_id = '50',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as Adjuster_Fee," +
                " (select sum(checkreas(x.ins_item_id = '51',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as tjh," +
                " (select sum(checkreas(x.ins_item_id = '52',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as Biaya_Derek," +
                " (select sum(checkreas(x.ins_item_id = '53',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as Salvage," +
                " (select sum(checkreas(x.ins_item_id = '54',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as Ex_Gratia," +
                " (select sum(checkreas(x.ins_item_id = '55',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as Bunga," +
                " (select sum(checkreas(x.ins_item_id = '56',x.amount))" +
                " from ins_pol_items x" +
                " where x.pol_id = a.pol_id) as Santunan_Kecelakaan," +
                " (select cekstatus(x.ins_cover_id = '2',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '2' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan1, " +
                " (select cekstatus(x.ins_cover_id = '107',q.description) " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '107' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan2, " +
                " (select cekstatus(x.ins_cover_id = '108',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '108' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan3, " +
                " (select cekstatus(x.ins_cover_id = '101',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '101' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan4, " +
                " (select cekstatus(x.ins_cover_id = '62',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '62' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan5, " +
                " (select cekstatus(x.ins_cover_id = '63',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '63' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan6, " +
                " (select cekstatus(x.ins_cover_id = '64',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '64' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan7, " +
                " (select cekstatus(x.ins_cover_id = '91',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '91' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan8, " +
                " (select cekstatus(x.ins_cover_id = '92',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '92' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan9, " +
                " (select cekstatus(x.ins_cover_id = '93',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '93' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan10, " +
                " (select cekstatus(x.ins_cover_id = '94',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '94' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan11, " +
                " (select cekstatus(x.ins_cover_id = '22',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '22' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan12, " +
                " (select cekstatus(x.ins_cover_id = '29',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '29' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan13, " +
                " (select cekstatus(x.ins_cover_id = '65',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '65' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan14, " +
                " (select cekstatus(x.ins_cover_id = '114',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '114' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan15, " +
                " (select cekstatus(x.ins_cover_id = '120',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '120' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan16, " +
                " (select cekstatus(x.ins_cover_id = '121',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '121' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan17, " +
                " (select cekstatus(x.ins_cover_id = '122',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '122' " +
                "where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan18, " +
                " (select cekstatus(x.ins_cover_id = '123',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '123' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan19, " +
                " (select cekstatus(x.ins_cover_id = '128',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '128' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan20, " +
                " (select cekstatus(x.ins_cover_id = '129',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '129' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan21, " +
                " (select cekstatus(x.ins_cover_id = '130',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '130' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan22, " +
                " (select cekstatus(x.ins_cover_id = '131',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '131' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan23, " +
                " (select cekstatus(x.ins_cover_id = '140',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '140' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan24, " +
                " (select cekstatus(x.ins_cover_id = '141',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '141' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan25, " +
                " (select cekstatus(x.ins_cover_id = '142',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '142' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan26, " +
                " (select cekstatus(x.ins_cover_id = '148',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '148' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan27, " +
                " (select cekstatus(x.ins_cover_id = '210',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '210' " +
                " where z.ins_pol_obj_id = f.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan28 ");
        
        sqa.addQuery(" from ins_policy a" +
                " inner join ins_pol_obj f on f.ins_pol_obj_id = a.claim_object_id" +
                " left join gl_cost_center c on c.cc_code = a.cc_code" +
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id "
                );
        
        sqa.addClause("a.claim_status = 'DLA'");
        sqa.addClause("a.effective_flag = 'Y'");
        sqa.addClause("a.status in('CLAIM','CLAIM ENDORSE')");
        sqa.addClause("a.pol_type_id = 3 ");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+" order by a.cc_code,a.pol_no,a.dla_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_KLAIM_MV()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("cabang");
            row0.createCell(1).setCellValue("dla_no");
            row0.createCell(2).setCellValue("rangka");
            row0.createCell(3).setCellValue("mesin");
            row0.createCell(4).setCellValue("polisi");
            row0.createCell(5).setCellValue("pol_no");
            row0.createCell(6).setCellValue("status");
            row0.createCell(7).setCellValue("tgl_klaim");
            row0.createCell(8).setCellValue("tgl_lkp");
            row0.createCell(9).setCellValue("tgl_setujui");
            row0.createCell(10).setCellValue("tempat_kejadian");
            row0.createCell(11).setCellValue("penyebab_klaim");
            row0.createCell(12).setCellValue("kronologi");
            row0.createCell(13).setCellValue("mata_uang");
            row0.createCell(14).setCellValue("status_klaim");
            row0.createCell(15).setCellValue("klaim_ajukan");
            row0.createCell(16).setCellValue("klaim_disetujui");
            row0.createCell(17).setCellValue("biaya_klaim");
            row0.createCell(18).setCellValue("deduct");
            row0.createCell(19).setCellValue("subrogation");
            row0.createCell(20).setCellValue("wreck");
            row0.createCell(21).setCellValue("adjuster_fee");
            row0.createCell(22).setCellValue("tjh");
            row0.createCell(23).setCellValue("biaya_derek");
            row0.createCell(24).setCellValue("salvage");
            row0.createCell(25).setCellValue("ex_gratia");
            row0.createCell(26).setCellValue("bunga");
            row0.createCell(27).setCellValue("santunan_kecelakaan");
            row0.createCell(28).setCellValue("jaminan/coverage");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cabang"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("dla_no"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("rangka"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("mesin"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("polisi"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameDT("tgl_klaim"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameDT("tgl_lkp"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameDT("tgl_setujui"));
            if (h.getFieldValueByFieldNameST("tempat_kejadian")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("tempat_kejadian"));
            if (h.getFieldValueByFieldNameST("penyebab_klaim")!=null)
                row.createCell(11).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("penyebab_klaim")));
            if (h.getFieldValueByFieldNameST("kronologi")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("kronologi"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("mata_uang"));
            if (h.getFieldValueByFieldNameST("status_klaim")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("status_klaim"));
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("klaim_ajukan").doubleValue());
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("klaim_disetujui").doubleValue());
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("biaya_klaim").doubleValue());
            if (h.getFieldValueByFieldNameBD("deduct")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameBD("deduct").doubleValue());
            if (h.getFieldValueByFieldNameBD("subrogation")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("subrogation").doubleValue());
            if (h.getFieldValueByFieldNameBD("wreck")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("wreck").doubleValue());
            if (h.getFieldValueByFieldNameBD("adjuster_fee")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("adjuster_fee").doubleValue());
            if (h.getFieldValueByFieldNameBD("tjh")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("tjh").doubleValue());
            if (h.getFieldValueByFieldNameBD("biaya_derek")!=null)
                row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("biaya_derek").doubleValue());
            if (h.getFieldValueByFieldNameBD("salvage")!=null)
                row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("salvage").doubleValue());
            if (h.getFieldValueByFieldNameBD("ex_gratia")!=null)
                row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("ex_gratia").doubleValue());
            if (h.getFieldValueByFieldNameBD("bunga")!=null)
                row.createCell(26).setCellValue(h.getFieldValueByFieldNameBD("bunga").doubleValue());
            if (h.getFieldValueByFieldNameBD("santunan_kecelakaan")!=null)
                row.createCell(27).setCellValue(h.getFieldValueByFieldNameBD("santunan_kecelakaan").doubleValue());
            if (h.getFieldValueByFieldNameST("jaminan1")!=null||
                    h.getFieldValueByFieldNameST("jaminan2")!=null||
                    h.getFieldValueByFieldNameST("jaminan3")!=null||
                    h.getFieldValueByFieldNameST("jaminan4")!=null||
                    h.getFieldValueByFieldNameST("jaminan5")!=null||
                    h.getFieldValueByFieldNameST("jaminan6")!=null||
                    h.getFieldValueByFieldNameST("jaminan7")!=null||
                    h.getFieldValueByFieldNameST("jaminan8")!=null||
                    h.getFieldValueByFieldNameST("jaminan9")!=null||
                    h.getFieldValueByFieldNameST("jaminan10")!=null||
                    h.getFieldValueByFieldNameST("jaminan11")!=null||
                    h.getFieldValueByFieldNameST("jaminan12")!=null||
                    h.getFieldValueByFieldNameST("jaminan13")!=null||
                    h.getFieldValueByFieldNameST("jaminan14")!=null||
                    h.getFieldValueByFieldNameST("jaminan15")!=null||
                    h.getFieldValueByFieldNameST("jaminan16")!=null||
                    h.getFieldValueByFieldNameST("jaminan17")!=null||
                    h.getFieldValueByFieldNameST("jaminan18")!=null||
                    h.getFieldValueByFieldNameST("jaminan19")!=null||
                    h.getFieldValueByFieldNameST("jaminan20")!=null||
                    h.getFieldValueByFieldNameST("jaminan21")!=null||
                    h.getFieldValueByFieldNameST("jaminan22")!=null||
                    h.getFieldValueByFieldNameST("jaminan23")!=null||
                    h.getFieldValueByFieldNameST("jaminan24")!=null||
                    h.getFieldValueByFieldNameST("jaminan25")!=null||
                    h.getFieldValueByFieldNameST("jaminan26")!=null||
                    h.getFieldValueByFieldNameST("jaminan27")!=null||
                    h.getFieldValueByFieldNameST("jaminan28")!=null)
                row.createCell(28).setCellValue(
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan1"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan2"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan3"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan4"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan5"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan6"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan7"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan8"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan9"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan10"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan11"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan12"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan13"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan14"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan15"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan16"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan17"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan18"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan19"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan20"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan21"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan22"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan23"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan24"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan25"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan26"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan27"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan28")));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public String getStReinsID() {
        return stReinsID;
    }
    
    public void setStReinsID(String stReinsID) {
        this.stReinsID = stReinsID;
    }
    
    public String getStReinsName() {
        return stReinsName;
    }
    
    public void setStReinsName(String stReinsName) {
        this.stReinsName = stReinsName;
    }
    
    public DTOList EXCEL_CLAUSULES() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.ins_clause_id,a.description,a.pol_type_id,a.shortdesc,a.cc_code ");
        
        sqa.addQuery(" from ins_clausules a ");
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = sqa.getSQL()+" order by a.cc_code,a.ins_clause_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_CLAUSULES()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("id");
            row0.createCell(1).setCellValue("description");
            row0.createCell(2).setCellValue("pol_type_id");
            row0.createCell(3).setCellValue("shortdesc");
            row0.createCell(4).setCellValue("cc_code");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("ins_clause_id").doubleValue());
            if (h.getFieldValueByFieldNameST("description")!=null)
                row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("description"));
            if (h.getFieldValueByFieldNameBD("pol_type_id")!=null)
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("pol_type_id").doubleValue());
            if (h.getFieldValueByFieldNameST("shortdesc")!=null)
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("shortdesc"));
            if (h.getFieldValueByFieldNameST("cc_code")!=null)
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_LOSS_RATIO() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.pol_id,a.pol_no,a.cc_code,a.policy_date,c.description," +
                "getname(a.ins_policy_type_grp_id in (7,8),a.ref5,a.cust_name) as cust_name," +
                "getpremi2(b.entity_id=1,getpremi(a.status='ENDORSE',(a.insured_amount_e*a.ccy_rate),(a.insured_amount*a.ccy_rate))) as insured_amount," +
                "getpremi2(b.entity_id=1,(a.premi_total*a.ccy_rate)) as premi100," +
                "getpremi2(b.entity_id<>1,(b.premi_amt*a.ccy_rate)) as premi_ko," +
                "getpremi2(b.entity_id=1,(a.nd_pcost*a.ccy_rate)) as nd_pcost," +
                "getpremi2(b.entity_id=1,(a.nd_sfee*a.ccy_rate)) as nd_sfee," +
                "getpremi2(b.entity_id=1,((coalesce(a.nd_disc1,0)*a.ccy_rate) + (coalesce(a.nd_disc2,0)*a.ccy_rate))) as disc100," +
                "getpremi2(b.entity_id<>1,(b.disc_amount*a.ccy_rate)) as disc_ko," +
                "getpremi2(b.entity_id=1,((coalesce(a.nd_comm1,0)*a.ccy_rate) + (coalesce(a.nd_comm2,0)*a.ccy_rate) + (coalesce(a.nd_comm3,0)*a.ccy_rate) + (coalesce(a.nd_comm4,0)*a.ccy_rate))) as comm100," +
                "getpremi2(b.entity_id<>1,(b.comm_amount*a.ccy_rate)) as comm_ko," +
                "getpremi2(b.entity_id=1,((coalesce(a.nd_brok1,0)*a.ccy_rate) + (coalesce(a.nd_brok2,0)*a.ccy_rate))) as brok100," +
                "getpremi2(b.entity_id<>1,(b.broker_amount*a.ccy_rate)) as bfee_ko," +
                "getpremi2(b.entity_id=1,(coalesce(a.nd_hfee,0)*a.ccy_rate)) as hfee100," +
                "getpremi2(b.entity_id<>1,(b.hfee_amount*a.ccy_rate)) as hfee_ko ");
        
        sqa.addQuery(" from ins_policy a " +
                " left join ent_master e on e.ent_id = a.entity_id " +
                " inner join ins_pol_coins b on b.policy_id = a.pol_id " +
                " left join gl_cost_center c on c.cc_code = a.cc_code ");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        sqa.addClause("a.effective_flag='Y'");
        sqa.addClause("(b.entity_id <> 1 or b.coins_type <> 'COINS_COVER')");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        final String sql = " select cc_code,description,policy_date,pol_id,pol_no,cust_name," +
                " sum(insured_amount) as insured_amount," +
                " sum(premi100) as premi100,sum(premi_ko) as premi_ko," +
                " sum(nd_pcost) as nd_pcost,sum(nd_sfee) as nd_sfee," +
                " sum(disc100) as disc100,sum(disc_ko) as disc_ko," +
                " sum(comm100) as comm100,sum(comm_ko) as comm_ko," +
                " sum(brok100) as brok100,sum(bfee_ko) as bfee_ko," +
                " sum(hfee100) as hfee100,sum(hfee_ko) as hfee_ko " +
                " from ( "+sqa.getSQL()+" order by a.pol_no,b.entity_id ) x " +
                " group by cc_code,description,pol_id,pol_no,policy_date,cust_name " +
                " order by cc_code,policy_date,pol_no ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_LOSS_RATIO()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header3
            XSSFRow row3 = sheet.createRow(0);
            row3.createCell(0).setCellValue(getStCompanyName());
            
            //bikin header
            XSSFRow row0 = sheet.createRow(2);
            row0.createCell(0).setCellValue("cc_code");
            row0.createCell(1).setCellValue("policy_date");
            row0.createCell(2).setCellValue("pol_id");
            row0.createCell(3).setCellValue("pol_no");
            row0.createCell(4).setCellValue("cust_name");
            row0.createCell(5).setCellValue("insured_amount");
            row0.createCell(6).setCellValue("premi100");
            row0.createCell(7).setCellValue("premi_ko");
            row0.createCell(8).setCellValue("nd_pcost");
            row0.createCell(9).setCellValue("nd_sfee");
            row0.createCell(10).setCellValue("disc100");
            row0.createCell(11).setCellValue("disc_ko");
            row0.createCell(12).setCellValue("comm100");
            row0.createCell(13).setCellValue("comm_ko");
            row0.createCell(14).setCellValue("brok100");
            row0.createCell(15).setCellValue("bfee_ko");
            row0.createCell(16).setCellValue("hfee100");
            row0.createCell(17).setCellValue("hfee_ko");
            
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+3);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cc_code"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(2).setCellValue(String.valueOf(h.getFieldValueByFieldNameBD("pol_id")));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi100")!=null)
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("premi100").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_ko")!=null)
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("premi_ko").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_pcost")!=null)
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_pcost").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_sfee")!=null)
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("nd_sfee").doubleValue());
            if (h.getFieldValueByFieldNameBD("disc100")!=null)
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("disc100").doubleValue());
            if (h.getFieldValueByFieldNameBD("disc_ko")!=null)
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("disc_ko").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm100")!=null)
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("comm100").doubleValue());
            if (h.getFieldValueByFieldNameBD("comm_ko")!=null)
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("comm_ko").doubleValue());
            if (h.getFieldValueByFieldNameBD("brok100")!=null)
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("brok100").doubleValue());
            if (h.getFieldValueByFieldNameBD("bfee_ko")!=null)
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("bfee_ko").doubleValue());
            if (h.getFieldValueByFieldNameBD("hfee100")!=null)
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("hfee100").doubleValue());
            if (h.getFieldValueByFieldNameBD("hfee_ko")!=null)
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("hfee_ko").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }
    
    public DTOList APPROVAL_HISTORY() throws Exception {
        final String FLT_CLAIM_STATUS = (String) refPropMap.get("FLT_CLAIM_STATUS");
        final boolean EFFECTIVE = "Y".equalsIgnoreCase((String) refPropMap.get("EFFECTIVE"));
        
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect(
                "pol_no,a.change_date,a.change_who,approved_date,"+
                " approved_who,b.user_name as ref3,client_ip,a.password,b.password as ref4"
                );
        
        sqa.addQuery("   from       ins_policy a "+
                " inner join s_users b on a.approved_who = b.user_id");
        
        sqa.addClause("a.status in ('POLICY','ENDORSE','RENEWAL')");
        
        boolean isClaim = "CLAIM".equalsIgnoreCase(status);
        
        if (FLT_CLAIM_STATUS!=null) {
            sqa.addClause("a.claim_status = ?");
            sqa.addPar(FLT_CLAIM_STATUS);
        }
        
        boolean displayEffective = true;
        
        if (isClaim && stFltClaimStatus!=null) displayEffective = false;
        
        if (displayEffective)
            sqa.addClause("a.effective_flag='Y'");
        
        if (isClaim) {
            sqa.addClause("a.status in(?,?)");
            sqa.addPar(FinCodec.PolicyStatus.CLAIM);
            sqa.addPar(FinCodec.PolicyStatus.ENDORSECLAIM);
            
        }
        
        if(appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if(appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if(periodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_start) >= ?");
            sqa.addPar(periodFrom);
        }
        
        if(periodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_start) <= ?");
            sqa.addPar(periodTo);
        }
        
        if(expirePeriodFrom!=null) {
            sqa.addClause("date_trunc('day',a.period_end) >= ?");
            sqa.addPar(expirePeriodFrom);
        }
        
        if(expirePeriodTo!=null) {
            sqa.addClause("date_trunc('day',a.period_end) <= ?");
            sqa.addPar(expirePeriodTo);
        }
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stFltCoverType!=null) {
            sqa.addClause("a.cover_type_code = ?");
            sqa.addPar(stFltCoverType);
        }
        
        if (stCustCategory1!=null){
            sqa.addClause("substr(a.pol_no,2,1) = ?");
            sqa.addPar(stCustCategory1);
        }
        
        if(stEntityID!=null) {
            sqa.addClause("a.entity_id = ?");
            sqa.addPar(stEntityID);
        }
        
        if (stMarketerID!=null) {
            sqa.addClause("a.prod_id = ?");
            sqa.addPar(stMarketerID);
        }
        
        if (stCompanyID!=null) {
            sqa.addClause("e.ref2 = ?");
            sqa.addPar(stCompanyID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        if(stCreateID!=null) {
            sqa.addClause("a.create_who = ?");
            sqa.addPar(stCreateID);
        }
        
        final String sql = sqa.getSQL()+"   order by " +
                "      substr(pol_no,13,6)::bigint";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        //HashDTO.class
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
        
    }
    
    public DTOList EXCEL_STATISTIK_MV() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.pol_id,b.ins_pol_obj_id,a.pol_no,e.ent_name,a.cust_name,b.ref9 as nama,b.ref4 as rangka,b.ref5 as mesin,b.ref1 as polisi,b.ref2d as merk,b.ref8 as type,b.ref7d as penggunaan," +
                " a.ccy_rate as kurs,a.cc_code as cabang,b.ref3 as tahun,a.insured_amount,b.insured_amount as insured_amount_obj,a.period_start,a.period_end,a.premi_total,b.premi_total as premi_total_obj,f.ins_risk_cat_code,f.description," +
                " (a.nd_disc1+a.nd_disc2) as diskon,a.status,a.ccy as mata_uang,a.nd_comm1,a.nd_comm2,a.nd_comm3,a.nd_comm4," +
                " a.nd_feebase1,a.nd_feebase2,a.nd_brok1,a.nd_brok2,a.nd_hfee, "+
                " (select sum(amount)  from ins_pol_deduct z "+
                " where z.ins_pol_obj_id = b.ins_pol_obj_id and z.ins_clm_caus_id in (3840,3733)) as deduct, "+
                " (select cekstatus(x.ins_cover_id = '2',q.description) " +
                " from ins_pol_obj z " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '2' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan1, " +
                " (select cekstatus(x.ins_cover_id = '107',q.description) " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '107' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan2, " +
                " (select cekstatus(x.ins_cover_id = '108',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '108' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan3, " +
                " (select cekstatus(x.ins_cover_id = '101',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '101' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan4, " +
                " (select cekstatus(x.ins_cover_id = '62',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '62' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan5, " +
                " (select cekstatus(x.ins_cover_id = '63',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '63' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan6, " +
                " (select cekstatus(x.ins_cover_id = '64',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '64' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan7, " +
                " (select cekstatus(x.ins_cover_id = '91',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '91' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan8, " +
                " (select cekstatus(x.ins_cover_id = '92',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '92' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan9, " +
                " (select cekstatus(x.ins_cover_id = '93',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '93' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan10, " +
                " (select cekstatus(x.ins_cover_id = '94',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '94' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan11, " +
                " (select cekstatus(x.ins_cover_id = '22',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '22' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan12, " +
                " (select cekstatus(x.ins_cover_id = '29',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '29' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan13, " +
                " (select cekstatus(x.ins_cover_id = '65',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '65' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan14, " +
                " (select cekstatus(x.ins_cover_id = '114',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '114' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan15, " +
                " (select cekstatus(x.ins_cover_id = '120',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '120' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan16, " +
                " (select cekstatus(x.ins_cover_id = '121',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '121' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan17, " +
                " (select cekstatus(x.ins_cover_id = '122',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '122' " +
                "where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan18, " +
                " (select cekstatus(x.ins_cover_id = '123',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '123' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan19, " +
                " (select cekstatus(x.ins_cover_id = '128',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '128' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan20, " +
                " (select cekstatus(x.ins_cover_id = '129',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '129' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan21, " +
                " (select cekstatus(x.ins_cover_id = '130',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '130' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan22, " +
                " (select cekstatus(x.ins_cover_id = '131',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '131' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan23, " +
                " (select cekstatus(x.ins_cover_id = '140',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '140' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan24, " +
                " (select cekstatus(x.ins_cover_id = '141',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '141' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan25, " +
                " (select cekstatus(x.ins_cover_id = '142',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '142' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan26, " +
                " (select cekstatus(x.ins_cover_id = '148',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '148' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan27, " +
                " (select cekstatus(x.ins_cover_id = '210',q.description)  " +
                " from ins_pol_obj z  " +
                " inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id  " +
                " inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = '210' " +
                " where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan28 ");
        
        sqa.addQuery(" from ins_policy a " +
                " inner join ins_pol_obj b on b.pol_id = a.pol_id " +
                " left join gl_cost_center c on c.cc_code = a.cc_code " +
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id " +
                " left join ent_master e on e.ent_id = a.entity_id " +
                " left join  ins_risk_cat f on f.ins_risk_cat_id = b.ins_risk_cat_id "
                );
        
        sqa.addClause("a.status in('POLICY','RENEWAL','ENDORSE')");
        sqa.addClause("a.effective_flag = 'Y'");
        sqa.addClause("a.pol_type_id = 3 ");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+" order by a.cc_code,a.pol_no,b.ins_pol_obj_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_STATISTIK_MV()  throws Exception {
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("pol_id");
            row0.createCell(1).setCellValue("ins_pol_obj_id");
            row0.createCell(2).setCellValue("pol_no");
            row0.createCell(3).setCellValue("bank tertanggung");
            row0.createCell(4).setCellValue("tertanggung");
            row0.createCell(5).setCellValue("objek");
            row0.createCell(6).setCellValue("rangka");
            row0.createCell(7).setCellValue("mesin");
            row0.createCell(8).setCellValue("polisi");
            row0.createCell(9).setCellValue("type");
            row0.createCell(10).setCellValue("penggunaan");
            row0.createCell(11).setCellValue("ins_risk_cat_code");
            row0.createCell(12).setCellValue("ins_risk_cat_name");
            row0.createCell(13).setCellValue("cabang");
            row0.createCell(14).setCellValue("tahun");
            row0.createCell(15).setCellValue("insured_amount");
            row0.createCell(16).setCellValue("insured_amount_obj");
            row0.createCell(17).setCellValue("period_start");
            row0.createCell(18).setCellValue("period_end");
            row0.createCell(19).setCellValue("premi_total");
            row0.createCell(20).setCellValue("premi_total_obj");
            row0.createCell(21).setCellValue("diskon");
            row0.createCell(22).setCellValue("status");
            row0.createCell(23).setCellValue("kurs");
            row0.createCell(24).setCellValue("mata_uang");
            row0.createCell(25).setCellValue("comm");
            row0.createCell(26).setCellValue("nd_feebase");
            row0.createCell(27).setCellValue("nd_brok");
            row0.createCell(28).setCellValue("nd_hfee");
            row0.createCell(29).setCellValue("deduct");
            row0.createCell(30).setCellValue("jaminan/coverage");
            
            BigDecimal comm1 = null;
            BigDecimal comm2 = null;
            BigDecimal bfee = null;
            BigDecimal feebase = null;
            comm1 = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_comm2"));
            comm2 = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm3"), h.getFieldValueByFieldNameBD("nd_comm4"));
            bfee = BDUtil.add(h.getFieldValueByFieldNameBD("nd_brok1"), h.getFieldValueByFieldNameBD("nd_brok2"));
            feebase = BDUtil.add(h.getFieldValueByFieldNameBD("nd_feebase1"), h.getFieldValueByFieldNameBD("nd_feebase2"));
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("ins_pol_obj_id").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("nama"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("rangka"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("mesin"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("polisi"));
            row.createCell(9).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("merk"))+", "+h.getFieldValueByFieldNameST("type"));
            row.createCell(10).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("penggunaan")));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("ins_risk_cat_code"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("cabang"));
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("tahun"));
            row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(16).setCellValue(h.getFieldValueByFieldNameBD("insured_amount_obj").doubleValue());
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(18).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(19).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("premi_total_obj").doubleValue());
            if (h.getFieldValueByFieldNameBD("diskon")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("diskon").doubleValue());
            row.createCell(22).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("kurs").doubleValue());
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameST("mata_uang"));
            if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(25).setCellValue(BDUtil.add(comm1, comm2).doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_feebase1")!=null)
                row.createCell(26).setCellValue(feebase.doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_brok1")!=null)
                row.createCell(27).setCellValue(bfee.doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_hfee")!=null)
                row.createCell(28).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            if (h.getFieldValueByFieldNameBD("deduct")!=null)
                row.createCell(29).setCellValue(h.getFieldValueByFieldNameBD("deduct").doubleValue());
            if (h.getFieldValueByFieldNameST("jaminan1")!=null||
                    h.getFieldValueByFieldNameST("jaminan2")!=null||
                    h.getFieldValueByFieldNameST("jaminan3")!=null||
                    h.getFieldValueByFieldNameST("jaminan4")!=null||
                    h.getFieldValueByFieldNameST("jaminan5")!=null||
                    h.getFieldValueByFieldNameST("jaminan6")!=null||
                    h.getFieldValueByFieldNameST("jaminan7")!=null||
                    h.getFieldValueByFieldNameST("jaminan8")!=null||
                    h.getFieldValueByFieldNameST("jaminan9")!=null||
                    h.getFieldValueByFieldNameST("jaminan10")!=null||
                    h.getFieldValueByFieldNameST("jaminan11")!=null||
                    h.getFieldValueByFieldNameST("jaminan12")!=null||
                    h.getFieldValueByFieldNameST("jaminan13")!=null||
                    h.getFieldValueByFieldNameST("jaminan14")!=null||
                    h.getFieldValueByFieldNameST("jaminan15")!=null||
                    h.getFieldValueByFieldNameST("jaminan16")!=null||
                    h.getFieldValueByFieldNameST("jaminan17")!=null||
                    h.getFieldValueByFieldNameST("jaminan18")!=null||
                    h.getFieldValueByFieldNameST("jaminan19")!=null||
                    h.getFieldValueByFieldNameST("jaminan20")!=null||
                    h.getFieldValueByFieldNameST("jaminan21")!=null||
                    h.getFieldValueByFieldNameST("jaminan22")!=null||
                    h.getFieldValueByFieldNameST("jaminan23")!=null||
                    h.getFieldValueByFieldNameST("jaminan24")!=null||
                    h.getFieldValueByFieldNameST("jaminan25")!=null||
                    h.getFieldValueByFieldNameST("jaminan26")!=null||
                    h.getFieldValueByFieldNameST("jaminan27")!=null||
                    h.getFieldValueByFieldNameST("jaminan28")!=null)
                row.createCell(30).setCellValue(
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan1"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan2"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan3"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan4"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan5"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan6"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan7"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan8"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan9"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan10"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan11"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan12"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan13"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan14"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan15"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan16"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan17"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan18"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan19"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan20"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan21"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan22"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan23"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan24"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan25"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan26"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan27"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan28")));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public DTOList EXCEL_STATISTIK() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect( " a.cc_code as cabang,a.pol_id,b.ins_pol_obj_id,a.pol_no," +
                "b.ref1,b.ref2,b.ref3,b.ref4,b.ref5,b.ref6,b.ref7,b.ref8,b.ref9d as kode_pos,b.ref10,b.ref11,b.ref1d,b.ref2d,b.ref3d,b.ref4d,  " +
                "b.ref5d,b.ref6d,b.ref7d,b.ref8d,b.ref11,b.risk_class,b.refd1,b.refd2,b.refd3,f.ins_risk_cat_code,f.description,  " +
                "a.ccy_rate as kurs,a.insured_amount,a.period_start,a.period_end,a.premi_total,  " +
                "(a.nd_disc1+a.nd_disc2) as diskon,a.status,a.ccy as mata_uang,a.nd_comm1,a.nd_comm2,a.nd_comm3,a.nd_comm4,  " +
                "a.nd_feebase1,a.nd_feebase2,a.nd_brok1,a.nd_brok2,a.nd_hfee,  " +
                " (select cekstatus(x.ins_cover_id = 1,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 1 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan1, " +
                " (select cekstatus(x.ins_cover_id = 2,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 2 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan2, " +
                " (select cekstatus(x.ins_cover_id = 3,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 3 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan3, " +
                " (select cekstatus(x.ins_cover_id = 4,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 4 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan4, " +
                " (select cekstatus(x.ins_cover_id = 5,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 5 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan5, " +
                " (select cekstatus(x.ins_cover_id = 6,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 6 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan6, " +
                " (select cekstatus(x.ins_cover_id = 7,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 7 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan7, " +
                " (select cekstatus(x.ins_cover_id = 8,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 8 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan8, " +
                " (select cekstatus(x.ins_cover_id = 9,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 9 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan9, " +
                " (select cekstatus(x.ins_cover_id = 10,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 10 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan10, " +
                " (select cekstatus(x.ins_cover_id = 11,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 11 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan11, " +
                " (select cekstatus(x.ins_cover_id = 12,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 12 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan12, " +
                " (select cekstatus(x.ins_cover_id = 13,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 13 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan13, " +
                " (select cekstatus(x.ins_cover_id = 14,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 14 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan14, " +
                " (select cekstatus(x.ins_cover_id = 15,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 15 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan15, " +
                " (select cekstatus(x.ins_cover_id = 16,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 16 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan16, " +
                " (select cekstatus(x.ins_cover_id = 17,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 17 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan17, " +
                " (select cekstatus(x.ins_cover_id = 18,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 18 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan18, " +
                " (select cekstatus(x.ins_cover_id = 19,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 19 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan19, " +
                " (select cekstatus(x.ins_cover_id = 20,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 20 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan20, " +
                " (select cekstatus(x.ins_cover_id = 21,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 21 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan21, " +
                " (select cekstatus(x.ins_cover_id = 22,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 22 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan22, " +
                " (select cekstatus(x.ins_cover_id = 23,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 23 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan23, " +
                " (select cekstatus(x.ins_cover_id = 24,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 24 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan24, " +
                " (select cekstatus(x.ins_cover_id = 25,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 25 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan25, " +
                " (select cekstatus(x.ins_cover_id = 26,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 26 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan26, " +
                " (select cekstatus(x.ins_cover_id = 27,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 27 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan27, " +
                " (select cekstatus(x.ins_cover_id = 28,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 28 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan28, " +
                " (select cekstatus(x.ins_cover_id = 29,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 29 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan29, " +
                " (select cekstatus(x.ins_cover_id = 31,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 31 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan30, " +
                " (select cekstatus(x.ins_cover_id = 33,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 33 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan31, " +
                " (select cekstatus(x.ins_cover_id = 34,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 34 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan32, " +
                " (select cekstatus(x.ins_cover_id = 35,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 35 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan33, " +
                " (select cekstatus(x.ins_cover_id = 36,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 36 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan34, " +
                " (select cekstatus(x.ins_cover_id = 37,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 37 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan35, " +
                " (select cekstatus(x.ins_cover_id = 39,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 39 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan36, " +
                " (select cekstatus(x.ins_cover_id = 40,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 40 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan37, " +
                " (select cekstatus(x.ins_cover_id = 41,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 41 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan38, " +
                " (select cekstatus(x.ins_cover_id = 42,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 42 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan39, " +
                " (select cekstatus(x.ins_cover_id = 43,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 43 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan40, " +
                " (select cekstatus(x.ins_cover_id = 44,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 44 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan41, " +
                " (select cekstatus(x.ins_cover_id = 45,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 45 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan42, " +
                " (select cekstatus(x.ins_cover_id = 46,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 46 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan43, " +
                " (select cekstatus(x.ins_cover_id = 47,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 47 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan44, " +
                " (select cekstatus(x.ins_cover_id = 48,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 48 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan45, " +
                " (select cekstatus(x.ins_cover_id = 49,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 49 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan46, " +
                " (select cekstatus(x.ins_cover_id = 50,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 50 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan47, " +
                " (select cekstatus(x.ins_cover_id = 51,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 51 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan48, " +
                " (select cekstatus(x.ins_cover_id = 52,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 52 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan49, " +
                " (select cekstatus(x.ins_cover_id = 53,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 53 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan50, " +
                " (select cekstatus(x.ins_cover_id = 54,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 54 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan51, " +
                " (select cekstatus(x.ins_cover_id = 55,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 55 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan52, " +
                " (select cekstatus(x.ins_cover_id = 56,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 56 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan53, " +
                " (select cekstatus(x.ins_cover_id = 57,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 57 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan54, " +
                " (select cekstatus(x.ins_cover_id = 58,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 58 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan55, " +
                " (select cekstatus(x.ins_cover_id = 59,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 59 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan56, " +
                " (select cekstatus(x.ins_cover_id = 60,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 60 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan57, " +
                " (select cekstatus(x.ins_cover_id = 61,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 61 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan58, " +
                " (select cekstatus(x.ins_cover_id = 62,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 62 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan59, " +
                " (select cekstatus(x.ins_cover_id = 63,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 63 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan60, " +
                " (select cekstatus(x.ins_cover_id = 64,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 64 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan61, " +
                " (select cekstatus(x.ins_cover_id = 65,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 65 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan62, " +
                " (select cekstatus(x.ins_cover_id = 67,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 67 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan63, " +
                " (select cekstatus(x.ins_cover_id = 68,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 68 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan64, " +
                " (select cekstatus(x.ins_cover_id = 69,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 69 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan65, " +
                " (select cekstatus(x.ins_cover_id = 70,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 70 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan66, " +
                " (select cekstatus(x.ins_cover_id = 72,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 72 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan67, " +
                " (select cekstatus(x.ins_cover_id = 75,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 75 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan68, " +
                " (select cekstatus(x.ins_cover_id = 76,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 76 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan69, " +
                " (select cekstatus(x.ins_cover_id = 78,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 78 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan70, " +
                " (select cekstatus(x.ins_cover_id = 80,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 80 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan71, " +
                " (select cekstatus(x.ins_cover_id = 81,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 81 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan72, " +
                " (select cekstatus(x.ins_cover_id = 83,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 83 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan73, " +
                " (select cekstatus(x.ins_cover_id = 84,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 84 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan74, " +
                " (select cekstatus(x.ins_cover_id = 85,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 85 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan75, " +
                " (select cekstatus(x.ins_cover_id = 86,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 86 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan76, " +
                " (select cekstatus(x.ins_cover_id = 87,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 87 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan77, " +
                " (select cekstatus(x.ins_cover_id = 88,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 88 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan78, " +
                " (select cekstatus(x.ins_cover_id = 89,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 89 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan79, " +
                " (select cekstatus(x.ins_cover_id = 90,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 90 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan80, " +
                " (select cekstatus(x.ins_cover_id = 91,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 91 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan81, " +
                " (select cekstatus(x.ins_cover_id = 92,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 92 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan82, " +
                " (select cekstatus(x.ins_cover_id = 93,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 93 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan83, " +
                " (select cekstatus(x.ins_cover_id = 94,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 94 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan84, " +
                " (select cekstatus(x.ins_cover_id = 95,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 95 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan85, " +
                " (select cekstatus(x.ins_cover_id = 96,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 96 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan86, " +
                " (select cekstatus(x.ins_cover_id = 97,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 97 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan87, " +
                " (select cekstatus(x.ins_cover_id = 98,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 98 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan88, " +
                " (select cekstatus(x.ins_cover_id = 99,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 99 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan89, " +
                " (select cekstatus(x.ins_cover_id = 101,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 101 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan90, " +
                " (select cekstatus(x.ins_cover_id = 102,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 102 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan91, " +
                " (select cekstatus(x.ins_cover_id = 103,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 103 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan92, " +
                " (select cekstatus(x.ins_cover_id = 104,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 104 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan93, " +
                " (select cekstatus(x.ins_cover_id = 105,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 105 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan94, " +
                " (select cekstatus(x.ins_cover_id = 106,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 106 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan95, " +
                " (select cekstatus(x.ins_cover_id = 107,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 107 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan96, " +
                " (select cekstatus(x.ins_cover_id = 108,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 108 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan97, " +
                " (select cekstatus(x.ins_cover_id = 109,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 109 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan98, " +
                " (select cekstatus(x.ins_cover_id = 110,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 110 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan99, " +
                " (select cekstatus(x.ins_cover_id = 112,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 112 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan100, " +
                " (select cekstatus(x.ins_cover_id = 113,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 113 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan101, " +
                " (select cekstatus(x.ins_cover_id = 114,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 114 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan102, " +
                " (select cekstatus(x.ins_cover_id = 115,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 115 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan103, " +
                " (select cekstatus(x.ins_cover_id = 116,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 116 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan104, " +
                " (select cekstatus(x.ins_cover_id = 117,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 117 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan105, " +
                " (select cekstatus(x.ins_cover_id = 118,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 118 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan106, " +
                " (select cekstatus(x.ins_cover_id = 119,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 119 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan107, " +
                " (select cekstatus(x.ins_cover_id = 120,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 120 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan108, " +
                " (select cekstatus(x.ins_cover_id = 121,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 121 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan109, " +
                " (select cekstatus(x.ins_cover_id = 122,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 122 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan110, " +
                " (select cekstatus(x.ins_cover_id = 123,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 123 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan111, " +
                " (select cekstatus(x.ins_cover_id = 124,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 124 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan112, " +
                " (select cekstatus(x.ins_cover_id = 125,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 125 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan113, " +
                " (select cekstatus(x.ins_cover_id = 126,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 126 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan114, " +
                " (select cekstatus(x.ins_cover_id = 127,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 127 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan115, " +
                " (select cekstatus(x.ins_cover_id = 128,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 128 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan116, " +
                " (select cekstatus(x.ins_cover_id = 129,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 129 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan117, " +
                " (select cekstatus(x.ins_cover_id = 130,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 130 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan118, " +
                " (select cekstatus(x.ins_cover_id = 131,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 131 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan119, " +
                " (select cekstatus(x.ins_cover_id = 139,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 139 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan120, " +
                " (select cekstatus(x.ins_cover_id = 140,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 140 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan121, " +
                " (select cekstatus(x.ins_cover_id = 141,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 141 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan122, " +
                " (select cekstatus(x.ins_cover_id = 142,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 142 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan123, " +
                " (select cekstatus(x.ins_cover_id = 143,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 143 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan124, " +
                " (select cekstatus(x.ins_cover_id = 144,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 144 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan125, " +
                " (select cekstatus(x.ins_cover_id = 145,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 145 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan126, " +
                " (select cekstatus(x.ins_cover_id = 146,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 146 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan127, " +
                " (select cekstatus(x.ins_cover_id = 147,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 147 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan128, " +
                " (select cekstatus(x.ins_cover_id = 148,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 148 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan129, " +
                " (select cekstatus(x.ins_cover_id = 204,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 204 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan130, " +
                " (select cekstatus(x.ins_cover_id = 205,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 205 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan131, " +
                " (select cekstatus(x.ins_cover_id = 206,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 206 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan132, " +
                " (select cekstatus(x.ins_cover_id = 207,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 207 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan133, " +
                " (select cekstatus(x.ins_cover_id = 208,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 208 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan134, " +
                " (select cekstatus(x.ins_cover_id = 209,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 209 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan135, " +
                " (select cekstatus(x.ins_cover_id = 210,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 210 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan136, " +
                " (select cekstatus(x.ins_cover_id = 211,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 211 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan137, " +
                " (select cekstatus(x.ins_cover_id = 212,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 212 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan138, " +
                " (select cekstatus(x.ins_cover_id = 213,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 213 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan139, " +
                " (select cekstatus(x.ins_cover_id = 214,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 214 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan140, " +
                " (select cekstatus(x.ins_cover_id = 215,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 215 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan141, " +
                " (select cekstatus(x.ins_cover_id = 216,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 216 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan142, " +
                " (select cekstatus(x.ins_cover_id = 217,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 217 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan143, " +
                " (select cekstatus(x.ins_cover_id = 218,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 218 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan144, " +
                " (select cekstatus(x.ins_cover_id = 219,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 219 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan145, " +
                " (select cekstatus(x.ins_cover_id = 220,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 220 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan146, " +
                " (select cekstatus(x.ins_cover_id = 221,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 221 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan147, " +
                " (select cekstatus(x.ins_cover_id = 222,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 222 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan148, " +
                " (select cekstatus(x.ins_cover_id = 223,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 223 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan149, " +
                " (select cekstatus(x.ins_cover_id = 224,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 224 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan150, " +
                " (select cekstatus(x.ins_cover_id = 225,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 225 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan151, " +
                " (select cekstatus(x.ins_cover_id = 226,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 226 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan152, " +
                " (select cekstatus(x.ins_cover_id = 227,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 227 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan153, " +
                " (select cekstatus(x.ins_cover_id = 228,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 228 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan154, " +
                " (select cekstatus(x.ins_cover_id = 229,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 229 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan155, " +
                " (select cekstatus(x.ins_cover_id = 230,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 230 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan156, " +
                " (select cekstatus(x.ins_cover_id = 231,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 231 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan157, " +
                " (select cekstatus(x.ins_cover_id = 232,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 232 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan158, " +
                " (select cekstatus(x.ins_cover_id = 233,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 233 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan159, " +
                " (select cekstatus(x.ins_cover_id = 234,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 234 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan160, " +
                " (select cekstatus(x.ins_cover_id = 235,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 235 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan161, " +
                " (select cekstatus(x.ins_cover_id = 236,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 236 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan162, " +
                " (select cekstatus(x.ins_cover_id = 237,q.description) from ins_pol_obj z inner join ins_pol_cover x on x.ins_pol_obj_id = z.ins_pol_obj_id inner join ins_cover q on q.ins_cover_id = x.ins_cover_id and q.ins_cover_id = 237 where z.ins_pol_obj_id = b.ins_pol_obj_id group by q.description,x.ins_cover_id) as jaminan163 "  );
        
        sqa.addQuery(" from ins_policy a " +
                " inner join ins_pol_obj b on b.pol_id = a.pol_id " +
                " left join  ins_risk_cat f on f.ins_risk_cat_id = b.ins_risk_cat_id " +
                " left join gl_cost_center c on c.cc_code = a.cc_code " +
                " inner join ins_policy_types d on d.pol_type_id = a.pol_type_id "
                );
        
        sqa.addClause("a.status in('POLICY','RENEWAL','ENDORSE')");
        sqa.addClause("a.effective_flag = 'Y'");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if(stPolicyTypeID!=null){
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        if (stPolicyNo!=null) {
            sqa.addClause("a.pol_no like ?");
            sqa.addPar('%'+stPolicyNo+'%');
        }
        
        final String sql = sqa.getSQL()+" order by a.cc_code,a.pol_no,b.ins_pol_obj_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_STATISTIK()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("cabang");
            row0.createCell(1).setCellValue("pol_id");
            row0.createCell(2).setCellValue("ins_pol_obj_id");
            row0.createCell(3).setCellValue("pol_no");
            row0.createCell(4).setCellValue("ref1");
            row0.createCell(5).setCellValue("ref2");
            row0.createCell(6).setCellValue("ref3");
            row0.createCell(7).setCellValue("ref4");
            row0.createCell(8).setCellValue("ref5");
            row0.createCell(9).setCellValue("ref6");
            row0.createCell(10).setCellValue("ref7");
            row0.createCell(11).setCellValue("ref8");
            row0.createCell(12).setCellValue("kode_pos");
            row0.createCell(13).setCellValue("ref10");
            row0.createCell(14).setCellValue("ref11");
            row0.createCell(15).setCellValue("ref1d");
            row0.createCell(16).setCellValue("ref2d");
            row0.createCell(17).setCellValue("ref3d");
            row0.createCell(18).setCellValue("ref4d");
            row0.createCell(19).setCellValue("ref5d");
            row0.createCell(20).setCellValue("ref6d");
            row0.createCell(21).setCellValue("ref7d");
            row0.createCell(22).setCellValue("ref8d");
            row0.createCell(23).setCellValue("ref11");
            row0.createCell(24).setCellValue("risk_class");
            row0.createCell(25).setCellValue("refd1");
            row0.createCell(26).setCellValue("refd2");
            row0.createCell(27).setCellValue("refd3");
            row0.createCell(28).setCellValue("ins_risk_cat_code");
            row0.createCell(29).setCellValue("ins_risk_cat_name");
            row0.createCell(30).setCellValue("period_start");
            row0.createCell(31).setCellValue("period_end");
            row0.createCell(32).setCellValue("status");
            row0.createCell(33).setCellValue("mata_uang");
            row0.createCell(34).setCellValue("kurs");
            row0.createCell(35).setCellValue("insured_amount");
            row0.createCell(36).setCellValue("premi_total");
            row0.createCell(37).setCellValue("diskon");
            row0.createCell(38).setCellValue("comm");
            row0.createCell(39).setCellValue("nd_feebase");
            row0.createCell(40).setCellValue("nd_brok");
            row0.createCell(41).setCellValue("nd_hfee");
            row0.createCell(42).setCellValue("jaminan/coverage");
            
            BigDecimal comm1 = null;
            BigDecimal comm2 = null;
            BigDecimal bfee = null;
            BigDecimal feebase = null;
            comm1 = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_comm2"));
            comm2 = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm3"), h.getFieldValueByFieldNameBD("nd_comm4"));
            bfee = BDUtil.add(h.getFieldValueByFieldNameBD("nd_brok1"), h.getFieldValueByFieldNameBD("nd_brok2"));
            feebase = BDUtil.add(h.getFieldValueByFieldNameBD("nd_feebase1"), h.getFieldValueByFieldNameBD("nd_feebase2"));
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cabang"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameBD("pol_id").doubleValue());
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameBD("ins_pol_obj_id").doubleValue());
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("ref1"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("ref2"));
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("ref3"));
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("ref4"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("ref5"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("ref6"));
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameST("ref7"));
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameST("ref8"));
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameST("kode_pos"));
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("ref10"));
            row.createCell(14).setCellValue(h.getFieldValueByFieldNameST("ref11"));
            row.createCell(15).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref1d")));
            row.createCell(16).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref2d")));
            row.createCell(17).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref3d")));
            row.createCell(18).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref4d")));
            row.createCell(19).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref5d")));
            row.createCell(20).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref6d")));
            row.createCell(21).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref7d")));
            row.createCell(22).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref8d")));
            row.createCell(23).setCellValue(h.getFieldValueByFieldNameST("ref11"));
            row.createCell(24).setCellValue(h.getFieldValueByFieldNameST("risk_class"));
            row.createCell(25).setCellValue(h.getFieldValueByFieldNameDT("refd1"));
            row.createCell(26).setCellValue(h.getFieldValueByFieldNameDT("refd2"));
            row.createCell(27).setCellValue(h.getFieldValueByFieldNameDT("refd3"));
            row.createCell(28).setCellValue(h.getFieldValueByFieldNameST("ins_risk_cat_code"));
            row.createCell(29).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(30).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(31).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(32).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(33).setCellValue(h.getFieldValueByFieldNameST("mata_uang"));
            row.createCell(34).setCellValue(h.getFieldValueByFieldNameBD("kurs").doubleValue());
            row.createCell(35).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(36).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            row.createCell(37).setCellValue(h.getFieldValueByFieldNameBD("diskon").doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
                row.createCell(38).setCellValue(BDUtil.add(comm1, comm2).doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_feebase1")!=null)
                row.createCell(39).setCellValue(feebase.doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_brok1")!=null)
                row.createCell(40).setCellValue(bfee.doubleValue());
            if (h.getFieldValueByFieldNameBD("nd_hfee")!=null)
                row.createCell(41).setCellValue(h.getFieldValueByFieldNameBD("nd_hfee").doubleValue());
            if (h.getFieldValueByFieldNameST("jaminan1")!=null||
                    h.getFieldValueByFieldNameST("jaminan2")!=null||
                    h.getFieldValueByFieldNameST("jaminan3")!=null||
                    h.getFieldValueByFieldNameST("jaminan4")!=null||
                    h.getFieldValueByFieldNameST("jaminan5")!=null||
                    h.getFieldValueByFieldNameST("jaminan6")!=null||
                    h.getFieldValueByFieldNameST("jaminan7")!=null||
                    h.getFieldValueByFieldNameST("jaminan8")!=null||
                    h.getFieldValueByFieldNameST("jaminan9")!=null||
                    h.getFieldValueByFieldNameST("jaminan10")!=null||
                    h.getFieldValueByFieldNameST("jaminan11")!=null||
                    h.getFieldValueByFieldNameST("jaminan12")!=null||
                    h.getFieldValueByFieldNameST("jaminan13")!=null||
                    h.getFieldValueByFieldNameST("jaminan14")!=null||
                    h.getFieldValueByFieldNameST("jaminan15")!=null||
                    h.getFieldValueByFieldNameST("jaminan16")!=null||
                    h.getFieldValueByFieldNameST("jaminan17")!=null||
                    h.getFieldValueByFieldNameST("jaminan18")!=null||
                    h.getFieldValueByFieldNameST("jaminan19")!=null||
                    h.getFieldValueByFieldNameST("jaminan20")!=null||
                    h.getFieldValueByFieldNameST("jaminan21")!=null||
                    h.getFieldValueByFieldNameST("jaminan22")!=null||
                    h.getFieldValueByFieldNameST("jaminan23")!=null||
                    h.getFieldValueByFieldNameST("jaminan24")!=null||
                    h.getFieldValueByFieldNameST("jaminan25")!=null||
                    h.getFieldValueByFieldNameST("jaminan26")!=null||
                    h.getFieldValueByFieldNameST("jaminan27")!=null||
                    h.getFieldValueByFieldNameST("jaminan28")!=null||
                    h.getFieldValueByFieldNameST("jaminan29")!=null||
                    h.getFieldValueByFieldNameST("jaminan30")!=null||
                    h.getFieldValueByFieldNameST("jaminan31")!=null||
                    h.getFieldValueByFieldNameST("jaminan32")!=null||
                    h.getFieldValueByFieldNameST("jaminan33")!=null||
                    h.getFieldValueByFieldNameST("jaminan34")!=null||
                    h.getFieldValueByFieldNameST("jaminan35")!=null||
                    h.getFieldValueByFieldNameST("jaminan36")!=null||
                    h.getFieldValueByFieldNameST("jaminan37")!=null||
                    h.getFieldValueByFieldNameST("jaminan38")!=null||
                    h.getFieldValueByFieldNameST("jaminan39")!=null||
                    h.getFieldValueByFieldNameST("jaminan40")!=null||
                    h.getFieldValueByFieldNameST("jaminan41")!=null||
                    h.getFieldValueByFieldNameST("jaminan42")!=null||
                    h.getFieldValueByFieldNameST("jaminan43")!=null||
                    h.getFieldValueByFieldNameST("jaminan44")!=null||
                    h.getFieldValueByFieldNameST("jaminan45")!=null||
                    h.getFieldValueByFieldNameST("jaminan46")!=null||
                    h.getFieldValueByFieldNameST("jaminan47")!=null||
                    h.getFieldValueByFieldNameST("jaminan48")!=null||
                    h.getFieldValueByFieldNameST("jaminan49")!=null||
                    h.getFieldValueByFieldNameST("jaminan50")!=null||
                    h.getFieldValueByFieldNameST("jaminan51")!=null||
                    h.getFieldValueByFieldNameST("jaminan52")!=null||
                    h.getFieldValueByFieldNameST("jaminan53")!=null||
                    h.getFieldValueByFieldNameST("jaminan54")!=null||
                    h.getFieldValueByFieldNameST("jaminan55")!=null||
                    h.getFieldValueByFieldNameST("jaminan56")!=null||
                    h.getFieldValueByFieldNameST("jaminan57")!=null||
                    h.getFieldValueByFieldNameST("jaminan58")!=null||
                    h.getFieldValueByFieldNameST("jaminan59")!=null||
                    h.getFieldValueByFieldNameST("jaminan60")!=null||
                    h.getFieldValueByFieldNameST("jaminan61")!=null||
                    h.getFieldValueByFieldNameST("jaminan62")!=null||
                    h.getFieldValueByFieldNameST("jaminan63")!=null||
                    h.getFieldValueByFieldNameST("jaminan64")!=null||
                    h.getFieldValueByFieldNameST("jaminan65")!=null||
                    h.getFieldValueByFieldNameST("jaminan66")!=null||
                    h.getFieldValueByFieldNameST("jaminan67")!=null||
                    h.getFieldValueByFieldNameST("jaminan68")!=null||
                    h.getFieldValueByFieldNameST("jaminan69")!=null||
                    h.getFieldValueByFieldNameST("jaminan70")!=null||
                    h.getFieldValueByFieldNameST("jaminan71")!=null||
                    h.getFieldValueByFieldNameST("jaminan72")!=null||
                    h.getFieldValueByFieldNameST("jaminan73")!=null||
                    h.getFieldValueByFieldNameST("jaminan74")!=null||
                    h.getFieldValueByFieldNameST("jaminan75")!=null||
                    h.getFieldValueByFieldNameST("jaminan76")!=null||
                    h.getFieldValueByFieldNameST("jaminan77")!=null||
                    h.getFieldValueByFieldNameST("jaminan78")!=null||
                    h.getFieldValueByFieldNameST("jaminan79")!=null||
                    h.getFieldValueByFieldNameST("jaminan80")!=null||
                    h.getFieldValueByFieldNameST("jaminan81")!=null||
                    h.getFieldValueByFieldNameST("jaminan82")!=null||
                    h.getFieldValueByFieldNameST("jaminan83")!=null||
                    h.getFieldValueByFieldNameST("jaminan84")!=null||
                    h.getFieldValueByFieldNameST("jaminan85")!=null||
                    h.getFieldValueByFieldNameST("jaminan86")!=null||
                    h.getFieldValueByFieldNameST("jaminan87")!=null||
                    h.getFieldValueByFieldNameST("jaminan88")!=null||
                    h.getFieldValueByFieldNameST("jaminan89")!=null||
                    h.getFieldValueByFieldNameST("jaminan90")!=null||
                    h.getFieldValueByFieldNameST("jaminan91")!=null||
                    h.getFieldValueByFieldNameST("jaminan92")!=null||
                    h.getFieldValueByFieldNameST("jaminan93")!=null||
                    h.getFieldValueByFieldNameST("jaminan94")!=null||
                    h.getFieldValueByFieldNameST("jaminan95")!=null||
                    h.getFieldValueByFieldNameST("jaminan96")!=null||
                    h.getFieldValueByFieldNameST("jaminan97")!=null||
                    h.getFieldValueByFieldNameST("jaminan98")!=null||
                    h.getFieldValueByFieldNameST("jaminan99")!=null||
                    h.getFieldValueByFieldNameST("jaminan100")!=null||
                    h.getFieldValueByFieldNameST("jaminan101")!=null||
                    h.getFieldValueByFieldNameST("jaminan102")!=null||
                    h.getFieldValueByFieldNameST("jaminan103")!=null||
                    h.getFieldValueByFieldNameST("jaminan104")!=null||
                    h.getFieldValueByFieldNameST("jaminan105")!=null||
                    h.getFieldValueByFieldNameST("jaminan106")!=null||
                    h.getFieldValueByFieldNameST("jaminan107")!=null||
                    h.getFieldValueByFieldNameST("jaminan108")!=null||
                    h.getFieldValueByFieldNameST("jaminan109")!=null||
                    h.getFieldValueByFieldNameST("jaminan110")!=null||
                    h.getFieldValueByFieldNameST("jaminan111")!=null||
                    h.getFieldValueByFieldNameST("jaminan112")!=null||
                    h.getFieldValueByFieldNameST("jaminan113")!=null||
                    h.getFieldValueByFieldNameST("jaminan114")!=null||
                    h.getFieldValueByFieldNameST("jaminan115")!=null||
                    h.getFieldValueByFieldNameST("jaminan116")!=null||
                    h.getFieldValueByFieldNameST("jaminan117")!=null||
                    h.getFieldValueByFieldNameST("jaminan118")!=null||
                    h.getFieldValueByFieldNameST("jaminan119")!=null||
                    h.getFieldValueByFieldNameST("jaminan120")!=null||
                    h.getFieldValueByFieldNameST("jaminan121")!=null||
                    h.getFieldValueByFieldNameST("jaminan122")!=null||
                    h.getFieldValueByFieldNameST("jaminan123")!=null||
                    h.getFieldValueByFieldNameST("jaminan124")!=null||
                    h.getFieldValueByFieldNameST("jaminan125")!=null||
                    h.getFieldValueByFieldNameST("jaminan126")!=null||
                    h.getFieldValueByFieldNameST("jaminan127")!=null||
                    h.getFieldValueByFieldNameST("jaminan128")!=null||
                    h.getFieldValueByFieldNameST("jaminan129")!=null||
                    h.getFieldValueByFieldNameST("jaminan130")!=null||
                    h.getFieldValueByFieldNameST("jaminan131")!=null||
                    h.getFieldValueByFieldNameST("jaminan132")!=null||
                    h.getFieldValueByFieldNameST("jaminan133")!=null||
                    h.getFieldValueByFieldNameST("jaminan134")!=null||
                    h.getFieldValueByFieldNameST("jaminan135")!=null||
                    h.getFieldValueByFieldNameST("jaminan136")!=null||
                    h.getFieldValueByFieldNameST("jaminan137")!=null||
                    h.getFieldValueByFieldNameST("jaminan138")!=null||
                    h.getFieldValueByFieldNameST("jaminan139")!=null||
                    h.getFieldValueByFieldNameST("jaminan140")!=null||
                    h.getFieldValueByFieldNameST("jaminan141")!=null||
                    h.getFieldValueByFieldNameST("jaminan142")!=null||
                    h.getFieldValueByFieldNameST("jaminan143")!=null||
                    h.getFieldValueByFieldNameST("jaminan144")!=null||
                    h.getFieldValueByFieldNameST("jaminan145")!=null||
                    h.getFieldValueByFieldNameST("jaminan146")!=null||
                    h.getFieldValueByFieldNameST("jaminan147")!=null||
                    h.getFieldValueByFieldNameST("jaminan148")!=null||
                    h.getFieldValueByFieldNameST("jaminan149")!=null||
                    h.getFieldValueByFieldNameST("jaminan150")!=null||
                    h.getFieldValueByFieldNameST("jaminan151")!=null||
                    h.getFieldValueByFieldNameST("jaminan152")!=null||
                    h.getFieldValueByFieldNameST("jaminan153")!=null||
                    h.getFieldValueByFieldNameST("jaminan154")!=null||
                    h.getFieldValueByFieldNameST("jaminan155")!=null||
                    h.getFieldValueByFieldNameST("jaminan156")!=null||
                    h.getFieldValueByFieldNameST("jaminan157")!=null||
                    h.getFieldValueByFieldNameST("jaminan158")!=null||
                    h.getFieldValueByFieldNameST("jaminan159")!=null||
                    h.getFieldValueByFieldNameST("jaminan160")!=null||
                    h.getFieldValueByFieldNameST("jaminan161")!=null||
                    h.getFieldValueByFieldNameST("jaminan162")!=null||
                    h.getFieldValueByFieldNameST("jaminan163")!=null)
                row.createCell(42).setCellValue(
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan1"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan2"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan3"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan4"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan5"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan6"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan7"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan8"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan9"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan10"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan11"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan12"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan13"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan14"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan15"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan16"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan17"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan18"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan19"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan20"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan21"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan22"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan23"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan24"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan25"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan26"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan27"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan28"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan29"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan30"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan31"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan32"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan33"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan34"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan35"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan36"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan37"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan38"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan39"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan40"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan41"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan42"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan43"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan44"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan45"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan46"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan47"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan48"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan49"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan50"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan51"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan52"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan53"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan54"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan55"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan56"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan57"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan58"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan59"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan60"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan61"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan62"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan63"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan64"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan65"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan66"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan67"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan68"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan69"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan70"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan71"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan72"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan73"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan74"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan75"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan76"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan77"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan78"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan79"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan80"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan81"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan82"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan83"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan84"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan85"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan86"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan87"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan88"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan89"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan90"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan91"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan92"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan93"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan94"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan95"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan96"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan97"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan98"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan99"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan100"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan101"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan102"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan103"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan104"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan105"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan106"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan107"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan108"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan109"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan110"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan111"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan112"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan113"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan114"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan115"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan116"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan117"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan118"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan119"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan120"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan121"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan122"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan123"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan124"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan125"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan126"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan127"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan128"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan129"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan130"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan131"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan132"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan133"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan134"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan135"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan136"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan137"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan138"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan139"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan140"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan141"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan142"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan143"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan144"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan145"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan146"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan147"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan148"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan149"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan150"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan151"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan152"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan153"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan154"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan155"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan156"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan157"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan158"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan159"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan160"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan161"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan162"))+", "+
                        LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("jaminan163")));
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
        
    }
    
    public String getStGroupID() {
        return stGroupID;
    }
    
    public void setStGroupID(String stGroupID) {
        this.stGroupID = stGroupID;
    }
    
    public String getStGroupName() {
        return stGroupName;
    }
    
    public void setStGroupName(String stGroupName) {
        this.stGroupName = stGroupName;
    }
    
    public String getStFontSize() {
        return stFontSize;
    }
    
    public void setStFontSize(String stFontSize) {
        this.stFontSize = stFontSize;
    }
    
    public void EXPORT_RISK_CONTROL2()  throws Exception {
        
        BigDecimal comm = new BigDecimal(0);
        BigDecimal feebase = new BigDecimal(0);
        
        HSSFWorkbook wb = new HSSFWorkbook();
        
        //bikin sheet
        HSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        int norut = 0;
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            HSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("period_start");
            row0.createCell(1).setCellValue("period_end");
            row0.createCell(2).setCellValue("policy_date");
            row0.createCell(3).setCellValue("create id");
            row0.createCell(4).setCellValue("status");
            row0.createCell(5).setCellValue("pol_no");
            row0.createCell(6).setCellValue("nomor PP");
            row0.createCell(7).setCellValue("cust_name");
            row0.createCell(8).setCellValue("norut");
            row0.createCell(9).setCellValue("ref1");
            row0.createCell(10).setCellValue("ref2");
            row0.createCell(11).setCellValue("ref3");
            row0.createCell(12).setCellValue("ref4");
            row0.createCell(13).setCellValue("ref5");
            row0.createCell(14).setCellValue("ref6");
            row0.createCell(15).setCellValue("ref7");
            row0.createCell(16).setCellValue("ref8");
            row0.createCell(17).setCellValue("kode_pos");
            row0.createCell(18).setCellValue("ins_risk_cat_code");
            row0.createCell(19).setCellValue("ccy");
            row0.createCell(20).setCellValue("kurs");
            row0.createCell(21).setCellValue("insured_amount");
            row0.createCell(22).setCellValue("premi_total");
            row0.createCell(23).setCellValue("insured_amount_e");
            row0.createCell(24).setCellValue("premi_total_e");
            row0.createCell(25).setCellValue("premi_total_d");
            row0.createCell(26).setCellValue("komisi");
            row0.createCell(27).setCellValue("fee_base");
            row0.createCell(28).setCellValue("ref1d");
            row0.createCell(29).setCellValue("ref2d");
            row0.createCell(30).setCellValue("ref3d");
            row0.createCell(31).setCellValue("ref4d");
            row0.createCell(32).setCellValue("ref5d");
            row0.createCell(33).setCellValue("ref6d");
            row0.createCell(34).setCellValue("ref7d");
            row0.createCell(35).setCellValue("ref8d");
            row0.createCell(36).setCellValue("ref10");
            row0.createCell(37).setCellValue("ref11");
            row0.createCell(38).setCellValue("risk_class");
            row0.createCell(39).setCellValue("refd1");
            row0.createCell(40).setCellValue("refd2");
            row0.createCell(41).setCellValue("refd3");
            row0.createCell(42).setCellValue("jangka waktu");
            row0.createCell(43).setCellValue("endorse notes");
            row0.createCell(44).setCellValue("no urut debitur");
            
            norut++;
            
            if(i>0){
                HashDTO s = (HashDTO) list.get(i-1);
                String nopol = s.getFieldValueByFieldNameST("pol_no");
                String nopol2 = h.getFieldValueByFieldNameST("pol_no");
                if(!nopol.equalsIgnoreCase(nopol2)){
                    
                    norut = 1;
                }
            }
            
            //comm = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_comm2"));
            //feebase = BDUtil.add(h.getFieldValueByFieldNameBD("nd_feebase1"), h.getFieldValueByFieldNameBD("nd_feebase2"));
            
            //bikin isi cell
            HSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("period_start"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("period_end"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("create_who"));
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("status"));
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            if (getStPolicyTypeGroupID()!=null) {
                if (getStPolicyTypeGroupID().equalsIgnoreCase("8")) {
                    row.createCell(6).setCellValue(h.getFieldValueByFieldNameST("nomor_pp"));
                }
            }
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            row.createCell(8).setCellValue(String.valueOf(norut));
            if (h.getFieldValueByFieldNameST("ref1")!=null)
                row.createCell(9).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref1")));
            if (h.getFieldValueByFieldNameST("ref2")!=null)
                row.createCell(10).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref2")));
            if (h.getFieldValueByFieldNameST("ref3")!=null)
                row.createCell(11).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref3")));
            if (h.getFieldValueByFieldNameST("ref4")!=null)
                row.createCell(12).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref4")));
            if (h.getFieldValueByFieldNameST("ref5")!=null)
                row.createCell(13).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref5")));
            if (h.getFieldValueByFieldNameST("ref6")!=null)
                row.createCell(14).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref6")));
            if (h.getFieldValueByFieldNameST("ref7")!=null)
                row.createCell(15).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref7")));
            if (h.getFieldValueByFieldNameST("ref8")!=null)
                row.createCell(16).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref8")));
            if (h.getFieldValueByFieldNameST("kode_pos")!=null)
                row.createCell(17).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("kode_pos")));
            if (h.getFieldValueByFieldNameST("ins_risk_cat_code")!=null)
                row.createCell(18).setCellValue(h.getFieldValueByFieldNameST("ins_risk_cat_code"));
            if (h.getFieldValueByFieldNameST("ccy")!=null)
                row.createCell(19).setCellValue(h.getFieldValueByFieldNameST("ccy"));
            if (h.getFieldValueByFieldNameBD("ccy_rate")!=null)
                row.createCell(20).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            if (h.getFieldValueByFieldNameBD("insured_amount")!=null)
                row.createCell(21).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total")!=null)
                row.createCell(22).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            if (h.getFieldValueByFieldNameBD("insured_amount_e")!=null)
                row.createCell(23).setCellValue(h.getFieldValueByFieldNameBD("insured_amount_e").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total_e")!=null)
                row.createCell(24).setCellValue(h.getFieldValueByFieldNameBD("premi_total_e").doubleValue());
            if (h.getFieldValueByFieldNameBD("premi_total_d")!=null)
                row.createCell(25).setCellValue(h.getFieldValueByFieldNameBD("premi_total_d").doubleValue());
            //if (h.getFieldValueByFieldNameBD("nd_comm1")!=null)
            //    row.createCell(26).setCellValue(comm.doubleValue());
            //if (h.getFieldValueByFieldNameBD("nd_feebase1")!=null)
            //    row.createCell(27).setCellValue(feebase.doubleValue());
            if (h.getFieldValueByFieldNameST("ref1d")!=null)
                row.createCell(28).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref1d")));
            if (h.getFieldValueByFieldNameST("ref2d")!=null)
                row.createCell(29).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref2d")));
            if (h.getFieldValueByFieldNameST("ref3d")!=null)
                row.createCell(30).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref3d")));
            if (h.getFieldValueByFieldNameST("ref4d")!=null)
                row.createCell(31).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref4d")));
            if (h.getFieldValueByFieldNameST("ref5d")!=null)
                row.createCell(32).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref5d")));
            if (h.getFieldValueByFieldNameST("ref6d")!=null)
                row.createCell(33).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref6d")));
            if (h.getFieldValueByFieldNameST("ref7d")!=null)
                row.createCell(34).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref7d")));
            if (h.getFieldValueByFieldNameST("ref8d")!=null)
                row.createCell(35).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref8d")));
            if (h.getFieldValueByFieldNameST("ref10")!=null)
                row.createCell(36).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref10")));
            if (h.getFieldValueByFieldNameST("ref11")!=null)
                row.createCell(37).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("ref11")));
            if (h.getFieldValueByFieldNameST("risk_class")!=null)
                row.createCell(38).setCellValue(LanguageManager.getInstance().translate(h.getFieldValueByFieldNameST("risk_class")));
            if (h.getFieldValueByFieldNameDT("refd1")!=null)
                row.createCell(39).setCellValue(h.getFieldValueByFieldNameDT("refd1"));
            if (h.getFieldValueByFieldNameDT("refd2")!=null)
                row.createCell(40).setCellValue(h.getFieldValueByFieldNameDT("refd2"));
            if (h.getFieldValueByFieldNameDT("refd3")!=null)
                row.createCell(41).setCellValue(h.getFieldValueByFieldNameDT("refd3"));
            row.createCell(42).setCellValue(h.getFieldValueByFieldNameST("years"));
            row.createCell(43).setCellValue(h.getFieldValueByFieldNameST("endorse_notes"));
            if (h.getFieldValueByFieldNameBD("order_no")!=null)
                row.createCell(44).setCellValue(h.getFieldValueByFieldNameBD("order_no").doubleValue());
            
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xls;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();        
    }
    
    public DTOList EXCEL_PAKREASI() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.cc_code as cabang,a.policy_date as tgl_polis,a.pol_no as no_polis,b.ref1 as nama," +
                "b.refd1 as tgl_lhr,b.refd2 as tgl_cair,b.refd3 as tgl_akhir,b.ref2 as umur,b.ref4 as lama,b.insured_amount," +
                "b.refn6 as premi100,b.refn2 as premi_ko,b.refn9 as comm_ko,a.kreasi_type_desc as jenis_kredit"
                );
        
        sqa.addQuery(" from ins_policy a" +
                " inner join ins_pol_obj b on b.pol_id  = a.pol_id "
                );
        
        sqa.addClause(" a.status in ('POLICY','ENDORSE','RENEWAL') ");
        sqa.addClause(" a.effective_flag='Y' ");
        sqa.addClause(" a.pol_type_id = 21 ");
        
        if (policyDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) >= ?");
            sqa.addPar(policyDateFrom);
        }
        
        if (policyDateTo!=null) {
            sqa.addClause("date_trunc('day',a.policy_date) <= ?");
            sqa.addPar(policyDateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = sqa.getSQL() + " order by a.cc_code,a.pol_no,b.ins_pol_obj_id ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class
                );
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public void EXPORT_PAKREASI()  throws Exception {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        
        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");
        
        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");
        
        for (int i=0;i< list.size() ; i++){
            HashDTO h = (HashDTO) list.get(i);
            
            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("cabang");
            row0.createCell(1).setCellValue("tgl_polis");
            row0.createCell(2).setCellValue("no_polis");
            row0.createCell(3).setCellValue("nama");
            row0.createCell(4).setCellValue("tgl_lhr");
            row0.createCell(5).setCellValue("tgl_cair");
            row0.createCell(6).setCellValue("tgl_akhir");
            row0.createCell(7).setCellValue("umur");
            row0.createCell(8).setCellValue("lama");
            row0.createCell(9).setCellValue("insured_amount");
            row0.createCell(10).setCellValue("premi100");
            row0.createCell(11).setCellValue("premi_ko");
            row0.createCell(12).setCellValue("comm_ko");
            row0.createCell(13).setCellValue("jenis_kredit");
            
            //bikin isi cell
            XSSFRow row = sheet.createRow(i+1);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("cabang"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("tgl_polis"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("no_polis"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("nama"));
            if (h.getFieldValueByFieldNameDT("tgl_lhr")!=null)
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("tgl_lhr"));
            if (h.getFieldValueByFieldNameDT("tgl_cair")!=null)
            row.createCell(5).setCellValue(h.getFieldValueByFieldNameDT("tgl_cair"));
            if (h.getFieldValueByFieldNameDT("tgl_akhir")!=null)
            row.createCell(6).setCellValue(h.getFieldValueByFieldNameDT("tgl_akhir"));
            if (h.getFieldValueByFieldNameST("umur")!=null)
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameST("umur"));
            if (h.getFieldValueByFieldNameST("lama")!=null)
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("lama"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("insured_amount").doubleValue());
            row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("premi100").doubleValue());
            row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("premi_ko").doubleValue());
            row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("comm_ko").doubleValue());
            if (h.getFieldValueByFieldNameST("jenis_kredit")!=null)
            row.createCell(13).setCellValue(h.getFieldValueByFieldNameST("jenis_kredit"));
        }
        
        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition","attachment; filename="+ getStFileName()+".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); SessionManager.getInstance().getResponse().setHeader("Pragma", "token"); ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();
        
        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();        
    }
    
    public DTOList REKAP_KLAIM_CAB() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.category,a.pol_type_id,sum(a.claim_amount_endorse) as hutang_klaim ");
        
        sqa.addQuery( " from claim2 a ");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if (stBranch!=null) {
            sqa.addClause("a.cc_code = ?");
            sqa.addPar(stBranch);
        }
        
        final String sql = "select b.pol_type_id," +
                " sum(getkoas(category='1',hutang_klaim)) as nd_comm1," +
                " sum(getkoas(category='2',hutang_klaim)) as nd_comm2," +
                " sum(getkoas(category='3',hutang_klaim)) as nd_comm3," +
                " sum(getkoas(category='4',hutang_klaim)) as nd_comm4," +
                " sum(hutang_klaim) as premi_total_adisc "+
                " from ins_pol_types b left join ( " +
                 sqa.getSQL() + " group by a.category,a.pol_type_id "+
                " ) a on a.pol_type_id = b.pol_type_id" +
                " group by b.pol_type_id order by b.pol_type_id";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStCostCenterCode()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    
    public DTOList REKAP_KLAIM_JENIS() throws Exception {
        final SQLAssembler sqa = new SQLAssembler(); sqa.setStDS("!DrcDS!");
        
        sqa.addSelect("	a.category,a.cc_code,sum(a.claim_amount_endorse) as hutang_klaim " );
        
        sqa.addQuery( "from claim2 a ");
        
        if (appDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) >= ?");
            sqa.addPar(appDateFrom);
        }
        
        if (appDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_approved_date) <= ?");
            sqa.addPar(appDateTo);
        }
        
        if (claimDateFrom!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) >= ?");
            sqa.addPar(claimDateFrom);
        }
        
        if (claimDateTo!=null) {
            sqa.addClause("date_trunc('day',a.claim_date) <= ?");
            sqa.addPar(claimDateTo);
        }
        
        if (DLADateFrom!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) >= ?");
            sqa.addPar(DLADateFrom);
        }
        
        if (DLADateTo!=null) {
            sqa.addClause("date_trunc('day',a.dla_date) <= ?");
            sqa.addPar(DLADateTo);
        }
        
        if(stPolicyTypeGroupID!=null){
            sqa.addClause("a.ins_policy_type_grp_id = ?");
            sqa.addPar(stPolicyTypeGroupID);
        }
        
        if (stPolicyTypeID!=null) {
            sqa.addClause("a.pol_type_id = ?");
            sqa.addPar(stPolicyTypeID);
        }
        
        final String sql = "select b.cc_code," +
                " sum(getkoas(category='1',hutang_klaim)) as nd_comm1," +
                " sum(getkoas(category='2',hutang_klaim)) as nd_comm2," +
                " sum(getkoas(category='3',hutang_klaim)) as nd_comm3," +
                " sum(getkoas(category='4',hutang_klaim)) as nd_comm4, " +
                " sum(hutang_klaim) as premi_total_adisc "+
                " from gl_cost_center b left join ( "+
                sqa.getSQL() + " group by a.category,a.cc_code "+
                ") a on a.cc_code = b.cc_code " +
                " group by b.cc_code,b.description order by b.cc_code ";
        
        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                InsurancePolicyView.class
                );
        
        HashMap map1 = l.getMapOf(
                new DTOList.KeyBuilder() {
            public String buildKey(DTO x) {
                final InsurancePolicyView pol = (InsurancePolicyView) x;
                
                return pol.getStPolicyTypeID()+"/"+pol.getStBusinessSourceCode();
            }
        }
        );
        
        l.setAttribute("AMOUNT_MAP", map1);
        
        SessionManager.getInstance().getRequest().setAttribute("RPT", l);
        
        return l;
    }
    */    
}
