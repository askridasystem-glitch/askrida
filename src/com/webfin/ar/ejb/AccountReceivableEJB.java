package com.webfin.ar.ejb;

import com.crux.common.model.HashDTO;
import com.webfin.ar.model.*;
import com.webfin.ar.filter.ARReceiptFilter;
import com.webfin.ar.filter.ARInvoiceFilter;
import com.webfin.gl.ejb.GeneralLedger;
import com.webfin.gl.ejb.GeneralLedgerHome;
import com.webfin.gl.util.GLUtil;
import com.webfin.FinCodec;
import com.webfin.insurance.form.PolicyForm;
import com.webfin.insurance.model.InsurancePolicyInwardDetailView;
import com.webfin.insurance.model.InsurancePolicyInwardView;
import com.crux.util.*;
import com.crux.common.model.UserSession;
import com.crux.pool.DTOPool;
import com.crux.common.parameter.Parameter;
import com.crux.login.model.FunctionsView;
import com.crux.util.crypt.Crypt;
import com.crux.web.controller.SessionManager;
import com.webfin.entity.model.EntityView;
import com.webfin.gl.model.*;
import com.webfin.ar.forms.ReceiptForm;
import com.webfin.insurance.model.InsuranceClosingView;
import com.webfin.insurance.model.InsurancePolicyInwardInstallmentView;
import com.webfin.insurance.model.InsurancePolicyItemsView;
import com.webfin.insurance.model.InsurancePolicyObjDefaultView;
import com.webfin.insurance.model.InsurancePolicyObjectView;
import com.webfin.insurance.model.InsurancePolicyView;

import javax.ejb.SessionBean;
import javax.ejb.CreateException;
import javax.ejb.SessionContext;
import javax.ejb.EJBException;
import javax.naming.NamingException;
import java.rmi.RemoteException;
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Date;
import javax.servlet.ServletOutputStream;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 * Created by IntelliJ IDEA.
 * User: Opah
 * Date: Oct 11, 2005
 * Time: 10:09:24 PM
 * To change this template use File | Settings | File Templates.
 */
 
public class AccountReceivableEJB implements SessionBean {
    public SessionContext ctx;
    
    public static void initialize() {
        
        SQLUtil.addTrigger(new TrgInvoice());
        SQLUtil.addTrigger(new TrgReceiptLines());
    }
    
    private GeneralLedger getRemoteGeneralLedger() throws NamingException, ClassNotFoundException, CreateException, RemoteException {
        return ((GeneralLedgerHome) JNDIUtil.getInstance().lookup("GeneralLedgerEJB",GeneralLedgerHome.class.getName()))
        .create();
    }
    
    private final static transient LogManager logger = LogManager.getInstance(AccountReceivableEJB.class);
    
    public AccountReceivableEJB() {
    }
    
    public void ejbCreate() throws CreateException {
    }
    
    public void setSessionContext(SessionContext sessionContext) throws EJBException {
        ctx = sessionContext;
    }
    
    public void ejbRemove() throws EJBException {
    }
    
    public void ejbActivate() throws EJBException {
    }
    
    public void ejbPassivate() throws EJBException {
    }
    
    public String save(ARInvoiceView invoice) throws Exception {
        
        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();
         
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            if (doPost)
                if (invoice.getStGLARAccountID()==null) {
                
                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                
                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
                
                invoice.setStGLARAccountID(acc.getStAccountID());
                }
            
            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW"))); //remark utk bersih2x
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }
            
            S.store(invoice);
            
            final DTOList details = invoice.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);
                
                if (detailView.isNew())
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW"))); //remark utk bersih2x
                
                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                        
                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                        
                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }
                
                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }
            
            S.store(details);
            
            S.release();
            
            if (!invoice.isNew())
                if (doUnPost) {
                getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            
            if (doPost) {
                
                //logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());

                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());

                if(invoice.getPolicy()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicy().getPolicyType().getStBusinessTypeID());

                gl.markNew();
                
                {
                    
                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                    
                    final JournalView jv = gl.copy();
                    
                    //jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    
                    if(invoice.isAR()) jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));
                    
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(ac.getStDescription());
                    
                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);
                    
                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;
                    
                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());
                    
                    /*
                    if (ivd.getStTaxCode()!=null) {
                        final ARTaxView tax = ivd.getTax();
                        
                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);
                        
                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                       
                        jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());
                        
                        jv.markNew();
                        
                        journalSet.add(jv);
                    }*/
               /*else if (ivd.getTrxLine().isTaxed()) {
                  final ARTaxView tax = ivd.getTrxLine().getTax();
                
                  final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                  //amt=BDUtil.sub(amt,taxAmt);
                
                  final JournalView jv = gl.copy();
                  final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                  jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                  jv.setStAccountID(accountID);
                  jv.setStDescription(glApplicator.getPreviewDesc());
                
                  jv.markNew();
                
                  journalSet.add(jv);
                
               }*/
                    
                    
                    
                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
                    
                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());
                    
                    final JournalView jv = gl.copy();

                    //jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));

                    if(invoice.isAR()) jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));
                    else jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));
                    
                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(ac.getStDescription());
                    
                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            return invoice.getStARInvoiceID();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public String saveClaimEndorse(ARInvoiceView invoice) throws Exception {
        
        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            if (doPost)
                if (invoice.getStGLARAccountID()==null) {
                
                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                
                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
                
                invoice.setStGLARAccountID(acc.getStAccountID());
                }
            
            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
                //mark utk besih2x
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }
            
            S.store(invoice);
            
            final DTOList details = invoice.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);
                
                if (detailView.isNew())
                    // mark utk besih2x
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                
                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                        
                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                        
                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }
                
                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }
            
            S.store(details);
            
            if (!invoice.isNew())
                if (doUnPost) {
                getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            
            if (doPost) {
                
                //logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.markNew();
                
                {
                    
                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                    
                    final JournalView jv = gl.copy();
                    //jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(ac.getStDescription());
                    
                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);
                    
                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;
                    
                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());
                    
                    
                    if (ivd.getStTaxCode()!=null) {
                        final ARTaxView tax = ivd.getTax();
                        
                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);
                        
                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                        //jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                        jv.setDbAutoCredit(BDUtil.mul(detailNegator,taxAmt));
                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());
                        jv.setStARTransactionLineID(ivd.getStARTrxLineID());
                        
                        jv.markNew();
                        
                        journalSet.add(jv);
                    }
               /*else if (ivd.getTrxLine().isTaxed()) {
                  final ARTaxView tax = ivd.getTrxLine().getTax();
                
                  final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                  //amt=BDUtil.sub(amt,taxAmt);
                
                  final JournalView jv = gl.copy();
                  final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                  jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                  jv.setStAccountID(accountID);
                  jv.setStDescription(glApplicator.getPreviewDesc());
                
                  jv.markNew();
                
                  journalSet.add(jv);
               }*/
                    
                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
                    
                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());
                    
                    final JournalView jv = gl.copy();
                    //jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                    jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));
                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(ac.getStDescription());
                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                    jv.setStARTransactionLineID(ivd.getStARTrxLineID());

                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            return invoice.getStARInvoiceID();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public String saveInvoiceCoas(ARInvoiceView invoice) throws Exception {
        
        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            if (doPost)
                if (invoice.getStGLARAccountID()==null) {
                
                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                
                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
                
                invoice.setStGLARAccountID(acc.getStAccountID());
                }
            
            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW"))); //mark utk besih2x
            }
            
            S.store(invoice);
            
            final DTOList details = invoice.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);
                
                if (detailView.isNew())
                    //mark utk besih2x
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                
                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                        
                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                        
                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }
                
                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }
            
            S.store(details);
            
            if (!invoice.isNew())
                if (doUnPost) {
                getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            
            if (doPost) {
                
                //logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());

                if(invoice.getPolicy()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicy().getPolicyType().getStBusinessTypeID());

                gl.markNew();
                
                {
                    
                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                    
                    final JournalView jv = gl.copy();
                    
                    //if(invoice.isAR()) jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    //else jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));

                    if(invoice.isAR()) jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));

                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(ac.getStDescription());
                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);
                    
                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;
                    
                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());
                    
                    
                    if (ivd.getStTaxCode()!=null) {
                        final ARTaxView tax = ivd.getTax();
                        
                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);
                        
                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                        
                        jv.setDbAutoCredit(BDUtil.mul(detailNegator,taxAmt));

                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());
                        
                        jv.markNew();
                         
                        journalSet.add(jv);
                    }
               /*else if (ivd.getTrxLine().isTaxed()) {
                  final ARTaxView tax = ivd.getTrxLine().getTax();
                
                  final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                  //amt=BDUtil.sub(amt,taxAmt);
                
                  final JournalView jv = gl.copy();
                  final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                  jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                  jv.setStAccountID(accountID);
                  jv.setStDescription(glApplicator.getPreviewDesc());
                
                  jv.markNew();
                
                  journalSet.add(jv);
               }*/
                    
                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
                    
                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());
                    
                    final JournalView jv = gl.copy();

                    //if(invoice.isAR()) jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));
                    //else jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));

                    if(invoice.isAR()) jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));
                    else jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));
 
                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(ac.getStDescription());
                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            return invoice.getStARInvoiceID();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void saveSuratHutang(ARInvoiceView invoice, DTOList list) throws Exception {
        final SQLUtil S = new SQLUtil();
        try{
            final DTOList list2 = invoice.getList();
            
            final DTOList listLama = invoice.getList2();
            
            final ARInvoiceView viewCopy = (ARInvoiceView) invoice.clone();
            
            //if(invoice.isNew())	invoice.generateNoSuratHutang();
            
            
            //hapus no surat yg lama
            if(invoice.isUpdate()){
                
                viewCopy.setStNoSuratHutang(null);
                viewCopy.setDtSuratHutangPeriodFrom(null);
                viewCopy.setDtSuratHutangPeriodTo(null);
                for (int i = 0; i < listLama.size(); i++) {
                    ARInvoiceView invoiceView = (ARInvoiceView) listLama.get(i);
                    
                    invoiceView.setStNoSuratHutang(viewCopy.getStNoSuratHutang());
                    invoiceView.setDtSuratHutangPeriodFrom(viewCopy.getDtSuratHutangPeriodFrom());
                    invoiceView.setDtSuratHutangPeriodTo(viewCopy.getDtSuratHutangPeriodTo());
                    
                }
                
                listLama.markAllUpdate();
                
                S.store(listLama);
            }
            //finish
            
            //invoice.generateNoSuratHutang();
            //simpan no surat baru
            for (int i = 0; i < list2.size(); i++) {
                ARInvoiceView invoiceView2 = (ARInvoiceView) list2.get(i);
                
                //tes.setDtChangeDate(null);
                invoiceView2.setStNoSuratHutang(invoice.getStNoSuratHutang());
                invoiceView2.setDtSuratHutangPeriodFrom(invoice.getDtSuratHutangPeriodFrom());
                invoiceView2.setDtSuratHutangPeriodTo(invoice.getDtSuratHutangPeriodTo());
                
            }
            
            list2.markAllUpdate();
            
            S.store(list2);
            //finish
            
        }catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
        
        
        
        
        
    }
    
    public DTOList listARReceipts(ARReceiptFilter f) throws Exception {
        return ListUtil.getDTOListFromQuery(
                "select * from ar_receipt",
                ARReceiptView.class
                );
    }
    
    public LOV getLOVReceiptClass() throws Exception {
        return
                ListUtil.getLookUpFromQuery(
                "select rc_id,description from receipt_class"
                );
    }
    
    public LOV getLOVPaymentMethod(String stReceiptClassID) throws Exception {
        return
                ListUtil.getLookUpFromQuery(
                "select pmt_method_id,description from payment_method where rc_id = ?",
                new Object [] {stReceiptClassID}
        );
    }
    
    public ARReceiptView getARReceipt(String rcid) throws Exception {
        
        final ARReceiptView rcp = (ARReceiptView)ListUtil.getDTOListFromQuery(
                "select * from ar_receipt where ar_receipt_id = ?",
                new Object [] {rcid},
                ARReceiptView.class
                ).getDTO();
        
        if (rcp!=null) {
            
            final DTOList combined = ListUtil.getDTOListFromQuery(
                    "   select " +
                    "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                    "   from " +
                    "      ar_receipt_lines a" +
                    "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                    "   where coalesce(a.line_type,'') <> 'TITIP'" +
                    "     and a.receipt_id = ? order by a.ar_rcl_id",
                    new Object [] {rcid},
                    ARReceiptLinesView.class
                    );
            
            rcp.setDetails(new DTOList());
            rcp.setNotes(new DTOList());
            rcp.setGls(new DTOList());
            final HashMap rclMap = new HashMap();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                rclMap.put(rcl.getStReceiptLinesID(), rcl);
                
                if (rcl.isInvoice())
                    rcp.getDetails().add(rcl);
                
                if (rcl.isNote())
                    rcp.getNotes().add(rcl);
                
                if (rcl.isGL())
                    rcp.getGLs().add(rcl);
                
            }
            
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                if (rcl.getStReceiptLinesRefID()!=null) {
                    final ARReceiptLinesView rclRef = (ARReceiptLinesView)rclMap.get(rcl.getStReceiptLinesRefID());
                    
                    if(rclRef!=null)
                        rclRef.getDetails().add(rcl);
                }
            }
            
         /*rcp.setDetails(ListUtil.getDTOListFromQuery(
                 "   select " +
                 "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                 "   from " +
                 "      ar_receipt_lines a" +
                 "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                 "   where " +
                 "      a.receipt_id = ? and a.line_type = ?",
                 new Object [] {rcid,FinCodec.ARReceiptLineType.INVOICE},
                 ARReceiptLinesView.class
         ));
          
         rcp.setNotes(ListUtil.getDTOListFromQuery(
                 "   select " +
                 "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                 "   from " +
                 "      ar_receipt_lines a" +
                 "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                 "   where " +
                 "      a.receipt_id = ? and a.line_type = ?",
                 new Object [] {rcid,FinCodec.ARReceiptLineType.NOTE},
                 ARReceiptLinesView.class
         ));*/
        }
        
        return rcp;
    }
    
    public ARInvoiceView getARInvoice(String invoice) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where ar_invoice_id = ?  and coalesce(cancel_flag,'') <> 'Y'",
                new Object[]{invoice},
                ARInvoiceView.class).getDTO();


        if (iv != null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select * from ar_invoice_details where ar_invoice_id = ? order by ar_invoice_dtl_id",
                    new Object[]{invoice},
                    ARInvoiceDetailView.class));
        }

        return iv;
    }

    public ARInvoiceView getARInvoiceWithoutOrder(String invoice) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where ar_invoice_id = ?  and coalesce(cancel_flag,'') <> 'Y'",
                new Object[]{invoice},
                ARInvoiceView.class).getDTO();


        if (iv != null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select * from ar_invoice_details where ar_invoice_id = ? ",
                    new Object[]{invoice},
                    ARInvoiceDetailView.class));
        }

        return iv;
    }
    
    public ARInvoiceView getARInvoiceByNoSuratHutang(String nosurathutang) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where no_surat_hutang = ? and case when amount > 0 then amount else (amount*-1) end - coalesce(amount_settled,0) > 0",
                new Object [] {nosurathutang},
                ARInvoiceView.class
                ).getDTO();
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select a.* from ar_invoice_details a,ar_invoice b where a.ar_invoice_id = b.ar_invoice_id and b.no_surat_hutang = ? "+
                    " and case when b.amount > 0 then b.amount else (b.amount*-1) end - coalesce(b.amount_settled,0) > 0",
                    new Object [] {nosurathutang},
                    ARInvoiceDetailView.class
                    )
                    
                    );
        }
        
        return iv;
    }
    
    public ARInvoiceView getSuratHutang(String nosurathutang) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where no_surat_hutang = ? and coalesce(cancel_flag,'') <> 'Y' ",
                new Object[]{nosurathutang},
                ARInvoiceView.class).getDTO();

        return iv;
    }
    
    public DTOList searchInvoice(ARInvoiceFilter f) throws Exception {
        return
                ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where invoice_no like ?",
                new Object [] { "%"+f.key+"%"},
                ARInvoiceView.class
                );
    }
    
    public void save(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        
        rcp.validate();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                //if(rcl.isCheck()) rcp.setDbAmountApplied()
                
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            
            ARInvoiceView iv = rcp.getArapinvoice();
            
            
            iv.recalculate();
            
            if (iv.isUnModified()) {
                iv.markUpdate();
                iv.getDetails().markAllUpdate();
            }
            
                /* error double save journal n invoice
         String invoiceID = save(iv);
                 
         rcp.setStARAPInvoiceID(invoiceID);
                 */
            
            S.store(rcp);
            
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    head.setDbAutoCredit(
                            BDUtil.mul(negator,rcp.getDbEnteredAmount())
                            );
                    
                    //head.setDbAutoDebit(
                    //        BDUtil.mul(negator,rcp.getDbEnteredAmount())
                    //);
                    
                    head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method "+paymentMethod.getStDescription());
                    head.setStDescription(paymentDesc);
                    
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        //head.setStDescription("{L-Eng PAYMENT-L}{L-INA PEMBAYARAN-L}: "+rl.getStInvoiceNo());
                        head.setStDescription("PENERIMAAN: "+rl.getStInvoiceNo());
                    } else {
                        //head.setStDescription("{L-Eng PAYMENT-L}{L-INA PEMBAYARAN-L}: "+rcp.getDetails().size()+" INVOICES");
                        head.setStDescription("PEMBAYARAN: "+rcp.getDetails().size()+" INVOICE");
                    }
                    
                    journal.add(head);
                }
                //END
                
            /*if (Tools.compare(rcp.getDbAmountRemain(), BDUtil.zero)>0) {
               final JournalView remains = gl.copy();
             
               remains.setDbAutoDebit(
                       BDUtil.mul(negator,rcp.getDbAmountRemain())
               );
               remains.setStAccountID(rcp.getStExcessAccountID());
               remains.setStDescription(paymentDesc);
               journal.add(remains);
            }*/
                
                //POSTING PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    //if(rl.isCheck()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if (rl.isInvoice()) {
                        line.setDbAutoDebit(amt);
                        
                        //line.setDbAutoCredit(amt);
                        //javax.swing.JOptionPane.showMessageDialog(null,"DbAutoDebit inv= "+amt,"Claim",javax.swing.JOptionPane.CLOSED_OPTION );
                        
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        //line.setStDescription("{L-Eng SETTLEMENT-L}{L-INA PELUNASAN-L}: "+rl.getStInvoiceNo());
                        line.setStDescription("PENERIMAAN: "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        //line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        //line.setStDescription("{L-Eng SETTLEMENT-L}{L-INA PELUNASAN-L}: "+rl.getStInvoiceNo());
                        line.setStDescription("PENERIMAAN: "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        final String desc = xc.getStGLAccount().substring(11);
                        //final String desc2[] = desc.split("|");
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        //line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        
                        line.setStDescription(desc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                    }
                    
                    journal.add(line);
                    //END
                    
                    //POSTING KOMISI
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                if (!rccom.isComission()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                if(!rccom.isCheck()) continue;
                                
                                final JournalView comline = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                
                                
                                if (rl.isInvoice())
                                    comline.setDbAutoDebit(comamt);
                                else
                                    comline.setDbAutoCredit(comamt);
                                
                        /*
                        if (rl.isInvoice())
                                comline.setDbAutoCredit(comamt);
                        else
                                comline.setDbAutoDebit(comamt);
                         */
                                
                                comline.setStAccountIDNotNull(apComAccrualAccID,"Invalid account in AP_COMM_ACRUAL parameters");
                                comline.setStDescription(paymentDesc);
                                //comline.setStDescription("COMISSION FOR "+rl.getStInvoiceNo());
                                //comline.setStDescription("{L-Eng COMISSION-L}{L-INA KOMISI-L}: "+rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline.setStDescription("KOMISI: "+rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                
                                comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                
                                
                                journal.add(comline);
                                
                            }
                        }
                    }//END
                }
                
                
                //POSTING JIKA ADA EXCESSMENT
                {
                    boolean hasXCAmount = !BDUtil.isZero(iv.getDbAmount());
                    
                    if (hasXCAmount) {
                        
                        final JournalView xcline = gl.copy();
                        
                        BigDecimal amt = BDUtil.mul(negator,iv.getDbAmount());
                        
                        xcline.setDbAutoDebit(amt);
                        //xcline.setDbAutoCredit(amt);
                        xcline.setStDescription("Outstanding amount from settlement "+rcp.getStReceiptNo());
                        
                        String accountID = gla.getAccountID(iv.getStGLAccountCode());
                        
                        xcline.setStAccountIDNotNull(accountID,"Invalid account in rcp ar/ap account ar trx line="+iv.getStARTransactionTypeID()+", accountcode="+iv.getStGLAccountCode());
                        
                        journal.add(xcline);
                    }
                }//END
                
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
                
                ARInvoiceView invView = new ARInvoiceView();
                
                /* */
                //BUAT UTANG KOMISI KE PIHAK KETIGA
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            if (!rcc.isComission()) continue;
                            
                            
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(!rcInvoiceDetail.getStRefID0().startsWith("TAX"))
                                continue;
                            
                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            //invoice.setStInvoiceNo("{L-Eng Comission For-L}{L-INA Utang Komisi-L}: " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceNo("Utang Komisi: " + rcl.getStInvoiceNo());
                            
                            //invoice.setDbAmount(pol.getDbAmount());
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            //invoice.setStGLARAccountID(glc.getAccountIDFromAccountNo(poltype.getStGLAR()));
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            
                            invoice.setStInvoiceType(actInvoice.getStInvoiceType());
                            
                            if(rcInvoiceDetail.getStRefID0()!=null)
                                if(rcInvoiceDetail.getStRefID0().startsWith("TAX")) invoice.setStTaxTrue(true);
                            
                            invoice.reverseInvoiceType();
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            //final DTOList insuranceItemLOV = getInsuranceItemLOV(pol.getStCoverTypeCode());
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_type_id = ?",
                                    new Object [] {invoice.getStARTransactionTypeID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count");
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    //ivd.setStDescription(politem.getStDescription());
                                    ivd.setDbEnteredAmount(rcc.getDbEnteredAmount());
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                }
                            }
                                    
                                    invoice.recalculate();
                                    
                                    BigDecimal amountSettled = invoice.getDbAmountSettled();
                                    
                                    if (!rcc.isCheck()){
                                        amountSettled = invoice.getDbAmount();
                                        invoice.setDbAmountSettled(amountSettled);
                                    }
                                    
                                    //invoice.setDbAmountSettled(invoice.getDbAmount());
                                    
                                    
                                    
                                    final DTOList ivdetails2 = invoice.getDetails();
                                    
                                    //invoice.getDetails().add(ivdetails2);
                                    {
                                        
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count");
                                        
                                        for (int k = 0; k < ivdetails2.size(); k++) {
                                            ARInvoiceDetailView ivd = (ARInvoiceDetailView) ivdetails2.get(k);
                                            
                                            //ivd.markUpdate();
                                            
                                            if(!rcc.isCheck()){
                                                ivd.setDbAmountSettled(invoice.getDbAmount());
                                                invoice.setDbAmountSettled(ivd.getDbAmountSettled());
                                            }
                                        }
                                    }
                                    
                                    
                                    invoice.setStPostedFlag("Y");
                                    
                                    invView = invoice;
                                    
                                    save(invoice);
                        }
                        
                    }
                }/* end */
                //END
                
                
                String trxNo="";
                //bayar dan posting otomatis jika bayar net
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    
                    invoiceID = rcl.getStInvoiceID();
                    dbBayarAmount = rcl.getDbAmount();
                    //if(rcl.isCheck()) continue;
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            if (!rcc.isComission()) continue;
                            
                            if(rcc.isCheck()) continue;
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            final DTOList detil = rcc.getDetails();
                            ARReceiptView receipt2 = new ARReceiptView();
                            
                            receipt2.markNew();
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from payment_method where rc_id = ? and cc_code = ?",
                                    new Object [] {rcp.getStReceiptClassID(),actInvoice.getStCostCenterCode()},
                                    ARPaymentMethodView.class
                                    );
                            
                            ARPaymentMethodView artl = (ARPaymentMethodView) artlines.get(0);
                            
                            //receipt.setDetails(detil);
                            
                            receipt2.setStAccountID(artl.getStGLAccountID());
                            receipt2.setDbAmount(rcInvoiceDetail.getDbAmount());
                            receipt2.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            receipt2.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            receipt2.setStPaymentMethodID(rcp.getStPaymentMethodID());
                            receipt2.setStReceiptClassID(rcp.getStReceiptClassID());
                            receipt2.setDbAmountRemain(BDUtil.zero);
                            receipt2.setDbAmountApplied(rcInvoiceDetail.getDbEnteredAmount());
                            receipt2.setStInvoiceType(actInvoice.getStInvoiceType());
                            receipt2.setDtReceiptDate(rcp.getDtReceiptDate());
                            receipt2.setStCurrencyCode(rcp.getStCurrencyCode());
                            receipt2.setDbCurrencyRate(rcp.getDbCurrencyRate());
                            receipt2.setStDescription("Pembayaran: Utang Komisi: " + rcl.getStInvoiceNo());
                            receipt2.setStShortDescription("Pembayaran: Utang Komisi: " + rcl.getStInvoiceNo());
                            receipt2.setDbEnteredAmount(rcInvoiceDetail.getDbEnteredAmount());
                            
                            if(rcInvoiceDetail.getStRefID0()!=null){
                                if(rcInvoiceDetail.getStRefID0().startsWith("TAX")) receipt2.setStARSettlementID("8");
                                else receipt2.setStARSettlementID("2");
                            }else{
                                receipt2.setStARSettlementID("2");
                            }
                            
                            
                            receipt2.setStEntityID(rcInvoiceDetail.getStEntityID());
                            
                            if(j==0){ receipt2.generateReceiptNo();
                            trxNo = receipt2.getStReceiptNo();
                            }
                            
                            receipt2.setStReceiptNo(trxNo);
                            
                            final DTOList ivldetails = new DTOList();
                            
                            receipt2.setDetails(ivldetails);
                            
                            final ARReceiptLinesView ivl= new ARReceiptLinesView();
                            
                            ivldetails.add(ivl);
                            
                            ivl.setStInvoiceID(rcInvoiceDetail.getStARInvoiceID());
                            ivl.setDbAmount(rcInvoiceDetail.getDbAmount());
                            ivl.setStReceiptID(receipt2.getStARReceiptID());
                            ivl.setStInvoiceNo("Utang Komisi: " + actInvoice.getStInvoiceNo());
                            ivl.setDbInvoiceAmount(rcInvoiceDetail.getDbAmount());
                            ivl.setStLineType("COMM");
                            ivl.setStDescription(rcInvoiceDetail.getStDescription());
                            ivl.setDbEnteredAmount(rcInvoiceDetail.getDbEnteredAmount());
                            ivl.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            ivl.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            ivl.markCommit();
                            ivl.markAsInvoice();
                            ivl.setStInvoiceDetailID(rcInvoiceDetail.getStARInvoiceDetailID());
                            
                            ivl.markNew();
                            
                            //receipt2.recalculate();
                            
                            receipt2.setStPostedFlag("Y");
                            
                            saveAutomated(receipt2,dbBayarAmount);
                            
                        }
                    }
                    if(!rcl.isCheck()) updateBalanceAkhir(rcl.getStInvoiceID(),rcl.getDbEnteredAmount());
                    
                }
                /* end */
                //END
                
            }
            if(!invoiceID.equalsIgnoreCase("")) updateBalanceAkhir(invoiceID,dbBayarAmount);
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

    public void save3(ARReceiptView rcp,String trxNO) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        String trxNO2 = trxNO;
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
            final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
            if(Tools.compare(rcp.getDbAmountApplied(),titipan.getDbBalance())>0){
                throw new RuntimeException("Titipan Premi ("+titipan.getDbBalance()+") Tidak Cukup Untuk Pelunasan");
            }
        }
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                //if(rcl.isCheck()) rcp.setDbAmountApplied()
                
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            
            ARInvoiceView iv = rcp.getArapinvoice();
            
            
            iv.recalculate();
            
            if (iv.isUnModified()) {
                iv.markUpdate();
                iv.getDetails().markAllUpdate();
            }
            
                /* error double save journal n invoice
         String invoiceID = save(iv);
                 
         rcp.setStARAPInvoiceID(invoiceID);
                 */
            
            S.store(rcp);
            
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }
            
            if (doPost) {
                
                //update titipan premi
                if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
                    final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
                    //if(Tools.compare(rcp.getDbAmountApplied(),titipan.getDbBalance())>0){
                    //	throw new RuntimeException("Titipan Premi ("+titipan.getDbBalance()+") Tidak Cukup Untuk Pelunasan");
                    //}else{
                    updateTitipanBalance(stArTitipanID,rcp.getDbAmountApplied());
                    saveDetilTitipan(titipan,rcp);
                    //}
                    
                }
                
                //end titipan
                
                //update status pajak
                if(rcp.getStARSettlementID().equalsIgnoreCase("2")){
                    //iv
                    DTOList rcl = rcp.getDetails();
                    ARReceiptLinesView rcl2 = (ARReceiptLinesView)rcl.get(0);
                    ARInvoiceView view = getARInvoice(rcl2.getStInvoiceID());
                    updateTaxStatus(view.getStRefInvoiceID());
                }
                //end
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                
                //javax.swing.JOptionPane.showMessageDialog(null,"ivd = "+iv.getStARInvoiceID(),"Claim",javax.swing.JOptionPane.CLOSED_OPTION );
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
                
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                //javax.swing.JOptionPane.showMessageDialog(null,"negator = "+negator,"Claim",javax.swing.JOptionPane.CLOSED_OPTION );
                
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    head.setDbAutoCredit(
                            BDUtil.mul(negator,rcp.getDbEnteredAmount())
                            );
                    
                    //head.setDbAutoDebit(
                    //        BDUtil.mul(negator,rcp.getDbEnteredAmount())
                    //);
                    
                    head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method "+paymentMethod.getStDescription());
                    head.setStDescription(paymentDesc);
                    
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        //head.setStDescription("{L-Eng PAYMENT-L}{L-INA PEMBAYARAN-L}: "+rl.getStInvoiceNo());
                        head.setStDescription("PENERIMAAN: "+rl.getStInvoiceNo());
                    } else {
                        //head.setStDescription("{L-Eng PAYMENT-L}{L-INA PEMBAYARAN-L}: "+rcp.getDetails().size()+" INVOICES");
                        head.setStDescription("PEMBAYARAN: "+rcp.getDetails().size()+" INVOICE");
                    }
                    
                    journal.add(head);
                }
                //END
                
            /*if (Tools.compare(rcp.getDbAmountRemain(), BDUtil.zero)>0) {
               final JournalView remains = gl.copy();
             
               remains.setDbAutoDebit(
                       BDUtil.mul(negator,rcp.getDbAmountRemain())
               );
               remains.setStAccountID(rcp.getStExcessAccountID());
               remains.setStDescription(paymentDesc);
               journal.add(remains);
            }*/
                
                //POSTING PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if (rl.isInvoice()) {
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        
                        final AccountView ac = glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID());
                        
                        line.setStDescription(ac.getStDescription());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        final AccountView ac = glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID());
                        
                        line.setStDescription(ac.getStDescription());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        final String desc = xc.getStGLAccount().substring(11);
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        
                        line.setStDescription(desc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                    }
                    
                    journal.add(line);
                    //END
                    
                    //POSTING KOMISI
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        boolean centangComm = false;
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                if (!rccom.isComission()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                final JournalView comline = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                
                                String comAccount ="";
                                if(rcInvoiceDetail.isComm() && !rccom.isCheck()){
                                    comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(false));
                                    centangComm = false;
                                }else if(!rcInvoiceDetail.isComm() && !rccom.isCheck()){
                                    if(centangComm==true)	comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(true));
                                    else	comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(false));
                                }else if(rcInvoiceDetail.isComm() && rccom.isCheck()){
                                    comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(false));
                                    centangComm = true;
                                }else if(!rcInvoiceDetail.isComm() && rccom.isCheck()){
                                    comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(true));
                                }
                                
                                if (rl.isInvoice())
                                    if(rcInvoiceDetail.isComm() && rccom.isCheck()) comline.setDbAutoCredit(comamt);
                                    else comline.setDbAutoDebit(comamt);
                                else
                                    //if(!centangComm) comline.setDbAutoDebit(comamt);
                                    comline.setDbAutoCredit(comamt);
                                
                                
                                comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                
                                comline.setStDescription(paymentDesc);
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String tes = "";
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    tes = detil2.getStDescription();
                                }
                                
                                comline.setStDescription("UTANG "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                
                                comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                
                                journal.add(comline);
                                
                                if(!rcInvoiceDetail.isComm() && rccom.isCheck()){
                                    final JournalView comline2 = gl.copy();
                                    
                                    final BigDecimal comamt2 = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                    
                                    
                                    if (rl.isInvoice())
                                        comline2.setDbAutoCredit(comamt2);
                                    else
                                        comline2.setDbAutoDebit(comamt2);
                                    
                                    final String comAccount2 = applicator.getAccountID(Parameter.readString("AR_TAX"));
                                    
                                    comline2.setStAccountIDNotNull(comAccount2,"Invalid account in AP_COMM_ACRUAL parameters ("+rcInvoiceDetail.getStGLAccountCode()+")" );
                                    
                                    comline2.setStDescription(paymentDesc);
                                    comline2.setStDescription("PIUTANG PAJAK:"+rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    comline2.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline2.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comline2);
                                }
                                
                                if(rcInvoiceDetail.isComm() && rccom.isCheck()){
                                    final JournalView comline2 = gl.copy();
                                    
                                    final BigDecimal comamt2 = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                    
                                    
                                    if (rl.isInvoice())
                                        comline2.setDbAutoDebit(comamt2);
                                    else
                                        comline2.setDbAutoCredit(comamt2);
                                    
                                    final String comAccount2 = applicator.getAccountID(Parameter.readString("AR_TAX"));
                                    
                                    comline2.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+rcInvoiceDetail.getStGLAccountCode()+")" );
                                    
                                    comline2.setStDescription(paymentDesc);
                                    comline2.setStDescription("BAYAR:"+rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    comline2.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline2.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comline2);
                                }
                                //if(rccom.isCheck())
                                updateBalanceDetil(rccom.getStInvoiceDetailID(),rccom.getDbEnteredAmount());
                            }
                        }
                    }//END
                }
                
                
                //POSTING JIKA ADA EXCESSMENT
                {
                    boolean hasXCAmount = !BDUtil.isZero(iv.getDbAmount());
                    
                    if (hasXCAmount) {
                        
                        final JournalView xcline = gl.copy();
                        
                        BigDecimal amt = BDUtil.mul(negator,iv.getDbAmount());
                        
                        xcline.setDbAutoDebit(amt);
                        xcline.setStDescription("Outstanding amount from settlement "+rcp.getStReceiptNo());
                        
                        String accountID = gla.getAccountID(iv.getStGLAccountCode());
                        
                        xcline.setStAccountIDNotNull(accountID,"Invalid account in rcp ar/ap account ar trx line="+iv.getStARTransactionTypeID()+", accountcode="+iv.getStGLAccountCode());
                        
                        journal.add(xcline);
                    }
                }//END
                
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
                
                ARInvoiceView invView = new ARInvoiceView();
                
                /* */
                //BUAT UTANG PIUTANG PAJAK&KOMISI KE PIHAK KETIGA
                BigDecimal cumi = null;
                String cek = "";
                boolean centangComm = false;
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if (!rcc.isComission()) continue;
                            
                            if(rcInvoiceDetail.getStRefID0()!=null)
                                if(!rcInvoiceDetail.getStRefID0().startsWith("TAX")&&rcc.isCheck()){
                                cek = "TAX";
                                continue;
                                }
                            
                            
                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            
                            String comAccount ="";
                            if(rcInvoiceDetail.isComm() && !rcc.isCheck()){
                                comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(false));
                                centangComm = false;
                            }else if(!rcInvoiceDetail.isComm() && !rcc.isCheck()){
                                if(centangComm==true)	comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(true));
                                else	comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(false));
                            }else if(rcInvoiceDetail.isComm() && rcc.isCheck()){
                                comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(false));
                                centangComm = true;
                            }else if(!rcInvoiceDetail.isComm() && rcc.isCheck()){
                                comAccount = applicator.getAccountID(rcInvoiceDetail.getStAccountCodeFromARTrxLine(true));
                            }
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("UTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            
                            
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setStInvoiceType(actInvoice.getStInvoiceType());
                            
                            if(rcInvoiceDetail.getStRefID0()!=null)
                                if(rcInvoiceDetail.getStRefID0().startsWith("TAX")) {
                                invoice.setStTaxTrue(true);
                                }
                            invoice.reverseInvoiceType();
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_type_id = ?",
                                    new Object [] {invoice.getStARTransactionTypeID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(rcc.getDbEnteredAmount());
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                }
                            }
                                    
                                    invoice.recalculate();
                                    
                                    
                                    
                                    if(rcInvoiceDetail.getStRefID0()!=null)
                                        if(rcInvoiceDetail.getStRefID0().startsWith("TAX")) invoice.setStGLARAccountID(comAccount);
                                    
                                    
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    
                                    BigDecimal amountSettled = invoice.getDbAmountSettled();
                                    
                                    if (rcc.isCheck()){
                                        amountSettled = invoice.getDbAmount();
                                        
                                    }
                                    
                                    
                                    invView = invoice;
                                    
                                    if(cek.equalsIgnoreCase("TAX"))
                                        invoice.setStRefID3(cek);
                                    
                                    cumi = invoice.getDbAmount();
                                    save(invoice);
                                    
                                    
                                    
                                    
                                    //tambah piutang pajak
                                    
                                    if(rcInvoiceDetail.getStRefID0()!=null)
                                        if(rcInvoiceDetail.getStRefID0().startsWith("TAX")&&rcc.isCheck()) {
                                        final ARInvoiceView invoice2 = new ARInvoiceView();
                                        invoice2.markNew();
                                        
                                        
                                        
                                        ARInvoiceDetailView refIVD2 = rcc.getInvoiceDetail();
                                        
                                        invoice2.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                        invoice2.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                        invoice2.setStRefID2(refIVD.getStRefID0());
                                        invoice2.setStPolicyID(actInvoice.getStPolicyID());
                                        //invoice.setStInvoiceNo("{L-Eng Comission For-L}{L-INA Utang Komisi-L}: " + rcl.getStInvoiceNo());
                                        invoice2.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +": " + rcl.getStInvoiceNo());
                                        
                                        //invoice.setDbAmount(pol.getDbAmount());
                                        invoice2.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                        invoice2.setDtInvoiceDate(rcp.getDtReceiptDate());
                                        invoice2.setDtDueDate(invoice.getDtInvoiceDate());
                                        
                                        invoice2.setDbAmountSettled(null);
                                        invoice2.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                        invoice2.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                        invoice2.setStPostedFlag("N");
                                        invoice2.setStARCustomerID(rcInvoiceDetail.getRef().getStEntityID());
                                        invoice2.setDtMutationDate(invoice.getDtInvoiceDate());
                                        invoice2.setStEntityID(rcInvoiceDetail.getRef().getStEntityID());
                                        //invoice.setStGLARAccountID(glc.getAccountIDFromAccountNo(poltype.getStGLAR()));
                                        invoice2.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                        
                                        invoice2.setStInvoiceType("AR");
                                        
                                        if(rcInvoiceDetail.getStRefID0()!=null)
                                            if(rcInvoiceDetail.getStRefID0().startsWith("TAX")) invoice.setStTaxTrue(true);
                                        
                                        //invoice2.reverseInvoiceType();
                                        
                                        
                                        final DTOList ivdetails3 = new DTOList();
                                        
                                        invoice2.setDetails(ivdetails3);
                                        
                                        //final DTOList insuranceItemLOV = getInsuranceItemLOV(pol.getStCoverTypeCode());
                                        
                                        final DTOList artlines3 = ListUtil.getDTOListFromQuery(
                                                "select * from ar_trx_line where ar_trx_type_id = ?",
                                                new Object [] {invoice.getStARTransactionTypeID()},
                                                ARTransactionLineView.class
                                                );
                                        
                                        {
                                            
                                            if (artlines3.size()!=1) throw new RuntimeException("Invalid transaction lines count");
                                            
                                            for (int k = 0; k < artlines3.size(); k++) {
                                                ARTransactionLineView artl = (ARTransactionLineView) artlines3.get(k);
                                                
                                                final ARInvoiceDetailView ivd2 = new ARInvoiceDetailView();
                                                
                                                ivd2.markNew();
                                                
                                                ivdetails3.add(ivd2);
                                                
                                                ivd2.setStARTrxLineID(artl.getStARTrxLineID());
                                                ivd2.loadSettings();
                                                //ivd.setStDescription(politem.getStDescription());
                                                ivd2.setDbEnteredAmount(rcc.getDbEnteredAmount());
                                                ivd2.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                            }
                                        }
                                                
                                                invoice2.recalculate();
                                                
                                                BigDecimal amountSettled3 = invoice2.getDbAmountSettled();
                                                
                                                if (rcc.isCheck()){
                                                    amountSettled3 = invoice2.getDbAmount();
                                                    //invoice.setDbAmountSettled(amountSettled3);
                                                }
                                                
                                                invoice2.setDbAmount(cumi);
                                                
                                                
                                                invView = invoice2;
                                                
                                                save(invoice2);
                                        }
                                    
                                    //end piutang pajak
                                    
                        }
                        
                    }
                    
                    if(!rcl.isCheck()) updateBalanceAkhir(rcl.getStInvoiceID(),rcl.getDbEnteredAmount());
                    
                }/* end*/
                //END
                if(!invoiceID.equalsIgnoreCase("")) updateBalanceAkhir(invoiceID,dbBayarAmount);
                
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void saveAutomated(ARReceiptView rcp,BigDecimal dbSusah) throws Exception {
        rcp.validate();
        String invID="";
        final SQLUtil S = new SQLUtil();
        
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            //final DTOList gLs = rcp.getGLs();
            
            combined.addAll(rcp.getDetails());
            //combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            //combined.addAll(rcp.getNotes().getDeleted());
            //combined.addAll(gLs);
            //combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
                        /*
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
                         
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
                  updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                //updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
                updateBalanceAkhir(rcl.getStInvoiceID(),rcl.getDbAmount());
                invID = rcl.getStInvoiceID();
                
                //updateBalance()
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);
                }
            }
            
            S.store(details);
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                /*
         ARInvoiceView iv = rcp.getArapinvoice();
                 
         iv.recalculate();
                 
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }*/
            
            S.store(rcp);
            
            updateBalanceAkhir(invID,dbSusah);
            
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    head.setDbAutoCredit(
                            BDUtil.mul(negator,rcp.getDbEnteredAmount())
                            );
               /*
               head.setDbAutoDebit(
                       BDUtil.mul(negator,rcp.getDbEnteredAmount())
               );*/
                    head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method "+paymentMethod.getStDescription());
                    head.setStDescription(paymentDesc);
                    
                    
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        head.setStDescription("PENERIMAAN: "+rl.getStInvoiceNo());
                    } else {
                        head.setStDescription("PEMBAYARAN: "+rcp.getDetails().size()+" INVOICE");
                    }
                    
                    
                    journal.add(head);
                }
                //END
                
                
                
                //POSTING PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    //if(rl.isCheck()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if (rl.isInvoice()) {
                        line.setDbAutoDebit(amt);
                        //line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("PENERIMAAN: "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                    }
                    
                    journal.add(line);
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
                
            }
            
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    private void updateBalance(String stInvoiceID, BigDecimal am,Date receiptdate) throws Exception {
        //logger.logDebug("updateBalance: ["+stInvoiceID+","+am+"]"); mark logger
        
        final SQLUtil S = new SQLUtil();
        
        try {
            PreparedStatement PS = S.setQuery("update ar_invoice set amount_settled=coalesce(amount_settled,0)+?, receipt_date=?, change_who=?, change_date=? where ar_invoice_id=?");
            
            final UserSession us = S.getUserSession();
            
            int n=1;
            
            PS.setBigDecimal(n++,am);
            PS.setObject(n++,receiptdate);
            PS.setString(n++,us.getStUserID());
            PS.setObject(n++,us.getDtTransactionDate());
            PS.setObject(n++,stInvoiceID);
            
            int i = PS.executeUpdate();
            
            logger.logDebug("updateBalance: result="+i);
            
            if (i==0) {
                throw new RuntimeException("Invoice not found : "+stInvoiceID);
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    private void updateBalanceDetil(String stInvoiceDetailID, BigDecimal am) throws Exception {
        logger.logDebug("updateBalance: ["+stInvoiceDetailID+","+am+"]");
        
        final SQLUtil S = new SQLUtil();
        
        try {
            PreparedStatement PS = S.setQuery("update ar_invoice_details set amount_settled=coalesce(amount_settled,0)+?, change_who=?, change_date=? where ar_invoice_dtl_id=?");
            
            final UserSession us = S.getUserSession();
            
            int n=1;
            
            PS.setBigDecimal(n++,am);
            PS.setString(n++,us.getStUserID());
            PS.setObject(n++,us.getDtTransactionDate());
            PS.setObject(n++,stInvoiceDetailID);
            
            int i = PS.executeUpdate();
            
            logger.logDebug("updateBalanceDetil: result="+i);
            
            if (i==0) {
                throw new RuntimeException("Invoice not found : "+stInvoiceDetailID);
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    private void updateBalanceAkhir(String stInvoiceID, BigDecimal am) throws Exception {
        logger.logDebug("updateBalance: ["+stInvoiceID+","+am+"]");
        
        final SQLUtil S = new SQLUtil();
        
        try {
            PreparedStatement PS = S.setQuery("update ar_invoice set amount_settled= ?, change_who=?, change_date=? where ar_invoice_id=?");
            
            final UserSession us = S.getUserSession();
            
            int n=1;
            
            PS.setBigDecimal(n++,am);
            PS.setString(n++,us.getStUserID());
            PS.setObject(n++,us.getDtTransactionDate());
            PS.setObject(n++,stInvoiceID);
            
            int i = PS.executeUpdate();
            
            logger.logDebug("updateBalance: result="+i);
            
            if (i==0) {
                throw new RuntimeException("Invoice not found : "+stInvoiceID);
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    private void updateTitipanBalance(String stArTitipanID, BigDecimal am) throws Exception {
        logger.logDebug("updateTitipanBalance: ["+stArTitipanID+","+am+"]");
        
        final SQLUtil S = new SQLUtil();
        
        try {
            PreparedStatement PS = S.setQuery("update ar_titipan set balance=coalesce(balance,0)-?, change_who=?, change_date=? where ar_titipan_id=?");
            
            final UserSession us = S.getUserSession();
            
            int n=1;
            
            PS.setBigDecimal(n++,am);
            PS.setString(n++,us.getStUserID());
            PS.setObject(n++,us.getDtTransactionDate());
            PS.setObject(n++,stArTitipanID);
            
            int i = PS.executeUpdate();
            
            logger.logDebug("updateTitipanBalance: result="+i);
            
            if (i==0) {
                throw new RuntimeException("Titipan not found : "+stArTitipanID);
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    private void saveDetilTitipan(ARTitipanPremiView titipan, ARReceiptView receipt) throws Exception {
        logger.logDebug("saveDetilTitipan");
        
        final SQLUtil S = new SQLUtil();
        
        try {
            ARTitipanPremiDetailsView titipanDetil = new ARTitipanPremiDetailsView();
            
            titipanDetil.markNew();
            
            
            titipanDetil.setStARTitipanDetailsID(String.valueOf(IDFactory.createNumericID("ARTPD")));
            titipanDetil.setStARTitipanID(titipan.getStARTitipanID());
            titipanDetil.setStAccountNo(titipan.getStAccountNo());
            titipanDetil.setStDescription(titipan.getStDescription());
            titipanDetil.setDbDebit(receipt.getDbAmountApplied());
            titipanDetil.setDbCredit(BDUtil.zero);
            
            S.store(titipanDetil);
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public DTOList listInvoices(ARInvoiceFilter f) throws Exception {
        
        final SQLAssembler sqa = new SQLAssembler();
        
        sqa.addSelect("*");
        sqa.addQuery(" from ar_invoice");
        sqa.addOrder("create_date desc");
        
        if (f.trxID!=null) {
            sqa.addClause("(ar_trx_type_id = ? or ar_trx_type_id in (select ar_trx_type_id from ar_trx_type where parent_trx_id = ?))");
            sqa.addPar(f.trxID);
            sqa.addPar(f.trxID);
        }
        
        sqa.addFilter(f);
        
        final DTOList l = sqa.getList(ARInvoiceView.class);
        
      /*final DTOList l = ListUtil.getDTOListFromQuery(
                    "select * from ar_invoice order by ar_invoice_id",
                    ARInvoiceView.class
            );
       
      return l;*/
        
        return l;
    }
    
    public void updateARTrxMenu() throws Exception {
        final SQLUtil S = new SQLUtil();
        try {
            final DTOList types = ListUtil.getDTOListFromQuery(
                    "select * from ar_trx_type",
                    ARTransactionTypeView.class
                    );
            
            for (int i = 0; i < types.size(); i++) {
                ARTransactionTypeView art = (ARTransactionTypeView) types.get(i);
                
                if (art.getStResourceID()==null) continue;
                
                final FunctionsView func = new FunctionsView();
                
                func.markNew();
                func.setStFunctionID(art.getStResourceID());
                func.setStFunctionName(art.getStDescription());
                func.setStEventID("arinvoicelist.crux&trx="+art.getStARTrxTypeID());
                if(art.getStMenuID()!=null) func.setStEventID(art.getStMenuID()+".crux&trx="+art.getStARTrxTypeID());
                
                final int lv = func.getLevel();
                
                S.store(func);
                
                func.setStEventID(null);
                
                func.setStFunctionName("Create");
                func.setStResourceID("AR_TRX_"+art.getStARTrxTypeID()+"_CREATE");
                func.setFuncIndex(lv,"01");
                S.store(func);
                
                func.setStFunctionName("Edit");
                func.setStResourceID("AR_TRX_"+art.getStARTrxTypeID()+"_EDIT");
                func.setFuncIndex(lv,"02");
                S.store(func);
                
                func.setStFunctionName("View");
                func.setStResourceID("AR_TRX_"+art.getStARTrxTypeID()+"_VIEW");
                func.setFuncIndex(lv,"03");
                S.store(func);
                
                func.setStFunctionName("Approve");
                func.setStResourceID("AR_TRX_"+art.getStARTrxTypeID()+"_APPROVE");
                func.setFuncIndex(lv,"04");
                S.store(func);
                
                if(art.getStARTrxTypeID().equalsIgnoreCase("17")||art.getStARTrxTypeID().equalsIgnoreCase("18")||
                        art.getStARTrxTypeID().equalsIgnoreCase("19")){
                    func.setStFunctionName("Create DLA");
                    func.setStResourceID("AR_TRX_"+art.getStARTrxTypeID()+"_CREATE_DLA");
                    func.setFuncIndex(lv,"05");
                    S.store(func);
                }
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    private EntityView getEntity(String stEntityID) {
        if (stEntityID==null) return null;
        return (EntityView) DTOPool.getInstance().getDTO(EntityView.class, stEntityID);
    }
    
    private ARTitipanPremiView getTitipan(String stArTitipanID) {
        if (stArTitipanID==null) return null;
        return (ARTitipanPremiView) DTOPool.getInstance().getDTO(ARTitipanPremiView.class, stArTitipanID);
    }
    
    public ARTitipanView getARTitipan(String rcid) throws Exception {
        
        final ARTitipanView rcp = (ARTitipanView)ListUtil.getDTOListFromQuery(
                "select * from ar_titipan where ar_titipan_id = ?",
                new Object [] {rcid},
                ARTitipanView.class
                ).getDTO();
        
        if(rcp!=null) {
            rcp.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select * from ar_titipan_details where ar_titipan_id = ?",
                    new Object [] {rcid},
                    ARTitipanPremiDetailsView.class
                    )
                    
                    );
        }
        
          /*
      if (rcp!=null) {
           
         final DTOList combined = ListUtil.getDTOListFromQuery(
                          "   select " +
                          "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                          "   from " +
                          "      ar_receipt_lines a" +
                          "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                          "   where " +
                          "      a.receipt_id = ?",
                          new Object [] {rcid},
                          ARReceiptLinesView.class
                  );
           
         rcp.setDetails(new DTOList());
         rcp.setNotes(new DTOList());
         rcp.setGls(new DTOList());
         final HashMap rclMap = new HashMap();
           
         for (int i = 0; i < combined.size(); i++) {
            ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
           
            rclMap.put(rcl.getStReceiptLinesID(), rcl);
           
            if (rcl.isInvoice())
               rcp.getDetails().add(rcl);
           
            if (rcl.isNote())
               rcp.getNotes().add(rcl);
           
            if (rcl.isGL())
               rcp.getGLs().add(rcl);
         }
           
         for (int i = 0; i < combined.size(); i++) {
            ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
           
            if (rcl.getStReceiptLinesRefID()!=null) {
               final ARReceiptLinesView rclRef = (ARReceiptLinesView)rclMap.get(rcl.getStReceiptLinesRefID());
           
               rclRef.getDetails().add(rcl);
            }
         }*/
        
         /*rcp.setDetails(ListUtil.getDTOListFromQuery(
                 "   select " +
                 "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                 "   from " +
                 "      ar_receipt_lines a" +
                 "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                 "   where " +
                 "      a.receipt_id = ? and a.line_type = ?",
                 new Object [] {rcid,FinCodec.ARReceiptLineType.INVOICE},
                 ARReceiptLinesView.class
         ));
          
         rcp.setNotes(ListUtil.getDTOListFromQuery(
                 "   select " +
                 "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                 "   from " +
                 "      ar_receipt_lines a" +
                 "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                 "   where " +
                 "      a.receipt_id = ? and a.line_type = ?",
                 new Object [] {rcid,FinCodec.ARReceiptLineType.NOTE},
                 ARReceiptLinesView.class
         ));*/
        
        
        return rcp;
    }
    
    public ARInvoiceDetailView getARInvoiceDetail(String stARInvoiceDetailID) {
        return (ARInvoiceDetailView) DTOPool.getInstance().getDTO(ARInvoiceDetailView.class, stARInvoiceDetailID);
    }
    
    public ARInvoiceDetailView getARInvoiceDetailParent(String stARInvoiceDetailID) {
        return (ARInvoiceDetailView) DTOPool.getInstance().getDTO(ARInvoiceDetailView.class, stARInvoiceDetailID);
    }
    
    private void updateTaxStatus(String stRefInvoiceID) throws Exception {
        logger.logDebug("updateTaxStatus: ["+stRefInvoiceID+"]");
        
        final SQLUtil S = new SQLUtil();
        
        try {
            PreparedStatement PS = S.setQuery("update ar_invoice set refid3='TAX', change_who=?, change_date=? where ref_invoice_id=? and refid2 like 'TAX%'");
            
            final UserSession us = S.getUserSession();
            
            int n=1;
            
            PS.setString(n++,us.getStUserID());
            PS.setObject(n++,us.getDtTransactionDate());
            PS.setObject(n++,stRefInvoiceID);
            
            int i = PS.executeUpdate();
            
            logger.logDebug("updateTitipanBalance: result="+i);
            
            if (i==0) {
                throw new RuntimeException("Invoice not found : "+stRefInvoiceID);
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void save(ARTitipanView titipan,ARTitipanPremiDetailsView titipanDetil) throws Exception{
        final SQLUtil S = new SQLUtil();
        try{
            if(titipan.isNew())
                titipan.setStARTitipanID(String.valueOf(IDFactory.createNumericID("ARTP")));
            
            S.store(titipan);
            
            //final DTOList detil = titipan.getDetails();
            //ARTitipanPremiDetailsView titipanDetil2 = (ARTitipanPremiDetailsView) detil.get(0);
            
            if(titipanDetil.isNew()){
                titipanDetil.setStARTitipanDetailsID(String.valueOf(IDFactory.createNumericID("ARTPD")));
                titipanDetil.setStARTitipanID(titipan.getStARTitipanID());
            }
            
            
            titipanDetil.setStAccountNo(titipan.getStAccountNo());
            titipanDetil.setStDescription(titipan.getStDescription());
            titipanDetil.setDbDebit(BDUtil.zero);
            titipanDetil.setDbCredit(titipan.getDbBalance());
            
            S.store(titipanDetil);
            
            //Posting
            if (true) {
                
                logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                //lawan nya
                
                final JournalView gl2 = new JournalView();
                gl2.setStTransactionNo(titipan.getStTransactionNo());
                gl2.setDtApplyDate(titipan.getDtApplyDate());
                gl2.setStJournalCode(null);
                gl2.setStCurrencyCode(titipan.getStCurrencyCode());
                gl2.setDbCurrencyRate(titipan.getDbCurrencyRate());
                gl2.setDtApplyDate(titipan.getDtApplyDate());
                
                gl2.setStRefTRX(titipan.getStARTitipanID());
                
                gl2.markNew();
                
                {
                    
                    
                    final JournalView jv2 = gl2.copy();
                    jv2.setDbAutoDebit(titipan.getDbBalance());//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    jv2.setStAccountID(titipan.getStAccountIDVs());
                    jv2.setStDescription(titipan.getStDescriptionVs());
                    
                    jv2.markNew();
                    
                    journalSet.add(jv2);
                }
                //end lawan
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(titipan.getStTransactionNo());
                gl.setDtApplyDate(titipan.getDtApplyDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(titipan.getStCurrencyCode());
                gl.setDbCurrencyRate(titipan.getDbCurrencyRate());
                gl.setDtApplyDate(titipan.getDtApplyDate());
                
                gl.setStRefTRX(titipan.getStARTitipanID());
                
                gl.markNew();
                
                {
                    
                    
                    final JournalView jv = gl.copy();
                    jv.setDbAutoCredit(titipan.getDbBalance());//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    jv.setStAccountID(titipan.getStAccountID());
                    jv.setStDescription(titipan.getStDescription());
                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            //end
        }catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
    }
    
    public DTOList getARInvoiceByAttrPolId(String invoice) throws Exception {
      /*final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                    "select * from ar_invoice where attr_pol_id = ?",
                    new Object [] {invoice},
                     ARInvoiceView.class
            ).getDTO();*/
        
      /*
      if(iv!=null) {
         iv.setDetails(
                 ListUtil.getDTOListFromQuery(
                         "select * from ar_invoice_details where ar_invoice_id = ?",
                         new Object [] {invoice},
                         ARInvoiceDetailView.class
                 )
       
         );
      }*/
        
        //return iv;
        
        final SQLAssembler sqa = new SQLAssembler();
        
        sqa.addSelect("*");
        sqa.addQuery(" from ar_invoice");
        sqa.addClause(" attr_pol_id = ?");
        sqa.addPar(invoice);
        
        final DTOList l = sqa.getList(ARInvoiceView.class);
        
        return l;
    }
    
    public DTOList getReceiptByARInvoiceId(String invoice) throws Exception {
      /*final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                    "select * from ar_invoice where attr_pol_id = ?",
                    new Object [] {invoice},
                     ARInvoiceView.class
            ).getDTO();*/
        
      /*
      if(iv!=null) {
         iv.setDetails(
                 ListUtil.getDTOListFromQuery(
                         "select * from ar_invoice_details where ar_invoice_id = ?",
                         new Object [] {invoice},
                         ARInvoiceDetailView.class
                 )
       
         );
      }*/
        
        //return iv;
        
        final SQLAssembler sqa = new SQLAssembler();
        
        sqa.addSelect("*");
        sqa.addQuery(" from ar_receipt");
        sqa.addClause(" ar_ap_invoice_id = ?");
        sqa.addPar(invoice);
        
        final DTOList l = sqa.getList(ARReceiptView.class);
        
        return l;
    }
    
    public String saveSaldoAwal(ARInvoiceView invoice) throws Exception {
        
        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            if (doPost)
                if (invoice.getStGLARAccountID()==null) {
                
                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                
                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
                
                invoice.setStGLARAccountID(acc.getStAccountID());
                }
            
            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }
            
            S.store(invoice);
            
            final DTOList details = invoice.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);
                
                if (detailView.isNew())
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                
                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                        
                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                        
                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }
                
                detailView.setStARInvoiceID(invoice.getStARInvoiceID());

            }
            
            S.store2(details);
            
            S.release();
            
            if (!invoice.isNew())
                if (doUnPost) {
                //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            
            if(doPost)
                if(invoice.getStClaimStatus()!=null)
                    if(invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA))
                        doPost = false;
                
            if (doPost) {
                
                logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.markNew();
                
                        
            {
                         
               final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                         
               final JournalView jv = gl.copy();
               jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
               jv.setStAccountID(invoice.getStGLARAccountID());
               jv.setStDescription(ac.getStDescription());
                         
               jv.markNew();
                         
               journalSet.add(jv);
            }
                
                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);
                    
                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;
                    
                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());
                    
                    
                    if (ivd.getStTaxCode()!=null) {
                        final ARTaxView tax = ivd.getTax();
                        
                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);
                        
                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                        jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());
                        
                        jv.markNew();
                        
                        journalSet.add(jv);
                    }
               /*else if (ivd.getTrxLine().isTaxed()) {
                  final ARTaxView tax = ivd.getTrxLine().getTax();
                
                  final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                  //amt=BDUtil.sub(amt,taxAmt);
                
                  final JournalView jv = gl.copy();
                  final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                  jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                  jv.setStAccountID(accountID);
                  jv.setStDescription(glApplicator.getPreviewDesc());
                
                  jv.markNew();
                
                  journalSet.add(jv);
                
               }*/
                    
                    
                    
                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
                    
                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());
                    
                    final JournalView jv = gl.copy();
                    jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(ac.getStDescription());
                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            return invoice.getStARInvoiceID();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void saveReceiptTitipan(ARReceiptView rcp, ReceiptForm form) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
            final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
            if(Tools.compare(rcp.getDbAmountApplied(),titipan.getDbBalance())>0){
                throw new RuntimeException("Titipan Premi ("+titipan.getDbBalance()+") Tidak Cukup Untuk Pelunasan");
            }
        }
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    final DTOList objects = rcl.getObjects();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    S.store(objects);
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            S.store(rcp);
            
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }
            
            if (doPost) {
                
                //update titipan premi
                if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
                    final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
                    //if(Tools.compare(rcp.getDbAmountApplied(),titipan.getDbBalance())>0){
                    //	throw new RuntimeException("Titipan Premi ("+titipan.getDbBalance()+") Tidak Cukup Untuk Pelunasan");
                    //}else{
                    updateTitipanBalance(stArTitipanID,rcp.getDbAmountApplied());
                    saveDetilTitipan(titipan,rcp);
                    //}
                    
                }
                
                //end titipan
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
                
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);
                    
                    
                    final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());
                    
               /*
               head.setDbAutoDebit(
                       BDUtil.mul(negator,invoice.getDbAmount())
               );*/
                    
                    head.setDbAutoCredit(
                            BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                    
                    //head.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount())==null?rcp.getStAccountID():applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                    head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                    
                    head.setStDescription(paymentDesc);
                    
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        //head.setStDescription("{L-Eng PAYMENT-L}{L-INA PEMBAYARAN-L}: "+rl.getStInvoiceNo());
                        head.setStDescription("PIUTANG "+rl.getStInvoiceNo());
                        if(rl.getStInvoiceNo().startsWith("PIUTANG")||rl.getStInvoiceNo().startsWith("HUTANG"))
                            head.setStDescription(rl.getStInvoiceNo());
                    } else {
                        //head.setStDescription("{L-Eng PAYMENT-L}{L-INA PEMBAYARAN-L}: "+rcp.getDetails().size()+" INVOICES");
                        head.setStDescription("PEMBAYARAN: "+rcp.getDetails().size()+" INVOICE");
                  /*head.setDbAutoDebit(
                       BDUtil.mul(negator,rcp.getDbEnteredAmount())
                        );*/
                    }
                    
                    journal.add(head);
                    
                    
                }
                //END
                
                //POSTING PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    boolean komisiLunas=true;
                    //POSTING LINE / Invoice detail
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        boolean centangComm = false;
                        boolean premiGrossLunas=true;
                        
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (rccom.isDelete()) continue;
                                
                                if(rcInvoiceDetail.isPolicyCost2()||rcInvoiceDetail.isDiscount2()||
                                        rcInvoiceDetail.isStampDuty2()||rcInvoiceDetail.isCommission2()||
                                        rccom.isComission()) {
                                    
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                    
                                    final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        comAccount = rcp.getStAccountID();
                                    }
                                    
                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        final ARInvoiceView inv2 = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                        comamt = inv2.getDbAmount();
                                    }
                                    
                                    if(rcInvoiceDetail.isNegative()){
                                        if(rcInvoiceDetail.isTax())	comline.setDbAutoDebit(taxamt);
                                        else	comline.setDbAutoDebit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoCredit(comamt);
                                    }
                                    
                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    
                                    //comline.setStDescription(paymentDesc);
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        tes = detil2.getStDescription();
                                    }
                                    
                                    if(rcInvoiceDetail.isGrossPremium()){
                                        if(BDUtil.biggerThanZero(rccom.getDbOutstandingAmountAct())){
                                            premiGrossLunas = false;
                                        }
                                    }
                                    
                                    
                                    
                                    boolean lunas = BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                    
                                    //if(!rcInvoiceDetail.isPremiGross2())
                                    comline.setStDescription("TERIMA "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription(accountDescPremiG);
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comline);
                                }
                                
                                //boolean hasExcess = !BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                boolean hasExcess = !BDUtil.isZero(rccom.getDbOutstandingAmountAct());
                                
                                if(rccom.isComission()&&!rcInvoiceDetail.isTax()){
                                    if(BDUtil.biggerThanZero(rccom.getDbOutstandingAmountAct())){
                                        komisiLunas = false;
                                    }
                                }
                                
                                if(hasExcess){
                                    if(rcInvoiceDetail.isTax()) continue;
                                    
                                    //if(BDUtil.lesserThanZero(rccom.getDbOutstandingAmountAct()))
                                    if(BDUtil.isZero(BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1))))
                                        continue;
                                    
                                    if(BDUtil.lesserThanZero(rccom.getDbOutstandingAmountAct())&&
                                            BDUtil.biggerThan(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                        continue;
                                    
                                    
                                    BigDecimal selisih = BDUtil.biggerThanZero(rccom.getDbOutstandingAmountAct())?rccom.getDbOutstandingAmountAct():BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                    
                                    BigDecimal selisihReal = rccom.getDbOutstandingAmountAct();
                                    
                                    final JournalView comlinenew = gl.copy();
                                    
                                    final BigDecimal comamt2 = selisih;
                                    
                                    final BigDecimal comamtLebih = selisih;
                                    
                                    String comAccount2 ="";
                                    
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount2 = rcp.getStAccountID();
                                    }else{
                                        comAccount2 = rcp.getStAccountID();
                                    }
                                    
                                    if(rcInvoiceDetail.isComission()||rcInvoiceDetail.isDiscount()){
                                        if(BDUtil.lesserThanZero(selisihReal))
                                            comlinenew.setDbAutoDebit(comamt2);
                                        else
                                            comlinenew.setDbAutoCredit(comamt2);
                                    }else{
                                        if(BDUtil.lesserThanZero(selisihReal))
                                            comlinenew.setDbAutoCredit(comamtLebih);
                                        else
                                            comlinenew.setDbAutoDebit(comamt2);
                                    }
                                    
                                    //comlinenew.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    final ARInvoiceView invoice = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                    comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    
                                    comlinenew.setStDescription(paymentDesc);
                                    
                                    ARInvoiceDetailView detil4 = new ARInvoiceDetailView();
                                    
                                    detil4 = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes2 = "";
                                    ARInvoiceDetailView detil3 = new ARInvoiceDetailView();
                                    if(detil2.getStRefInvoiceDetailID()!=null){
                                        detil3 = getARInvoiceDetailParent(detil4.getStRefInvoiceDetailID());
                                        tes2 = detil4.getStDescription();
                                    }
                                    
                                    comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rccom.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(selisihReal)){
                                        comlinenew.setStDescription("HUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()),"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    }
                                    
                                    if(BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("LEBIH BAYAR "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    
                                    
                                    comlinenew.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlinenew.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comlinenew);
                                    
                                }
                            }
                        }
                    }//END
                    
                    //jurnal pajak
                    
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        boolean centangComm = false;
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                
                                String comAccount ="";
                                
                                if(rcInvoiceDetail.isComm()){
                                    comAccount = rcp.getStAccountID();
                                }else{
                                    comAccount = rcp.getStAccountID();
                                }
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                    //comline2.setDbAutoCredit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                    //comline2.setDbAutoDebit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                
                                String tes = "";
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    tes = detil2.getStDescription();
                                }
                                
                                
                                
                                comline1.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()),"Invalid or empty account in payment method ");
                                comline1.setStDescription(paymentDesc);
                                
                                comline1.setStDescription("HUTANG "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                
                                if(!komisiLunas){
                                    comline1.setStDescription("BEBAN "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comline1.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()),"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                }
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                
                                journal.add(comline1);
                                
                            }
                        }
                    }
                    //end jurnal pajak
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntryTes(journal);
                
                /* */
                //BUAT UTANG PIUTANG KE PIHAK KETIGA
                
                BigDecimal cumi = null;
                String cek = "";
                boolean centangComm = false;
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail.isTax()) continue;
                            
                            
                            boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                            
                            if(hasExcess){
                                //BigDecimal selisih = BDUtil.biggerThanZero(BDUtil.sub(rcc.getDbOutstandingAmountAct(),rcc.getDbAmount()))?BDUtil.sub(rcc.getDbOutstandingAmountAct(),rcc.getDbAmount()):BDUtil.sub(rcc.getDbAmount(),rcc.getDbOutstandingAmountAct());
                                
                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                                
                                if(BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())&&
                                        BDUtil.biggerThan(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                    continue;
                                
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                                
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                                
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                                
                                
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                                
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                                
                                invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                                
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                                
                                invoice.setDbAmount(selisih);
                                invoice.setDbEnteredAmount(selisih);
                                
                                
                                final DTOList ivdetails = new DTOList();
                                
                                invoice.setDetails(ivdetails);
                                
                                
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                
                                {
                                    
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                    
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                        
                                        final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                        
                                        ivd.markNew();
                                        
                                        ivdetails.add(ivd);
                                        
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        ivd.setDbEnteredAmount(selisih);
                                        ivd.setDbAmount(selisih);
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    }
                                }
                                        
                                        //invoice.recalculate();
                                        
                                        final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                        invoice.setStRefInvoiceID(refid);
                                        save(invoice);
                            }
                            
                        }
                        
                    }
                    
                    
                }
                
                //buat hutang pajak ke depkeu
                
                //BigDecimal cumi = null;
                //String cek = "";
                //boolean centangComm = false;
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(!rcInvoiceDetail.isTax()) continue;
                            
                            final BigDecimal comamt = rcc.getDbEnteredAmount();
                            
                            //boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                            
                            //if(hasExcess){
                            //BigDecimal selisih = BDUtil.biggerThanZero(BDUtil.sub(rcc.getDbOutstandingAmountAct(),rcc.getDbAmount()))?BDUtil.sub(rcc.getDbOutstandingAmountAct(),rcc.getDbAmount()):BDUtil.sub(rcc.getDbAmount(),rcc.getDbOutstandingAmountAct());
                            
                            //BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                            
                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }
                            
                            
                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                            
                            //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                            //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                            
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setDbAmount(comamt);
                            invoice.setDbEnteredAmount(comamt);
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(comamt);
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                }
                            }
                                    
                                    invoice.recalculate2();
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    //}
                                    
                        }
                        
                    }
                    
                    
                }
                
                //end hutang pajak
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void saveTitipanPremi(ARTitipanPremiView2 titipan) throws Exception {
        
        //if (Tools.isYes(invoice.getStPostedFlag()))
        //invoice.validate();
        
        //final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        //final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        //glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            //final boolean postFlagChanged = invoice.isChanged("posted_flag");
            //final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            //final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            //if (doPost)
            //if (invoice.getStGLARAccountID()==null) {
            
            //final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
            
            //if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
            
            //invoice.setStGLARAccountID(acc.getStAccountID());
            //}
            
            if (titipan.isNew()) {
                titipan.setStARTitipanPremiID(String.valueOf(IDFactory.createNumericID("ARTITIP")));
            }
            
            S.store(titipan);
            
            final DTOList details = titipan.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                ARTitipanPremiDetailView detailView = (ARTitipanPremiDetailView) details.get(i);
                
                if (detailView.isNew())
                    detailView.setStARTitipanPremiDetailID(String.valueOf(IDFactory.createNumericID("ARTITIPD")));
                
                        /*
            if (doPost)
               if (detailView.isModified()) {
                  if (detailView.getStGLAccountID()==null) {
                     final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                         
                     if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                         
                     detailView.setStGLAccountID(acc.getStAccountID());
                  }
               }*/
                detailView.setStARTitipanPremiID(titipan.getStARTitipanPremiID());
            }
            
            S.store(details);
            
            S.release();
            
                /*
         if (!invoice.isNew())
            if (doUnPost) {
               getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
            }
                 
         if (doPost) {
                 
            logger.logDebug("save: processing posting to GL");
                 
            final DTOList journalSet = new DTOList();
                 
            final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                 
            final JournalView gl = new JournalView();
            gl.setStTransactionNo(invoice.getStInvoiceNo());
            gl.setDtApplyDate(invoice.getDtInvoiceDate());
            gl.setStJournalCode(null);
            gl.setStCurrencyCode(invoice.getStCurrencyCode());
            gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
            gl.setDtApplyDate(invoice.getDtInvoiceDate());
            gl.setStTransactionNo(invoice.getStInvoiceNo());
            gl.setStRefTRX(invoice.getStRefTRX());
            gl.setStRefTRX("INV");
            gl.setStRefTrxNo(invoice.getStARInvoiceID());
            gl.setStRefEntID(invoice.getStEntityID());
            gl.markNew();
                 
            {
                 
               final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                 
               final JournalView jv = gl.copy();
               jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
               jv.setStAccountID(invoice.getStGLARAccountID());
               jv.setStDescription(ac.getStDescription());
                 
               jv.markNew();
                 
               journalSet.add(jv);
            }
                 
            for (int i = 0; i < details.size(); i++) {
               ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);
                 
               if (ARInvoiceView.exludeComission)
                  if (ivd.isComission()) continue;
                 
               BigDecimal amt = ivd.getDbAmount();
               final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());
                 
                 
               if (ivd.getStTaxCode()!=null) {
                  final ARTaxView tax = ivd.getTax();
                 
                  final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                 
                  final JournalView jv = gl.copy();
                  final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                  jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                  jv.setStAccountID(accountID);
                  jv.setStDescription(glApplicator.getPreviewDesc());
                 
                  jv.markNew();
                 
                  journalSet.add(jv);
               }
                 
                 
               final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
                 
               if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());
                 
               final JournalView jv = gl.copy();
               jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
               jv.setStAccountID(ac.getStAccountID());
               jv.setStDescription(ac.getStDescription());
                 
               jv.markNew();
                 
               journalSet.add(jv);
            }
                 
            for (int i = 0; i < journalSet.size(); i++) {
               JournalView j = (JournalView) journalSet.get(i);
                 
               j.loadAccountNo();
               j.setStApproved("Y");
               j.reCalculate();
            }
                 
            getRemoteGeneralLedger().saveJournalEntry(journalSet);
         }*/
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public ARInvoiceView getARInvoiceByClaimNo(String claimno) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where claim_no = ?",
                new Object [] {claimno},
                ARInvoiceView.class
                ).getDTO();
        
        return iv;
    }
    
    public void savePembayaranReasuransi(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            if(rcp.isNew())
                rcp.generateReceiptNo();
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            if (doUnPost) {
                //getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }
            
            if (doPost) {
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                //applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                //applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                
                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                
                // AR DR vs bank CR
                
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                if(rcp.getSettlement().isAP()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);
                        
                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("Byr "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        } else {
                            head.setStDescription("Byr "+rcp.getDetails().size()+" INVOICES");
                        }
                       
                        journal.add(head);
                    }
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                        
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("Byr Htg. R/A Prm. " + rl.getInvoice().getStNoSuratHutang());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            journal.add(head);
                        }
                    }
                    
                    if (rl.isInvoice()) {
                        
                        final DTOList comissionList = rl.getDetails();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
                            
                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            //jika pembayaran reas treaty
                            if(!rcInvoiceDetail.isPremiGrossReas() && !rcInvoiceDetail.isClaimReas())
                                    continue;

                            //jurnal lawan nya
                            if(true){

                                final JournalView lineDetail = gl.copy();

                                BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                if(rcInvoiceDetail.isPremiGrossReas() || rcInvoiceDetail.isClaimReas()){
                                    lineDetail.setDbAutoDebit(amt2);
                                }else{
                                    lineDetail.setDbAutoCredit(amt2);
                                }

                                final ARTransactionLineView tl = getTrxLine("113");

                                String accode = tl.getStGLAccount();

                                applicator.setCode('B',"00");
                                applicator.setCode('C',rl.getInvoice().getStReferenceC0());
                                applicator.setCode('Y',rl.getInvoice().getEntity().getStGLCode());
                                applicator.setCode('X',rl.getInvoice().getPolicyTypeGLCode());

                                applicator.setDesc("C",rl.getInvoice().getStReferenceC1());
                                applicator.setDesc("D",rl.getInvoice().getStNoSuratHutang());
                                applicator.setDesc("M","");
                                applicator.setDesc("T","");
                                applicator.setDesc("A","");

                                final AccountView ac = glc.getAccountByAccountID(applicator.getAccountID(accode));

                                final JournalView jv1 = gl.copy();

                                applicator.getAccountID(accode);

                                if(ac!=null){
                                    lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                }else{
                                    lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    lineDetail.setStDescription("Byr " + glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID()).getStDescription());
                                }

                                //lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                //lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                journal.add(lineDetail);
                            }
                            
                            
                        }
                        
                        
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        
                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        
                     
                    }

                }
                
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public ARInvoiceDetailView getRefARInvoiceDetail(String invoice) throws Exception {
        final ARInvoiceDetailView iv = (ARInvoiceDetailView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice_details where ref_invoice_dtl_id = ?",
                new Object [] {invoice},
                ARInvoiceDetailView.class
                ).getDTO();
        
        return iv;
    }
    
    public void savePembayaranKomisi(ARReceiptView rcp) throws Exception {
        rcp.validate();

        boolean jurnalOnly = false;

        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());
        
        try {
            if (rcp.isNew()){
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }
            
            if(rcp.isNew()){
                rcp.generateReceiptNo();
                    
                rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            }
            
            if(!rcp.isNew())
                if(rcp.getStReceiptNo2()==null)
                    rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                    rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStRootID());

                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclsub.isCheck())
                            if(rclsub.getInvoiceDetail()!=null)
                                rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);
                //}
                
                //if (rcl.getListTitipan().size()>0) {
                    final DTOList subTitipan = rcl.getListTitipan();
                    
                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);
                        
                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo2());
                        
                        if(rclTitipan.isCheck())
                            if(rclTitipan.getInvoiceDetail()!=null)
                                rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclTitipan.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclTitipan.isNew())
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subTitipan);//simpan ke receipt lines
                //}
            }
            
            S.store(rcp.getNotes());
            
            S.store(gLs);
            
            S.store(details);

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            //final boolean doPost = Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                 /*
         ARInvoiceView iv = rcp.getArapinvoice();
                  
         iv.recalculate();
                  
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }
                  
         String invoiceID = save(iv);
                  
         rcp.setStARAPInvoiceID(invoiceID);*/
            
            rcp.setStARAPInvoiceID(stARInvoiceID);

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
                 rcp.setStARAPInvoiceID(null);
            }
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                String entityGLCode = "00000";

                if(rcp.getStEntityID()!=null)
                    entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);

                if(rcp.getEntity()!=null)
                    applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                //applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                //applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                                
                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                // AR DR vs bank CR
                
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                if(rcp.getSettlement().isAR()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.setStSummaryFlag("Y");
                gl.markNew();
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                        String ccCodepolis = rl.getPolicy().getStCostCenterCode();

                        //Get Akun header
                        String accountHeaderID = "";

                        if(ccCodepolis.equalsIgnoreCase("80")){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");
                            applicator.setCode('B', "80");

                            accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }else{
                            accountHeaderID = rcp.getStAccountID();
                        }

                        head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );

                        head.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                        if (rcp.getDetails().size()==1) {
                            
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                            
                            if(rl.getInvoice()!=null)
                                head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                        } else {
                            head.setStDescription("PEMBAYARAN "+rcp.getDetails().size()+" INVOICES");
                        }

                        journal.add(head);
                    } 
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if(rl.getInvoice()!=null){
                        applicator.setCode('X', rl.getInvoice().getPolicyType().getStGLCode());
                        applicator.setDesc("X", rl.getInvoice().getPolicyType().getStShortDescription());
                    }
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    //final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    boolean pajakCentang = true;

                    String ccCodepolis = rl.getPolicy().getStCostCenterCode();

                    //Get Akun header
                    String accountHeaderID = "";

                    if(ccCodepolis.equalsIgnoreCase("80")){
                        applicator.setCode('Y', "00001");
                        applicator.setCode('G', "00001");
                        applicator.setCode('B', "80");

                        accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                    }else{
                        accountHeaderID = rcp.getStAccountID();
                    }

                    if(moreThan1Policy){
                         if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );
                            head.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());

                            head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                            head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());
                            
                            if(rl.getInvoice()!=null)
                                head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(head);
                        }
                    }
                    
                    if (rl.isInvoice()) {
                        
                        final DTOList comissionList = rl.getDetails();
                        BigDecimal komisiBruto = null;

                        final JournalView lineDetail = gl.copy();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
                            
                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            if(ccCodepolis.equalsIgnoreCase("80"))
                                applicator.setCode('B', "80");
                            else
                                applicator.setCode('B', rcp.getStCostCenterCode());

                            if(rcInvoiceDetail!=null){
                                if(rcInvoiceDetail.isTaxBrok()||rcInvoiceDetail.isTaxComm()||rcInvoiceDetail.isTaxHFee())
                                    if(!det.isCheck())
                                        pajakCentang = false;
                            }

                            komisiBruto = BDUtil.add(komisiBruto, BDUtil.mul(det.getDbInvoiceAmount(), rl.getDbCurrencyRate(),2));

                            if(det.getDtReceiptDate()!=null){
                                lineDetail.setDtApplyDate(det.getDtReceiptDate());
                            }

                            if(rcInvoiceDetail!=null){
                                if(!rcInvoiceDetail.isTaxBrok()&&!rcInvoiceDetail.isTaxComm()&&!rcInvoiceDetail.isTaxHFee()){
                                    if(rcInvoiceDetail.getEntity()!=null)
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());

                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());
                                    
                                    //amt2 = BDUtil.mul(amt2, rl.getDbCurrencyRate(),2);

                                    lineDetail.setDbAutoDebit(amt2);
                                    lineDetail.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rl.getInvoice().getStInvoiceType())),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    lineDetail.setStDescription("PEMBAYARAN "+rcInvoiceDetail.getStDescription());
                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    //journal.add(lineDetail);
                                }
                            }else{
                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());
                                    //amt2 = BDUtil.mul(amt2, rl.getDbCurrencyRate(),2);

                                    lineDetail.setDbAutoDebit(amt2);
                                    lineDetail.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in invoice ");
                                    lineDetail.setStDescription(det.getStDescription());
                                    lineDetail.setStCurrencyCode(rcp.getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rcp.getDbCurrencyRate());
                            }

//                            if(rl.getInvoice()!=null)
//                                if(!rl.getInvoice().getPolicy().isTaxAcrualBases())
//                                    if(!pajakCentang) lineDetail.setDbAutoDebit(BDUtil.mul(negator,komisiBruto));
                        }

                         lineDetail.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                         lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                         journal.add(lineDetail);
                        
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {
                        
                        final JournalView excess = gl.copy();
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());
                        
                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rlxc.getInvoice().getStAttrPolicyNo());
                        
                        journal.add(excess);
                    }

                    //tambah jurnal selisih bayar
                    /*
                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        //ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        BigDecimal amtXC = BDUtil.mul(negator,rl.getDbExcessAmount());

                        if (neg) amtXC=BDUtil.negate(amtXC);

                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amtXC);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        if(rl.getStInvoiceID()!=null){
                                excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        }

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);
                    }*/
                    //end selisih bayar

                    //add jurnal selisih baru
                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excessBank = gl.copy();

                        BigDecimal amtXc = BDUtil.mul(negator,rl.getDbExcessAmount());
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amtXc=BDUtil.negate(amtXc);

                        if (rcp.getDetails().size() > 1){
                            //ADD JURNAL BANK NYA

                            excessBank.setDbAutoCredit(amtXc);
                            excessBank.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                            excessBank.setStDescription(rl.getStExcessDescription());
                            excessBank.setStCurrencyCode(rcp.getStCurrencyCode());
                            excessBank.setDbCurrencyRate(rcp.getDbCurrencyRate());
                            excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getStInvoiceID()!=null){
                                    excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                excessBank.setDtApplyDate(rl.getDtReceiptDate());
                            }

                             excessBank.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                            excessBank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                            journal.add(excessBank);
                            //END JURNAL BANK
                        }


                        final JournalView excess = gl.copy();

                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amtXc);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        if(rl.getStInvoiceID()!=null){
                                excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        }

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                         excess.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                         excess.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                        journal.add(excess);

                    }

                    //BUAT JURNAL RAK KANTOR CABANG
                    if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                            if (rc.isBank()) {
                                final JournalView bank = gl.copy();

                                bank.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                //122208934500 00
                                //0123456789012345
                                String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");
                                applicator.setCode('B', rcp.getStCostCenterCode());

                                String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                bank.setStAccountIDNotNull(rcp.getStAccountID() ,"Invalid or empty account in payment method ");
                                bank.setStDescription("PEMBAYARAN PREMI "+rl.getInvoice().getStAttrPolicyNo());
                                bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                bank.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                if(rl.getDtReceiptDate()!=null){
                                    bank.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                journal.add(bank);

                                final JournalView rak = gl.copy();
                                rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                //"210000000000 12"
                                //0123456789012345
                                String searchAccount2 = "210000000002";

                                rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                rak.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                if(rl.getDtReceiptDate()!=null){
                                    rak.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                journal.add(rak);
                            }
                    }

                    //JURNAL RAK UNIT NON AKS
                    if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){
                            if (rc.isBank()) {
                                final JournalView bank = gl.copy();
                                bank.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                //applicator.setCode('Y', entityGLCode);
                                //applicator.setCode('G', entityGLCode);
                                //applicator.setCode('B', "00");

                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");
                                applicator.setCode('B', "80");

                                String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                bank.setStTransactionNo(rcp.getStReceiptNo());
                                bank.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");
                                bank.setStDescription("PEMBAYARAN PREMI "+ rl.getInvoice().getStAttrPolicyNo());

                                bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                if(rl.getDtReceiptDate()!=null){
                                    bank.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                bank.setLgHeaderAccountID(Long.valueOf(accountID2));
                                bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                journal.add(bank);

                                final JournalView rak = gl.copy();
                                rak.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                String searchAccount2 = "210000000002";

                                //applicator.setCode('B', "00");

                                rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                rak.setStTransactionNo(rcp.getStReceiptNo());
                                rak.setLgHeaderAccountID(Long.valueOf(accountID2));
                                rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                if(rl.getDtReceiptDate()!=null){
                                    rak.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                journal.add(rak);
                            }
                    }
                    //end here
                    
                    //ADD JURNAL PAJAK JIKA PAJAK DI BAYAR
                    /*
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        boolean centangComm = false;
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                                            
                                boolean parentLunas = false;
                                
                                if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                    final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                    for (int k = 0; k < detail.size(); k++) {
                                        ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                        if (!d2.isComission()) continue;
                                        
                                        ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                        if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                             if(d2.isCheck()){//lunas komisi
                                                 parentLunas = true;
                                                 applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                             }else{
                                                 applicator.setCode('P', rcInvoiceDetail2.getEntity().getStGLCode());
                                             }
                                        }

                                    }
                                }
                                
                                final ARInvoiceDetailView parentInvoiceDetail = rccom.getInvoiceDetail().getRef();
    
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbInvoiceAmount());
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String referenceDesc = "";
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"HUTANG ";
                                }
                                
                                String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                comline1.setStDescription(paymentDesc);
                                comline1.setStDescription(referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                comline1.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                
                                journal.add(comline1);
                                
                                if(rccom.isCheck()){
                                    final JournalView comline2 = gl.copy();
                                
                                    if(rcInvoiceDetail.isNegative()){
                                        comline2.setDbAutoCredit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline2.setDbAutoDebit(comamt);
                                    }

                                    ARInvoiceDetailView detil2 = new ARInvoiceDetailView();

                                    detil2 = getARInvoiceDetail(rccom.getStInvoiceDetailID());

                                    referenceDesc = "";
                                    ARInvoiceDetailView referenceARInvoiceDetail2 = new ARInvoiceDetailView();
                                    if(detil2.getStRefInvoiceDetailID()!=null){
                                        referenceARInvoiceDetail2 = getARInvoiceDetailParent(detil2.getStRefInvoiceDetailID());
                                        referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"";
                                    }

                                    String account2 = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLApAccount());
                                    comline2.setStAccountIDNotNull(account2,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                    comline2.setStDescription(paymentDesc);
                                    comline2.setStDescription("TAGIHAN "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comline2.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline2.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    journal.add(comline2);
                                }
                            }
                        }
                    }*/
                    //END PAJAK
                    
                    
                    
                    //journal.add(line);
                    
                    //final DTOList child = rl.getARInvoiceDetails();
                    final DTOList child = rl.getDetails();

                    for (int k = 0; k < child.size(); k++) {
                        ARReceiptLinesView rclDet = (ARReceiptLinesView) child.get(k);

                        ARInvoiceDetailView detail = (ARInvoiceDetailView) rclDet.getInvoiceDetail();

                        if(detail == null) continue;
                        
                        if(!detail.isTax()) continue;
                        //put here

                        if(rl.getInvoice().getPolicy().isTaxAcrualBases()) continue;
                        
                        applicator.setCode('P', detail.getEntity().getStGLCode());
                        
                        //add jurnal beban pajak
                        if(rclDet.isCheck()){
                            final JournalView comlineBebanPajak = gl.copy();

                            BigDecimal comamt2 = BDUtil.mul(negator,detail.getDbAmount());
                            //comamt2 = BDUtil.mul(comamt2, rclDet.getDbCurrencyRate(),2);

                            comlineBebanPajak.setDbAutoDebit(comamt2);

                            //ARInvoiceDetailView detilBebanPajak = new ARInvoiceDetailView();

                            comlineBebanPajak.setStAccountIDNotNull(applicator.getAccountID(detail.getTrxLine().getStGLApAccount()),"Invalid or empty account in payment method ");
                            comlineBebanPajak.setStDescription(rl.getStInvoiceNo());
                            comlineBebanPajak.setStDescription(comlineBebanPajak.getStDescription().replaceAll("HUTANG","BEBAN "+ detail.getStDescription()+" "));
                            comlineBebanPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                            comlineBebanPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                            comlineBebanPajak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rclDet.getDtReceiptDate()!=null){
                                comlineBebanPajak.setDtApplyDate(rclDet.getDtReceiptDate());
                            }

                            journal.add(comlineBebanPajak);
                        }
                        //end add jurnal beban pajak
                        
                        //add jurnal hutang pajak
                        final JournalView comlineHutangPajak = gl.copy();
                        
                        BigDecimal comamtHutangPajak = BDUtil.mul(negator,detail.getDbAmount());

                        //comamtHutangPajak = BDUtil.mul(comamtHutangPajak, rclDet.getDbCurrencyRate(),2);

                        comlineHutangPajak.setDbAutoCredit(comamtHutangPajak);
                        //ARInvoiceDetailView detilHutangPajak = new ARInvoiceDetailView();
                        
                        applicator.setCode('Y', detail.getEntity().getStGLCode());
                        
                        comlineHutangPajak.setStAccountIDNotNull(applicator.getAccountID(detail.getTrxLine().getStGLArAccountByType("AP")),"Invalid or empty account in payment method ");
                        comlineHutangPajak.setStDescription(paymentDesc);
                        comlineHutangPajak.setStDescription(rl.getStInvoiceNo());
                        comlineHutangPajak.setStDescription(comlineHutangPajak.getStDescription().replaceAll("HUTANG", "HUTANG "+detail.getStDescription()+" "));
                        comlineHutangPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        comlineHutangPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        comlineHutangPajak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rclDet.getDtReceiptDate()!=null){
                            comlineHutangPajak.setDtApplyDate(rclDet.getDtReceiptDate());
                        }
                            
                        journal.add(comlineHutangPajak);
                       
                        
                    }
                    
                    final DTOList titipan = rl.getListTitipan();
                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);
                        
                        ARReceiptLinesView indukTitipan = (ARReceiptLinesView) rl;
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiView titipanPremi = getTitipanPremi(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Invalid or empty account in payment method ");
                        
                        if(titipanPremi.getStDescription()!=null)
                            jurnalTitipan.setStDescription("REALISASI "+ titipanPremi.getStDescription());
                        else
                            jurnalTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalTitipan.setDbAutoDebit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiUsedAmount()));
                        jurnalTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        /*
                        if(BDUtil.biggerThanEqual(BDUtil.negate(rlTitipan.getDbTitipanPremiAmount()), rl.getDbTotalAmountPerLine()))
                            jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                        else 
                            jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiAmount()));
                        */
                        
                        if(rl.getInvoice()!=null)
                            jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rlTitipan.getDtReceiptDate()!=null){
                            jurnalTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        jurnalTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());
                        
                        journal.add(jurnalTitipan);
                        
                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        jurnalBankTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        if(indukTitipan.getStAccountID()!=null)
                            jurnalBankTitipan.setStAccountIDNotNull(indukTitipan.getStAccountID(),"Invalid or empty account in payment method ");

                        if(titipanPremi.getStDescription()!=null)
                            jurnalBankTitipan.setStDescription("REALISASI "+ titipanPremi.getStDescription());
                        else
                            jurnalBankTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        if(rlTitipan.getDtReceiptDate()!=null){
                            jurnalBankTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        jurnalBankTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalBankTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                        journal.add(jurnalBankTitipan);
                    }

                    if(!jurnalOnly){
                        final DTOList titip = rl.getListTitipan();
                        for (int j = 0; j < titip.size(); j++) {
                            ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);

                            updateAndCreateTitipanKomisi(S,rcp,rlTitipan,rlTitipan.getStTitipanPremiID());
                        }
                    }

                    
                }
                
                //buat hutang pajak ke depkeu
                if(!jurnalOnly){
                    for (int i = 0; i < combined.size(); i++) {
                        ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                        if(rcl.getInvoice()==null) continue;

                        if(rcl.getInvoice().getPolicy().isTaxAcrualBases()) continue;

                        final ARInvoiceView actInvoice = rcl.getInvoice();

                        //bedain antara hutang komisi dan pajak pembayaran

                        //final DTOList comissionList = rcl.getDetails();

                        final DTOList actDetails = actInvoice.getDetails();

                        if (actDetails.size()>0) {

                            for (int j = 0; j < actDetails.size(); j++) {
                                ARInvoiceDetailView rcInvoiceDetail = (ARInvoiceDetailView) actDetails.get(j);

                                if(!rcInvoiceDetail.isTax()) continue;

                                final BigDecimal comamt = rcInvoiceDetail.getDbAmount();

                                //final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();

                                //boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));

                                // if(!parentLunas) continue;

                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();

                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+ rcInvoiceDetail.getStARInvoiceID());
                                invoice.setStRefID2(rcInvoiceDetail.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                invoice.setStInvoiceNo(rcl.getStInvoiceNo());
                                invoice.setStInvoiceNo(invoice.getStInvoiceNo().replaceAll("HUTANG","HUTANG " + rcInvoiceDetail.getStDescription() +" "));
                                invoice.setStInvoiceType("AP");
                                if(actInvoice.getStInvoiceType().equalsIgnoreCase("AR")){
                                    invoice.setStInvoiceType("AR");
                                }
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");

                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }

                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());

                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }

                                 String jenis = rcInvoiceDetail.getTrxLine().getStItemDesc().toUpperCase().startsWith("PPH21")?"PPH21":"PPH23";

                                invoice.setStNoSuratHutang(
                                    "SHP/"+
                                    jenis +
                                    "/" +
                                    invoice.getStARCustomerID()+
                                    "/"+
                                    invoice.getStCostCenterCode()+
                                    "/"+
                                    DateUtil.getMonth2Digit(rcp.getDtReceiptDate())+
                                    "/"+
                                    DateUtil.getYear(rcp.getDtReceiptDate()));

                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")));

                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                                //invoice.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                invoice.setDbAmount(comamt);
                                invoice.setDbEnteredAmount(comamt);


                                final DTOList ivdetails = new DTOList();

                                invoice.setDetails(ivdetails);


                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );

                                {

                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                        final ARInvoiceDetailView ivd = new ARInvoiceDetailView();

                                        ivd.markNew();

                                        ivdetails.add(ivd);

                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        ivd.setDbEnteredAmount(comamt);
                                        ivd.setDbAmount(comamt);
                                        //ivd.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                        ivd.setStTaxCode(rcInvoiceDetail.getStTaxCodeOnSettlement());
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setStTaxFlag("Y");
                                        ivd.setStRefID0(rcInvoiceDetail.getStRefID0());
                                        ivd.setStRootID(rcInvoiceDetail.getStRootID());
                                    }
                                }

                                        invoice.recalculate2();

                                        invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")));
                                        final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                        invoice.setStRefInvoiceID(refid);
                                        save(invoice);

                            }

                        }


                    }
                }
                
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }

            S.store(rcp);
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
        
    }
    
    public void savePembayaranPajak(ARReceiptView rcp) throws Exception {
        rcp.validate();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            if(rcp.isNew())
                rcp.generateReceiptNo();
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                //rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStRootID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);
                //}
            }
            
            S.store(rcp.getNotes());
            
            S.store(gLs);
            
            S.store(details);
            
            
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                 /*
         ARInvoiceView iv = rcp.getArapinvoice();
                  
         iv.recalculate();
                  
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }
                  
         String invoiceID = save(iv);
                  
         rcp.setStARAPInvoiceID(invoiceID);*/
            
            rcp.setStARAPInvoiceID(stARInvoiceID);

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
                 rcp.setStARAPInvoiceID(null);
            }
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                // AR DR vs bank CR
                
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                if(rcp.getSettlement().isAR()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.setStSummaryFlag("Y");
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                        if (rcp.getDetails().size()==1) {
                            
                            head.setStDescription(rcp.getStInvoiceType().equalsIgnoreCase("AP")?"PEMBAYARAN "+ rl.getStInvoiceNo() :"TERIMA " + rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            
                            /*
                            if(rl.getInvoice().getStRefID2().startsWith("LKP")){
                                head.setStDescription("TRM KLM "+ rl.getInvoice().getStAttrPolicyNo()+" "+ rl.getInvoice().getStRefID2());
                                head.setDbAutoDebit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                                head.setDbAutoCredit(BDUtil.zero);
                            }*/
                        } else {
                            head.setStDescription(rcp.getStInvoiceType().equalsIgnoreCase("AP")?"PEMBAYARAN "+ rcp.getDetails().size()+" INVOICES":"TERIMA " + rcp.getDetails().size()+" INVOICES");
                        }

                        journal.add(head);

                        //tambah jurnal RAK jika non aks
                        if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                if (rc.isBank()) {

                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR PAJAK "+ rl.getInvoice().getStAttrPolicyNo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    //rak.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    //rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }
                    }
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                 
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            /*
                            if(rl.getInvoice().getStRefID2().startsWith("LKP") && rcp.getStARSettlementID().equalsIgnoreCase("8")){
                                head.setStDescription("TRM KLM "+ rl.getInvoice().getStAttrPolicyNo()+" "+ rl.getInvoice().getStRefID2());
                                head.setDbAutoDebit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                                head.setDbAutoCredit(BDUtil.zero);
                            }*/

                            journal.add(head);

                            //tambah jurnal RAK jika non aks
                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                    if (rc.isBank()) {

                                        applicator.setCode('B', rcp.getStCostCenterCode());

                                        final JournalView rak = gl.copy();
                                        rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                        //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        //"210000000000 12"
                                        //0123456789012345
                                        String searchAccount2 = "210000000002";

                                        rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                        rak.setStDescription(applicator.getStGLDesc() + " BYR PAJAK "+ rl.getInvoice().getStAttrPolicyNo());
                                        rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        if(rl.getDtReceiptDate()!=null){
                                            rak.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(rak);
                                    }
                            }
                        }
                    }
                    
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
                            
                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();
                            
                            final JournalView lineDetail = gl.copy();
                            
                            BigDecimal amt2 = BDUtil.mul(negator,det.getDbEnteredAmount());
                            
                            lineDetail.setDbAutoDebit(amt2);
                            lineDetail.setStAccountIDNotNull(rcInvoiceDetail.getStGLAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                            lineDetail.setStDescription(rcInvoiceDetail.getStDescription());
                            lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                            lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                            lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            /*
                            if(rl.getInvoice().getStRefID2().startsWith("LKP") && rcp.getStARSettlementID().equalsIgnoreCase("8")){
                                lineDetail.setStDescription("TRM KLM "+ det.getInvoice().getStAttrPolicyNo()+" "+ det.getInvoice().getStRefID2());
                                lineDetail.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                                lineDetail.setDbAutoDebit(BDUtil.zero);
                            }*/

                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){
                                applicator.setCode('B', "80");

                                //Get Akun header
                                String accountHeaderID = "";

                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");

                                accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                lineDetail.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());
                            }
                            
                            journal.add(lineDetail);

                            //tambah jurnal RAK jika non aks
                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                        applicator.setCode('B', "80");

                                        final JournalView rak = gl.copy();
                                        rak.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                        //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        //"210000000000 12"
                                        //0123456789012345
                                        String searchAccount2 = "210000000002";

                                        rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                        rak.setStDescription(applicator.getStGLDesc() + " BYR PAJAK "+ rl.getInvoice().getStAttrPolicyNo());
                                        rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        //Get Akun header
                                        String accountHeaderID = "";

                                        applicator.setCode('Y', "00001");
                                        applicator.setCode('G', "00001");

                                        accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                        rak.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                        rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());


                                        if(rl.getDtReceiptDate()!=null){
                                            rak.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(rak);
                            }
                        }
  
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        
                    }
                }

                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }
            
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public String saveInvoiceClaimCoas(ARInvoiceView invoice) throws Exception {
        
        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            if (doPost)
                if (invoice.getStGLARAccountID()==null) {
                
                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                
                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
                
                invoice.setStGLARAccountID(acc.getStAccountID());
                }
            
            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
                //mark utk besih2x
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }
            
            S.store(invoice);
            
            final DTOList details = invoice.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);
                
                if (detailView.isNew())
                    //mark utk besih2x
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                
                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                        
                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                        
                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }
                
                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }
            
            S.store(details);
            
            if (!invoice.isNew())
                if (doUnPost) {
                getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            
            if (doPost) {
                
                logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());

                if(invoice.getPolicy()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicy().getPolicyType().getStBusinessTypeID());

                gl.markNew();
                
                {
                    
                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                    
                    final JournalView jv = gl.copy();
                    //jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    //jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                     
                    jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(ac.getStDescription());
                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);
                    
                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;

                    //if(ivd.isUangMukaKlaim()) continue;
                    
                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());
                    
                    
                    if (ivd.getStTaxCode()!=null) {
                        final ARTaxView tax = ivd.getTax();
                        
                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);
                        
                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                        //jv.setDbAutoCredit(BDUtil.mul(detailNegator,taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                        //jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());
                        
                        jv.markNew();
                        
                        journalSet.add(jv);
                    }
               /*else if (ivd.getTrxLine().isTaxed()) {
                  final ARTaxView tax = ivd.getTrxLine().getTax();
                
                  final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                  //amt=BDUtil.sub(amt,taxAmt);
                
                  final JournalView jv = gl.copy();
                  final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                  jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                  jv.setStAccountID(accountID);
                  jv.setStDescription(glApplicator.getPreviewDesc());
                
                  jv.markNew();
                
                  journalSet.add(jv);
               }*/
                    
                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
                    
                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());
                    
                    final JournalView jv = gl.copy();
                    //jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                    //jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));
                    jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));
                    
                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(ac.getStDescription());
                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            return invoice.getStARInvoiceID();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void savePembayaranCoas(ARReceiptView rcp) throws Exception {
        rcp.validate();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        //if (rcp.getStEntityID()!=null)
            //gla.setDesc("Y",rcp.getEntity().getStEntityName());
        
        if (rcp.getStEntityID()!=null){
            
            if(rcp.getEntity2(rcp.getStEntityID()).getStShortName()!=null)
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStShortName());
            else
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStEntityName());
        }
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            if(rcp.isNew())
                rcp.generateReceiptNo();
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);
                //}
            }
            
            S.store(rcp.getNotes());
            
            S.store(gLs);
            
            S.store(details);
            
            
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                 /*
         ARInvoiceView iv = rcp.getArapinvoice();
                  
         iv.recalculate();
                  
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }
                  
         String invoiceID = save(iv);
                  
         rcp.setStARAPInvoiceID(invoiceID);*/
            
            rcp.setStARAPInvoiceID(stARInvoiceID);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                
                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                 final String rekBankBayarKoas = applicator.getAccountID("122100000100");
                
                // AR DR vs bank CR
                
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                //if(rcp.getSettlement().isAR()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();

                //D130200008934500006
                String noBuktiCabang = "C" + rcp.getStReceiptNo().substring(1);
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                gl.setStSummaryFlag("Y");
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                /*
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);
                        
                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                            head.setDbAutoCredit(
                                BDUtil.mul(negator,rl.getdb)
                                );
                        } else {
                            head.setStDescription("PEMBAYARAN "+rcp.getDetails().size()+" INVOICES");
                        }
                       
                        journal.add(head);
                    }
                */

                boolean moreThan1Policy = rcp.getDetails().size()>=1;
                BigDecimal premiBrutoKoas = null;
                        
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());

                    AccountView account = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                    //122208934500 00
                    //0123456789012345
                    String searchAccount = account.getStAccountNo().substring(0,12);

                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                    if(rcp.isJournalOffset()){
                        searchAccount = "122100000100";
                    }
                    
                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();

                            head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );

                            premiBrutoKoas = rl.getDbTotalAmountPerLine();

                            if(rcp.isJournalOffset()){
                                searchAccount = "122100000100";
                                head.setStTransactionNo(noBuktiCabang);
                            }
                            
                            head.setStAccountIDNotNull(applicator.getAccountID(searchAccount),"Invalid or empty account in payment method ");
                            
                            head.setStDescription(paymentDesc);
                            head.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());

                            if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                head.setStDescription("PENERIMAAN KLAIM KO. "+rl.getInvoice().getPolicy().getStDLANo());

                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            
                            if(rcp.isJournalOffset()){
                                head.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());
                            }

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            //if(rcp.isJournalOffset()){
                                    /*
                                    if (rl.isInvoice()) {

                                        final DTOList comissionList = rl.getDetails();

                                        for (int j = 0; j < comissionList.size(); j++) {
                                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                                            if(!rcInvoiceDetail.isPremiGrossCoas() && !rcInvoiceDetail.isClaimCoins()) continue;

                                            if(rcInvoiceDetail.isPremiGrossCoas() || rcInvoiceDetail.isClaimCoins()){
                                                head.setDbAutoCredit(
                                                    BDUtil.mul(negator,det.getDbEnteredAmount())
                                                    );
                                                premiBrutoKoas = det.getDbEnteredAmount();
                                            }
                                        }
                                    }*/
                            //}

                            //head.setStDescription(head.getStDescription() + " "+ rl.getInvoice().getEntity().getStShortName());

                            journal.add(head);
                        }

                    }
                    
                    if (rl.isInvoice()) {
                        
                        final DTOList comissionList = rl.getDetails();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
                            
                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            if(!rcInvoiceDetail.isPremiGrossCoas() && !rcInvoiceDetail.isClaimCoins()) continue;

                            final JournalView lineDetail = gl.copy();

                            applicator.setCode('Y', det.getInvoice().getEntity().getStGLCode());
                            applicator.setDesc("Y", det.getInvoice().getEntity().getStShortName());
                            
                            //BigDecimal amt2 = BDUtil.mul(negator,det.getDbEnteredAmount());
                            BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                            lineDetail.setStAccountIDNotNull(rcInvoiceDetail.getStGLAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                            if(rcInvoiceDetail.isPremiGrossCoas()){
                                //lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                lineDetail.setStAccountIDNotNull(applicator.getAccountID(rl.getInvoice().getARTrxType().getStGLARAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                            }
                                

                            lineDetail.setStDescription(rcInvoiceDetail.getStDescription());
                            lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                            lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                            lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rcInvoiceDetail.isPremiGrossCoas() || rcInvoiceDetail.isClaimCoins()){
                                lineDetail.setDbAutoDebit(amt2);

                                if(rcp.isJournalOffset()){
                                    lineDetail.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());    
                                }

                                if(rcp.getStARSettlementID().equalsIgnoreCase("14")){
                                      lineDetail.setStAccountIDNotNull(applicator.getAccountID(rl.getInvoice().getARTrxType().getStGLARAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                      lineDetail.setStDescription("PENERIMAAN KLAIM KO. "+rl.getInvoice().getPolicy().getStDLANo() + " "+rl.getInvoice().getEntity().getStShortName());
                                }

                            }else{
                                lineDetail.setDbAutoCredit(amt2);
                            }

                            if(rcp.isJournalOffset()){
                                lineDetail.setStTransactionNo(noBuktiCabang);
                                lineDetail.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());
                            }
                            
                            if(det.getDtReceiptDate()!=null){
                                lineDetail.setDtApplyDate(det.getDtReceiptDate());
                            }
                            
                            journal.add(lineDetail);
                        }
                        
                        
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        
                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                    }
                    
                    
                    //buat jurnal lawan AKP PER CABANG
                    if(rcp.isJournalOffset()){
                            if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoDebit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    //AccountView account = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    //String searchAccount = account.getStAccountNo().substring(0,12);

                                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                    if(rcp.isJournalOffset()){
                                        searchAccount = "122100000100";
                                    }

                                    akp.setStTransactionNo(noBuktiCabang);
                                    akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount),"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    akp.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoCredit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000000";

                                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR PRM KO "+ rl.getInvoice().getStNoSuratHutang());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp2.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp2.setStTransactionNo(noBuktiCabang);
                                    akp2.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            }
                    }

                    //BUAT JURNAL AKP KANTOR PUSAT
                    if(rcp.isJournalOffset()){
                            if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoCredit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('B', "00");

                                    akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount3) ,"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount3)));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount3)).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoDebit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000000";

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR PRM KO "+ rl.getInvoice().getStNoSuratHutang());
                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp2.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp2.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount3)));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount3)).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            }
                    }

                    //BUAT JURNAL RAK KANTOR CABANG
                    if(rcp.isJournalNonOffset()){
                        
                            if(rl.getPolicy()!=null){
                                if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                    if (rc.isBank()) {
                                        final JournalView bank = gl.copy();

                                        BigDecimal jumlahBayarRAK = rl.getDbTotalAmountPerLine();

                                        if(rl.getStARSettlementExcessID()!=null){
                                            //jumlahBayar = BDUtil.sub(jumlahBayar, rl.getDbExcessAmount());

                                            //jika kurang bayar, kurang
                                            if(rl.getARSettlementExcess().isNegative())
                                                jumlahBayarRAK = BDUtil.sub(jumlahBayarRAK, rl.getDbExcessAmount());

                                            //jika lebih bayar, tambah
                                            if(!rl.getARSettlementExcess().isNegative())
                                                jumlahBayarRAK = BDUtil.add(jumlahBayarRAK, rl.getDbExcessAmount());
                                        }

                                        bank.setDbAutoCredit(BDUtil.mul(negator, jumlahBayarRAK));

                                        AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        //122208934500 00
                                        //0123456789012345
                                        String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                        applicator.setCode('Y', "00001");
                                        applicator.setCode('G', "00001");
                                        applicator.setCode('B', rcp.getStCostCenterCode());

                                        String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                        bank.setStAccountIDNotNull(rcp.getStAccountID() ,"Invalid or empty account in payment method ");
                                        bank.setStDescription("PEMBAYARAN PREMI "+rl.getInvoice().getStAttrPolicyNo());
                                        bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        bank.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                        bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                        if(rl.getDtReceiptDate()!=null){
                                            bank.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(bank);

                                        final JournalView rak = gl.copy();
                                        rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                        //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        //"210000000000 12"
                                        //0123456789012345
                                        String searchAccount2 = "210000000002";

                                        rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                        rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                        rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        rak.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                        rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                        if(rl.getDtReceiptDate()!=null){
                                            rak.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(rak);
                                    }
                            }

                            //JURNAL RAK UNIT NON AKS
                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){
                                    if (rc.isBank()) {
                                        final JournalView bank = gl.copy();
                                        bank.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                        final String entityGLCode2 = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                        applicator.setCode('Y', entityGLCode2);
                                        //applicator.setCode('G', entityGLCode);
                                        //applicator.setCode('B', "00");

                                        //applicator.setCode('Y', "00001");
                                        applicator.setCode('G', "00001");
                                        applicator.setCode('B', "80");

                                        String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                        bank.setStTransactionNo(rcp.getStReceiptNo());
                                        bank.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");
                                        bank.setStDescription("PEMBAYARAN PREMI "+ rl.getInvoice().getStAttrPolicyNo());

                                        bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        if(rl.getDtReceiptDate()!=null){
                                            bank.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        bank.setLgHeaderAccountID(Long.valueOf(accountID2));
                                        bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                        journal.add(bank);

                                        final JournalView rak = gl.copy();
                                        rak.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                        String searchAccount2 = "210000000002";

                                        //applicator.setCode('B', "00");

                                        rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                        rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                        rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        rak.setStTransactionNo(rcp.getStReceiptNo());
                                        rak.setLgHeaderAccountID(Long.valueOf(accountID2));
                                        rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                        if(rl.getDtReceiptDate()!=null){
                                            rak.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(rak);
                                    }
                            }
                        }
                    }
                    

                }
                 
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }
            
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void savePembayaranPremiPolisSementara(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getEntity2(rcp.getStEntityID()).getStGLCode());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                //update titipan premi
                if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
                    final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
                    updateTitipanBalance(stArTitipanID,rcp.getDbAmountApplied());
                    saveDetilTitipan(titipan,rcp);
                    
                }
                
                //end titipan
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
                
                
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);
                    
                    final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());
                    
                    head.setDbAutoCredit(
                            BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                    head.setStAccountIDNotNull(applicator.getAccountID(rc.getStReference1()),"Invalid or empty account in payment method ");
                    head.setStDescription(paymentDesc);
                    
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        head.setStDescription("TERIMA "+rl.getStInvoiceNo());
                    } else {
                        head.setStDescription("TERIMA "+rcp.getDetails().size()+" INVOICES");
                        head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                    }
                    
                    head.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                    journal.add(head);
                    
                }
                
                // POSTING JURNAL PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    //POSTING LINE
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (rccom.isDelete()) continue;
                                
                                if(rcInvoiceDetail.isPolicyCost2()||rcInvoiceDetail.isDiscount2()||
                                        rcInvoiceDetail.isStampDuty2()||rcInvoiceDetail.isCommission2()||
                                        rccom.isComission()) {
                                    
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                    
                                    final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        //comAccount = rcp.getStAccountID();
                                        comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                    }
                                    
                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        //final ARInvoiceView inv2 = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                        //comamt = inv2.getDbAmount();
                                        comamt = rccom.getInvoice().getDbAmount();
                                    }
                                    
                                    if(rcInvoiceDetail.isNegative()){
                                        if(rcInvoiceDetail.isTax())	comline.setDbAutoDebit(taxamt);
                                        else	comline.setDbAutoDebit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoCredit(comamt);
                                    }
                                    
                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        tes = detil2.getStDescription();
                                    }
                                    
                                    boolean lunas = BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                    
                                    comline.setStDescription("TERIMA "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rcp.getArapinvoice().isAP())
                                        comline.setStDescription("Pembayaran "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription(accountDescPremiG);
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comline);
                                }
                                
                                //boolean hasExcess = !BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                boolean hasExcess = !BDUtil.isZero(rccom.getDbOutstandingAmountAct());
                                
                                if(hasExcess){
                                    if(rcInvoiceDetail.isTax()) continue;
                                    
                                    if(BDUtil.isZero(BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1))))
                                        continue;
                                    
                                    if(BDUtil.lesserThanZero(rccom.getDbOutstandingAmountAct()) && BDUtil.biggerThan(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                        continue;
                                    
                                    
                                    BigDecimal selisih = BDUtil.biggerThanZero(rccom.getDbOutstandingAmountAct())?rccom.getDbOutstandingAmountAct():BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                    
                                    BigDecimal selisihReal = rccom.getDbOutstandingAmountAct();
                                    
                                    final JournalView comlinenew = gl.copy();
                                    
                                    final BigDecimal comamt2 = selisih;
                                    
                                    final BigDecimal comamtLebih = selisih;
                                    
                                    if(rcInvoiceDetail.isComission()||rcInvoiceDetail.isDiscount()){
                                        if(BDUtil.lesserThanZero(selisihReal)) comlinenew.setDbAutoDebit(comamt2);
                                        else comlinenew.setDbAutoCredit(comamt2);
                                    }else{
                                        if(BDUtil.lesserThanZero(selisihReal)) comlinenew.setDbAutoCredit(comamtLebih);
                                        else comlinenew.setDbAutoDebit(comamt2);
                                    }
                                    
                                    //comlinenew.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    final ARInvoiceView invoice = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                    comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    
                                    comlinenew.setStDescription(paymentDesc);
                                    
                                    ARInvoiceDetailView detil4 = new ARInvoiceDetailView();
                                    
                                    detil4 = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes2 = "";
                                    ARInvoiceDetailView detil3 = new ARInvoiceDetailView();
                                    if(detil2.getStRefInvoiceDetailID()!=null){
                                        detil3 = getARInvoiceDetailParent(detil4.getStRefInvoiceDetailID());
                                        tes2 = detil4.getStDescription();
                                    }
                                    
                                    comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rccom.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(selisihReal)){
                                        comlinenew.setStDescription("HUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()),"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                        logger.logDebug("++++++++++++++ HUTANG LAGI +++++++++++++++++++++++++");
                                        logger.logDebug(" account setting = "+ rcInvoiceDetail.getTrxLine().getStGLArAccount());
                                        logger.logDebug("acooun hasil = "+ applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()));
                                        logger.logDebug("++++++++++++++ HUTANG LAGI +++++++++++++++++++++++++");
                                    }
                                    
                                    if(BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("LEBIH BAYAR "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    comlinenew.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlinenew.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    comlinenew.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                                    journal.add(comlinenew);
                                    
                                }
                            }
                        }
                    }//END
                    
                    //POSTING JURNAL PAJAK
                    
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        boolean centangComm = false;
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                final ARInvoiceDetailView parentInvoiceDetail = rccom.getInvoiceDetail().getRef();
                                
                                boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                                
                                logger.logDebug("++++++++++++++++ JURNAL PAJAK KURANG +++++++++++++++");
                                logger.logDebug("parentLunas = "+ parentLunas);
                                logger.logDebug("++++++++++++++++ JURNAL PAJAK KURANG +++++++++++++++");
                                
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String tes = "";
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    tes = detil2.getStDescription();
                                }
                                
                                String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                comline1.setStDescription(paymentDesc);
                                comline1.setStDescription("HUTANG "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                
                                journal.add(comline1);
                                
                                if(parentLunas){
                                    //add jurnal beban pajak
                                    final JournalView comlineBebanPajak = gl.copy();
                                    
                                    final BigDecimal comamt2 = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    comlineBebanPajak.setDbAutoCredit(comamt2);
                                    
                                    ARInvoiceDetailView detilBebanPajak = new ARInvoiceDetailView();
                                    
                                    detilBebanPajak = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tesBebanPajak = "";
                                    ARInvoiceDetailView detil2BebanPajak = new ARInvoiceDetailView();
                                    if(detilBebanPajak.getStRefInvoiceDetailID()!=null){
                                        detil2BebanPajak = getARInvoiceDetailParent(detilBebanPajak.getStRefInvoiceDetailID());
                                        tesBebanPajak = detil2BebanPajak.getStDescription();
                                    }
                                    
                                    comlineBebanPajak.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount()),"Invalid or empty account in payment method ");
                                    comlineBebanPajak.setStDescription(paymentDesc);
                                    comlineBebanPajak.setStDescription("BEBAN "+ tesBebanPajak +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comlineBebanPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlineBebanPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    
                                    journal.add(comlineBebanPajak);
                                    //end add jurnal beban pajak
                                    
                                    //add jurnal hutang pajak
                                    final JournalView comlineHutangPajak = gl.copy();
                                    
                                    final BigDecimal comamtHutangPajak = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    comlineHutangPajak.setDbAutoDebit(comamtHutangPajak);
                                    /*
                                    if(rcInvoiceDetail.isNegative()){
                                        comlineHutangPajak.setDbAutoDebit(comamtHutangPajak);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comlineHutangPajak.setDbAutoCredit(comamtHutangPajak);
                                    }*/
                                    
                                    ARInvoiceDetailView detilHutangPajak = new ARInvoiceDetailView();
                                    
                                    detilHutangPajak = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tesHutangPajak = "";
                                    ARInvoiceDetailView detil2HutangPajak = new ARInvoiceDetailView();
                                    if(detilHutangPajak.getStRefInvoiceDetailID()!=null){
                                        detil2HutangPajak = getARInvoiceDetailParent(detilHutangPajak.getStRefInvoiceDetailID());
                                        tesHutangPajak = detil2HutangPajak.getStDescription();
                                    }
                                    
                                    comlineHutangPajak.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR")),"Invalid or empty account in payment method ");
                                    comlineHutangPajak.setStDescription(paymentDesc);
                                    comlineHutangPajak.setStDescription("HUTANG "+ tesHutangPajak +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comlineHutangPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlineHutangPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comlineHutangPajak);
                                    //end add jurnal beban pajak
                                }
                            }
                        }
                    }
                    //END POSTING PAJAK
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntryTes(journal);
                
                //BUAT HUTANG PIUTANG PIHAK KETIGA
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail.isTax()) continue;
                            
                            boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                            
                            if(hasExcess){
                                
                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                                
                                if(BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())&&
                                        BDUtil.biggerThan(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                    continue;
                                
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                                
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                                
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                                
                                
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                                
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                                
                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                                
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                                
                                invoice.setDbAmount(selisih);
                                invoice.setDbEnteredAmount(selisih);
                                
                                
                                final DTOList ivdetails = new DTOList();
                                
                                invoice.setDetails(ivdetails);
                                
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {
                                    
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                    
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                        
                                        ivd.markNew();
                                        
                                        ivdetails.add(ivd);
                                        
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(selisih);
                                        ivd.setDbAmount(selisih);
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    }
                                }
                                
                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());
                                
                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );
                                    
                                    {
                                        
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                        
                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);
                                            
                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();
                                            
                                            ivdChild.markNew();
                                            
                                            ivdetails.add(ivdChild);
                                            
                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());
                                            
                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setDbAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                        }
                                    }
                                }
                                
                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }
                            
                        }
                        
                    }
                }
                
                //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(!rcInvoiceDetail.isTax()) continue;
                            
                            final BigDecimal comamt = rcc.getDbOutstandingAmount();
                            
                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();
                            
                            boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                            
                            if(!parentLunas) continue;
                            
                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }
                            
                            
                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                            
                            //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                            //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                            
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setDbAmount(comamt);
                            invoice.setDbEnteredAmount(comamt);
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(comamt);
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                }
                            }
                                    
                                    invoice.recalculate2();
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    //}
                                    
                        }
                        
                    }
                    
                    
                }
                
                //end hutang pajak
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void savePembayaranPremiRealisasiTitipanBackup(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getEntity2(rcp.getStEntityID()).getStGLCode());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                //get polis
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
                
                
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);
                    
                    final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());
                    
                    head.setDbAutoCredit(
                            BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                    head.setStAccountIDNotNull(applicator.getAccountID(rc.getStReference1()),"Invalid or empty account in payment method ");
                    head.setStDescription(paymentDesc);
                    
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        head.setStDescription("TERIMA "+rl.getStInvoiceNo());
                    } else {
                        head.setStDescription("TERIMA "+rcp.getDetails().size()+" INVOICES");
                        head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                    }
                    
                    head.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                    journal.add(head);
                    
                }
                
                // POSTING JURNAL PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    //POSTING LINE
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (rccom.isDelete()) continue;
                                
                                if(rcInvoiceDetail.isPolicyCost2()||rcInvoiceDetail.isDiscount2()||
                                        rcInvoiceDetail.isStampDuty2()||rcInvoiceDetail.isCommission2()||
                                        rccom.isComission()) {
                                    
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                    
                                    final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        //comAccount = rcp.getStAccountID();
                                        comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                    }
                                    
                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        //final ARInvoiceView inv2 = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                        //comamt = inv2.getDbAmount();
                                        comamt = rccom.getInvoice().getDbAmount();
                                    }
                                    
                                    if(rcInvoiceDetail.isNegative()){
                                        if(rcInvoiceDetail.isTax())	comline.setDbAutoDebit(taxamt);
                                        else	comline.setDbAutoDebit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoCredit(comamt);
                                    }
                                    
                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        tes = detil2.getStDescription();
                                    }
                                    
                                    boolean lunas = BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                    
                                    comline.setStDescription("TERIMA "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rcp.getArapinvoice().isAP())
                                        comline.setStDescription("Pembayaran "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription(accountDescPremiG);
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comline);
                                }
                                
                                //boolean hasExcess = !BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                boolean hasExcess = !BDUtil.isZero(rccom.getDbOutstandingAmountAct());
                                
                                if(hasExcess){
                                    if(rcInvoiceDetail.isTax()) continue;
                                    
                                    if(BDUtil.isZero(BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1))))
                                        continue;
                                    
                                    if(BDUtil.lesserThanZero(rccom.getDbOutstandingAmountAct()) && BDUtil.biggerThan(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                        continue;
                                    
                                    
                                    BigDecimal selisih = BDUtil.biggerThanZero(rccom.getDbOutstandingAmountAct())?rccom.getDbOutstandingAmountAct():BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                    
                                    BigDecimal selisihReal = rccom.getDbOutstandingAmountAct();
                                    
                                    final JournalView comlinenew = gl.copy();
                                    
                                    final BigDecimal comamt2 = selisih;
                                    
                                    final BigDecimal comamtLebih = selisih;
                                    
                                    if(rcInvoiceDetail.isComission()||rcInvoiceDetail.isDiscount()){
                                        if(BDUtil.lesserThanZero(selisihReal)) comlinenew.setDbAutoDebit(comamt2);
                                        else comlinenew.setDbAutoCredit(comamt2);
                                    }else{
                                        if(BDUtil.lesserThanZero(selisihReal)) comlinenew.setDbAutoCredit(comamtLebih);
                                        else comlinenew.setDbAutoDebit(comamt2);
                                    }
                                    
                                    //comlinenew.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    final ARInvoiceView invoice = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                    comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    
                                    comlinenew.setStDescription(paymentDesc);
                                    
                                    ARInvoiceDetailView detil4 = new ARInvoiceDetailView();
                                    
                                    detil4 = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes2 = "";
                                    ARInvoiceDetailView detil3 = new ARInvoiceDetailView();
                                    if(detil2.getStRefInvoiceDetailID()!=null){
                                        detil3 = getARInvoiceDetailParent(detil4.getStRefInvoiceDetailID());
                                        tes2 = detil4.getStDescription();
                                    }
                                    
                                    comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rccom.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(selisihReal)){
                                        comlinenew.setStDescription("HUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()),"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                        logger.logDebug("++++++++++++++ HUTANG LAGI +++++++++++++++++++++++++");
                                        logger.logDebug(" account setting = "+ rcInvoiceDetail.getTrxLine().getStGLArAccount());
                                        logger.logDebug("acooun hasil = "+ applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()));
                                        logger.logDebug("++++++++++++++ HUTANG LAGI +++++++++++++++++++++++++");
                                    }
                                    
                                    if(BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("LEBIH BAYAR "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    comlinenew.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlinenew.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    comlinenew.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                                    journal.add(comlinenew);
                                    
                                }
                            }
                        }
                    }//END
                    
                    //POSTING JURNAL PAJAK
                    
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        boolean centangComm = false;
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                final ARInvoiceDetailView parentInvoiceDetail = rccom.getInvoiceDetail().getRef();
                                
                                boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                                
                                logger.logDebug("++++++++++++++++ JURNAL PAJAK KURANG +++++++++++++++");
                                logger.logDebug("parentLunas = "+ parentLunas);
                                logger.logDebug("++++++++++++++++ JURNAL PAJAK KURANG +++++++++++++++");
                                
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String tes = "";
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    tes = detil2.getStDescription();
                                }
                                
                                String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                comline1.setStDescription(paymentDesc);
                                comline1.setStDescription("HUTANG "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                
                                journal.add(comline1);
                                
                                if(parentLunas){
                                    //add jurnal beban pajak
                                    final JournalView comlineBebanPajak = gl.copy();
                                    
                                    final BigDecimal comamt2 = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    comlineBebanPajak.setDbAutoCredit(comamt2);
                                    
                                    ARInvoiceDetailView detilBebanPajak = new ARInvoiceDetailView();
                                    
                                    detilBebanPajak = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tesBebanPajak = "";
                                    ARInvoiceDetailView detil2BebanPajak = new ARInvoiceDetailView();
                                    if(detilBebanPajak.getStRefInvoiceDetailID()!=null){
                                        detil2BebanPajak = getARInvoiceDetailParent(detilBebanPajak.getStRefInvoiceDetailID());
                                        tesBebanPajak = detil2BebanPajak.getStDescription();
                                    }
                                    
                                    comlineBebanPajak.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount()),"Invalid or empty account in payment method ");
                                    comlineBebanPajak.setStDescription(paymentDesc);
                                    comlineBebanPajak.setStDescription("BEBAN "+ tesBebanPajak +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comlineBebanPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlineBebanPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    
                                    journal.add(comlineBebanPajak);
                                    //end add jurnal beban pajak
                                    
                                    //add jurnal hutang pajak
                                    final JournalView comlineHutangPajak = gl.copy();
                                    
                                    final BigDecimal comamtHutangPajak = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    comlineHutangPajak.setDbAutoDebit(comamtHutangPajak);
                                    /*
                                    if(rcInvoiceDetail.isNegative()){
                                        comlineHutangPajak.setDbAutoDebit(comamtHutangPajak);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comlineHutangPajak.setDbAutoCredit(comamtHutangPajak);
                                    }*/
                                    
                                    ARInvoiceDetailView detilHutangPajak = new ARInvoiceDetailView();
                                    
                                    detilHutangPajak = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tesHutangPajak = "";
                                    ARInvoiceDetailView detil2HutangPajak = new ARInvoiceDetailView();
                                    if(detilHutangPajak.getStRefInvoiceDetailID()!=null){
                                        detil2HutangPajak = getARInvoiceDetailParent(detilHutangPajak.getStRefInvoiceDetailID());
                                        tesHutangPajak = detil2HutangPajak.getStDescription();
                                    }
                                    
                                    comlineHutangPajak.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR")),"Invalid or empty account in payment method ");
                                    comlineHutangPajak.setStDescription(paymentDesc);
                                    comlineHutangPajak.setStDescription("HUTANG "+ tesHutangPajak +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comlineHutangPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlineHutangPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comlineHutangPajak);
                                    //end add jurnal beban pajak
                                }
                            }
                        }
                    }
                    //END POSTING PAJAK
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                final String stHeaderID = getRemoteGeneralLedger().saveJournalEntryAutoPayment(journal);
                
                //AUTO CREATE ENDORSE POLIS SEMENTARA DAN BAYAR OTOMATIS
                InsurancePolicyView polis = rcp.getArapinvoice().getPolicy();
                
                InsurancePolicyView polisSementara = rcp.getArapinvoice().getPolicy().getTemporaryPolicy();
                
                final String temporaryPolicy = rcp.getArapinvoice().getPolicy().getStReference6();
                
                ARReceiptView rcpCoins = (ARReceiptView) ObjectCloner.deepCopy(rcp);
                
                String endorsePolisSementaraPolID = null;
                if(temporaryPolicy!=null){
                    logger.logDebug("+++++++++++++++++++++++= AUTO CREATE ENDORSE ++++++++++++++++++++");
                    logger.logDebug("Polis Sementara = "+polisSementara.getStPolicyNo());
                    logger.logDebug("+++++++++++++++++++++++= AUTO CREATE ENDORSE ++++++++++++++++++++");
                    PolicyForm form = new PolicyForm();
                    endorsePolisSementaraPolID = form.editCreateAutoEndorse(temporaryPolicy, rcp.getDbAmount(), polis.getDbInsuredAmount());
                    
                    
                    ARInvoiceView invoiceEndorsePolisSementara = getARInvoiceByAttrPolID(endorsePolisSementaraPolID);
                    
                    
                    final ARReceiptLinesView rcl = new ARReceiptLinesView();
                    rcl.markNew();
                    
                    rcl.setStInvoiceID(invoiceEndorsePolisSementara.getStARInvoiceID());
                    rcl.setStInvoiceNo(invoiceEndorsePolisSementara.getStInvoiceNo());
                    rcl.setStCurrencyCode(invoiceEndorsePolisSementara.getStCurrencyCode());
                    rcl.setDbCurrencyRate(invoiceEndorsePolisSementara.getDbCurrencyRate());
                    rcl.setDbInvoiceAmount(invoiceEndorsePolisSementara.getDbOutstandingAmount());
                    rcl.setDbEnteredAmount(rcl.getDbInvoiceAmount());
                    //rcl.setStNegativeFlag(d.getStNegativeFlag());
                    rcl.markAsInvoice();
                    rcl.markCommit();
                    
                    
                    rcp.getDetails().add(rcl);
                    
                    rcp.recalculate();
                    
                    
                    //onExpandInvoiceItem();
                    
                    final ARInvoiceView invoice = rcl.getInvoice();
                    
                    rcl.setStExpandedFlag("Y");
                    
                    final DTOList details2 = invoice.getDetails();
                    
                    for (int i = 0; i < details2.size(); i++) {
                        ARInvoiceDetailView d = (ARInvoiceDetailView) details2.get(i);
                        
                        final ARReceiptLinesView rcl2 = new ARReceiptLinesView();
                        rcl2.markNew();
                        
                        rcl2.setStInvoiceID(invoice.getStARInvoiceID());
                        rcl2.setStInvoiceNo(invoice.getStInvoiceNo());
                        rcl2.setStInvoiceDetailID(d.getStARInvoiceDetailID());
                        rcl2.setStDescription(d.getStDescription());
                        rcl2.setStCurrencyCode(invoice.getStCurrencyCode());
                        rcl2.setDbCurrencyRate(invoice.getDbCurrencyRate());
                        
                        rcl2.setDbInvoiceAmount(d.getDbEnteredAmount());
                        rcl2.setDbAmount(d.getDbOustandingAmount());
                        rcl2.setDbEnteredAmount(d.getDbOustandingAmount());
                        
                        if(d.isCommission2()||d.isBrokerage2()
                        ||d.isHandlingFee2()){
                            rcl2.setStLock(false);
                        }
                        
                        if(d.isTaxComm()||d.isTaxBrok()||d.isTaxHFee()){
                            rcl2.setDbAmount(BDUtil.zero);
                            rcl2.setDbEnteredAmount(BDUtil.zero);
                        }
                        
                        if (d.isComission()) rcl2.markAsComission();
                        rcl2.markCommit();
                        
                        rcl.getDetails().add(rcl2);
                    }
                    rcp.recalculate();
                    
                    savePembayaranPremiOtomatisEndorseSementara(rcp, stHeaderID);
                    
                    //BAYAR KOAS NYA
                    
                    ARInvoiceView invoiceEndorsePolisSementaraCoins = getARInvoiceByAttrPolIDCoins(endorsePolisSementaraPolID);
                    
                    final ARReceiptLinesView rclCoins = new ARReceiptLinesView();
                    rclCoins.markNew();
                    
                    rclCoins.setStInvoiceID(invoiceEndorsePolisSementaraCoins.getStARInvoiceID());
                    rclCoins.setStInvoiceNo(invoiceEndorsePolisSementaraCoins.getStInvoiceNo());
                    rclCoins.setStCurrencyCode(invoiceEndorsePolisSementaraCoins.getStCurrencyCode());
                    rclCoins.setDbCurrencyRate(invoiceEndorsePolisSementaraCoins.getDbCurrencyRate());
                    rclCoins.setDbInvoiceAmount(invoiceEndorsePolisSementaraCoins.getDbOutstandingAmount());
                    rclCoins.setDbEnteredAmount(rclCoins.getDbInvoiceAmount());
                    //rcl.setStNegativeFlag(d.getStNegativeFlag());
                    rclCoins.markAsInvoice();
                    rclCoins.markCommit();
                    
                    
                    rcpCoins.getDetails().add(rclCoins);
                    
                    rcpCoins.recalculate();
                    
                    //onExpandInvoiceItem();
                    
                    final ARInvoiceView invoiceCoins = rclCoins.getInvoice();
                    
                    rclCoins.setStExpandedFlag("Y");
                    
                    final DTOList details2Coins = invoiceCoins.getDetails();
                    
                    for (int i = 0; i < details2Coins.size(); i++) {
                        ARInvoiceDetailView dCoins = (ARInvoiceDetailView) details2Coins.get(i);
                        
                        final ARReceiptLinesView rcl2Coins = new ARReceiptLinesView();
                        rcl2Coins.markNew();
                        
                        rcl2Coins.setStInvoiceID(invoiceCoins.getStARInvoiceID());
                        rcl2Coins.setStInvoiceNo(invoiceCoins.getStInvoiceNo());
                        rcl2Coins.setStInvoiceDetailID(dCoins.getStARInvoiceDetailID());
                        rcl2Coins.setStDescription(dCoins.getStDescription());
                        rcl2Coins.setStCurrencyCode(invoiceCoins.getStCurrencyCode());
                        rcl2Coins.setDbCurrencyRate(invoiceCoins.getDbCurrencyRate());
                        
                        rcl2Coins.setDbInvoiceAmount(dCoins.getDbEnteredAmount());
                        rcl2Coins.setDbAmount(dCoins.getDbOustandingAmount());
                        rcl2Coins.setDbEnteredAmount(dCoins.getDbOustandingAmount());
                        
                        if(dCoins.isCommission2()||dCoins.isBrokerage2()
                        ||dCoins.isHandlingFee2()){
                            rcl2Coins.setStLock(false);
                        }
                        
                        if(dCoins.isTaxComm()||dCoins.isTaxBrok()||dCoins.isTaxHFee()){
                            rcl2Coins.setDbAmount(BDUtil.zero);
                            rcl2Coins.setDbEnteredAmount(BDUtil.zero);
                        }
                        
                        if (dCoins.isComission()) rcl2Coins.markAsComission();
                        rcl2Coins.markCommit();
                        
                        rclCoins.getDetails().add(rcl2Coins);
                    }
                    rcpCoins.recalculate();
                    
                    savePembayaranPremiOtomatisEndorseSementaraCoins(rcpCoins, stHeaderID,rclCoins.getDbInvoiceAmount());
                    
                }
                
                
                //end
                
                //BUAT HUTANG PIUTANG PIHAK KETIGA
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail.isTax()) continue;
                            
                            boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                            
                            if(hasExcess){
                                
                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                                
                                if(BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())&&
                                        BDUtil.biggerThan(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                    continue;
                                
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                                
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                                
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                                
                                
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                                
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                                
                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                                
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                                
                                invoice.setDbAmount(selisih);
                                invoice.setDbEnteredAmount(selisih);
                                
                                
                                final DTOList ivdetails = new DTOList();
                                
                                invoice.setDetails(ivdetails);
                                
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {
                                    
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                    
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                        
                                        ivd.markNew();
                                        
                                        ivdetails.add(ivd);
                                        
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(selisih);
                                        ivd.setDbAmount(selisih);
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    }
                                }
                                
                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());
                                
                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );
                                    
                                    {
                                        
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                        
                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);
                                            
                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();
                                            
                                            ivdChild.markNew();
                                            
                                            ivdetails.add(ivdChild);
                                            
                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());
                                            
                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setDbAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                        }
                                    }
                                }
                                
                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }
                            
                        }
                        
                    }
                }
                
                //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList comissionList = rcl.getDetails();
                    
                    if (comissionList.size()>0) {
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(!rcInvoiceDetail.isTax()) continue;
                            
                            final BigDecimal comamt = rcc.getDbOutstandingAmount();
                            
                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();
                            
                            boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                            
                            if(!parentLunas) continue;
                            
                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }
                            
                            
                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                            
                            //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                            //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                            
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setDbAmount(comamt);
                            invoice.setDbEnteredAmount(comamt);
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(comamt);
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                }
                            }
                                    
                                    invoice.recalculate2();
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    //}
                                    
                        }
                        
                    }
                    
                    
                }
                
                //end hutang pajak
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public ARInvoiceView getARInvoiceByAttrPolID(String attrpolid) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where attr_pol_id = ? and ar_trx_type_id in (5,6,7)  and (coalesce(cancel_flag,'') <> 'Y' or coalesce(posted_flag,'Y') = 'Y')",
                new Object [] {attrpolid},
                ARInvoiceView.class
                ).getDTO();
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select a.* from ar_invoice_details a,ar_invoice b where a.ar_invoice_id = b.ar_invoice_id and b.attr_pol_id = ? and b.ar_trx_type_id in (5,6,7)",
                    new Object [] {attrpolid},
                    ARInvoiceDetailView.class
                    )
                    
                    );
        }
        
        return iv;
    }
    
    public void savePembayaranPremiOtomatisEndorseSementara(ARReceiptView rcp, String stHeaderID) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getEntity2(rcp.getStEntityID()).getStGLCode());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = Tools.isNo(rcp.getStPostedFlag());
            
            //rcp.setStARAPInvoiceID(stARInvoiceID);
            
            //S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                //get polis
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
                
                
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
                gl.setStTransactionHeaderID(stHeaderID);
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);
                    
                    final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());
                    
                    head.setStAccountIDNotNull(applicator.getAccountID(rc.getStReference1()),"Invalid or empty account in payment method ");
                    head.setStDescription(paymentDesc);
                    ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                    head.setStDescription("RETUR "+rl.getStInvoiceNo());
                    logger.logDebug("++++++++++++++++ RETUR OTOMATIS +++++++++++++++++");
                    logger.logDebug("AMOUNT = "+ rcp.getDbEnteredAmount());
                    
                    head.setDbEnteredCredit(rcp.getDbEnteredAmount());
                    head.setDbEnteredDebit(BDUtil.zero);
                    logger.logDebug("Debit : "+ head.getDbDebit());
                    logger.logDebug("Credit : "+ head.getDbCredit());
                    logger.logDebug("++++++++++++++++ RETUR OTOMATIS +++++++++++++++++");
                    /*
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        head.setStDescription("TERIMA "+rl.getStInvoiceNo());
                    } else {
                        head.setStDescription("TERIMA "+rcp.getDetails().size()+" INVOICES");
                        head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                    }*/
                    
                    head.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                    journal.add(head);
                    
                }
                
                // POSTING JURNAL PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    //cek jika bukan endorse temp maka jgn posting
                    ARInvoiceView voice = rl.getInvoice();
                    InsurancePolicyView endorseSementara = voice.getPolicy();
                    if(!endorseSementara.getStStatus().equalsIgnoreCase(FinCodec.PolicyStatus.ENDORSETEMPORARY)) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    //POSTING LINE
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (rccom.isDelete()) continue;
                                
                                if(rcInvoiceDetail.isPolicyCost2()||rcInvoiceDetail.isDiscount2()||
                                        rcInvoiceDetail.isStampDuty2()||rcInvoiceDetail.isCommission2()||
                                        rccom.isComission()) {
                                    
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                    
                                    final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        //comAccount = rcp.getStAccountID();
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount());
                                    }
                                    
                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        //final ARInvoiceView inv2 = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                        //comamt = inv2.getDbAmount();
                                        comamt = rccom.getInvoice().getDbAmount();
                                    }
                                    
                                    if(rcInvoiceDetail.isNegative()){
                                        if(rcInvoiceDetail.isTax())	comline.setDbAutoDebit(taxamt);
                                        else	comline.setDbAutoDebit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoCredit(comamt);
                                    }
                                    
                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        tes = detil2.getStDescription();
                                    }
                                    
                                    boolean lunas = BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                    
                                    comline.setStDescription("TERIMA "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rcp.getArapinvoice().isAP())
                                        comline.setStDescription("Pembayaran "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription(accountDescPremiG);
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comline);
                                }
                                
                                //boolean hasExcess = !BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                boolean hasExcess = !BDUtil.isZero(rccom.getDbOutstandingAmountAct());
                                
                                if(hasExcess){
                                    if(rcInvoiceDetail.isTax()) continue;
                                    
                                    if(BDUtil.isZero(BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1))))
                                        continue;
                                    
                                    if(BDUtil.lesserThanZero(rccom.getDbOutstandingAmountAct()) && BDUtil.biggerThan(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                        continue;
                                    
                                    
                                    BigDecimal selisih = BDUtil.biggerThanZero(rccom.getDbOutstandingAmountAct())?rccom.getDbOutstandingAmountAct():BDUtil.mul(rccom.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                    
                                    BigDecimal selisihReal = rccom.getDbOutstandingAmountAct();
                                    
                                    final JournalView comlinenew = gl.copy();
                                    
                                    final BigDecimal comamt2 = selisih;
                                    
                                    final BigDecimal comamtLebih = selisih;
                                    
                                    if(rcInvoiceDetail.isComission()||rcInvoiceDetail.isDiscount()){
                                        if(BDUtil.lesserThanZero(selisihReal)) comlinenew.setDbAutoDebit(comamt2);
                                        else comlinenew.setDbAutoCredit(comamt2);
                                    }else{
                                        if(BDUtil.lesserThanZero(selisihReal)) comlinenew.setDbAutoCredit(comamtLebih);
                                        else comlinenew.setDbAutoDebit(comamt2);
                                    }
                                    
                                    //comlinenew.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    final ARInvoiceView invoice = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                    comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    
                                    comlinenew.setStDescription(paymentDesc);
                                    
                                    ARInvoiceDetailView detil4 = new ARInvoiceDetailView();
                                    
                                    detil4 = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes2 = "";
                                    ARInvoiceDetailView detil3 = new ARInvoiceDetailView();
                                    if(detil2.getStRefInvoiceDetailID()!=null){
                                        detil3 = getARInvoiceDetailParent(detil4.getStRefInvoiceDetailID());
                                        tes2 = detil4.getStDescription();
                                    }
                                    
                                    comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rccom.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(selisihReal)){
                                        comlinenew.setStDescription("HUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()),"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                        logger.logDebug("++++++++++++++ HUTANG LAGI +++++++++++++++++++++++++");
                                        logger.logDebug(" account setting = "+ rcInvoiceDetail.getTrxLine().getStGLArAccount());
                                        logger.logDebug("acooun hasil = "+ applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount()));
                                        logger.logDebug("++++++++++++++ HUTANG LAGI +++++++++++++++++++++++++");
                                    }
                                    
                                    if(BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("LEBIH BAYAR "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(selisihReal)){
                                        comlinenew.setStDescription("PIUTANG "+ tes2 +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comlinenew.setStAccountIDNotNull(applicator.getAccountID(invoice.getARTrxType().getStGLARAccount()),"Invalid or empty account in payment method ");
                                    }
                                    
                                    comlinenew.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlinenew.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    comlinenew.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                                    journal.add(comlinenew);
                                    
                                }
                            }
                        }
                    }//END
                    
                    //POSTING JURNAL PAJAK
                    
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        boolean centangComm = false;
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                final ARInvoiceDetailView parentInvoiceDetail = rccom.getInvoiceDetail().getRef();
                                
                                boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                                
                                logger.logDebug("++++++++++++++++ JURNAL PAJAK KURANG +++++++++++++++");
                                logger.logDebug("parentLunas = "+ parentLunas);
                                logger.logDebug("++++++++++++++++ JURNAL PAJAK KURANG +++++++++++++++");
                                
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String tes = "";
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    tes = detil2.getStDescription();
                                }
                                
                                String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                comline1.setStDescription(paymentDesc);
                                comline1.setStDescription("HUTANG "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                
                                journal.add(comline1);
                                
                                if(parentLunas){
                                    //add jurnal beban pajak
                                    final JournalView comlineBebanPajak = gl.copy();
                                    
                                    final BigDecimal comamt2 = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    comlineBebanPajak.setDbAutoCredit(comamt2);
                                    
                                    ARInvoiceDetailView detilBebanPajak = new ARInvoiceDetailView();
                                    
                                    detilBebanPajak = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tesBebanPajak = "";
                                    ARInvoiceDetailView detil2BebanPajak = new ARInvoiceDetailView();
                                    if(detilBebanPajak.getStRefInvoiceDetailID()!=null){
                                        detil2BebanPajak = getARInvoiceDetailParent(detilBebanPajak.getStRefInvoiceDetailID());
                                        tesBebanPajak = detil2BebanPajak.getStDescription();
                                    }
                                    
                                    comlineBebanPajak.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount()),"Invalid or empty account in payment method ");
                                    comlineBebanPajak.setStDescription(paymentDesc);
                                    comlineBebanPajak.setStDescription("BEBAN "+ tesBebanPajak +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comlineBebanPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlineBebanPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    
                                    journal.add(comlineBebanPajak);
                                    //end add jurnal beban pajak
                                    
                                    //add jurnal hutang pajak
                                    final JournalView comlineHutangPajak = gl.copy();
                                    
                                    final BigDecimal comamtHutangPajak = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    comlineHutangPajak.setDbAutoDebit(comamtHutangPajak);
                                    /*
                                    if(rcInvoiceDetail.isNegative()){
                                        comlineHutangPajak.setDbAutoDebit(comamtHutangPajak);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comlineHutangPajak.setDbAutoCredit(comamtHutangPajak);
                                    }*/
                                    
                                    ARInvoiceDetailView detilHutangPajak = new ARInvoiceDetailView();
                                    
                                    detilHutangPajak = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tesHutangPajak = "";
                                    ARInvoiceDetailView detil2HutangPajak = new ARInvoiceDetailView();
                                    if(detilHutangPajak.getStRefInvoiceDetailID()!=null){
                                        detil2HutangPajak = getARInvoiceDetailParent(detilHutangPajak.getStRefInvoiceDetailID());
                                        tesHutangPajak = detil2HutangPajak.getStDescription();
                                    }
                                    
                                    comlineHutangPajak.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR")),"Invalid or empty account in payment method ");
                                    comlineHutangPajak.setStDescription(paymentDesc);
                                    comlineHutangPajak.setStDescription("HUTANG "+ tesHutangPajak +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comlineHutangPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comlineHutangPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comlineHutangPajak);
                                    //end add jurnal beban pajak
                                }
                            }
                        }
                    }
                    //END POSTING PAJAK
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntryTes(journal);
                
                //BUAT HUTANG PIUTANG PIHAK KETIGA
                /*
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                 
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                 
                    final DTOList comissionList = rcl.getDetails();
                 
                    if (comissionList.size()>0) {
                 
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                 
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                 
                            if(rcInvoiceDetail.isTax()) continue;
                 
                            boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                 
                            if(hasExcess){
                 
                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                 
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                 
                                if(BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())&&
                                        BDUtil.biggerThan(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                    continue;
                 
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                 
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                 
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                 
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                 
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                 
                 
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                 
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                 
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                 
                 
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                 
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                 
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                 
                 
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                 
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                 
                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                 
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                 
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                 
                                invoice.setDbAmount(selisih);
                                invoice.setDbEnteredAmount(selisih);
                 
                 
                                final DTOList ivdetails = new DTOList();
                 
                                invoice.setDetails(ivdetails);
                 
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {
                 
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                 
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                 
                                        ivd.markNew();
                 
                                        ivdetails.add(ivd);
                 
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(selisih);
                                        ivd.setDbAmount(selisih);
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    }
                                }
                 
                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());
                 
                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );
                 
                                    {
                 
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                 
                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);
                 
                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();
                 
                                            ivdChild.markNew();
                 
                                            ivdetails.add(ivdChild);
                 
                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());
                 
                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setDbAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                        }
                                    }
                                }
                 
                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }
                 
                        }
                 
                    }
                }
                 
                //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK
                 
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                 
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                 
                    final DTOList comissionList = rcl.getDetails();
                 
                    if (comissionList.size()>0) {
                 
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) comissionList.get(j);
                 
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                 
                            if(!rcInvoiceDetail.isTax()) continue;
                 
                            final BigDecimal comamt = rcc.getDbOutstandingAmount();
                 
                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();
                 
                            boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                 
                            if(!parentLunas) continue;
                 
                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                 
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                 
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                 
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                 
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }
                 
                 
                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                 
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                 
                            //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                            //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                 
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                 
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                 
                            invoice.setDbAmount(comamt);
                            invoice.setDbEnteredAmount(comamt);
                 
                 
                            final DTOList ivdetails = new DTOList();
                 
                            invoice.setDetails(ivdetails);
                 
                 
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                 
                            {
                 
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                 
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                 
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                 
                                    ivd.markNew();
                 
                                    ivdetails.add(ivd);
                 
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(comamt);
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                }
                            }
                 
                                    invoice.recalculate2();
                 
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    //}
                 
                        }
                 
                    }
                 
                 
                }
                 */
                //end hutang pajak
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
        
    }
    
    public ARInvoiceView getARInvoiceByAttrPolIDCoins(String attrpolid) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where attr_pol_id = ? and ar_trx_type_id = 10",
                new Object [] {attrpolid},
                ARInvoiceView.class
                ).getDTO();
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select a.* from ar_invoice_details a,ar_invoice b where a.ar_invoice_id = b.ar_invoice_id and b.attr_pol_id = ? and ar_trx_type_id = 10",
                    new Object [] {attrpolid},
                    ARInvoiceDetailView.class
                    )
                    
                    );
        }
        
        return iv;
    }
    
    public void savePembayaranPremiOtomatisEndorseSementaraCoins(ARReceiptView rcp, String stHeaderID, BigDecimal amount) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getEntity2(rcp.getStEntityID()).getStGLCode());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpen ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpen note
            
            S.store(gLs);//excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = Tools.isNo(rcp.getStPostedFlag());
            
            //rcp.setStARAPInvoiceID(stARInvoiceID);
            
            //S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                //get polis
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
                
                
                
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.markNew();
                gl.setStTransactionHeaderID(stHeaderID);
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING PEMBAYARAN
                if (rc.isBank()) {
                    final JournalView head = gl.copy();
                    
                    ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);
                    
                    final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());
                    
                    head.setStAccountIDNotNull(applicator.getAccountID(rc.getStReference1()),"Invalid or empty account in payment method ");
                    head.setStDescription(paymentDesc);
                    ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                    head.setStDescription("RETUR "+rl.getStInvoiceNo());
                    logger.logDebug("++++++++++++++++ RETUR OTOMATIS +++++++++++++++++");
                    logger.logDebug("AMOUNT = "+ rcp.getDbEnteredAmount());
                    
                    head.setDbEnteredCredit(BDUtil.negate(amount));
                    head.setDbEnteredDebit(BDUtil.zero);
                    logger.logDebug("++++++++++++++++ RETUR OTOMATIS +++++++++++++++++");
                    /*
                    if (rcp.getDetails().size()==1) {
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        head.setStDescription("TERIMA "+rl.getStInvoiceNo());
                    } else {
                        head.setStDescription("TERIMA "+rcp.getDetails().size()+" INVOICES");
                        head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                    }*/
                    
                    head.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                    journal.add(head);
                    
                }
                
                // POSTING JURNAL PELUNASAN
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    //cek jika bukan endorse temp maka jgn posting
                    ARInvoiceView voice = rl.getInvoice();
                    InsurancePolicyView endorseSementara = voice.getPolicy();
                    if(!endorseSementara.getStStatus().equalsIgnoreCase(FinCodec.PolicyStatus.ENDORSETEMPORARY)) continue;
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    //POSTING LINE
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        
                        if (comissionList.size()>0) {
                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) comissionList.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView detil2 = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                applicator.setCode('P', rcInvoiceDetail.getStEntityID());
                                
                                if (rccom.isDelete()) continue;
                                
                                if(rcInvoiceDetail.isPolicyCost2()||rcInvoiceDetail.isDiscount2()||
                                        rcInvoiceDetail.isStampDuty2()||rcInvoiceDetail.isCommission2()||
                                        rccom.isComission()) {
                                    
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbEnteredAmount());
                                    
                                    final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                    
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        //comAccount = rcp.getStAccountID();
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount());
                                    }
                                    
                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        //final ARInvoiceView inv2 = getARInvoice(rccom.getInvoice().getStARInvoiceID());
                                        //comamt = inv2.getDbAmount();
                                        comamt = rccom.getInvoice().getDbAmount();
                                    }
                                    
                                    comline.setDbEnteredDebit(comamt);
                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+comAccount+")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    
                                    String tes = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        detil2 = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        tes = detil2.getStDescription();
                                    }
                                    
                                    boolean lunas = BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                    
                                    comline.setStDescription("TERIMA "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rcp.getArapinvoice().isAP())
                                        comline.setStDescription("Pembayaran "+ tes +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription(accountDescPremiG);
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    
                                    journal.add(comline);
                                }
                                
                                //boolean hasExcess = !BDUtil.isZero(BDUtil.sub(rccom.getDbOutstandingAmountAct(),rccom.getDbAmount()));
                                boolean hasExcess = !BDUtil.isZero(rccom.getDbOutstandingAmountAct());
                                
                            }
                        }
                    }//END
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntryTes(journal);
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
        
    }
        
    public void savePembayaranPremi(ARReceiptView rcp) throws Exception {
        
        boolean taxAcrualBases = true;

        rcp.validatePembayaranPremi();

        boolean jurnalOnly = false;

        boolean bentukHutangOnly = false;

        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
         
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        
        if (rcp.getStEntityID()!=null){
            
            if(rcp.getEntity2(rcp.getStEntityID()).getStShortName()!=null)
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStShortName());
            else
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStEntityName());
        }

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            if(rcp.isNew()){
                rcp.generateReceiptNo();
                    
                rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            }
            
            if(!rcp.isNew())
                if(rcp.getStReceiptNo2()==null)
                    rcp.setStReceiptNo2(rcp.generateReceiptNo2());

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
           
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                     rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStARInvoiceDetailID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclsub.isCheck())
                            if(rclsub.getInvoiceDetail()!=null)
                                rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStARInvoiceDetailID());
                            
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpan ke receipt lines
                //}
                
                //if (rcl.getListTitipan().size()>0) {
                    final DTOList subTitipan = rcl.getListTitipan();
                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);

                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo2());

                        if(rcl.getDtReceiptDate()!=null){
                            rclTitipan.setDtReceiptDate(rcl.getDtReceiptDate());
                        }
                        
                        if(rclTitipan.isCheck())
                            if(rclTitipan.getInvoiceDetail()!=null)
                                rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());
                            
                        if (rclTitipan.isNew()){
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                        }    
                    }
                    
                    S.store(subTitipan);//simpan ke receipt lines

                    if(rcl.getPolicy()!=null){
                        InsurancePolicyView pol = rcl.getPolicy();

                        pol.setDtPaymentDate(rcl.getDtReceiptDate());
                        pol.setStReceiptNo(rcl.getStReceiptNo());
                        pol.setStPaymentNotes(rcl.getStReceiptNo());
                        pol.markUpdate();
                        S.store(pol);
                    }

    
            }
            
            S.store(rcp.getNotes());//simpan note
            
            S.store(gLs);//simpan excess
            
            S.store(details);//simpen receipt dr invoice

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            //final boolean doPost = Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            //C1209242424001 00001
            //01234567890123 456789

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
                 rcp.setStARAPInvoiceID(null);
            }

            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                if(rcp.getStEntityID()!=null){
                    final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                    applicator.setCode('Y', entityGLCode);

                    applicator.setDesc("Y",rcp.getEntity().getStShortName());

                    if(entityGLCode.equalsIgnoreCase("00000"))
                        applicator.setDesc("Y","");
                }else{
                    applicator.setCode('Y', "00000");
                    applicator.setDesc("Y","");
                }
 
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.setStSummaryFlag("Y");
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING JURNAL HEADER RECEIPT VIEW
                if(!bentukHutangOnly){
                      if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl3.getInvoice()==null)
                                jurnalHead = false;

                        String ccCodepolis = "";

                        if(rl3.getPolicy()!=null)
                                ccCodepolis = rl3.getPolicy().getStCostCenterCode();

                        //Get Akun header
                        String accountHeaderID = "";

                        if(ccCodepolis.equalsIgnoreCase("80")){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");
                            applicator.setCode('B', "80");

                            accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }else{
                            accountHeaderID = rcp.getStAccountID();
                        }

                        BigDecimal jumlahBayar = rcp.getDbEnteredAmount();

                        if(ccCodepolis.equalsIgnoreCase("80")){
                            if(rl3.getStARSettlementExcessID()!=null && !rl3.isGL()){

                                //jika kurang bayar, tambah
                                if(rl3.getARSettlementExcess().isNegative())
                                    jumlahBayar = BDUtil.add(jumlahBayar, rl3.getDbExcessAmount());

                                //jika lebih bayar, kurang
                                if(!rl3.getARSettlementExcess().isNegative())
                                    jumlahBayar = BDUtil.sub(jumlahBayar, rl3.getDbExcessAmount());
                            }
                        }

                        head.setDbAutoCredit(BDUtil.mul(negator, jumlahBayar));

                        head.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                        String desc1 = "";

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                            if(rl.getStInvoiceNo()!=null) desc1 = rl.getStInvoiceNo();

                            head.setStDescription("TERIMA PEMBAYARAN "+ desc1);
                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                        } else {
                            head.setStDescription("TERIMA "+rcp.getDetails().size()+" PEMBAYARAN");
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                        }

                        if(rl3.getInvoice()!=null)
                            head.setStPolicyNo(rl3.getInvoice().getStAttrPolicyNo());

                        if(jurnalHead)
                            journal.add(head);

                    }
                }
                
                //END POSTING JURNAL HEADER RECEIPT VIEW
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;

              if(!bentukHutangOnly)
              { // POSTING JURNAL PELUNASAN RECEIPT LINES / DETAIL
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl.getInvoice()==null)
                                jurnalHead = false;

                    if(rl.getInvoice()!=null){
                        applicator.setCode('X', rl.getInvoice().getPolicyType().getStGLCode());
                        applicator.setDesc("X", rl.getInvoice().getPolicyType().getStShortDescription());
                    }
                
                    if (rl.isDelete()) continue;

                    String ccCodepolis = "";

                    if(rl.getPolicy()!=null)
                           ccCodepolis = rl.getPolicy().getStCostCenterCode();

                    //Get Akun header
                    String accountHeaderID = "";

                    if(ccCodepolis.equalsIgnoreCase("80")){
                        applicator.setCode('Y', "00001");
                        applicator.setCode('G', "00001");
                        applicator.setCode('B', "80");

                        accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                    }else{
                        accountHeaderID = rcp.getStAccountID();
                    }

                    
                    if(moreThan1Policy){

                        if(!ccCodepolis.equalsIgnoreCase("80")){
                            if (rc.isBank() && !rl.isGL()) {
                                final JournalView head = gl.copy();

                                head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");

                                String descHead = "";
                                if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();
                                head.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                if(rl.getStInvoiceID()!=null){
                                    head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                }

                                if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                    head.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                if(jurnalHead)
                                    journal.add(head);

                            }
                        }else{
                                if (rc.isBank() && !rl.isGL()) {
                                    final JournalView head = gl.copy();

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', "80");

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    head.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");

                                    String descHead = "";
                                    if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();
                                    head.setStDescription("TERIMA PEMBAYARAN "+descHead);

                                    BigDecimal jumlahBayar = rl.getDbTotalAmountPerLine();

                                    if(ccCodepolis.equalsIgnoreCase("80")){
                                        if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){

                                            //jika kurang bayar, tambah
                                            //if(rl.getARSettlementExcess().isNegative())
                                                //jumlahBayar = BDUtil.add(jumlahBayar, rl.getDbExcessAmount());

                                            //jika lebih bayar, kurang
                                            //if(!rl.getARSettlementExcess().isNegative())
                                                //jumlahBayar = BDUtil.sub(jumlahBayar, rl.getDbExcessAmount());
                                        }
                                    }

                                    head.setDbAutoCredit(BDUtil.mul(negator, jumlahBayar));

                                    head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                    head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                    if(rl.getStInvoiceID()!=null){
                                        head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                    }

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        head.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    if(jurnalHead)
                                        journal.add(head);

                                }
                        }
                        
                    }
                    
                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excessBank = gl.copy();

                        BigDecimal amt = BDUtil.mul(negator,rl.getDbExcessAmount());
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        if(!ccCodepolis.equalsIgnoreCase("80")){
                            if (rcp.getDetails().size() > 1){
                                //ADD JURNAL BANK NYA

                                excessBank.setDbAutoCredit(amt);
                                excessBank.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                                excessBank.setStDescription(rl.getStExcessDescription());
                                excessBank.setStCurrencyCode(rcp.getStCurrencyCode());
                                excessBank.setDbCurrencyRate(rcp.getDbCurrencyRate());

                                if(rl.getStInvoiceID()!=null){
                                        excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                }

                                if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                    excessBank.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                journal.add(excessBank);
                                //END JURNAL BANK
                            }


                            final JournalView excess = gl.copy();

                            final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                            excess.setDbAutoDebit(amt);
                            excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                            excess.setStDescription(rl.getStExcessDescription());
                            excess.setStCurrencyCode(rcp.getStCurrencyCode());
                            excess.setDbCurrencyRate(rcp.getDbCurrencyRate());

                            if(rl.getInvoice()!=null) excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getStInvoiceID()!=null){
                                    excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                excess.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(excess);

                        }else{
                            /*
                            if (rcp.getDetails().size() > 1){
                                //ADD JURNAL BANK NYA

                                excessBank.setDbAutoDebit(amt);
                                excessBank.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in excess account "+xc.getStDescription());

                                excessBank.setStDescription(rl.getStExcessDescription());
                                excessBank.setStCurrencyCode(rcp.getStCurrencyCode());
                                excessBank.setDbCurrencyRate(rcp.getDbCurrencyRate());

                                excessBank.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                excessBank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                                if(rl.getStInvoiceID()!=null){
                                        excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                }

                                if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                    excessBank.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                journal.add(excessBank);

                                //END JURNAL BANK
                            }*/


                            final JournalView excess = gl.copy();

                            final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                            excess.setDbAutoDebit(amt);
                            excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                            excess.setStDescription(rl.getStExcessDescription());
                            excess.setStCurrencyCode(rcp.getStCurrencyCode());
                            excess.setDbCurrencyRate(rcp.getDbCurrencyRate());

                            excess.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                            excess.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                            if(rl.getInvoice()!=null) excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getStInvoiceID()!=null){
                                    excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                excess.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(excess);
                        }

                    }
                    
                    
                    final JournalView line = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    //POSTING LINE
                    boolean bayarTanpaPremi = false;
                    BigDecimal totalBayarTanpaPremi = null;


                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                if(rcInvoiceDetail!=null){
                                    if(rcInvoiceDetail.getEntity()!=null){
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                    }if(rcInvoiceDetail.getStEntityID()==null){
                                        applicator.setCode('P', "00000");
                                    }
                                }

                                if (rccom.isDelete()) continue;
                                
                                boolean dontJurnal = false;
                                boolean isKomisi = false;
                                
                                if(rcInvoiceDetail!=null){

                                    dontJurnal = rcInvoiceDetail.isPolicyCost2() || rcInvoiceDetail.isDiscount2() ||
                                                     rcInvoiceDetail.isStampDuty2() || rcInvoiceDetail.isTaxComm() ||
                                                     rcInvoiceDetail.isTaxBrok() || rcInvoiceDetail.isTaxHFee();
                                    isKomisi = rcInvoiceDetail.isCommission2() || rcInvoiceDetail.isBrokerage2() || rcInvoiceDetail.isHandlingFee2() || rcInvoiceDetail.isPPN() || rcInvoiceDetail.isPPNFeebase();

                                    //PENGECEKAN TAGIHAN TANPA PREMI BRUTO
                                    if(rccom.getInvoice().getPolicy()!=null){
                                        if(BDUtil.isZeroOrNull(rccom.getInvoice().getPolicy().getDbPremiTotal())){
                                            if(!rcInvoiceDetail.isPremiGross2()){
                                                 bayarTanpaPremi = true;
                                                 //totalBayarTanpaPremi = BDUtil.add(totalBayarTanpaPremi, rccom.getDbInvoiceAmount());
                                                 totalBayarTanpaPremi = BDUtil.add(totalBayarTanpaPremi, rccom.getInvoice().getTotalTagihanNetto());
                                            }

                                        }
                                    }
                                    
                                }
  
                                if(isKomisi && rccom.isCheck()) continue;
                                    
                                if(dontJurnal) {
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                    amount = BDUtil.mul(amount, rccom.getDbCurrencyRate(),2);

                                    if(ccCodepolis.equalsIgnoreCase("80"))
                                        applicator.setCode('B', "80");
                                    else
                                        applicator.setCode('B', rcp.getStCostCenterCode());
                                    
                                    if(rcInvoiceDetail!=null){
                                        if(rcInvoiceDetail.isComm()){
                                            comAccount = rcp.getStAccountID();
                                        }else{
                                            comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                        }

                                        if(isKomisi){
                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                        }
                                        
                                        String accountDescPremiG = null;
                                        if(rcInvoiceDetail.isPremiGross2()){

                                            if(getEntity(rccom.getInvoice().getStEntityID())!=null)
                                                applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                            else
                                                applicator.setCode('Y', "00000");

                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                            accountDescPremiG = applicator.getStGLDesc();
                                            //amount = rccom.getInvoice().getDbAmount(); old
                                            amount = rccom.getInvoice().getTotalTagihanNetto();
                                        }

                                        if(rcInvoiceDetail.isUangMukaPremi()){
                                            comAccount = rcInvoiceDetail.getStGLAccountID();
                                            comline.setStDescription("Pembayaran " + rccom.getStDescription());
                                            amount =  BDUtil.mul(negator,amount);
                                        }

                                        if(rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoDebit(amount);
                                        }else if(!rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoCredit(amount);
                                        }
                                    }else{
                                        comAccount = rl.getStAccountID();

                                        if(comAccount==null)  comAccount = rcp.getStAccountID();

                                        if(rl.getListTitipan().size() > 0){
                                            ARReceiptLinesView rlTitipan = (ARReceiptLinesView) rl.getListTitipan().get(0);
                                            TitipanPremiView titipanPremi = getTitipanPremi(rlTitipan.getStTitipanPremiID());
                                            
                                            comAccount = titipanPremi.getStAccountID();
                                        }
                                        
                                        comline.setStDescription(rccom.getStDescription());
                                        comline.setDbAutoDebit(amount);
                                    }

                                    comline.setStAccountIDNotNull(comAccount,"Invalid account "+ comline.getStDescription()+ " in AP_COMM_ACRUAL parameters ("+rccom.getStReceiptLinesID()+": "+rccom.getStReceiptID()+" : "+ amount +")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    String referenceDesc = "";
                                    
                                    if(detil!=null){
                                        if(detil.getStRefInvoiceDetailID()!=null){
                                            referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                            if(referenceARInvoiceDetail!=null) referenceDesc = referenceARInvoiceDetail.getStDescription();
                                        }
                                    }
       
                                    comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());

                                    if(rcInvoiceDetail!=null){
                                        if(rcp.getArapinvoice().isAP())
                                            comline.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    }
                 
                                    if(rcInvoiceDetail!=null){
                                        if(rcInvoiceDetail.isPremiGross2()){
                                            comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        }
                                    }

                                    comline.setStCurrencyCode(rl.getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getDbCurrencyRate());
                                    if(rl.getPolicy()!=null)
                                        comline.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        comline.setDtApplyDate(rccom.getDtReceiptDate());
                                    }

                                    comline.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                    comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                    if(jurnalHead)
                                        journal.add(comline);
                                }
                            }
                        }
                    }//END
                    
                    //POSTING JURNAL PAJAK
                    //REMARK THIS KALAU PAKE ACRUAL BASES
                        if (rl.isInvoice()) {
                            final DTOList detail = rl.getDetails();
                            
                            if (detail.size()>0) {
                                for (int j = 0; j < detail.size(); j++) {
                                    ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);

                                    final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                    if (!rccom.isComission()) continue;

                                    if(!rcInvoiceDetail.isTax()) continue;

                                    if (rccom.isDelete()) continue;

                                    boolean parentLunas = false;

                                    if(ccCodepolis.equalsIgnoreCase("80"))
                                        applicator.setCode('B', "80");
                                    else
                                        applicator.setCode('B', rcp.getStCostCenterCode());

                                    if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                        final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                        for (int k = 0; k < detail.size(); k++) {
                                            ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                            if (!d2.isComission()) continue;

                                            ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                            if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                                 if(d2.isCheck()){//lunas komisi
                                                     parentLunas = true;
                                                     if(rcInvoiceDetail.getEntity()!=null)
                                                            applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                                     else
                                                            applicator.setCode('P', "00000");
                                                 }else{
                                                     if(rcInvoiceDetail2.getEntity()!=null)
                                                            applicator.setCode('P', rcInvoiceDetail2.getEntity().getStGLCode());
                                                     else
                                                            applicator.setCode('P', "00000");
                                                 }
                                            }

                                        }
                                    }

                                    final JournalView comline1 = gl.copy();

                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                    comamt = BDUtil.mul(comamt, rccom.getDbCurrencyRate(),2);

                                    if(rcInvoiceDetail.isNegative()){
                                        comline1.setDbAutoDebit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline1.setDbAutoCredit(comamt);
                                    }

                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();

                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());

                                    String referenceDesc = "";
                                    ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"HUTANG ";
                                    }

                                    //String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));

                                    String account = rl.getInvoice().getStGLARAccountID();

                                    comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                    comline1.setStDescription(paymentDesc);
                                    comline1.setStDescription(referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline1.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getInvoice().getPolicy().isTaxAcrualBases()){
                                        final AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rl.getInvoice().getStGLARAccountID());
                                        comline1.setStDescription(account2.getStDescription());
                                    }

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        comline1.setDtApplyDate(rccom.getDtReceiptDate());
                                    }

                                    comline1.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                    comline1.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                    journal.add(comline1);

                                    //JIKA PAJAK DI CENTANG TAMBAH JURNAL BANK SAJA
                                    if(rccom.isCheck()){
                                        final JournalView comline2 = gl.copy();

                                        if(rcInvoiceDetail.isNegative()){
                                            comline2.setDbAutoCredit(comamt);
                                        }else if(!rcInvoiceDetail.isNegative()){
                                            comline2.setDbAutoDebit(comamt);
                                        }

                                        ARInvoiceDetailView detil2 = new ARInvoiceDetailView();

                                        detil2 = getARInvoiceDetail(rccom.getStInvoiceDetailID());

                                        referenceDesc = "";
                                        ARInvoiceDetailView referenceARInvoiceDetail2 = new ARInvoiceDetailView();
                                        if(detil2.getStRefInvoiceDetailID()!=null){
                                            referenceARInvoiceDetail2 = getARInvoiceDetailParent(detil2.getStRefInvoiceDetailID());
                                            referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"";
                                        }

                                        String account2 = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLApAccount());
                                        comline2.setStAccountIDNotNull(account2,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());

                                        String descHead = "";
                                        if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();

                                        //comline2.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                        comline2.setStDescription("TAGIHAN "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comline2.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                        comline2.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                        comline2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        comline2.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                        comline2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                            comline2.setDtApplyDate(rccom.getDtReceiptDate());
                                        }

                                        journal.add(comline2);
                                    }
                                }
                            }
                        }
                    
                    
                    //END POSTING PAJAK

                    //CEK JIKA PEMBAYARAN TANPA PREMI BRUTO MAKA MASUKKAN ke pembayaran premi
                    
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();

                        if (detail.size()>0) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(0);

                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                String comAccount ="";

                                if(rcInvoiceDetail!=null){
                                    if(rcInvoiceDetail.getEntity()!=null){
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                    }if(rcInvoiceDetail.getStEntityID()==null){
                                        applicator.setCode('P', "00000");
                                    }
                                }

                                if (rccom.isDelete()) continue;

                                if(ccCodepolis.equalsIgnoreCase("80"))
                                    applicator.setCode('B', "80");
                                else
                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    if(bayarTanpaPremi){
                                        final JournalView comline = gl.copy();

                                        BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                        if(rcInvoiceDetail!=null){
                                            if(rcInvoiceDetail.isComm()){
                                                comAccount = rcp.getStAccountID();
                                            }else{
                                                comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                            }

                                            String accountDescPremiG = null;

                                            if(getEntity(rccom.getInvoice().getStEntityID())!=null)
                                                    applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                            else
                                                    applicator.setCode('Y', "00000");

                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                            if(rcInvoiceDetail.getTrxLine().getStGLAccountWithoutPremi()!=null)
                                                comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccountWithoutPremi());

                                            accountDescPremiG = applicator.getStGLDesc();
                                            //amount = BDUtil.mul(negator,rccom.getInvoice().getDbAmount());
                                            amount = BDUtil.mul(negator,rccom.getInvoice().getTotalTagihanNetto());


                                            comline.setDbAutoDebit(amount);
                                        }

                                        comline.setStAccountIDNotNull(comAccount,"Invalid account "+ comline.getStDescription()+ " in AP_COMM_ACRUAL parameters ("+rccom.getStReceiptLinesID()+": "+rccom.getStReceiptID()+" : "+ amount +")" );

                                        if(rcInvoiceDetail!=null){
                                                comline.setStDescription("TERIMA PREMI BRUTO "+ rl.getStInvoiceNo());
                                        }

                                        comline.setStCurrencyCode(rl.getStCurrencyCode());
                                        comline.setDbCurrencyRate(rl.getDbCurrencyRate());
                                        if(rl.getPolicy()!=null)
                                            comline.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                            comline.setDtApplyDate(rccom.getDtReceiptDate());
                                        }

                                        comline.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                        comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                        journal.add(comline);
                                    }
                        }
                    }
                    //END

                    DTOList titipan = rl.getListTitipan();
                    
                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);

                        ARReceiptLinesView indukTitipan = (ARReceiptLinesView) rl;
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiView titipanPremi = getTitipanPremi(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Akun titipan No Bukti : "+titipanPremi.getStTransactionNo() + " Account ID : "+ titipanPremi.getStAccountID() +" tidak ditemukan");
                        
                        if(titipanPremi.getStDescription() != null)
                            jurnalTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiUsedAmount()));

                        jurnalTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                        
                        if(rl.getInvoice()!=null)
                            jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }
 
                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        if(indukTitipan.getStAccountID()!=null)
                            jurnalBankTitipan.setStAccountIDNotNull(indukTitipan.getStAccountID(),"Invalid or empty account in payment method ");
                        
                        jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());

                        if(titipanPremi.getStDescription() != null)
                            jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalBankTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalBankTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());

                        jurnalBankTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalBankTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalBankTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        journal.add(jurnalBankTitipan);

                        journal.add(jurnalTitipan);
                    }


                    
                    if (rl.isGL()) {
                        
                        final JournalView excess = gl.copy();
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());
                        
                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rlxc.getInvoice().getStAttrPolicyNo());
                        
                        journal.add(excess);
                    }

                    //BUAT JURNAL RAK KANTOR CABANG
                    if(rl.getPolicy()!=null){
                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();

                                    BigDecimal jumlahBayarRAK = rl.getDbTotalAmountPerLine();

                                    if(rl.getStARSettlementExcessID()!=null){
                                        //jumlahBayar = BDUtil.sub(jumlahBayar, rl.getDbExcessAmount());

                                        //jika kurang bayar, kurang
                                        if(rl.getARSettlementExcess().isNegative())
                                            jumlahBayarRAK = BDUtil.sub(jumlahBayarRAK, rl.getDbExcessAmount());

                                        //jika lebih bayar, tambah
                                        if(!rl.getARSettlementExcess().isNegative())
                                            jumlahBayarRAK = BDUtil.add(jumlahBayarRAK, rl.getDbExcessAmount());
                                    }

                                    bank.setDbAutoCredit(BDUtil.mul(negator, jumlahBayarRAK));

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStAccountIDNotNull(rcp.getStAccountID() ,"Invalid or empty account in payment method ");
                                    bank.setStDescription("PEMBAYARAN PREMI "+rl.getInvoice().getStAttrPolicyNo());
                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    bank.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }

                        //JURNAL RAK UNIT NON AKS
                        if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){
                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();
                                    bank.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                    final String entityGLCode = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                    //applicator.setCode('Y', entityGLCode);
                                    //applicator.setCode('G', entityGLCode);
                                    //applicator.setCode('B', "00");

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', "80");

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStTransactionNo(rcp.getStReceiptNo());
                                    bank.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");
                                    bank.setStDescription("PEMBAYARAN PREMI "+ rl.getInvoice().getStAttrPolicyNo());

                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    bank.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    String searchAccount2 = "210000000002";

                                    //applicator.setCode('B', "00");

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setStTransactionNo(rcp.getStReceiptNo());
                                    rak.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }
                    }
                    

                    
                    
                }

            }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
 
                 //BUAT HUTANG PIUTANG PIHAK KETIGA (HUTANG KOMISI, BROKERFEE, HFEE JIKA BELUM DI BAYAR)
              if(!jurnalOnly)
              {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail==null) continue;
                            
                            if(rcInvoiceDetail.isTax()) continue;
                            
                            if(!rcc.isCheck()){
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                                
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                                
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                
                                if((rcInvoiceDetail.isComission()||rcInvoiceDetail.isPPNFeebase())&&!rcInvoiceDetail.isTax()){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                    if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                        invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                        invoice.setStInvoiceType("AR");
                                    }
                                }
                                
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }

                                 //HANYA HUTKOM SENTRALISASI YG BISA DIBAYAR PER POLIS
                                if(!rcp.getStARSettlementID().equalsIgnoreCase("38")){
                                    if (rcInvoiceDetail.isCommission2() && !rcInvoiceDetail.isFeeBase3() && !rcInvoiceDetail.isPPNFeebase()) {
                                        invoice.setStUsedFlag("Y");
                                    }
                                }
                                
                                  
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                                
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                                
                                
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                                
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                                
                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                                if(rcInvoiceDetail.isPPNFeebase())
                                    invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                                
                                invoice.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                invoice.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                
                                
                                final DTOList ivdetails = new DTOList();
                                
                                invoice.setDetails(ivdetails);
                                
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {
                                    
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                    
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                        
                                        ivd.markNew();
                                        
                                        ivdetails.add(ivd);
                                        
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                        ivd.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                        ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    }
                                }
                                
                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());
                                
                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );
                                    
                                    {
                                        
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                        
                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);
                                            
                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();
                                            
                                            ivdChild.markNew();
                                            
                                            ivdetails.add(ivdChild);
                                            
                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());
                                            
                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbEnteredAmount());
                                            ivdChild.setDbAmount(BDUtil.mul(childInvoiceDetailCek.getDbEnteredAmount(), actInvoice.getDbCurrencyRate(),2));
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                            ivdChild.setStRefID1(childInvoiceDetailCek.getStARInvoiceDetailID());
                                            ivdChild.setStRootID(childInvoiceDetailCek.getStARInvoiceDetailID());
                                        }
                                    }
                                }
                                
                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }
                            
                        }
                        
                    }
                }
            }
                
            //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK JIKA KOMISI DI BAYAR
            //REMARK THIS KALAU PAKE METODE ACRUAL BASES
            if(!jurnalOnly)
            {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();

                    if(taxAcrualBases) continue;
                    
                    final DTOList detail = rcl.getDetails();
                    
                    boolean parentLunas = false;
                             
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail==null) continue;
                            
                            if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                parentLunas = false;
                                final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                for (int k = 0; k < detail.size(); k++) {
                                    ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                    ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                    if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                         if(d2.isCheck())
                                             parentLunas = true;

                                    }

                                }
                            }
                            
                            
                            if(!rcInvoiceDetail.isTax()) continue;
                            
                            final BigDecimal comamt = rcc.getDbInvoiceAmount();
                            
                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();
                            
                            if(!parentLunas) continue;

                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");
                            
                            if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                            }
                            
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }

                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                            
                            String jenis = rcInvoiceDetail.getTrxLine().getStItemDesc().toUpperCase().startsWith("PPH21")?"PPH21":"PPH23";
                                     
                            invoice.setStNoSuratHutang(
                                "SHP/"+
                                jenis +
                                "/" +
                                invoice.getStARCustomerID()+
                                "/"+
                                invoice.getStCostCenterCode()+
                                "/"+
                                DateUtil.getMonth2Digit(rcp.getDtReceiptDate())+
                                "/"+
                                DateUtil.getYear(rcp.getDtReceiptDate()));
                            
                                                   
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                            invoice.setDbEnteredAmount(comamt);
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                    ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                }
                            }
                                    
                                    invoice.recalculate2();
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    
                        }
                    }

                }
            }
                //end hutang pajak

            //UPDATE SISA TITIPAN
            //if(!jurnalOnly){
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    final DTOList titip = rl.getListTitipan();
                    for (int j = 0; j < titip.size(); j++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);

                        updateAndCreateTitipanPremi(S,rcp,rlTitipan,rlTitipan.getStTitipanPremiID());
                    }
                }
            //}

            //BENTUK TITIPAN PREMI SISA JIKA POLIS KREDIT SERBAGUNA
            if(!jurnalOnly)
            {
                if(rcp.getStARSettlementID().equalsIgnoreCase("1") || rcp.getStARSettlementID().equalsIgnoreCase("25") ||
                        rcp.getStARSettlementID().equalsIgnoreCase("38") || rcp.getStARSettlementID().equalsIgnoreCase("44")){
                    for (int i = 0; i < combined.size(); i++) {
                        ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                        final ARInvoiceView actInvoice = rcl.getInvoice();

                        if(actInvoice!=null){
                            InsurancePolicyView pol = actInvoice.getPolicy();

                            if(pol!=null){

                                if(pol.getStPolicyTypeID().equalsIgnoreCase("87") || pol.getStPolicyTypeID().equalsIgnoreCase("88")){

                                    if (pol.isStatusPolicy() || pol.isStatusEndorse()){

                                        final DTOList objects = pol.getObjects();

                                        for (int j = 0; j < objects.size(); j++) {
                                            InsurancePolicyObjectView object = (InsurancePolicyObjectView) objects.get(j);

                                            InsurancePolicyObjDefaultView obj = (InsurancePolicyObjDefaultView) object;

                                            if(obj.getStReference27()!=null){

                                                //jika dibayar sekaligus, sisa nya bentuk titipan premi, jika tidak maka tidak usah bentuk titipan ?

                                                if(obj.getStReference27().equalsIgnoreCase("1")){
                                                    createTitipanPremi(pol, object, rcp);
                                                } //XXX
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
            }
                  
            }

            S.store(rcp);

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
 }
  
    public String saveInvoiceReins(ARInvoiceView invoice) throws Exception {
        
        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            if (doPost)
                if (invoice.getStGLARAccountID()==null) {
                
                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                
                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
                
                invoice.setStGLARAccountID(acc.getStAccountID());
                }
            
            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW"))); //remark utk bersih2x
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }
            
            S.store(invoice);
            
            final DTOList details = invoice.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);
                
                if (detailView.isNew())
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW"))); //remark utk bersih2x
                
                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                        
                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                        
                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }
                
                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }
            
            S.store(details);
            
            S.release();
            
            if (!invoice.isNew())
                if (doUnPost) {
                getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            
            if (doPost) {
                
                //logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());
                gl.setStRecapitulationNo(invoice.getStNoSuratHutang());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());

                if(invoice.getPolicyType()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicyType().getStBusinessTypeID());

                gl.markNew();

                //TAMBAH JURNAL PREMI R/I NETT KANTOR PUSAT
                glApplicator.setCode('X',invoice.getPolicyTypeGLCode()); //change these into a better system (use var interfaces & inner class)
                glApplicator.setCode('A',invoice.getStReferenceA0());
                glApplicator.setDesc("A",invoice.getStReferenceA1()!=null?invoice.getStReferenceA1():"");
                glApplicator.setCode('C',invoice.getStReferenceC0());
                glApplicator.setDesc("C",invoice.getStReferenceC1());
                glApplicator.setCode('D',invoice.getStReferenceD0());
                glApplicator.setDesc("D",invoice.getStReferenceD1());
                glApplicator.setCode('E',invoice.getStReferenceE0());
                glApplicator.setDesc("E",invoice.getStReferenceE1());
                //glApplicator.setCode('Y',getStReferenceY0());
                //glApplicator.setDesc("Y",getStReferenceY1());
                glApplicator.setCode('Z',invoice.getStReferenceZ0());
                glApplicator.setDesc("Z",invoice.getStReferenceZ1());
                glApplicator.setDesc("X",invoice.getPolicyType().getStShortDescription());
                glApplicator.setCode('Y',invoice.getEntity().getStGLCode());
                String entityDesc = invoice.getEntity().getStShortName()==null?invoice.getEntity().getStEntityName():invoice.getEntity().getStShortName();
                glApplicator.setDesc("Y",entityDesc);
                glApplicator.setDesc("M",DateUtil.getMonth(invoice.getDtInvoiceDate()).toUpperCase());
                glApplicator.setDesc("T",DateUtil.getYear(invoice.getDtInvoiceDate()));
                
                {
                    
                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                    
                    final JournalView jv = gl.copy();
                    
                    //jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    
                    if(invoice.isAR()) jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    //jv.setStDescription("R.A.K "+ ac.getStDescription());

                    glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    if(invoice.getPolicy()!=null){
                        if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                            jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());
                    }
                    
                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }
                
                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);
                    
                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;

                    if(ivd.getStTaxFlag()!=null) continue;
                    
                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());
                    
                    AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
                    
                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());
                    
                    final JournalView jv = gl.copy();
                   
                    if(invoice.isAR()) jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));
                    else jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));

                    //String account = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());

                    //if (account==null) throw new RuntimeException("Account tidak ditemukan : "+ ivd.getStDescription() +" : "+ivd.getTrxLine().getStGLAccount());
                    
                    jv.setStAccountID(ac.getStAccountID());

                    glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    //jv.setStDescription(ac.getStDescription());
                    if(invoice.getPolicy()!=null){
                        if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                            jv.setStDescription(jv.getStDescription() + " " + ivd.getTrxLine().getStItemDesc().toUpperCase()+ " " + invoice.getStRefID2());
                    }
                    
                    
                    jv.markNew();
                    
                    journalSet.add(jv);
                }

                

                {
                    //logger.logDebug("################### MASUK JURNAL PREMI R/I KANTOR PUSAT #######################");
                    final ARTransactionLineView tl = getTrxLine("113");

                    String accode = tl.getStGLAccount();

                    glApplicator.setCode('B',"00");
                    //glApplicator.setCode('C',invoice.getStReferenceC0());

                    final AccountView ac = glc.getAccountByAccountID(glApplicator.getAccountID(accode));

                    final JournalView jv1 = gl.copy();

                    if(invoice.isAR()) jv1.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv1.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));

                    jv1.setStAccountID(ac.getStAccountID());
                    //jv1.setStDescription(ac.getStDescription());

                    glApplicator.getAccountID(accode);
                    jv1.setStDescription(glApplicator.getStGLDesc());

                    if(invoice.getPolicy()!=null){
                        if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                            jv1.setStDescription(jv1.getStDescription() + " " + invoice.getStRefID2());
                    }
                    

                    jv1.markNew();

                    journalSet.add(jv1);
                }

                //TAMBAH JURNAL REKENING ANTAR KANTOR KANTOR PUSAT
                {
                    //logger.logDebug("################### MASUK JURNAL RAK R/I KANTOR PUSAT #######################");
                    ARTransactionLineView tl2 = getTrxLine("114");

                    String accode2 = tl2.getStGLAccount();

                    glApplicator.setCode('B',"00");

                    final AccountView ac2 = glc.getAccountByAccountID(glApplicator.getAccountID(accode2));

                    final JournalView jv2 = gl.copy();

                    if(invoice.isAR()) jv2.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv2.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));

                    jv2.setStAccountID(ac2.getStAccountID());
                    jv2.setStDescription(ac2.getStDescription());

                    glApplicator.getAccountID(accode2);
                    jv2.setStDescription(glApplicator.getStGLDesc());

                    if(invoice.getPolicy()!=null){
                        if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                            jv2.setStDescription(jv2.getStDescription() + " " + invoice.getStRefID2());
                    }
                    

                    jv2.markNew();

                    journalSet.add(jv2);
                }
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            return invoice.getStARInvoiceID();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
  
    public void savePembayaranKlaim(ARReceiptView rcp) throws Exception {
        rcp.validate();
      
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());
        
        try {
            if (rcp.isNew()){
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }
            
            if(rcp.isNew())
                rcp.generateReceiptNo();
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);

                    //if(rcl.isAdvancePayment()){
                        if(rcl.getPolicy()!=null){
                            InsurancePolicyView pol = rcl.getPolicy();

                            pol.setDtClaimPaymentDate(rcl.getDtReceiptDate());
                            pol.setStReceiptNo(rcl.getStReceiptNo());
                            pol.setStPaymentNotes(rcl.getStReceiptNo());
                            pol.setStClaimPaymentUsedFlag("Y");
                            pol.markUpdate();
                            S.store(pol);
                        }
                    //}
                //}
            }
            
            S.store(rcp.getNotes());
            
            S.store(gLs);
            
            S.store(details);
            
            if(rcp.getDetails().size()==0){
                 deleteAllDetailClaim(rcp);
            }
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                 /*
         ARInvoiceView iv = rcp.getArapinvoice();
                  
         iv.recalculate();
                  
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }
                  
         String invoiceID = save(iv);
                  
         rcp.setStARAPInvoiceID(invoiceID);*/
            
            rcp.setStARAPInvoiceID(stARInvoiceID);

            String no_account = "00000";

            if(rcp.getAccounts()!=null)
                no_account = rcp.getAccounts().getStAccountNo().substring(5,10);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    no_account +
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                if(rcp.getInvoice(stARInvoiceID)!=null){
                    applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                    applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                }             
                
                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final LookUpUtil lu = ListUtil.getLookUpFromQuery("select gl_account,gl_account from ar_trx_line where item_class ='ADVPAYMENT' and enabled_flag='Y'");
                final String uangMukaAccount = lu.getCode(0);

                // AR DR vs bank CR
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                if(rcp.getSettlement().isAR()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
                gl.setStSummaryFlag("Y");
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        
                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                        String ccCodepolis = "";

                        if(rl.getPolicy()!=null)
                                ccCodepolis = rl.getPolicy().getStCostCenterCode();

                        //Get Akun header
                        String accountHeaderID = "";

                        if(ccCodepolis.equalsIgnoreCase("80")){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");
                            applicator.setCode('B', "80");

                            accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }else{
                            accountHeaderID = rcp.getStAccountID();
                        }

                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);
                        head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                        final DTOList dtls = rcp.getDetails();
                        for (int i = 0; i < dtls.size(); i++) {
                            ARReceiptLinesView dtl = (ARReceiptLinesView) dtls.get(i);

                            if(dtl.getInvoice()!=null){
                                if(rl.getInvoice().isAdjusterFee())
                                    head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbEnteredAmount()));
                            }
                        }

                        if(rl.getDtReceiptDate()!=null){
                            head.setDtApplyDate(rl.getDtReceiptDate());
                        }
                            
                        head.setStDescription("Byr Klm "+rl.getStInvoiceNo());

                        if(rl.getInvoice()!=null){
                            head.setStDescription(head.getStDescription()+" "+ rl.getInvoice().getStRefID2()+ " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                        }else{
                            head.setStDescription(head.getStDescription()+" "+ rl.getStArInvoiceClaim()+ " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                        }

                        head.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                        journal.add(head);
                    }
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if(moreThan1Policy){
                         if (rc.isBank()) {

                            String ccCodepolis = "";

                            if(rl.getPolicy()!=null)
                                    ccCodepolis = rl.getPolicy().getStCostCenterCode();

                            //Get Akun header
                            String accountHeaderID = "";

                            if(ccCodepolis.equalsIgnoreCase("80")){
                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");
                                applicator.setCode('B', "80");

                                accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                            }else{
                                accountHeaderID = rcp.getStAccountID();
                            }


                            InsurancePolicyView policy = rl.getPolicy();
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                            head.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);

                            head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                            head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                            if(rl.getInvoice()!=null){
                                if(rl.getInvoice().isAR())
                                    head.setStDescription("Trm "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                else
                                    head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());

                                if(rl.getInvoice().isAdjusterFee())
                                    head.setDbAutoCredit(amt);

                            }else{
                                head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                            }
                            
                            head.setStPolicyNo(policy.getStPolicyNo());

                            if(rl.getStARSettlementExcessID()!=null){
                                if(rl.getStLineType()!=null){
                                    if(!rl.isGL()){
                                        head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.sub(rl.getDbTotalAmountPerLine(),rl.getDbExcessAmount())));
                                    }
                                }
                            }

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(head);
                        }
                    }

                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        BigDecimal amtExc = BDUtil.mul(negator,rl.getDbExcessAmount());

                        if (neg) amtExc=BDUtil.negate(amtExc);

                        //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoCredit(amtExc);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                        if(rl.getDtReceiptDate()!=null){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);
                    }

                    boolean isNoKlaimGross = true;
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            if(rcInvoiceDetail!=null){
                                if(rcInvoiceDetail.isClaimGross())
                                    isNoKlaimGross = false;
                            }
                        }
                    }

                    if (rl.isInvoice()) {

                        InsurancePolicyView policy = rl.getPolicy();
                        final DTOList comissionList = rl.getDetails();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
                            
                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();
                            
                            final JournalView lineDetail = gl.copy();
                            
                            if(rcInvoiceDetail!=null){
                                boolean isJournal = rcInvoiceDetail.isClaimGross() || rcInvoiceDetail.isUangMukaKlaim();
                                
                                if(!isJournal) continue;

                                InsurancePolicyView policy2 = det.getPolicy();
                                applicator.setCode('Y',policy2.getEntity().getStGLCode());
                                applicator.setCode('X',policy2.getStPolicyTypeID());

                                if (det.getPolicy().getEntity()!=null)
                                    applicator.setDesc("Y",policy2.getEntity().getStShortName());

                                if (det.getPolicy().getEntity()!=null)
                                    applicator.setDesc("X",policy2.getPolicyType().getStShortDescription());
                               
                                BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                if(rcInvoiceDetail.isClaimGross()){
                                    if(BDUtil.isZeroOrNull(amt2))
                                        amt2 = BDUtil.mul(negator,det.getDbInvoiceAmount());
                                }

                                lineDetail.setDbAutoDebit(amt2);
                                lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                
                                if(rl.getInvoice().isAP())
                                    lineDetail.setStDescription("Byr "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                else
                                    lineDetail.setStDescription("Trm "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());


                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                if(rcInvoiceDetail.isUangMukaKlaim()){
                                    amt = BDUtil.mul(negator,det.getDbInvoiceAmount());
                                    lineDetail.setDbAutoCredit(amt);
                                    lineDetail.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    //Byr Uang Muka Klaim LKP/03/20/1212/0330
                                    lineDetail.setStDescription("Byr " + rcInvoiceDetail.getTrxLine().getStItemDesc()+" "+ policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                }

                                if(det.getDtReceiptDate()!=null){
                                    lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                }

                                journal.add(lineDetail);

                                //CEK PEMBAYARAN UANG MUKA KLAIM
                                boolean uangMukaKlaim = false;
                                BigDecimal uangMuka = null;
                                if(!BDUtil.isZeroOrNull(det.getInvoice().getPolicy().getDbClaimAdvancePaymentAmount())){
                                    uangMukaKlaim = true;
                                    uangMuka = det.getInvoice().getPolicy().getDbClaimAdvancePaymentAmount();
                                }
                                if(!BDUtil.isZeroOrNull(det.getInvoice().getPolicy().getParentPolicy().getDbClaimAdvancePaymentAmount())){
                                    uangMukaKlaim = true;
                                    uangMuka = det.getInvoice().getPolicy().getParentPolicy().getDbClaimAdvancePaymentAmount();
                                }
                            }else{

                                InsurancePolicyView policy2 = det.getPolicy();

                                gla.setCode('Y',policy2.getEntity().getStGLCode());
                                gla.setCode('X',policy2.getStPolicyTypeID());

                                if (det.getPolicy().getEntity()!=null)
                                    gla.setDesc("Y",policy2.getEntity().getStShortName());

                                if (det.getPolicy().getEntity()!=null)
                                    gla.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                String uangMukaAccountID = gla.getAccountID(uangMukaAccount);
                                lineDetail.setStAccountIDNotNull(uangMukaAccountID,"Invalid or empty account in uang muka klaim : ");
                                lineDetail.setStDescription("Byr "+det.getStDescription() +" "+ det.getStArInvoiceClaim()+ " " + policy2.getClaimObject().getStObjectDescriptionWithoutCounter());

                                lineDetail.setStCurrencyCode(det.getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(det.getDbCurrencyRate());
                                lineDetail.setStPolicyNo(det.getPolicy().getStPolicyNo());
                                lineDetail.setDbAutoDebit(det.getDbEnteredAmount());

                                if(det.getDtReceiptDate()!=null){
                                    lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                }

                                journal.add(lineDetail);
                            }
                            
                            
                        }

                        if(isNoKlaimGross){
                            final DTOList comissionList2 = rl.getDetails();

                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList2.get(0);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            final JournalView lineDetail = gl.copy();

                            if(rcInvoiceDetail!=null){

                                BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

//                                if(BDUtil.isZeroOrNull(amt2)){
//                                    amt2 = BDUtil.mul(negator,det.getDbInvoiceAmount());
//                                }

                                lineDetail.setDbAutoDebit(amt2);

                                if(rcInvoiceDetail.isAdjusterFee())
                                    lineDetail.setDbAutoDebit(BDUtil.mul(negator,rl.getDbEnteredAmount()));

                                lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                if(rl.getInvoice().isAP())
                                    lineDetail.setStDescription("Byr Klm. "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                                else
                                    lineDetail.setStDescription("Trm Klm. "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());

                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());


                                if(det.getDtReceiptDate()!=null){
                                    lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                }

                                journal.add(lineDetail);

                            }
                        }


                        //TAMBAH JURNAL PAJAK JIKA ADJUSTER FEE
                        boolean jurnalAdjuster = true;
                        if(jurnalAdjuster){

                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                                ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                                final JournalView lineDetail = gl.copy();

                                if(rcInvoiceDetail!=null){
                                    boolean isJournal = rcInvoiceDetail.isAdjusterFee();

                                    if(!isJournal) continue;

                                    BigDecimal pajakAdjuster = null;

                                    //add jurnal bank
                                    if (rc.isBank()) {

                                            final DTOList claimItems = rl.getPolicy().getClaimItems();

                                            for (int k = 0; k < claimItems.size(); k++) {
                                                InsurancePolicyItemsView item = (InsurancePolicyItemsView) claimItems.get(k);

                                                if(!item.isAFee()) continue;

                                                if(item.isAFee())
                                                    pajakAdjuster = BDUtil.mul(item.getDbTaxAmount(), rl.getInvoice().getDbCurrencyRate());
                                            }

                                            final JournalView head = gl.copy();
                                            head.setDbAutoDebit(BDUtil.mul(negator,pajakAdjuster));
                                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                                            head.setStDescription(paymentDesc);

                                            if(rl.getInvoice()!=null){
                                                if(rl.getInvoice().isAR())
                                                    head.setStDescription("Trm "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                                else
                                                    head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                            }else{
                                                head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                            }

                                            head.setStPolicyNo(policy.getStPolicyNo());

                                            if(rl.getDtReceiptDate()!=null){
                                                head.setDtApplyDate(rl.getDtReceiptDate());
                                            }

                                            journal.add(head);
                                    }
                                    //end jurnal bank

                                    //add jurnal 4893
                                    InsurancePolicyView policy2 = det.getPolicy();
                                    applicator.setCode('Y',policy2.getEntity().getStGLCode());
                                    applicator.setCode('X',policy2.getStPolicyTypeID());

                                    if (det.getPolicy().getEntity()!=null)
                                        applicator.setDesc("Y",policy2.getEntity().getStShortName());

                                    if (det.getPolicy().getEntity()!=null)
                                        applicator.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                    BigDecimal amt2 = BDUtil.mul(negator,pajakAdjuster);

                                    lineDetail.setDbAutoCredit(amt2);
                                    lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                    if(rl.getInvoice().isAP())
                                        lineDetail.setStDescription("Byr "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                    else
                                        lineDetail.setStDescription("Trm "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());


                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(det.getDtReceiptDate()!=null){
                                        lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                    }

                                    journal.add(lineDetail);

                                }
                            }
                        //END JURNAL ADJUSTER
                      }
                        
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        //line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());

                    }

                    //BUAT JURNAL RAK KANTOR CABANG
                    if(rl.getPolicy()!=null){
                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                InsurancePolicyView policy = rl.getPolicy();

                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();

                                    BigDecimal jumlahBayarRAK = rl.getDbTotalAmountPerLine();

                                    if(rl.getStARSettlementExcessID()!=null){
                                        //jumlahBayar = BDUtil.sub(jumlahBayar, rl.getDbExcessAmount());

                                        //jika kurang bayar, kurang
                                        if(rl.getARSettlementExcess().isNegative())
                                            jumlahBayarRAK = BDUtil.sub(jumlahBayarRAK, rl.getDbExcessAmount());

                                        //jika lebih bayar, tambah
                                        if(!rl.getARSettlementExcess().isNegative())
                                            jumlahBayarRAK = BDUtil.add(jumlahBayarRAK, rl.getDbExcessAmount());
                                    }

                                    bank.setDbAutoCredit(BDUtil.mul(negator, jumlahBayarRAK));

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStAccountIDNotNull(rcp.getStAccountID() ,"Invalid or empty account in payment method ");
                                    bank.setStDescription("BYR KLM "+rl.getInvoice().getStAttrPolicyNo() + " " + policy.getStDLANo());
                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    bank.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR KLM "+ rl.getInvoice().getStAttrPolicyNo()+ " " + policy.getStDLANo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }

                        //JURNAL RAK UNIT NON AKS
                        if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                            InsurancePolicyView policy = rl.getPolicy();

                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();
                                    bank.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                    final String entityGLCode2 = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                    //applicator.setCode('Y', entityGLCode);
                                    //applicator.setCode('G', entityGLCode);
                                    //applicator.setCode('B', "00");

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', "80");

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStTransactionNo(rcp.getStReceiptNo());
                                    bank.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");
                                    bank.setStDescription("BYR KLM "+ rl.getInvoice().getStAttrPolicyNo()+ " " + policy.getStDLANo());

                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    bank.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    String searchAccount2 = "210000000002";

                                    //applicator.setCode('B', "00");

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR KLM "+ rl.getInvoice().getStAttrPolicyNo()+ " " + policy.getStDLANo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setStTransactionNo(rcp.getStReceiptNo());
                                    rak.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }
                    }
                }
                
                //cek uang muka klaim
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    //final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                   // boolean parentLunas = false;
                             
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            if(rcc.isAdvancePayment()){
                    
                                InsurancePolicyView klaim = rcc.getPolicy();
                                klaim.setDbClaimAdvancePaymentAmount(rcc.getDbEnteredAmount());
                                klaim.setStReceiptNo(rcp.getStReceiptNo());
                                klaim.markUpdate();
                                S.store(klaim);

                                //JIKA KLAIM LKP DAN SUDAH DISETUJUI
                                if(klaim.isStatusClaimDLA() && klaim.isEffective()){
                                    ARInvoiceView invoice = getARInvoiceByAttrPolIDAndTrxTypeID(klaim.getStPolicyID(),"12");

                                    if(invoice==null)
                                        invoice = getARInvoiceByAttrPolIDAndTrxTypeID(klaim.getStPolicyID(),"26");

                                    updateTagihanKlaimPanjar(invoice, rcp);
                                    updateNobukIzinCair(invoice, rcp);

                                }
                                
                            }
                        }
                    }
                }

                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }
            
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
        
    }
    
    public InsurancePolicyInwardView getARInvoiceInwardTreaty(String invoice) throws Exception {
        final InsurancePolicyInwardView iv = (InsurancePolicyInwardView) ListUtil.getDTOListFromQuery(
                "select * from ins_pol_inward where ar_invoice_id = ? ",
                new Object [] {invoice},
                InsurancePolicyInwardView.class
                ).getDTO();
        
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select * from ins_pol_inward_details where ar_invoice_id = ? and ar_trx_line_id is null order by ar_invoice_dtl_id",
                    new Object [] {invoice},
                    InsurancePolicyInwardDetailView.class
                    )
                    
                    );
        }
        
        return iv;
    }
    
    public String saveInwardTreaty(InsurancePolicyInwardView invoice) throws Exception {
        
        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();
        
        glApplicator.setCode('B',invoice.getStCostCenterCode());
        
        final SQLUtil S = new SQLUtil();
        
        try {
            
            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());
            
            //if (doPost)
                /*
                if (invoice.getStGLARAccountID()==null) {
                
                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                
                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);
                
                invoice.setStGLARAccountID(acc.getStAccountID());
                }*/
            
            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("INSPOLINWARD")));

                if(!invoice.isEndorseMode())
                    invoice.setStInvoiceNo(invoice.generateNoBukti());
            }
            
            S.store(invoice);
            
            final DTOList details = invoice.getDetails();
            
            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView detailView = (InsurancePolicyInwardDetailView) details.get(i);
                
                if (detailView.isNew())
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                
                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());
                        
                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);
                        
                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }
                
                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
                
                if (detailView.getDetails().size()>0) {
                    final DTOList subDetails = detailView.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        InsurancePolicyInwardDetailView rclsub = (InsurancePolicyInwardDetailView) subDetails.get(j);
                                        
                        rclsub.setStRefInvoiceDetailID(detailView.getStARInvoiceDetailID());
                        rclsub.setStARInvoiceID(invoice.getStARInvoiceID());
                        
                        if (rclsub.isNew())
                            rclsub.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                    }
                    
                    S.store2(subDetails);//simpan ke receipt lines
                }
            }
            
            S.store2(details);
            
            S.release();
            
            if (!invoice.isNew())
                if (doUnPost) {
                //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            
            if(doPost)
                if(invoice.getStClaimStatus()!=null)
                    if(invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA))
                        doPost = false;
                
            if (doPost) {
                
                postInvoiceInwardTreaty(invoice);
                 
                logger.logDebug("save: processing posting to GL");
                
                final DTOList journalSet = new DTOList();
                
                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtMutationDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtMutationDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo()); 
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.markNew();
                
                        
            {
                         
               final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
                         
               final JournalView jv = gl.copy();
               jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
               jv.setStAccountID(invoice.getStGLARAccountID());
               jv.setStDescription(ac.getStDescription());
                         
               jv.markNew();
                         
               journalSet.add(jv);
            }
                
                for (int i = 0; i < details.size(); i++) {
                    InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);
                    
                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;
                    
                    final DTOList subDetails = ivd.getDetails();
                    for (int j = 0; j < subDetails.size(); j++) {
                        InsurancePolicyInwardDetailView ivdSub = (InsurancePolicyInwardDetailView) subDetails.get(j);
                        
                        BigDecimal amt = ivdSub.getDbAmount();
                        final BigDecimal detailNegator = new BigDecimal(ivdSub.isNegative()?-negator.intValue():negator.intValue());

                        if(BDUtil.isZeroOrNull(amt)) continue;
                        
                        final AccountView ac = glc.getAccountByAccountID(ivdSub.getStGLAccountID());

                        if (ac==null) throw new RuntimeException("Account not found ("+ivdSub.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivdSub.getStDescription());

                        final JournalView jv = gl.copy();
                        jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                        jv.setStAccountID(ac.getStAccountID());
                        jv.setStDescription(ac.getStDescription());

                        jv.markNew();

                        journalSet.add(jv);
                    }
                    
                }
                
                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);
                    
                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }
                
                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }
            
            return invoice.getStARInvoiceID();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public String saveSaldoAwalInward(InsurancePolicyInwardView invoice) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag())) {
            invoice.validate();
        }

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B', invoice.getStCostCenterCode());

        glApplicator.setDesc("Y", invoice.getEntity().getStShortName());
        glApplicator.setDesc("X", invoice.getPolicyType().getStShortDescription());
        glApplicator.setDesc("K", invoice.getStDLANo());
        glApplicator.setDesc("M", DateUtil.getMonth(invoice.getDtMutationDate()).toUpperCase());
        glApplicator.setDesc("T", DateUtil.getYear(invoice.getDtMutationDate()));

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (doPost) {
                if (invoice.getStGLARAccountID() == null) {

                    final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    if (acc == null) {
                        throw new RuntimeException("stGLARAccountID not found !" + invoice);
                    }

                    invoice.setStGLARAccountID(acc.getStAccountID());
                }
            }

            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("INSPOLINWARD")));

                if (invoice.getStARTransactionTypeID().equalsIgnoreCase("1")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("2")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("3")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("20")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("21")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("22")) {

                    if(!invoice.isEndorseMode())
                        invoice.setStInvoiceNo(invoice.generateNoBukti());

                } else if (invoice.getStARTransactionTypeID().equalsIgnoreCase("17")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("18")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("19")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("23")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("24")) {
                    invoice.setStInvoiceNo(invoice.generateNoBuktiClaimInward());
                }
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView detailView = (InsurancePolicyInwardDetailView) details.get(i);

                if (detailView.isNew()) {
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                }

                if (doPost) {
                    if (detailView.isModified()) {
                        if (detailView.getStGLAccountID() == null) {
                            final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                            if (acc == null) {
                                throw new RuntimeException("Account ID is empty : " + detailView);
                            }

                            detailView.setStGLAccountID(acc.getStAccountID());
                        }
                    }
                }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());

                if (detailView.getDetails().size()>0) {
                    final DTOList subDetails = detailView.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        InsurancePolicyInwardDetailView rclsub = (InsurancePolicyInwardDetailView) subDetails.get(j);

                        rclsub.setStRefInvoiceDetailID(detailView.getStARInvoiceDetailID());
                        rclsub.setStARInvoiceID(invoice.getStARInvoiceID());

                        if (rclsub.isNew())
                            rclsub.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                    }

                    S.store2(subDetails);//simpan ke receipt lines
                }

            }

            S.store2(details);

            final DTOList installment = invoice.getInstallment();

            final boolean isCicilan = installment.size()>1;

            for (int j = 0; j < installment.size(); j++) {
                InsurancePolicyInwardInstallmentView installmentView = (InsurancePolicyInwardInstallmentView) installment.get(j);

                if (installmentView.isNew()) {
                    installmentView.setStInsurancePolicyInwardInstallmentID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDINST")));
                }

                installmentView.setStARInvoiceID(invoice.getStARInvoiceID());

            }

            S.store2(installment);

            S.release();

            if (!invoice.isNew()) {
                if (doUnPost) {
                    //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            }

            if (doPost) {
                if (invoice.getStClaimStatus() != null) {
                    if (invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA)) {
                        doPost = false;
                    }
                }
            }

            if (doPost) {

                if(!isCicilan)
                    postInvoiceInward(invoice);
                else
                    postInvoiceInwardInstallment(invoice); 

                logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR() ? BDUtil.one : new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtMutationDate());
                gl.setLgFiscalYear(Long.valueOf(DateUtil.getYear(invoice.getDtMutationDate())));
                gl.setLgPeriodNo(Long.valueOf(DateUtil.getMonthDigit(invoice.getDtMutationDate())));
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.setStRecapitulationNo(invoice.getStNoSuratHutang());
                gl.markNew();


                if(!isCicilan){

                    {

                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    final JournalView jv = gl.copy();
                    final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
                    jv.setDbAutoDebit(BDUtil.mul(negator, invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    jv.markNew();

                    journalSet.add(jv);
                    }

                    for (int i = 0; i < details.size(); i++) {
                        InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                        if (InsurancePolicyInwardView.exludeComission) {
                            if (ivd.isComission()) {
                                continue;
                            }
                        }

                        BigDecimal amt = ivd.getDbAmount();
                        final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                        if (BDUtil.isZeroOrNull(amt)) {
                            continue;
                        }

                        if (ivd.getStTaxCode() != null) {
                            final ARTaxView tax = ivd.getTax();

                            final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                            //amt=BDUtil.sub(amt,taxAmt);

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                            jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                            jv.setStAccountID(accountID);
                            jv.setStDescription(glApplicator.getPreviewDesc());

                            jv.markNew();

                            journalSet.add(jv);
                        }

                        final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                        if (ac == null) {
                            throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                        }

                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                        jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                        jv.setStAccountID(ac.getStAccountID());
                        jv.setStDescription(glApplicator.getStGLDesc());

                        jv.markNew();

                        journalSet.add(jv);
                    }
                }else{

                    //posting jika cicilan
                    for (int j = 0; j < installment.size(); j++) {
                        InsurancePolicyInwardInstallmentView inst = (InsurancePolicyInwardInstallmentView) installment.get(j);

                        {

                            final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
                            
                            //BigDecimal amount = BDUtil.mul(inst.getDbAmount(), invoice.getDbCurrencyRate(), 2);
                            BigDecimal amount = inst.getDbAmount();
                            jv.setDbAutoDebit(BDUtil.mul(negator, amount));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT


                            jv.setStAccountID(invoice.getStGLARAccountID());
                            jv.setStDescription(glApplicator.getStGLDesc() + " - INST " + (j+1));

                            jv.markNew();

                            journalSet.add(jv);
                        }

                        for (int i = 0; i < details.size(); i++) {
                            InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                            if (InsurancePolicyInwardView.exludeComission) {
                                if (ivd.isComission()) {
                                    continue;
                                }
                            }

                            if(BDUtil.isZeroOrNull(ivd.getDbAmount())) continue;

                            BigDecimal amt = ivd.getDbAmount();

                            if(ivd.isPremiGross2()) amt = inst.getDbPremiBruto();
                            else if(ivd.isCommission2()||ivd.isBrokerage2()) amt = inst.getDbKomisi();
                            else amt = inst.getDbFee();

                            //amt = BDUtil.mul(amt, invoice.getDbCurrencyRate(), 2);

                            final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                            if (BDUtil.isZeroOrNull(amt)) {
                                continue;
                            }

                            if (ivd.getStTaxCode() != null) {
                                final ARTaxView tax = ivd.getTax();

                                final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                                //amt=BDUtil.sub(amt,taxAmt);

                                final JournalView jv = gl.copy();
                                final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                                jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                                jv.setStAccountID(accountID);
                                jv.setStDescription(glApplicator.getPreviewDesc() + " - INST " + (j+1));

                                jv.markNew();

                                journalSet.add(jv);
                            } 
                            /*else if (ivd.getTrxLine().isTaxed()) {
                            final ARTaxView tax = ivd.getTrxLine().getTax();

                            final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                            //amt=BDUtil.sub(amt,taxAmt);

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                            jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                            jv.setStAccountID(accountID);
                            jv.setStDescription(glApplicator.getPreviewDesc());

                            jv.markNew();

                            journalSet.add(jv);

                            }*/



                            final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                            if (ac == null) {
                                throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                            }

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                            jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                            jv.setStAccountID(ac.getStAccountID());
                            jv.setStDescription(glApplicator.getStGLDesc() + " - INST " + (j+1));

                            jv.markNew();

                            journalSet.add(jv);
                        }
                    }
                }
                

                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void saveSuratHutangInward(InsurancePolicyInwardView invoice, DTOList list) throws Exception {
        final SQLUtil S = new SQLUtil();
        try{
            final DTOList list2 = invoice.getList();
            
            final DTOList listLama = invoice.getList2();
            
            final InsurancePolicyInwardView viewCopy = (InsurancePolicyInwardView) invoice.clone();
            
            //if(invoice.isNew())	invoice.generateNoSuratHutang();
            
            
            //hapus no surat yg lama
            if(invoice.isUpdate()){
                
                viewCopy.setStNoSuratHutang(null);
                viewCopy.setDtSuratHutangPeriodFrom(null);
                viewCopy.setDtSuratHutangPeriodTo(null);
                for (int i = 0; i < listLama.size(); i++) {
                    InsurancePolicyInwardView invoiceView = (InsurancePolicyInwardView) listLama.get(i);
                    
                    invoiceView.setStNoSuratHutang(viewCopy.getStNoSuratHutang());
                    invoiceView.setDtSuratHutangPeriodFrom(viewCopy.getDtSuratHutangPeriodFrom());
                    invoiceView.setDtSuratHutangPeriodTo(viewCopy.getDtSuratHutangPeriodTo());
                    
                }
                
                listLama.markAllUpdate();
                
                S.store(listLama);
            }
            //finish
            
            //invoice.generateNoSuratHutang();
            //simpan no surat baru
            for (int i = 0; i < list2.size(); i++) {
                InsurancePolicyInwardView invoiceView2 = (InsurancePolicyInwardView) list2.get(i);
                
                //tes.setDtChangeDate(null);
                invoiceView2.setStNoSuratHutang(invoice.getStNoSuratHutang());
                invoiceView2.setDtSuratHutangPeriodFrom(invoice.getDtSuratHutangPeriodFrom());
                invoiceView2.setDtSuratHutangPeriodTo(invoice.getDtSuratHutangPeriodTo());
                
            }
            
            list2.markAllUpdate();
            
            S.store(list2);
            //finish
            
        }catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
    }
    
    public InsurancePolicyInwardView getSuratHutangInward(String nosurathutang) throws Exception {
        final InsurancePolicyInwardView iv = (InsurancePolicyInwardView) ListUtil.getDTOListFromQuery(
                "select * from ins_pol_inward where no_surat_hutang = ?",
                new Object [] {nosurathutang},
                ARInvoiceView.class
                ).getDTO();
        
        return iv;
    }
    
    public InsurancePolicyInwardView getARInvoiceInward(String invoice) throws Exception {
        final InsurancePolicyInwardView iv = (InsurancePolicyInwardView) ListUtil.getDTOListFromQuery(
                "select * from ins_pol_inward where ar_invoice_id = ?",
                new Object [] {invoice},
                InsurancePolicyInwardView.class
                ).getDTO();
        
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select a.* "+
                            " from ins_pol_inward_details a "+
                            " left join ar_trx_line b on a.ar_trx_line_id = b.ar_trx_line_id "+
                            " where ar_invoice_id = ? "+
                            " order by b.order_no",
                    new Object [] {invoice},
                    InsurancePolicyInwardDetailView.class
                    )
                    
                    );
        }

        if(iv!=null) {
            iv.setInstallment(
                    ListUtil.getDTOListFromQuery(
                    "select * from ins_pol_inward_installment where ar_invoice_id = ? order by inst_date",
                    new Object [] {invoice},
                    InsurancePolicyInwardInstallmentView.class
                    )

                    );
        }
        
        return iv;
    }
    
    public void postInvoiceInward(InsurancePolicyInwardView inward) throws Exception {
        ARInvoiceView invoice = new ARInvoiceView();

        invoice.markNew();

        invoice.setStARCustomerID(inward.getStARCustomerID());
        invoice.setStARTransactionTypeID(inward.getStARTransactionTypeID());
        invoice.setStApprovedFlag(inward.getStApprovedFlag());
        invoice.setStAttrPolicyAddress(inward.getStAttrPolicyAddress());
        invoice.setStAttrPolicyID(inward.getStARInvoiceID());
        invoice.setStAttrPolicyName(inward.getStAttrPolicyName());
        invoice.setStAttrPolicyNo(inward.getStAttrPolicyNo());
        invoice.setStAttrPolicyTypeID(inward.getStAttrPolicyTypeID());
        invoice.setStAttrQuartal(inward.getStAttrQuartal());
        invoice.setStAttrUnderwriting(inward.getStAttrUnderwriting());
        invoice.setStClaimStatus(inward.getStClaimStatus());
        invoice.setStCommitFlag(inward.getStCommitFlag());
        invoice.setStCostCenterCode(inward.getStCostCenterCode());
        invoice.setStCurrencyCode(inward.getStCurrencyCode());
        invoice.setStDLANo(inward.getStDLANo());
        invoice.setStDescription(inward.getStDescription());
        invoice.setStEntityID(inward.getStEntityID());
        invoice.setStGLARAccountDesc(inward.getStGLARAccountDesc());
        invoice.setStGLARAccountID(inward.getStGLARAccountID());
        invoice.setStGLCode(inward.getStGLCode());
        invoice.setStInvoiceNo(inward.getStInvoiceNo());
        invoice.setStInvoiceType(inward.getStInvoiceType());
        invoice.setStNegativeFlag(inward.getStNegativeFlag());
        invoice.setStRefID0(inward.getStRefID0());
        invoice.setStRefID1(inward.getStRefID1());
        invoice.setStRefID2(inward.getStRefID2());
        invoice.setStRefID3(inward.getStRefID3());
        invoice.setStRefInvoiceID(inward.getStRefInvoiceID());
        invoice.setStReferenceA0(inward.getStReferenceA0());
        invoice.setStReferenceA1(inward.getStReferenceA1());
        invoice.setStReferenceC0(inward.getStReferenceC0());
        invoice.setStReferenceC1(inward.getStReferenceC1());
        invoice.setStReferenceD0(inward.getStReferenceD0());
        invoice.setStReferenceD1(inward.getStReferenceD1());
        invoice.setStReferenceE0(inward.getStReferenceE0());
        invoice.setStReferenceE1(inward.getStReferenceE1());
        invoice.setStReferenceX0(inward.getStReferenceX0());
        invoice.setStReferenceX1(inward.getStReferenceX1());
        invoice.setStReferenceY0(inward.getStReferenceY0());
        invoice.setStReferenceY1(inward.getStReferenceY1());
        invoice.setStReferenceZ0(inward.getStReferenceZ0());
        invoice.setStReferenceZ1(inward.getStReferenceZ1());
        invoice.setDbAmount(inward.getDbAmount());
        invoice.setDbAmountSettled(inward.getDbAmountSettled());
        invoice.setDbAttrPolicyTSI(inward.getDbAttrPolicyTSI());
        invoice.setDbAttrPolicyTSITotal(inward.getDbAttrPolicyTSITotal());
        invoice.setDbCurrencyRate(inward.getDbCurrencyRate());
        invoice.setDbEnteredAmount(inward.getDbEnteredAmount());
        invoice.setDtAttrPolicyPeriodEnd(inward.getDtAttrPolicyPeriodEnd());
        invoice.setDtAttrPolicyPeriodStart(inward.getDtAttrPolicyPeriodStart());
        invoice.setDtDueDate(inward.getDtDueDate());
        invoice.setDtInvoiceDate(inward.getDtInvoiceDate());
        invoice.setDtMutationDate(inward.getDtMutationDate());
        invoice.setDtTransDate(inward.getDtTransDate());
        invoice.setStNoSuratHutang(inward.getStNoSuratHutang());
        invoice.setStRefID1(inward.getStPLANo());
        invoice.setStRefID2(inward.getStDLANo());
        invoice.setStReferenceNo(inward.getStTransactionNoReference());


        final DTOList ivdetails = new DTOList();

        invoice.setDetails(ivdetails);

        final DTOList details = inward.getDetails();
        for (int i = 0; i < details.size(); i++) {
            InsurancePolicyInwardDetailView det = (InsurancePolicyInwardDetailView) details.get(i);

            if (BDUtil.isZeroOrNull(det.getDbAmount())) {
                continue;
            }

            final ARInvoiceDetailView detail = new ARInvoiceDetailView();

            detail.setStARTrxLineID(det.getStARTrxLineID());
            detail.setStAccountDesc(det.getStAccountDesc());
            detail.setStAttrPolicyTypeID(det.getStAttrPolicyTypeID());
            detail.setStAttrUnderwriting(det.getStAttrUnderwriting());
            detail.setStComissionFlag(det.getStComissionFlag());
            detail.setStDescription(det.getStDescription());
            detail.setStEntityID(det.getStEntityID());
            detail.setStGLAccountID(det.getStGLAccountID());
            detail.setStNegativeFlag(det.getStNegativeFlag());
            detail.setStParentID(det.getStParentID());
            detail.setStRefID0(det.getStRefID0());
            detail.setStRefID1(det.getStRefID1());
            detail.setStRefID2(det.getStRefID2());
            detail.setStRefInvoiceDetailID(det.getStRefInvoiceDetailID());
            detail.setStRootID(det.getStRootID());
            detail.setStTaxFlag(det.getStTaxFlag());
            detail.setDbAmount(det.getDbAmount());
            detail.setDbAmountSettled(det.getDbAmountSettled());
            detail.setDbEnteredAmount(det.getDbEnteredAmount());
            detail.setDbTaxAmount(det.getDbTaxAmount());
            detail.setDbTaxRate(det.getDbTaxRate());

            detail.markNew();

            ivdetails.add(detail);

        }

        save(invoice);

    }

    public void postInvoiceInwardInstallment(InsurancePolicyInwardView inward) throws Exception {

        final DTOList installment = inward.getInstallment();

        for (int j = 0; j < installment.size(); j++) {
            InsurancePolicyInwardInstallmentView inst = (InsurancePolicyInwardInstallmentView) installment.get(j);

            ARInvoiceView invoice = new ARInvoiceView();

            invoice.markNew();

            invoice.setStARCustomerID(inward.getStARCustomerID());
            invoice.setStARTransactionTypeID(inward.getStARTransactionTypeID());
            invoice.setStApprovedFlag(inward.getStApprovedFlag());
            invoice.setStAttrPolicyAddress(inward.getStAttrPolicyAddress());
            invoice.setStAttrPolicyID(inward.getStARInvoiceID());
            invoice.setStAttrPolicyName(inward.getStAttrPolicyName());
            invoice.setStAttrPolicyNo(inward.getStAttrPolicyNo());
            invoice.setStAttrPolicyTypeID(inward.getStAttrPolicyTypeID());
            invoice.setStAttrQuartal(inward.getStAttrQuartal());
            invoice.setStAttrUnderwriting(inward.getStAttrUnderwriting());
            invoice.setStClaimStatus(inward.getStClaimStatus());
            invoice.setStCommitFlag(inward.getStCommitFlag());
            invoice.setStCostCenterCode(inward.getStCostCenterCode());
            invoice.setStCurrencyCode(inward.getStCurrencyCode());
            invoice.setStDLANo(inward.getStDLANo());
            invoice.setStDescription(inward.getStDescription());
            invoice.setStEntityID(inward.getStEntityID());
            invoice.setStGLARAccountDesc(inward.getStGLARAccountDesc());
            invoice.setStGLARAccountID(inward.getStGLARAccountID());
            invoice.setStGLCode(inward.getStGLCode());
            invoice.setStInvoiceNo(inward.getStInvoiceNo()+"-"+(j+1));
            invoice.setStInvoiceType(inward.getStInvoiceType()); 
            invoice.setStNegativeFlag(inward.getStNegativeFlag());
            invoice.setStRefID0(inward.getStRefID0());
            invoice.setStRefID1(inward.getStRefID1());
            invoice.setStRefID2(inward.getStRefID2());
            invoice.setStRefID3(inward.getStRefID3());
            invoice.setStRefInvoiceID(inward.getStRefInvoiceID());
            invoice.setStReferenceA0(inward.getStReferenceA0());
            invoice.setStReferenceA1(inward.getStReferenceA1());
            invoice.setStReferenceC0(inward.getStReferenceC0());
            invoice.setStReferenceC1(inward.getStReferenceC1());
            invoice.setStReferenceD0(inward.getStReferenceD0());
            invoice.setStReferenceD1(inward.getStReferenceD1());
            invoice.setStReferenceE0(inward.getStReferenceE0());
            invoice.setStReferenceE1(inward.getStReferenceE1());
            invoice.setStReferenceX0(inward.getStReferenceX0());
            invoice.setStReferenceX1(inward.getStReferenceX1());
            invoice.setStReferenceY0(inward.getStReferenceY0());
            invoice.setStReferenceY1(inward.getStReferenceY1());
            invoice.setStReferenceZ0(inward.getStReferenceZ0());
            invoice.setStReferenceZ1(inward.getStReferenceZ1());
            invoice.setDbCurrencyRate(inward.getDbCurrencyRate());
            invoice.setDbAmount(BDUtil.mul(inst.getDbAmount(), invoice.getDbCurrencyRate(),2));

            //invoice.setDbAmountSettled(inst.getDbAmount());
            invoice.setDbAttrPolicyTSI(inward.getDbAttrPolicyTSI());
            invoice.setDbAttrPolicyTSITotal(inward.getDbAttrPolicyTSITotal());
            
            invoice.setDbEnteredAmount(BDUtil.mul(inst.getDbAmount(), invoice.getDbCurrencyRate(),2));
            invoice.setDtAttrPolicyPeriodEnd(inward.getDtAttrPolicyPeriodEnd());
            invoice.setDtAttrPolicyPeriodStart(inward.getDtAttrPolicyPeriodStart());
            invoice.setDtDueDate(inst.getDtDueDate());
            invoice.setDtInvoiceDate(inward.getDtInvoiceDate());
            invoice.setDtMutationDate(inward.getDtMutationDate());
            invoice.setDtTransDate(inward.getDtTransDate());
            invoice.setStNoSuratHutang(inward.getStNoSuratHutang());
            invoice.setStRefID1(inward.getStPLANo());
            invoice.setStRefID2(inward.getStDLANo()); 
            invoice.setStReferenceNo(inward.getStTransactionNoReference());

            final DTOList ivdetails = new DTOList();

            invoice.setDetails(ivdetails);

            final DTOList details = inward.getDetails();
            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView det = (InsurancePolicyInwardDetailView) details.get(i);

                if (BDUtil.isZeroOrNull(det.getDbAmount())) {
                    continue;
                }

                final ARInvoiceDetailView detail = new ARInvoiceDetailView();

                detail.setStARTrxLineID(det.getStARTrxLineID());
                detail.setStAccountDesc(det.getStAccountDesc());
                detail.setStAttrPolicyTypeID(det.getStAttrPolicyTypeID());
                detail.setStAttrUnderwriting(det.getStAttrUnderwriting());
                detail.setStComissionFlag(det.getStComissionFlag());
                detail.setStDescription(det.getStDescription());
                detail.setStEntityID(det.getStEntityID());
                detail.setStGLAccountID(det.getStGLAccountID());
                detail.setStNegativeFlag(det.getStNegativeFlag());
                detail.setStParentID(det.getStParentID());
                detail.setStRefID0(det.getStRefID0());
                detail.setStRefID1(det.getStRefID1());
                detail.setStRefID2(det.getStRefID2());
                detail.setStRefInvoiceDetailID(det.getStRefInvoiceDetailID());
                detail.setStRootID(det.getStRootID());
                detail.setStTaxFlag(det.getStTaxFlag());
                detail.setDbAmount(det.getDbAmount());

                //detail.setDbAmountSettled(det.getDbAmountSettled());
                detail.setDbEnteredAmount(det.getDbEnteredAmount());
                detail.setDbTaxAmount(det.getDbTaxAmount());
                detail.setDbTaxRate(det.getDbTaxRate());

                if(det.isPremiGross2()){
                     detail.setDbAmount(BDUtil.mul(inst.getDbPremiBruto(), invoice.getDbCurrencyRate(),2));
                     //detail.setDbAmountSettled(inst.getDbPremiBruto());
                     detail.setDbEnteredAmount(BDUtil.mul(inst.getDbPremiBruto(), invoice.getDbCurrencyRate(),2));
                }else if(det.isCommission2()){
                     detail.setDbAmount(BDUtil.mul(inst.getDbKomisi(), invoice.getDbCurrencyRate(),2));
                     //detail.setDbAmountSettled(inst.getDbKomisi());
                     detail.setDbEnteredAmount(BDUtil.mul(inst.getDbKomisi(), invoice.getDbCurrencyRate(),2));
                }else{
                     detail.setDbAmount(BDUtil.mul(inst.getDbFee(), invoice.getDbCurrencyRate(),2));
                     //detail.setDbAmountSettled(inst.getDbFee());
                     detail.setDbEnteredAmount(BDUtil.mul(inst.getDbFee(), invoice.getDbCurrencyRate(),2));
                }

                detail.markNew();

                ivdetails.add(detail);

            }

            save(invoice);

        }



    }
    
    public ARInvoiceView getARInvoiceUsingPolID(String attrpolid) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where attr_pol_id = ? and ar_trx_type_id in (5,6,7) and (coalesce(cancel_flag,'') <> 'Y' or coalesce(posted_flag,'Y') = 'Y')",
                new Object [] {attrpolid},
                ARInvoiceView.class
                ).getDTO();
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select a.* from ar_invoice_details a,ar_invoice b where a.ar_invoice_id = b.ar_invoice_id and b.attr_pol_id = ? and b.ar_trx_type_id in (5,6,7)",
                    new Object [] {attrpolid},
                    ARInvoiceDetailView.class
                    )
                    
                    );
        }
        
        return iv;
    }
    
    public void savePengembalianPremi(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
            final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
            if(Tools.compare(rcp.getDbAmountApplied(),titipan.getDbBalance())>0){
                throw new RuntimeException("Titipan Premi ("+titipan.getDbBalance()+") Tidak Cukup Untuk Pelunasan");
            }
        }
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                            rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStARInvoiceDetailID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        
                        if(rclsub.isCheck())
                            rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStARInvoiceDetailID());
                            
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpan ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpan note
            
            S.store(gLs);//simpan excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                //update titipan premi
                if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
                    final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
                    updateTitipanBalance(stArTitipanID,rcp.getDbAmountApplied());
                    saveDetilTitipan(titipan,rcp);
                    
                }
                //end titipan
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
 
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING JURNAL HEADER RECEIPT VIEW
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());

                        head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("TERIMA PEMBAYARAN "+rl.getStInvoiceNo());
                        } else {
                            head.setStDescription("TERIMA "+rcp.getDetails().size()+" PEMBAYARAN");
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                        }

                        head.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                        journal.add(head);

                    }
                //END POSTING JURNAL HEADER RECEIPT VIEW
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                
                // POSTING JURNAL PELUNASAN RECEIPT LINES / DETAIL
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();

                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription("TERIMA PEMBAYARAN "+rl.getInvoice().getStAttrPolicyNo());
                            head.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            journal.add(head);

                        }
                    }
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    //POSTING LINE
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                if (rccom.isDelete()) continue;
                                
                                boolean dontJurnal = rcInvoiceDetail.isPolicyCost2() || rcInvoiceDetail.isDiscount2() || 
                                                     rcInvoiceDetail.isStampDuty2() || rcInvoiceDetail.isTaxComm() ||
                                                     rcInvoiceDetail.isTaxBrok() || rcInvoiceDetail.isTaxHFee();
                                
                                boolean isKomisi = rcInvoiceDetail.isCommission2() || rcInvoiceDetail.isBrokerage2() || rcInvoiceDetail.isHandlingFee2();
                                
                                if(dontJurnal) {
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());
                                    
                                    //final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                        
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        //comAccount = rcp.getStAccountID();
                                        comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                    }
                                    
                                    if(isKomisi){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());
                                    }

                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        amount = BDUtil.mul(negator,rccom.getInvoice().getDbAmount());
                                        comline.setDbAutoCredit(amount);
                                    }
                                    
                                    if(!rcInvoiceDetail.isPremiGross2())
                                        if(rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoCredit(amount);
                                        }else if(!rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoDebit(amount);
                                        }
                                    
                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+rcInvoiceDetail.getStARInvoiceDetailID()+")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    String referenceDesc = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        referenceDesc = referenceARInvoiceDetail.getStDescription();
                                    }
                                                
   
                                        comline.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                    
                                    journal.add(comline);
                                    
                                    //ADD JURNAL BANK JIKA KOMISI DI BAYAR
                                    if(isKomisi && rccom.isCheck()){
                                        JournalView jurnalBank = comline.copy();
                                        jurnalBank.markNew();
                                        jurnalBank.inverse();
                                        jurnalBank.setStAccountIDNotNull(comAccount, "Invalid account in AP_COMM_ACRUAL parameters (" + comAccount + ")");
                                        
                                        jurnalBank.setStDescription("PEMBAYARAN " + referenceDesc + " " + rccom.getStDescription() + " " + rl.getStInvoiceNo());
                                        jurnalBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                        if(!rcInvoiceDetail.isPremiGross2())
                                            journal.add(jurnalBank);
                                    }  
                                }
                            }
                        }
                    }//END
                    
                    //POSTING JURNAL PAJAK
                    
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        boolean centangComm = false;
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                boolean parentLunas = false;
                                
                                if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                    final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                    for (int k = 0; k < detail.size(); k++) {
                                        ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                        ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                        if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                             if(d2.isCheck())
                                                 parentLunas = true;

                                        }

                                    }
                                }
                                
                                final ARInvoiceDetailView parentInvoiceDetail = rccom.getInvoiceDetail().getRef();
    
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbInvoiceAmount());
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String referenceDesc = "";
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"";
                                }
                                
                                String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                comline1.setStDescription(paymentDesc);
                                comline1.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                comline1.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                
                                journal.add(comline1);
                            }
                        }
                    }
                    //END POSTING PAJAK
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
                
                //BUAT HUTANG PIUTANG PIHAK KETIGA (HUTANG KOMISI, BROKERFEE, HFEE JIKA BELUM DI BAYAR)
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail.isTax()) continue;
                            
                            //boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                            
                            if(!rcc.isCheck()){
                                
                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                                
                                //if(BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())&&
                                        //BDUtil.biggerThan(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                    //continue;
                                
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                                
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                /*
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }*/
                                
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                                
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                                
                                
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                                
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                                
                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                                
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                                
                                invoice.setDbAmount(rcc.getDbInvoiceAmount());
                                invoice.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                
                                
                                final DTOList ivdetails = new DTOList();
                                
                                invoice.setDetails(ivdetails);
                                
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {
                                    
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                    
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                        
                                        ivd.markNew();
                                        
                                        ivdetails.add(ivd);
                                        
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                        ivd.setDbAmount(rcc.getDbInvoiceAmount());
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                        ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    }
                                }
                                
                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());
                                
                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );
                                    
                                    {
                                        
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                        
                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);
                                            
                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();
                                            
                                            ivdChild.markNew();
                                            
                                            ivdetails.add(ivdChild);
                                            
                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());
                                            
                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setDbAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                            ivdChild.setStRefID1(childInvoiceDetailCek.getStARInvoiceDetailID());
                                            ivdChild.setStRootID(childInvoiceDetailCek.getStARInvoiceDetailID());
                                        }
                                    }
                                }
                                
                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }
                            
                        }
                        
                    }
                }
                
                //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK JIKA KOMISI DI BAYAR
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                    boolean parentLunas = false;
                             
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            //tes 
                            //final DTOList details2 = rl.getDetails();
                            if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                parentLunas = false;
                                final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                for (int k = 0; k < detail.size(); k++) {
                                    ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                    ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                    if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                         if(d2.isCheck())
                                             parentLunas = true;

                                    }

                                }
                            }
                            
                            //
                            if(!rcInvoiceDetail.isTax()) continue;
                            
                            final BigDecimal comamt = rcc.getDbInvoiceAmount();
                            
                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();
                            
                            //boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                            if(!parentLunas) continue;

                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AR");
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }

                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                            
                            invoice.setStNoSuratHutang(
                                "SHP/"+
                                invoice.getStARCustomerID()+
                                "/"+
                                invoice.getStCostCenterCode()+
                                "/"+
                                DateUtil.getMonth2Digit(new Date())+
                                "/"+
                                DateUtil.getYear(new Date()));
                            
                            //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                            //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                            
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setDbAmount(comamt);
                            invoice.setDbEnteredAmount(comamt);
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(comamt);
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                    ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                }
                            }
                                    
                                    invoice.recalculate2();
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    
                        }
                    }
                }
                
                //end hutang pajak
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
 }
    
     public ARReceiptView getARReceiptForPrinting(String rcid) throws Exception {
        
        final ARReceiptView rcp = (ARReceiptView)ListUtil.getDTOListFromQuery(
                "select * from ar_receipt where ar_receipt_id = ?",
                new Object [] {rcid},
                ARReceiptView.class
                ).getDTO();        
        
        if(rcp.getStPrintCode()==null) {
            rcp.markUpdate();
            rcp.setStPrintCode(StringTools.leftPad(String.valueOf(IDFactory.createNumericID("PCDAR")), '0', 10));
            rcp.setStPrintFlag("Y");
            
            String k;
            
            while (true) {
                String pz = rcp.getStPrintCode() + "/" + rcp.getStReceiptNo() + "/" + rcp.getStARReceiptID();
                
                k = Crypt.asHex(Crypt.generateMD5Key(StringTools.getBytes(pz)));
                
                DTOList l = ListUtil.getDTOListFromQuery(
                        "select print_stamp from ar_receipt where print_stamp=? limit 1",
                        new Object[]{k},
                        HashDTO.class);
                
                if (l.size() == 0) break;
            }

            rcp.setStPrintStamp(k);
            
            final SQLUtil S = new SQLUtil();
            
            try {
                //S.store(rcp);
                PreparedStatement P = S.setQuery("update ar_receipt set print_code = ?, print_stamp = ? where ar_receipt_id = ? ");
                P.setObject(1, rcp.getStPrintCode());
                P.setObject(2, k);
                P.setObject(3, rcid);
                int r = P.executeUpdate();
            } finally {
                S.release();
            }
        }
        
        //rcp = getARReceipt(rcid);
        return rcp;
    }
     
     public void savePembayaranKlaimLKS(ARReceiptView rcp) throws Exception {
        rcp.validate();
      
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());
        
        try {
            if (rcp.isNew()){
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);
                }
            }
            
            S.store(rcp.getNotes());
            
            S.store(gLs);
            
            S.store(details);
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                 /*
         ARInvoiceView iv = rcp.getArapinvoice();
                  
         iv.recalculate();
                  
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }
                  
         String invoiceID = save(iv);
                  
         rcp.setStARAPInvoiceID(invoiceID);*/
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                //applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                //applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                
                // AR DR vs bank CR
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                if(rcp.getSettlement().isAR()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoDebit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("PEMBAYARAN KLAIM "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getStInvoiceNo());
                        } else {
                            head.setStDescription("PEMBAYARAN "+rcp.getDetails().size()+" INVOICES");
                        }

                        journal.add(head);
                    }
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if(moreThan1Policy){
                         if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoDebit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getStInvoiceNo());                      

                            journal.add(head);
                        }
                    }
                    
                    if (rl.isInvoice()) {
                        
                        final DTOList comissionList = rl.getDetails();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
  
                            final JournalView lineDetail = gl.copy();
                            
                            BigDecimal amt2 = BDUtil.mul(negator,det.getDbInvoiceAmount());
                            
                            lineDetail.setDbAutoCredit(amt);
                            
                            applicator.setCode('Y', det.getPolicy().getEntity().getStGLCode());
                            applicator.setCode('X', det.getPolicy().getStPolicyTypeID());
                            applicator.setDesc("Y",det.getPolicy().getEntity().getStShortName());
                            
                            //applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                            lineDetail.setStAccountIDNotNull(applicator.getAccountID(rcp.getSettlement().getStARAPAccount()),"Invalid or empty account in invoice : ");
                            lineDetail.setStDescription(applicator.getStGLDesc());
                            lineDetail.setStCurrencyCode(rl.getPolicy().getStCurrencyCode());
                            lineDetail.setDbCurrencyRate(rl.getPolicy().getDbCurrencyRate());
                            lineDetail.setStPolicyNo(rl.getPolicy().getStPolicyNo());
                            
                            
                            journal.add(lineDetail);
                        }
                        
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    }
 
                }
 
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }
            
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
        
    }
     
     public void savePembayaranPremiRealisasiTitipan(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
            final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
            if(Tools.compare(rcp.getDbAmountApplied(),titipan.getDbBalance())>0){
                throw new RuntimeException("Titipan Premi ("+titipan.getDbBalance()+") Tidak Cukup Untuk Pelunasan");
            }
        }
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                            rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStARInvoiceDetailID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        
                        if(rclsub.isCheck())
                            rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStARInvoiceDetailID());
                            
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpan ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpan note
            
            S.store(gLs);//simpan excess
            
            S.store(details);//simpen receipt dr invoice
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                //update titipan premi
                if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
                    final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
                    updateTitipanBalance(stArTitipanID,rcp.getDbAmountApplied());
                    saveDetilTitipan(titipan,rcp);
                    
                }
                //end titipan
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
 
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING JURNAL HEADER RECEIPT VIEW
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());

                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("TERIMA PEMBAYARAN "+rl.getStInvoiceNo());
                        } else {
                            head.setStDescription("TERIMA "+rcp.getDetails().size()+" PEMBAYARAN");
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                        }

                        head.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                        journal.add(head);

                    }
                //END POSTING JURNAL HEADER RECEIPT VIEW
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                
                // POSTING JURNAL PELUNASAN RECEIPT LINES / DETAIL
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();

                            //head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
              
                            head.setStDescription("TERIMA PEMBAYARAN "+rl.getInvoice().getStAttrPolicyNo());
                            head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                            //head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            journal.add(head);

                        }
                    }
                    
                    final JournalView line = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    //POSTING LINE
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                if (rccom.isDelete()) continue;
                                
                                boolean dontJurnal = rcInvoiceDetail.isPolicyCost2() || rcInvoiceDetail.isDiscount2() || 
                                                     rcInvoiceDetail.isStampDuty2() || rcInvoiceDetail.isTaxComm() ||
                                                     rcInvoiceDetail.isTaxBrok() || rcInvoiceDetail.isTaxHFee();
                                
                                boolean isKomisi = rcInvoiceDetail.isCommission2() || rcInvoiceDetail.isBrokerage2() || rcInvoiceDetail.isHandlingFee2();
                                
                                if(dontJurnal) {
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    
                                    BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());
                                    
                                    //final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());
                                        
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        //comAccount = rcp.getStAccountID();
                                        comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                    }
                                    
                                    if(isKomisi){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());
                                    }
                                    
                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        amount = rccom.getInvoice().getDbAmount();
                                    }
              
                                    if(rcInvoiceDetail.isUangMukaPremi()){
                                        comAccount = rcInvoiceDetail.getStGLAccountID();
                                        comline.setStDescription("Pembayaran " + rccom.getStDescription());
                                        amount =  BDUtil.mul(negator,amount);
                                    }
                                    
                                    if(rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoDebit(amount);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoCredit(amount);
                                    }
                                    
                                    
                                    
                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+rcInvoiceDetail.getStARInvoiceDetailID()+")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    String referenceDesc = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        referenceDesc = referenceARInvoiceDetail.getStDescription();
                                    }
                                                
                                    comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rcp.getArapinvoice().isAP())
                                        comline.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                    
                                    journal.add(comline);
                                    
                                    //ADD JURNAL BANK JIKA KOMISI DI BAYAR
                                    if(isKomisi && rccom.isCheck()){
                                        JournalView jurnalBank = comline.copy();
                                        jurnalBank.markNew();
                                        jurnalBank.inverse();
                                        jurnalBank.setStAccountIDNotNull(comAccount, "Invalid account in AP_COMM_ACRUAL parameters (" + comAccount + ")");
                                        if(rcp.getArapinvoice().isAP())
                                            jurnalBank.setStDescription("PEMBAYARAN " + referenceDesc + " " + rccom.getStDescription() + " " + rl.getStInvoiceNo());
                                        jurnalBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                        if(!rcInvoiceDetail.isPremiGross2())
                                            journal.add(jurnalBank);
                                    }  
                                }
                            }
                        }
                    }//END
                    
                    //POSTING JURNAL PAJAK
                    
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        boolean centangComm = false;
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                //if(rcInvoiceDetail.getEntity()!=null)
                                    //applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                boolean parentLunas = false;
                                
                                if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                    final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                    for (int k = 0; k < detail.size(); k++) {
                                        ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                        if (!d2.isComission()) continue;
                                        
                                        ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                        if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                             if(d2.isCheck()){//lunas komisi
                                                 parentLunas = true;
                                                 applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                             }else{
                                                 applicator.setCode('P', rcInvoiceDetail2.getEntity().getStGLCode());
                                             }
                                        }

                                    }
                                }
                                
                                final ARInvoiceDetailView parentInvoiceDetail = rccom.getInvoiceDetail().getRef();
    
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbInvoiceAmount());
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String referenceDesc = "";
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"";
                                }
                                
                                logger.logDebug(">>>>>>>>> PARENT LUNAS : "+ parentLunas+" <<<<<<<<<<<<<<<");
                                String account = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                comline1.setStDescription(paymentDesc);
                                comline1.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                comline1.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                
                                journal.add(comline1);
                            }
                        }
                    }
                    //END POSTING PAJAK
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
                
                final String stHeaderID = getRemoteGeneralLedger().saveJournalEntryAutoPayment(journal);
                
                //AUTO CREATE ENDORSE POLIS SEMENTARA DAN BAYAR OTOMATIS
                InsurancePolicyView polis = rcp.getArapinvoice().getPolicy();
                
                InsurancePolicyView polisSementara = rcp.getArapinvoice().getPolicy().getTemporaryPolicy();
                
                final String temporaryPolicy = rcp.getArapinvoice().getPolicy().getStReference6();
                
                ARReceiptView rcpCoins = (ARReceiptView) ObjectCloner.deepCopy(rcp);
                
                String endorsePolisSementaraPolID = null;
                if(temporaryPolicy!=null){
                    logger.logDebug("+++++++++++++++++++++++= AUTO CREATE ENDORSE ++++++++++++++++++++");
                    logger.logDebug("Polis Sementara = "+polisSementara.getStPolicyNo());
                    logger.logDebug("+++++++++++++++++++++++= AUTO CREATE ENDORSE ++++++++++++++++++++");
                    PolicyForm form = new PolicyForm();
                    endorsePolisSementaraPolID = form.editCreateAutoEndorse(temporaryPolicy, rcp.getDbAmount(), polis.getDbInsuredAmount());

                    ARInvoiceView invoiceEndorsePolisSementara = getARInvoiceByAttrPolID(endorsePolisSementaraPolID);

                    final ARReceiptLinesView rcl = new ARReceiptLinesView();
                    rcl.markNew();
                    
                    rcl.setStInvoiceID(invoiceEndorsePolisSementara.getStARInvoiceID());
                    rcl.setStInvoiceNo(invoiceEndorsePolisSementara.getStInvoiceNo());
                    rcl.setStCurrencyCode(invoiceEndorsePolisSementara.getStCurrencyCode());
                    rcl.setDbCurrencyRate(invoiceEndorsePolisSementara.getDbCurrencyRate());
                    rcl.setDbInvoiceAmount(invoiceEndorsePolisSementara.getDbOutstandingAmount());
                    rcl.setDbEnteredAmount(rcl.getDbInvoiceAmount());
                    //rcl.setStNegativeFlag(d.getStNegativeFlag());
                    rcl.markAsInvoice();
                    rcl.markCommit();
                    
                    
                    rcp.getDetails().add(rcl);
                    
                    rcp.recalculate();
                    
                    
                    //onExpandInvoiceItem();
                    
                    final ARInvoiceView invoice = rcl.getInvoice();
                    
                    rcl.setStExpandedFlag("Y");
                    
                    final DTOList details2 = invoice.getDetails();
                    
                    for (int i = 0; i < details2.size(); i++) {
                        ARInvoiceDetailView d = (ARInvoiceDetailView) details2.get(i);
                        
                        final ARReceiptLinesView rcl2 = new ARReceiptLinesView();
                        rcl2.markNew();
                        
                        rcl2.setStInvoiceID(invoice.getStARInvoiceID());
                        rcl2.setStInvoiceNo(invoice.getStInvoiceNo());
                        rcl2.setStInvoiceDetailID(d.getStARInvoiceDetailID());
                        rcl2.setStDescription(d.getStDescription());
                        rcl2.setStCurrencyCode(invoice.getStCurrencyCode());
                        rcl2.setDbCurrencyRate(invoice.getDbCurrencyRate());
                        
                        rcl2.setDbInvoiceAmount(d.getDbEnteredAmount());
                        rcl2.setDbAmount(d.getDbOustandingAmount());
                        rcl2.setDbEnteredAmount(d.getDbOustandingAmount());
                        
                        if(d.isCommission2()||d.isBrokerage2()
                        ||d.isHandlingFee2()){
                            rcl2.setStLock(false);
                        }
                        
                        if(d.isTaxComm()||d.isTaxBrok()||d.isTaxHFee()){
                            rcl2.setDbAmount(BDUtil.zero);
                            rcl2.setDbEnteredAmount(BDUtil.zero);
                        }
                        
                        if (d.isComission()) rcl2.markAsComission();
                        rcl2.markCommit();
                        
                        rcl.getDetails().add(rcl2);
                    }
                    rcp.recalculate();
                    
                    savePembayaranPremiOtomatisEndorseSementara(rcp, stHeaderID);
                    
                    //BAYAR KOAS NYA
                    
                    ARInvoiceView invoiceEndorsePolisSementaraCoins = getARInvoiceByAttrPolIDCoins(endorsePolisSementaraPolID);
                    
                    final ARReceiptLinesView rclCoins = new ARReceiptLinesView();
                    rclCoins.markNew();
                    
                    rclCoins.setStInvoiceID(invoiceEndorsePolisSementaraCoins.getStARInvoiceID());
                    rclCoins.setStInvoiceNo(invoiceEndorsePolisSementaraCoins.getStInvoiceNo());
                    rclCoins.setStCurrencyCode(invoiceEndorsePolisSementaraCoins.getStCurrencyCode());
                    rclCoins.setDbCurrencyRate(invoiceEndorsePolisSementaraCoins.getDbCurrencyRate());
                    rclCoins.setDbInvoiceAmount(invoiceEndorsePolisSementaraCoins.getDbOutstandingAmount());
                    rclCoins.setDbEnteredAmount(rclCoins.getDbInvoiceAmount());
                    //rcl.setStNegativeFlag(d.getStNegativeFlag());
                    rclCoins.markAsInvoice();
                    rclCoins.markCommit();
                    
                    
                    rcpCoins.getDetails().add(rclCoins);
                    
                    rcpCoins.recalculate();
                    
                    //onExpandInvoiceItem();
                    
                    final ARInvoiceView invoiceCoins = rclCoins.getInvoice();
                    
                    rclCoins.setStExpandedFlag("Y");
                    
                    final DTOList details2Coins = invoiceCoins.getDetails();
                    
                    for (int i = 0; i < details2Coins.size(); i++) {
                        ARInvoiceDetailView dCoins = (ARInvoiceDetailView) details2Coins.get(i);
                        
                        final ARReceiptLinesView rcl2Coins = new ARReceiptLinesView();
                        rcl2Coins.markNew();
                        
                        rcl2Coins.setStInvoiceID(invoiceCoins.getStARInvoiceID());
                        rcl2Coins.setStInvoiceNo(invoiceCoins.getStInvoiceNo());
                        rcl2Coins.setStInvoiceDetailID(dCoins.getStARInvoiceDetailID());
                        rcl2Coins.setStDescription(dCoins.getStDescription());
                        rcl2Coins.setStCurrencyCode(invoiceCoins.getStCurrencyCode());
                        rcl2Coins.setDbCurrencyRate(invoiceCoins.getDbCurrencyRate());
                        
                        rcl2Coins.setDbInvoiceAmount(dCoins.getDbEnteredAmount());
                        rcl2Coins.setDbAmount(dCoins.getDbOustandingAmount());
                        rcl2Coins.setDbEnteredAmount(dCoins.getDbOustandingAmount());
                        
                        if(dCoins.isCommission2()||dCoins.isBrokerage2()
                        ||dCoins.isHandlingFee2()){
                            rcl2Coins.setStLock(false);
                        }
                        
                        if(dCoins.isTaxComm()||dCoins.isTaxBrok()||dCoins.isTaxHFee()){
                            rcl2Coins.setDbAmount(BDUtil.zero);
                            rcl2Coins.setDbEnteredAmount(BDUtil.zero);
                        }
                        
                        if (dCoins.isComission()) rcl2Coins.markAsComission();
                        rcl2Coins.markCommit();
                        
                        rclCoins.getDetails().add(rcl2Coins);
                    }
                    rcpCoins.recalculate();
                    
                    savePembayaranPremiOtomatisEndorseSementaraCoins(rcpCoins, stHeaderID,rclCoins.getDbInvoiceAmount());
                    
                }
                //BUAT HUTANG PIUTANG PIHAK KETIGA (HUTANG KOMISI, BROKERFEE, HFEE JIKA BELUM DI BAYAR)
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail.isTax()) continue;
                            
                            //boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                            
                            if(!rcc.isCheck()){
                                
                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                                
                                //if(BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())&&
                                        //BDUtil.biggerThan(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                    //continue;
                                
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                                
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                /*
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }*/
                                
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                                
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                                
                                
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                                
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                                
                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                                
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                                
                                invoice.setDbAmount(rcc.getDbInvoiceAmount());
                                invoice.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                
                                
                                final DTOList ivdetails = new DTOList();
                                
                                invoice.setDetails(ivdetails);
                                
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {
                                    
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                    
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                        
                                        ivd.markNew();
                                        
                                        ivdetails.add(ivd);
                                        
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                        ivd.setDbAmount(rcc.getDbInvoiceAmount());
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                        ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    }
                                }
                                
                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());
                                
                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );
                                    
                                    {
                                        
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                        
                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);
                                            
                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();
                                            
                                            ivdChild.markNew();
                                            
                                            ivdetails.add(ivdChild);
                                            
                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());
                                            
                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setDbAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                            ivdChild.setStRefID1(childInvoiceDetailCek.getStARInvoiceDetailID());
                                            ivdChild.setStRootID(childInvoiceDetailCek.getStARInvoiceDetailID());
                                        }
                                    }
                                }
                                
                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }
                            
                        }
                        
                    }
                }
                
                //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK JIKA KOMISI DI BAYAR
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                    boolean parentLunas = false;
                             
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            //tes 
                            //final DTOList details2 = rl.getDetails();
                            if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                parentLunas = false;
                                final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                for (int k = 0; k < detail.size(); k++) {
                                    ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                    ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                    if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                         if(d2.isCheck())
                                             parentLunas = true;

                                    }

                                }
                            }
                            
                            //
                            if(!rcInvoiceDetail.isTax()) continue;
                            
                            final BigDecimal comamt = rcc.getDbInvoiceAmount();
                            
                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();
                            
                            //boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                            if(!parentLunas) continue;

                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }

                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                            
                            invoice.setStNoSuratHutang(
                                "SHP/"+
                                invoice.getStARCustomerID()+
                                "/"+
                                invoice.getStCostCenterCode()+
                                "/"+
                                DateUtil.getMonth2Digit(new Date())+
                                "/"+
                                DateUtil.getYear(new Date()));
                            
                            //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                            //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                            
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setDbAmount(comamt);
                            invoice.setDbEnteredAmount(comamt);
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(comamt);
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                    ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                }
                            }
                                    
                                    invoice.recalculate2();
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    
                        }
                    }
                }
                
                //end hutang pajak
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
 }
     
     public void savePembayaranRealisasiTitipan(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        
        rcp.validate();
        
        final String stArTitipanID = rcp.getStARTitipanID()==null?null:rcp.getStARTitipanID();
        
        /*
        if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
            final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
            if(Tools.compare(rcp.getDbAmountApplied(),titipan.getDbBalance())>0){
                throw new RuntimeException("Titipan Premi ("+titipan.getDbBalance()+") Tidak Cukup Untuk Pelunasan");
            }
        }*/
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            //final DTOList titipan = rcp.getTitipan();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            String stARInvoiceID="";
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                            rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStARInvoiceDetailID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        
                        if(rclsub.isCheck())
                            rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStARInvoiceDetailID());
                            
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);//simpan ke receipt lines
                }
                
                if (rcl.getListTitipan().size()>0) {
                    final DTOList subTitipan = rcl.getListTitipan();
                    
                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);
                        
                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        //rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        
                        if(rclTitipan.isCheck())
                            rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());
                            
                        if (rclTitipan.isNew())
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subTitipan);//simpan ke receipt lines
                }
            }
            
            S.store(rcp.getNotes());//simpan note
            
            S.store(gLs);//simpan excess
            
            S.store(details);//simpen receipt dr invoice
            
            if(rcp.isNew())
                rcp.generateReceiptNo();
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                //update titipan premi
                /*if(rcp.getStReceiptClassID().equalsIgnoreCase("8")){
                    final ARTitipanPremiView titipan = getTitipan(stArTitipanID);
                    updateTitipanBalance(stArTitipanID,rcp.getDbAmountApplied());
                    saveDetilTitipan(titipan,rcp);
                    
                }*/
                //end titipan
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                final String apTaxAccrualAccID = applicator.getAccountID(Parameter.readString("AP_TAX_ACRUAL"));
 
                // AR DR vs bank CR
                
                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                
                //POSTING JURNAL HEADER RECEIPT VIEW
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        final ARInvoiceView invoice = getARInvoice(rl3.getInvoice().getStARInvoiceID());

                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("TERIMA PEMBAYARAN "+rl.getStInvoiceNo());
                        } else {
                            head.setStDescription("TERIMA "+rcp.getDetails().size()+" PEMBAYARAN");
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                        }

                        head.setStPolicyNo(rcp.getArapinvoice().getStAttrPolicyNo());
                        journal.add(head);

                    }
                //END POSTING JURNAL HEADER RECEIPT VIEW
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                
                // POSTING JURNAL PELUNASAN RECEIPT LINES / DETAIL
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();

                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription("TERIMA PEMBAYARAN "+rl.getInvoice().getStAttrPolicyNo());
                            head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            journal.add(head);
                        }
                    }
                    
                    final JournalView line = gl.copy();
                    
                    //CREATE SALDO TITIPAN
                    if(rl.getStTitipanPremiID()!=null){
                        /*final TitipanPremiView titipan = getTitipanPremi(rl.getStTitipanPremiID());
                        
                        logger.logDebug("+++++++++++++ CREATE SALDO TITIPAN PREMI +++++++++++++++");
                        TitipanPremiHeaderView newHeaderTitipan = new TitipanPremiHeaderView();

                        final AccountView account = getRemoteGeneralLedger().getAccountByAccountID(String.valueOf(titipan.getLgAccountIDMaster()));
                        newHeaderTitipan.setLgAccountIDMaster(titipan.getLgAccountIDMaster());
                        newHeaderTitipan.setStAccountNoMaster(account.getStAccountNo());
                        newHeaderTitipan.setStAccountNo(titipan.getStAccountNo());
                        
                        newHeaderTitipan.setStApproved("Y");
                        newHeaderTitipan.setDtCreateDate(rcp.getDtReceiptDate());
                        newHeaderTitipan.setStMethodCode(titipan.getStTransactionNo().substring(0,1));
                        newHeaderTitipan.setStTransactionNo(titipan.getStTransactionNo());
                        
                        DTOList titip = new DTOList();
                        
                        TitipanPremiView newTitipan = new TitipanPremiView();
                        newTitipan = (TitipanPremiView) ObjectCloner.deepCopy(titipan);
                        newTitipan.markNew();
                        newTitipan.setStAccountNo(titipan.getStAccountNo());
                        newTitipan.setDbCredit(BDUtil.sub(titipan.getDbBalance(),rl.getDbTotalAmountPerLine()));
                        newTitipan.setDbEnteredCredit(BDUtil.sub(titipan.getDbBalance(),rl.getDbTotalAmountPerLine()));
                        newTitipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),rl.getDbTotalAmountPerLine()));
                        newTitipan.setStTransactionHeaderID(null);
                        newTitipan.setDtApplyDate(rcp.getDtReceiptDate());
                        titip.add(newTitipan);
                        
                        getRemoteGeneralLedger().saveTitipanPremi(newHeaderTitipan, titip);

                        titipan.markUpdate();
                        titipan.setStActiveFlag("N");
                        S.store(titipan);
                        S.release();*/
                        
                        //updateAndCreateTitipanPremi(rcp,rl,rl.getStTitipanPremiID());
                        
                    }
                    
                    final DTOList titip = rl.getListTitipan();
                    for (int j = 0; j < titip.size(); j++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);
                        
                        updateAndCreateTitipanPremi(S, rcp,rl,rlTitipan.getStTitipanPremiID());
                    }
                    
                    
                    
                    //END CREATE SALDO TITIPAN
                    
                    //JURNAL TITIPAN PREMI
                    /*if(rl.getStTitipanPremiID()!=null){
                        final JournalView jurnalTitipan = gl.copy();

                        final TitipanPremiView titipan = getTitipanPremi(rl.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(String.valueOf(titipan.getLgAccountID()),"Invalid or empty account in payment method ");
                        jurnalTitipan.setStDescription(titipan.getStDescription());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                        jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        journal.add(jurnalTitipan);
                        
                        
                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        jurnalBankTitipan.setStDescription(titipan.getStDescription());
                        journal.add(jurnalBankTitipan);
                    }*/
                    //END JURNAL TITIPAN PREMI
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    //POSTING LINE
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();
                                
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                String comAccount ="";
                                
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                if (rccom.isDelete()) continue;
                                
                                boolean dontJurnal = rcInvoiceDetail.isPolicyCost2() || rcInvoiceDetail.isDiscount2() || 
                                                     rcInvoiceDetail.isStampDuty2() || rcInvoiceDetail.isTaxComm() ||
                                                     rcInvoiceDetail.isTaxBrok() || rcInvoiceDetail.isTaxHFee();
                                
                                boolean isKomisi = rcInvoiceDetail.isCommission2() || rcInvoiceDetail.isBrokerage2() || rcInvoiceDetail.isHandlingFee2();
                                
                                if(isKomisi && rccom.isCheck()) continue;
                                    
                                if(dontJurnal) {
                                }else{
                                    
                                    final JournalView comline = gl.copy();
                                    BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());
  
                                    if(rcInvoiceDetail.isComm()){
                                        comAccount = rcp.getStAccountID();
                                    }else{
                                        comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                    }
                                    
                                    if(isKomisi){
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());
                                    }
                                    
                                    String accountDescPremiG = null;
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                        comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                        accountDescPremiG = applicator.getStGLDesc();
                                        amount = rccom.getInvoice().getDbAmount();
                                    }
              
                                    if(rcInvoiceDetail.isUangMukaPremi()){
                                        comAccount = rcInvoiceDetail.getStGLAccountID();
                                        comline.setStDescription("Pembayaran " + rccom.getStDescription());
                                        amount =  BDUtil.mul(negator,amount);
                                    }
                                    
                                    if(rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoDebit(amount);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline.setDbAutoCredit(amount);
                                    }

                                    comline.setStAccountIDNotNull(comAccount,"Invalid account in AP_COMM_ACRUAL parameters ("+rcInvoiceDetail.getStARInvoiceDetailID()+")" );
                                    
                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    String referenceDesc = "";
                                    
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        if(referenceARInvoiceDetail!=null) referenceDesc = referenceARInvoiceDetail.getStDescription();
                                    }
                                                
                                    comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rcp.getArapinvoice().isAP())
                                        comline.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    
                                    if(rcInvoiceDetail.isPremiGross2()){
                                        comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    }
                                    
                                    comline.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                    
                                    journal.add(comline);
                                    
                                    //ADD JURNAL BANK JIKA KOMISI DI BAYAR
                                    /*if(isKomisi && rccom.isCheck()){
                                        JournalView jurnalBank = comline.copy();
                                        jurnalBank.markNew();
                                        jurnalBank.inverse();
                                        jurnalBank.setStAccountIDNotNull(comAccount, "Invalid account in AP_COMM_ACRUAL parameters (" + comAccount + ")");
                                        if(rcp.getArapinvoice().isAP())
                                            jurnalBank.setStDescription("PEMBAYARAN " + referenceDesc + " " + rccom.getStDescription() + " " + rl.getStInvoiceNo());
                                        jurnalBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                        if(!rcInvoiceDetail.isPremiGross2())
                                            journal.add(jurnalBank);
                                    }*/  
                                }
                            }
                        }
                    }//END
                    
                    //POSTING JURNAL PAJAK
                    
                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();
                        boolean centangComm = false;
                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);
                                
                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                if (!rccom.isComission()) continue;
                                
                                if(!rcInvoiceDetail.isTax()) continue;
                                
                                if (rccom.isDelete()) continue;
                                
                                //if(rcInvoiceDetail.getEntity()!=null)
                                    //applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                boolean parentLunas = false;
                                
                                if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                    final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                    for (int k = 0; k < detail.size(); k++) {
                                        ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                        if (!d2.isComission()) continue;
                                        
                                        ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                        if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                             if(d2.isCheck()){//lunas komisi
                                                 parentLunas = true;
                                                 applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                             }else{
                                                 applicator.setCode('P', rcInvoiceDetail2.getEntity().getStGLCode());
                                             }
                                        }

                                    }
                                }
                                
                                final ARInvoiceDetailView parentInvoiceDetail = rccom.getInvoiceDetail().getRef();
    
                                final JournalView comline1 = gl.copy();
                                
                                final BigDecimal comamt = BDUtil.mul(negator,rccom.getDbInvoiceAmount());
                                
                                if(rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoDebit(comamt);
                                }else if(!rcInvoiceDetail.isNegative()){
                                    comline1.setDbAutoCredit(comamt);
                                }
                                
                                ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                
                                detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                
                                String referenceDesc = "";
                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                if(detil.getStRefInvoiceDetailID()!=null){
                                    referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                    referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"";
                                }
                                
                                logger.logDebug(">>>>>>>>> PARENT LUNAS : "+ parentLunas+" <<<<<<<<<<<<<<<");
                                String account = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                comline1.setStDescription(paymentDesc);
                                comline1.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                comline1.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                
                                journal.add(comline1);
                                
                                //ADD JURNAL PIUTANG PAJAK
                                if(rccom.isCheck()){
                                    final JournalView comline2 = gl.copy();

                                    if(rcInvoiceDetail.isNegative()){
                                        comline2.setDbAutoCredit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline2.setDbAutoDebit(comamt);
                                    }

                                    logger.logDebug(">>>>>>>>> PARENT LUNAS : "+ parentLunas+" <<<<<<<<<<<<<<<");
                                    String account2 = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLApAccount());
                                    comline2.setStAccountIDNotNull(account2,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                    comline2.setStDescription(paymentDesc);
                                    comline2.setStDescription("PIUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comline2.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline2.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    journal.add(comline2);
                                }
                                //END
                            }
                        }
                    }
                    //END POSTING PAJAK
                    
                    //JURNAL TITIPAN PREMI
                    if(rl.getStTitipanPremiID()!=null){
                        final JournalView jurnalTitipan = gl.copy();

                        final TitipanPremiView titipan = getTitipanPremi(rl.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipan.getStAccountID(),"Invalid or empty account in payment method ");
                        jurnalTitipan.setStDescription(titipan.getStDescription());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                        jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        journal.add(jurnalTitipan);
                        
                        
                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        jurnalBankTitipan.setStDescription(titipan.getStDescription());
                        journal.add(jurnalBankTitipan);
                    }
                    //END JURNAL TITIPAN PREMI
                    
                    final DTOList titipan = rl.getListTitipan();
                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);
                        
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiView titipanPremi = getTitipanPremi(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Invalid or empty account in payment method ");
                        jurnalTitipan.setStDescription(titipanPremi.getStDescription());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                        jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        journal.add(jurnalTitipan);
                        
                        
                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        jurnalBankTitipan.setStDescription(titipanPremi.getStDescription());
                        journal.add(jurnalBankTitipan);
                    }
                    
                }
                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
                
                //BUAT HUTANG PIUTANG PIHAK KETIGA (HUTANG KOMISI, BROKERFEE, HFEE JIKA BELUM DI BAYAR)
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            if(rcInvoiceDetail.isTax()) continue;
                            
                            //boolean hasExcess = !BDUtil.isZero(rcc.getDbOutstandingAmountAct());
                            
                            if(!rcc.isCheck()){
                                
                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));
                                
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;
                                
                                //if(BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())&&
                                        //BDUtil.biggerThan(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1)))
                                    //continue;
                                
                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();
                                
                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                
                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                                
                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }
                                
                                
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                /*
                                if(rcInvoiceDetail.isComission()&&!rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }*/
                                
                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }
                                
                                
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");
                                
                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }
                                
                                
                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());
                                
                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }
                                
                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                
                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                                
                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                                
                                invoice.setDbAmount(rcc.getDbInvoiceAmount());
                                invoice.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                
                                
                                final DTOList ivdetails = new DTOList();
                                
                                invoice.setDetails(ivdetails);
                                
                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {
                                    
                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                    
                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                        
                                        ivd.markNew();
                                        
                                        ivdetails.add(ivd);
                                        
                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                        ivd.setDbAmount(rcc.getDbInvoiceAmount());
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                        ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    }
                                }
                                
                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());
                                
                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );
                                    
                                    {
                                        
                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                        
                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);
                                            
                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();
                                            
                                            ivdChild.markNew();
                                            
                                            ivdetails.add(ivdChild);
                                            
                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());
                                            
                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setDbAmount(childInvoiceDetailCek.getDbAmount());
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                            ivdChild.setStRefID1(childInvoiceDetailCek.getStARInvoiceDetailID());
                                            ivdChild.setStRootID(childInvoiceDetailCek.getStARInvoiceDetailID());
                                        }
                                    }
                                }
                                
                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }
                            
                        }
                        
                    }
                }
                
                //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK JIKA KOMISI DI BAYAR
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                    
                    final ARInvoiceView actInvoice = rcl.getInvoice();
                    
                    final DTOList detail = rcl.getDetails();
                    
                    boolean parentLunas = false;
                             
                    if (detail.size()>0) {
                        
                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);
                            
                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();
                            
                            //tes 
                            //final DTOList details2 = rl.getDetails();
                            if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                parentLunas = false;
                                final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                for (int k = 0; k < detail.size(); k++) {
                                    ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                    ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                    if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                         if(d2.isCheck())
                                             parentLunas = true;

                                    }

                                }
                            }
                            
                            //
                            if(!rcInvoiceDetail.isTax()) continue;
                            
                            final BigDecimal comamt = rcc.getDbInvoiceAmount();
                            
                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();
                            
                            //boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));
                            if(!parentLunas) continue;

                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();
                            
                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                            
                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");
                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());
                            
                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");
                            
                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }

                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());
                            
                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }
                            
                            invoice.setStNoSuratHutang(
                                "SHP/"+
                                invoice.getStARCustomerID()+
                                "/"+
                                invoice.getStCostCenterCode()+
                                "/"+
                                DateUtil.getMonth2Digit(new Date())+
                                "/"+
                                DateUtil.getYear(new Date()));
                            
                            //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                            //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                            
                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());
                            
                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());
                            
                            invoice.setDbAmount(comamt);
                            invoice.setDbEnteredAmount(comamt);
                            
                            
                            final DTOList ivdetails = new DTOList();
                            
                            invoice.setDetails(ivdetails);
                            
                            
                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );
                            
                            {
                                
                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());
                                
                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);
                                    
                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                    
                                    ivd.markNew();
                                    
                                    ivdetails.add(ivd);
                                    
                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(comamt);
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                    ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                }
                            }
                                    
                                    invoice.recalculate2();
                                    
                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);
                                    
                                    //BUAT PIUTANG JIKA PAJAK DIAMBIL JUGA OLEH PENERIMA KOMISI
                                    if(rcc.isCheck()){
                                        ARInvoiceView piutangPajak = new ARInvoiceView();
                                    piutangPajak.markNew();

                                    piutangPajak = (ARInvoiceView) ObjectCloner.deepCopy(invoice);
                                    piutangPajak.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    piutangPajak.setStInvoiceType("AR");
                                    piutangPajak.setStARCustomerID(parentInvoiceDetail.getStEntityID());
                                    piutangPajak.setStEntityID(invoice.getStARCustomerID());
                                    applicator.setCode('P', parentInvoiceDetail.getEntity().getStGLCode());
                                    piutangPajak.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLApAccount()));
          
                                    
                                    //ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();
                                    /*
                                    piutangPajak.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                    piutangPajak.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                    piutangPajak.setStRefID2(refIVD.getStRefID0());
                                    piutangPajak.setStPolicyID(actInvoice.getStPolicyID());
                                    piutangPajak.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    piutangPajak.setStInvoiceType("AP");
                                    piutangPajak.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                    piutangPajak.setDtInvoiceDate(rcp.getDtReceiptDate());
                                    invoice.setDtDueDate(invoice.getDtInvoiceDate());

                                    invoice.setDbAmountSettled(null);
                                    invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                    invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                    invoice.setStPostedFlag("N");

                                    invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                    if(invoice.getStARCustomerID()==null){
                                        invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                    }

                                    invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                    invoice.setStEntityID(invoice.getStARCustomerID());

                                    if(invoice.getStEntityID()==null){
                                        invoice.setStEntityID(invoice.getStEntityID());
                                    }

                                    invoice.setStNoSuratHutang(
                                        "SHP/"+
                                        invoice.getStARCustomerID()+
                                        "/"+
                                        invoice.getStCostCenterCode()+
                                        "/"+
                                        actInvoice.getPolicy().getStPolicyTypeID()+
                                        "/"+
                                        DateUtil.getMonth2Digit(new Date())+
                                        "/"+
                                        DateUtil.getYear(new Date()));

                                    //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                    //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));

                                    invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                    if(!rcInvoiceDetail.isComission())
                                        invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                                    invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                    invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                    invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                    invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                    invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                    invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                    invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                    invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                    invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                                    invoice.setDbAmount(comamt);
                                    invoice.setDbEnteredAmount(comamt);


                                    final DTOList ivdetails = new DTOList();

                                    invoice.setDetails(ivdetails);


                                    final DTOList artlines = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );

                                    {

                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                        for (int k = 0; k < artlines.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                            final ARInvoiceDetailView ivd = new ARInvoiceDetailView();

                                            ivd.markNew();

                                            ivdetails.add(ivd);

                                            ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                            ivd.loadSettings();
                                            ivd.setDbEnteredAmount(comamt);
                                            ivd.setDbAmount(comamt);
                                            ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                            ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                            ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                            ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                            ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        }
                                    }*/

                                            piutangPajak.recalculate2();
                                            piutangPajak.setStRefInvoiceID(invoice.getStRefInvoiceID());
                                            save(piutangPajak);
                                    }
                                    
                                    //END
                                    
                        }
                    }
                }
                
                //end hutang pajak
                
            }
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
 }
     
     public TitipanPremiView getTitipanPremi(String stArTitipanID) throws Exception {
        DTOPool.getInstance().clear();

        if (stArTitipanID==null) return null;

        return (TitipanPremiView) DTOPool.getInstance().getDTO(TitipanPremiView.class, stArTitipanID);
    }
     
     private void updateAndCreateTitipanPremi(SQLUtil S, ARReceiptView rcp, ARReceiptLinesView rl, String stTitipanPremiID) throws Exception{
        //final SQLUtil S = new SQLUtil(); 
        try{
                TitipanPremiView titipan = getTitipanPremi(stTitipanPremiID);

                BigDecimal totalPemakaian = getDbPemakaianTitipanPremi(stTitipanPremiID);

                BigDecimal sisaTitipan = BDUtil.sub(titipan.getDbAmount(), totalPemakaian);

                sisaTitipan = sisaTitipan.setScale(2,BigDecimal.ROUND_HALF_UP);

                BigDecimal pemakaian = rl.getDbTitipanPremiUsedAmount();

                pemakaian = pemakaian.setScale(2,BigDecimal.ROUND_HALF_UP);

                if(BDUtil.isZeroOrNull(sisaTitipan)){
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" sudah nol, tidak bisa untuk realisasi");
                }

                if(BDUtil.biggerThanZero(sisaTitipan)){
                    if(BDUtil.lesserThan(sisaTitipan,pemakaian))
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" tidak mencukupi untuk realisasi");
                }
                
                if(BDUtil.lesserThanZero(sisaTitipan)){
                    if(BDUtil.biggerThanZero(BDUtil.sub(sisaTitipan,pemakaian)))
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" tidak mencukupi untuk realisasi");
                }

                /*
                logger.logDebug("+++++++++++++ CREATE SALDO TITIPAN PREMI +++++++++++++++");
                TitipanPremiHeaderView newHeaderTitipan = new TitipanPremiHeaderView();
                
                final AccountView account = getRemoteGeneralLedger().getAccountByAccountID(String.valueOf(titipan.getLgAccountIDMaster()));
                newHeaderTitipan.setLgAccountIDMaster(titipan.getLgAccountIDMaster());
                newHeaderTitipan.setStAccountNoMaster(account.getStAccountNo());
                newHeaderTitipan.setStAccountNo(titipan.getStAccountNo());

                newHeaderTitipan.setStApproved("Y");
                newHeaderTitipan.setDtCreateDate(rcp.getDtReceiptDate());
                newHeaderTitipan.setStMethodCode(titipan.getStTransactionNo().substring(0,1));
                newHeaderTitipan.setStTransactionNo(titipan.getStTransactionNo());

                DTOList titip = new DTOList();

                TitipanPremiView newTitipan = new TitipanPremiView();
                newTitipan = (TitipanPremiView) ObjectCloner.deepCopy(titipan);
                newTitipan.markNew();
                newTitipan.setStAccountNo(titipan.getStAccountNo());
                
                newTitipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),rl.getDbTotalAmountPerLine()));
                newTitipan.setStTransactionHeaderID(null);
                newTitipan.setDtApplyDate(rcp.getDtReceiptDate());
                titip.add(newTitipan);*/

                titipan.markUpdate();

                BigDecimal sisaTitipanUpdate = BDUtil.sub(sisaTitipan, rl.getDbTitipanPremiUsedAmount());

                titipan.setDbBalance(sisaTitipanUpdate);
                
                //titipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),rl.getDbTitipanPremiUsedAmount()));
                
                /*
                if(BDUtil.lesserThanEqual(rl.getDbTitipanPremiTotalAmount(), rl.getDbTotalAmountPerLine())){
                    titipan.setDbBalance(BDUtil.zero);
                }else{
                    if(BDUtil.lesserThanEqual(titipan.getDbBalance(), rl.getDbTotalAmountPerLine()))
                        titipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),titipan.getDbBalance()));
                    else
                        titipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),rl.getDbTotalAmountPerLine()));
                }*/
                    
                    
                /*    
                if(BDUtil.lesserThanEqual(titipan.getDbBalance(), rl.getDbTotalAmountPerLine()))
                    titipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),titipan.getDbBalance()));
                else
                    titipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),rl.getDbTotalAmountPerLine()));*/
                //titipan.setStActiveFlag("N");
                S.store(titipan);
                //S.release();
        }catch(Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } 
        
     }
     
     private void updateAndCreateTitipanKomisi(SQLUtil S, ARReceiptView rcp, ARReceiptLinesView rl, String stTitipanPremiID) throws Exception{
        //final SQLUtil S = new SQLUtil(); 
        try{
                TitipanPremiView titipan = getTitipanPremi(stTitipanPremiID);

                BigDecimal totalPemakaian = getDbPemakaianTitipanPremi(stTitipanPremiID);

                BigDecimal sisaTitipan = BDUtil.sub(titipan.getDbAmount(), totalPemakaian);

                sisaTitipan = sisaTitipan.setScale(2,BigDecimal.ROUND_HALF_UP);

                //BigDecimal sisaTitipan = titipan.getDbBalance();

                BigDecimal pemakaian = rl.getDbTitipanPremiUsedAmount();

                pemakaian = pemakaian.setScale(2,BigDecimal.ROUND_HALF_UP);

                if(BDUtil.isZeroOrNull(sisaTitipan)){
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" sudah nol, tidak bisa untuk realisasi");
                }
                
                if(BDUtil.lesserThanZero(sisaTitipan)){
                    if(BDUtil.biggerThanZero(BDUtil.sub(sisaTitipan, pemakaian)))
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" tidak mencukupi untuk realisasi");
                }
                    
                titipan.markUpdate();

                BigDecimal sisaTitipanUpdate = BDUtil.sub(sisaTitipan, rl.getDbTitipanPremiUsedAmount());

                titipan.setDbBalance(sisaTitipanUpdate);

                //titipan.setDbBalance(BDUtil.sub(titipan.getDbBalance(),rl.getDbTitipanPremiUsedAmount()));

                /*
                BigDecimal totalTitipan = BDUtil.negate(rl.getDbTitipanPremiTotalAmount());
                BigDecimal sisa = null;
                BigDecimal saldo = BDUtil.negate(titipan.getDbBalance());
                
                if(BDUtil.lesserThanEqual(totalTitipan, rl.getDbTotalAmountPerLine())){
                    sisa = BDUtil.sub(saldo, saldo);
                }else{
                    if(BDUtil.lesserThanEqual(saldo, rl.getDbTotalAmountPerLine()))
                        sisa = BDUtil.sub(saldo,saldo);
                    else
                        sisa = BDUtil.sub(saldo,rl.getDbTotalAmountPerLine());
                }
                
                titipan.setDbBalance(BDUtil.negate(sisa));
                */
                                
                S.store(titipan);
                
        }catch(Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } 
        
     }
     
     
     public void savePembayaranInwardOld(ARReceiptView rcp) throws Exception {
        rcp.validate();
      
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());
        
        try {
            if (rcp.isNew()){
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }
            
            if(rcp.isNew())
                rcp.generateReceiptNo();
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);
                }
            }
            
            S.store(rcp.getNotes());
            
            S.store(gLs);
            
            S.store(details);
            
            
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                 /*
         ARInvoiceView iv = rcp.getArapinvoice();
                  
         iv.recalculate();
                  
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }
                  
         String invoiceID = save(iv);
                  
         rcp.setStARAPInvoiceID(invoiceID);*/
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                
                final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                
                // AR DR vs bank CR
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                if(rcp.getSettlement().isAR()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                        head.setStDescription("Pembayaran "+rl.getStInvoiceNo());
                        head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        journal.add(head);
                    }
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if(moreThan1Policy){
                         if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("Pembayaran "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());  

                            journal.add(head);
                        }
                    }
                    
                    if (rl.isInvoice()) {
                        
                        final DTOList comissionList = rl.getDetails();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
                            
                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();
                            
                            if(!rcInvoiceDetail.isClaimGross() && !rcInvoiceDetail.isUangMukaKlaim()) continue;
                                
                            final JournalView lineDetail = gl.copy();
                            
                            BigDecimal amt2 = BDUtil.mul(negator,det.getDbInvoiceAmount());
                            
                            if(rcInvoiceDetail.isClaimGross()) lineDetail.setDbAutoDebit(amt);
                            
                            lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                            lineDetail.setStDescription("Pembayaran "+rcInvoiceDetail.getStDescription());
                            lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                            lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                            lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            
                            if(rcInvoiceDetail.isUangMukaKlaim()){
                                amt = BDUtil.mul(negator,det.getDbInvoiceAmount());
                                lineDetail.setDbAutoCredit(amt);
                                lineDetail.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                lineDetail.setStDescription("Pembayaran " + applicator.getStGLDesc());
                            }
                            
                            journal.add(lineDetail);
                        }
                        
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    }
 
                }
 
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }
            
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
        
        
    }
     
     public void postInvoiceInwardTreaty(InsurancePolicyInwardView inward) throws Exception{
        ARInvoiceView invoice = new ARInvoiceView();
        
        invoice.markNew();
        
        invoice.setStARCustomerID(inward.getStARCustomerID());
        invoice.setStARTransactionTypeID(inward.getStARTransactionTypeID());
        invoice.setStApprovedFlag(inward.getStApprovedFlag());
        invoice.setStAttrPolicyAddress(inward.getStAttrPolicyAddress());
        invoice.setStAttrPolicyID(inward.getStARInvoiceID());
        invoice.setStAttrPolicyName(inward.getStAttrPolicyName());
        invoice.setStAttrPolicyNo(inward.getStAttrPolicyNo());
        invoice.setStAttrPolicyTypeID(inward.getStAttrPolicyTypeID());
        invoice.setStAttrQuartal(inward.getStAttrQuartal());
        invoice.setStAttrUnderwriting(inward.getStAttrUnderwriting());
        invoice.setStClaimStatus(inward.getStClaimStatus());
        invoice.setStCommitFlag(inward.getStCommitFlag());
        invoice.setStCostCenterCode(inward.getStCostCenterCode());
        invoice.setStCurrencyCode(inward.getStCurrencyCode());
        invoice.setStDLANo(inward.getStDLANo());
        invoice.setStDescription(inward.getStDescription());
        invoice.setStEntityID(inward.getStEntityID());
        invoice.setStGLARAccountDesc(inward.getStGLARAccountDesc());
        invoice.setStGLARAccountID(inward.getStGLARAccountID());
        invoice.setStGLCode(inward.getStGLCode());
        invoice.setStInvoiceNo(inward.getStInvoiceNo());
        invoice.setStInvoiceType(inward.getStInvoiceType());
        invoice.setStNegativeFlag(inward.getStNegativeFlag());
        invoice.setStRefID0(inward.getStRefID0());
        invoice.setStRefID1(inward.getStRefID1());
        invoice.setStRefID2(inward.getStRefID2());
        invoice.setStRefID3(inward.getStRefID3());
        invoice.setStRefInvoiceID(inward.getStRefInvoiceID());
        invoice.setStReferenceA0(inward.getStReferenceA0());
        invoice.setStReferenceA1(inward.getStReferenceA1());
        invoice.setStReferenceC0(inward.getStReferenceC0());
        invoice.setStReferenceC1(inward.getStReferenceC1());
        invoice.setStReferenceD0(inward.getStReferenceD0());
        invoice.setStReferenceD1(inward.getStReferenceD1());
        invoice.setStReferenceE0(inward.getStReferenceE0());
        invoice.setStReferenceE1(inward.getStReferenceE1());
        invoice.setStReferenceX0(inward.getStReferenceX0());
        invoice.setStReferenceX1(inward.getStReferenceX1());
        invoice.setStReferenceY0(inward.getStReferenceY0());
        invoice.setStReferenceY1(inward.getStReferenceY1());
        invoice.setStReferenceZ0(inward.getStReferenceZ0());
        invoice.setStReferenceZ1(inward.getStReferenceZ1());
        invoice.setDbAmount(inward.getDbAmount());
        invoice.setDbAmountSettled(inward.getDbAmountSettled());
        invoice.setDbAttrPolicyTSI(inward.getDbAttrPolicyTSI());
        invoice.setDbAttrPolicyTSITotal(inward.getDbAttrPolicyTSITotal());
        invoice.setDbCurrencyRate(inward.getDbCurrencyRate());
        invoice.setDbEnteredAmount(inward.getDbEnteredAmount());
        invoice.setDtAttrPolicyPeriodEnd(inward.getDtAttrPolicyPeriodEnd());
        invoice.setDtAttrPolicyPeriodStart(inward.getDtAttrPolicyPeriodStart());
        invoice.setDtDueDate(inward.getDtDueDate());
        invoice.setDtInvoiceDate(inward.getDtInvoiceDate());
        invoice.setDtMutationDate(inward.getDtMutationDate());
        invoice.setDtTransDate(inward.getDtTransDate());
        invoice.setStReferenceNo(inward.getStTransactionNoReference());
        
        final DTOList ivdetails = new DTOList();
            
        invoice.setDetails(ivdetails);
            
        final DTOList details = inward.getDetails();
        for (int i = 0; i < details.size(); i++) {
            InsurancePolicyInwardDetailView det = (InsurancePolicyInwardDetailView) details.get(i);
            
            
            if(det.getDetails().size()>0){
                final DTOList subDetails = det.getDetails();
                for (int j = 0; j < subDetails.size(); j++) {
                    InsurancePolicyInwardDetailView detSub = (InsurancePolicyInwardDetailView) subDetails.get(j);
                    
                    if(BDUtil.isZeroOrNull(detSub.getDbAmount())) continue;
                    
                    final ARInvoiceDetailView detail = new ARInvoiceDetailView();
            
                    detail.setStARTrxLineID(detSub.getStARTrxLineID());
                    detail.setStAccountDesc(detSub.getStAccountDesc());
                    detail.setStAttrPolicyTypeID(detSub.getStAttrPolicyTypeID());
                    detail.setStAttrUnderwriting(detSub.getStAttrUnderwriting());
                    detail.setStComissionFlag(detSub.getStComissionFlag());
                    detail.setStDescription(detSub.getStDescription());
                    detail.setStEntityID(detSub.getStEntityID());
                    detail.setStGLAccountID(detSub.getStGLAccountID());
                    detail.setStNegativeFlag(detSub.getStNegativeFlag());
                    detail.setStParentID(detSub.getStParentID());
                    detail.setStRefID0(detSub.getStRefID0());
                    detail.setStRefID1(detSub.getStRefID1());
                    detail.setStRefID2(detSub.getStRefID2());
                    detail.setStRefInvoiceDetailID(detSub.getStRefInvoiceDetailID());
                    detail.setStRootID(detSub.getStRootID());
                    detail.setStTaxFlag(detSub.getStTaxFlag());
                    detail.setDbAmount(detSub.getDbAmount());
                    detail.setDbAmountSettled(detSub.getDbAmountSettled());
                    detail.setDbEnteredAmount(detSub.getDbEnteredAmount());
                    detail.setDbTaxAmount(detSub.getDbTaxAmount());
                    detail.setDbTaxRate(detSub.getDbTaxRate());

                    detail.markNew();

                    ivdetails.add(detail);
                }
                
            }
        }
        
        save(invoice);
        
    }
     
        public InsurancePolicyInwardView getARInvoiceForPrinting(String rcid) throws Exception {
        
        final InsurancePolicyInwardView inv = (InsurancePolicyInwardView)ListUtil.getDTOListFromQuery(
                "select * from ins_pol_inward where ar_invoice_id = ?",
                new Object [] {rcid},
                InsurancePolicyInwardView.class
                ).getDTO();
        
        if (inv!=null) {
            inv.markUpdate();
            inv.setStPostedFlag("Y");
            
            final SQLUtil S = new SQLUtil();
            
            try {
                S.store(inv);
            } finally {
                S.release();
            }
        }
        return inv;
    }
        
    public ARInvoiceView getARInvoiceUsingPolNo(String attrpolid) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where attr_pol_no = ? and ar_trx_type_id in (5,6,7)  and (coalesce(cancel_flag,'') <> 'Y' or coalesce(posted_flag,'Y') = 'Y') limit 1",
                new Object [] {attrpolid},
                ARInvoiceView.class
                ).getDTO();
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select a.* from ar_invoice_details a,ar_invoice b where a.ar_invoice_id = b.ar_invoice_id and a.ar_invoice_id = ? and b.ar_trx_type_id in (5,6,7)",
                    new Object [] {iv.getStARInvoiceID()},
                    ARInvoiceDetailView.class
                    )
                    
                    );
        }
        
        return iv;
    }
    
    private ARInvoiceView getARInvoiceByAttrPolIDAndTrxTypeID(String attrpolid, String trxtype) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where attr_pol_id = ? and ar_trx_type_id = ?",
                new Object [] {attrpolid,trxtype},
                ARInvoiceView.class
                ).getDTO();
        
        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select a.* from ar_invoice_details a,ar_invoice b where a.ar_invoice_id = b.ar_invoice_id and b.attr_pol_id = ? and b.ar_trx_type_id = ?",
                    new Object [] {attrpolid,trxtype},
                    ARInvoiceDetailView.class
                    )
                    
                    );
        }
        
        return iv;
    }
    
    public void savePembayaranKlaimKoas(ARReceiptView rcp) throws Exception {
        rcp.validate();
        
        final SQLUtil S = new SQLUtil();
        
        final GLUtil.Applicator gla = new GLUtil.Applicator();
        
        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());
        
        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            
            if(rcp.isNew())
                rcp.generateReceiptNo();
            
            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();
            
            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            
            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));
            
            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));
            
            final DTOList details = rcp.getDetails();
            
            final DTOList combined = new DTOList();
            
            final DTOList gLs = rcp.getGLs();
            
            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());
            
            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();
            
            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);
                
                stARInvoiceID = rcl.getStInvoiceID();
                
                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                //rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStRootID());
                
                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                
                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);
                
            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();
             
            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));
             
            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/
                
                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();
                    
                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);
                        
                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                    
                    S.store(subDetails);
                }
            }
            
            S.store(rcp.getNotes());
            
            S.store(gLs);
            
            S.store(details);
            
            
            
            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());
            
                 /*
         ARInvoiceView iv = rcp.getArapinvoice();
                  
         iv.recalculate();
                  
         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }
                  
         String invoiceID = save(iv);
                  
         rcp.setStARAPInvoiceID(invoiceID);*/
            
            rcp.setStARAPInvoiceID(stARInvoiceID);
            
            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));
            
            S.store(rcp);
            
            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/
            
            if (doPost) {
                
                
                final GLUtil.Applicator applicator = new GLUtil.Applicator();
                
                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();
                
                applicator.setCode('B', rcp.getStCostCenterCode());
                
                applicator.setCode('Y', entityGLCode);
                
                applicator.setDesc("Y",rcp.getEntity().getStShortName());
                
                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");
                
                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());
                
                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                
                
                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                
                // AR DR vs bank CR
                
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);
                
                if(rcp.getSettlement().isAR()) negator = BDUtil.one;
                
                final JournalView gl = new JournalView();
                
                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
                gl.setStSummaryFlag("Y");
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                
                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();
                
                final DTOList journal = new DTOList();
                
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                            head.setStDescription(rcp.getStInvoiceType().equalsIgnoreCase("AP")?"PEMBAYARAN "+ rl.getStInvoiceNo() :"TERIMA " + rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getInvoice().getPolicy().isStatusClaimDLA()){
                                head.setStDescription("TRM KLM "+ rl.getInvoice().getStAttrPolicyNo());
                                if(rl.getInvoice().getStRefID2()!=null){
                                    head.setStDescription(head.getStDescription()+ " "+ rl.getInvoice().getStRefID2());
                                }
                                head.setDbAutoDebit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                            }
                        } else {
                            head.setStDescription(rcp.getStInvoiceType().equalsIgnoreCase("AP")?"PEMBAYARAN "+ rcp.getDetails().size()+" INVOICES":"TERIMA " + rcp.getDetails().size()+" INVOICES");
                            head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        }

                        journal.add(head);
                    }
                
                boolean moreThan1Policy = rcp.getDetails().size()>1;
                 
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);
                    
                    if (rl.isDelete()) continue;
                    
                    final JournalView line = gl.copy();
                    
                    final JournalView headLine = gl.copy();
                    
                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    
                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            
                            if(rl.getInvoice().getPolicy().isStatusClaimDLA()){
                                head.setStDescription("TRM KLM "+ rl.getInvoice().getStAttrPolicyNo());
                                if(rl.getInvoice().getStRefID2()!=null){
                                    head.setStDescription(head.getStDescription()+ " "+ rl.getInvoice().getStRefID2());
                                }
                                head.setDbAutoDebit(
                                BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                );
                            }else{
                                head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );
                            }

                            journal.add(head);
                        }
                    }
                    
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();
                        
                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);
                            
                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();
                            
                            final JournalView lineDetail = gl.copy();
                            
                            BigDecimal amt2 = BDUtil.mul(negator,det.getDbEnteredAmount());

                            applicator.setCode('Y', det.getInvoice().getEntity().getStGLCode());

                            applicator.setDesc("Y", det.getInvoice().getEntity().getStShortName());

                            if(det.getInvoice().getEntity().getStGLCode().equalsIgnoreCase("00000"))
                                    applicator.setDesc("Y","");

                            applicator.setCode('X', det.getInvoice().getPolicyType().getStGLCode());

                            applicator.setDesc("X", det.getInvoice().getPolicyType().getStShortDescription());

                            lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                            if(rcp.getStARSettlementID().equalsIgnoreCase("14")){
                                lineDetail.setStAccountIDNotNull(applicator.getAccountID(rl.getInvoice().getARTrxType().getStGLARAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                            }

                            lineDetail.setStDescription(rcInvoiceDetail.getStDescription());
                            lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                            lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                            lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            
                            if(rl.getInvoice().getPolicy().isStatusClaimDLA()){
                                lineDetail.setStDescription("TRM KLM "+ rl.getInvoice().getStAttrPolicyNo());
                                if(rl.getInvoice().getStRefID2()!=null){
                                    lineDetail.setStDescription(lineDetail.getStDescription()+ " "+ rl.getInvoice().getStRefID2());
                                }
                                lineDetail.setDbAutoCredit(amt2);
                            }else{
                                lineDetail.setDbAutoDebit(amt2);
                            }
                            
                            journal.add(lineDetail);
                        }
  
                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {
                        
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        
                        if (neg) amt=BDUtil.negate(amt);
                        
                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        
                    }
                    
                    //buat jurnal lawan AKP
                    if(rcp.isJournalOffset()){
                        if(moreThan1Policy){
                            if (rc.isBank()) {
                                final JournalView akp = gl.copy();
                                akp.setDbAutoDebit(
                                        BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                        );

                                AccountView account = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                //122208934500 00
                                //0123456789012345
                                String searchAccount = account.getStAccountNo().substring(0,12);

                                applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount),"Invalid or empty account in payment method ");
                                akp.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                                akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                journal.add(akp);

                                final JournalView akp2 = gl.copy();
                                akp2.setDbAutoCredit(
                                        BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                        );

                                //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                //"210000000000 12"
                                //0123456789012345
                                String searchAccount2 = "210000000000";

                                applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                akp2.setStDescription(applicator.getStGLDesc());
                                akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                journal.add(akp2);
                            }
                        }
                    }
                    
                }

                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);
                    
                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }
                    
                    j.loadAccountNo();
                    j.reCalculate();
                }
                
                getRemoteGeneralLedger().saveJournalEntry(journal);
            }
            
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public void reverse(ARReceiptView rcp, String receipt_no) throws Exception {
        final SQLUtil S = new SQLUtil();

        try {

            PreparedStatement P = S.setQuery("update ar_receipt set posted_flag = 'N',status = 'NEW' where receipt_no = ?");
            
            P.setObject(1, receipt_no);
            int r = P.executeUpdate();
            S.release();
            
            PreparedStatement P2 = S.setQuery("delete from gl_je_detail where trx_no in ('C" + receipt_no.substring(1) +"', 'D"+ receipt_no.substring(1) +"','"+ receipt_no +"')");
            
            //P2.setObject(1, receipt_no);
            int r2 = P2.executeUpdate();
            S.release();

            if(rcp.getStReceiptNo2()!= null){
                PreparedStatement P21 = S.setQuery("delete from gl_je_detail where trx_no = ?");

                P21.setObject(1, rcp.getStReceiptNo2());
                int r21 = P21.executeUpdate();
                S.release();
            }

            
            PreparedStatement P3 = S.setQuery("update ar_invoice set amount_settled = null,receipt_date = null,used_flag = null "+
                                           " where ar_invoice_id in "+
                                           "  (select b.ar_invoice_id "+
                                           "  from ar_receipt a  "+
                                           "  INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                           "  where a.ar_receipt_id = ?)");
            
            P3.setObject(1, rcp.getStARReceiptID());
            int r3 = P3.executeUpdate();
            S.release();
            
            PreparedStatement P4 = S.setQuery("update ar_invoice_details set amount_settled = null "+
                                           " where ar_invoice_id in "+
                                           "  (select b.ar_invoice_id "+
                                           "  from ar_receipt a  "+
                                           "  INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                           "  where a.ar_receipt_id = ?)");
            
            P4.setObject(1, rcp.getStARReceiptID());
            int r4 = P4.executeUpdate();
            S.release();

            /*
            PreparedStatement P5 = S.setQuery("UPDATE AR_TITIPAN_PREMI X SET BALANCE = BALANCE + "+
                                             "   ( "+
                                             "    SELECT TITIPAN_PREMI_USED_AMOUNT  "+
                                             "    FROM AR_RECEIPT A "+
                                             "    INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                             "    WHERE A.ar_receipt_id = ? "+
                                             "    AND TITIPAN_PREMI_ID IS NOT NULL "+
                                             "    AND TITIPAN_PREMI_ID = X.trx_id "+
                                             "    ) "+
                                             "    WHERE TRX_ID IN "+
                                             "    (SELECT TITIPAN_PREMI_ID "+
                                             "    FROM AR_RECEIPT A "+
                                             "    INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                             "    WHERE A.ar_receipt_id = ? "+
                                             "    AND TITIPAN_PREMI_ID IS NOT NULL);");

            P5.setObject(1, rcp.getStARReceiptID());
            P5.setObject(2, rcp.getStARReceiptID());
            int r5 = P5.executeUpdate();
            S.release();
            */

            //BALIKIN NILAI TITIPAN
            final SQLAssembler sqa = new SQLAssembler();

            sqa.addSelect("titipan_premi_id::varchar,titipan_premi_amount,titipan_premi_used_amount ");
            sqa.addQuery("from ar_receipt_lines "+
                          " where receipt_id = "+ rcp.getStARReceiptID() +" and line_type = 'TITIP' and titipan_premi_id is not null ");
            
            final DTOList l = ListUtil.getDTOListFromQuery(
                sqa.getSQL(),
                HashDTO.class
                );

            SQLUtil SUpdate = new SQLUtil();

            for (int i = 0; i < l.size(); i++) {
                 HashDTO h = (HashDTO) l.get(i);

                 if(h.getFieldValueByFieldNameBD("titipan_premi_used_amount")==null) continue;

                 String sqlUpdate = "update ar_titipan_premi set balance = balance + (" + h.getFieldValueByFieldNameBD("titipan_premi_used_amount").doubleValue()+
                                    ") where trx_id = "+ h.getFieldValueByFieldNameST("titipan_premi_id") +";";

                 
                 PreparedStatement PS = SUpdate.setQuery(sqlUpdate);

                 int j = PS.executeUpdate();

                 if (j == 0) {
                    throw new Exception("gagal membalikkan nilai titipan premi");
                 } 
            }

            SUpdate.releaseResource();
            SUpdate.release();
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }
        
        
    }

    public void reversePembayaran(ARReceiptView rcp) throws Exception {

        final SQLUtil S = new SQLUtil();
        try {
            logger.logDebug("+++++++++++++ MASUK CEK PEMBAYARAN HUTANG ++++++++++++++++");

            //CEK PEMBAYARAN HUTANG KOMISI
            //looping rincian pembayaran
            final DTOList detailsInvoice = rcp.getDetails();

            boolean sudahBayarHutang = false;
            String keterangan = "";

            for (int i = 0; i < detailsInvoice.size(); i++) {
                ARReceiptLinesView rclInvoice = (ARReceiptLinesView) detailsInvoice.get(i);

                //rincian
                final DTOList details = rclInvoice.getDetails();

                for (int j = 0; j < details.size(); j++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) details.get(j);

                    if(rcl.getStInvoiceDetailID()==null) continue;

                    ARInvoiceView invoice = rcl.getInvoice();

                    if(invoice!=null){
                        logger.logDebug("################# CEK HUTANG KOMISI NIH...");

                        //dapetin pol id & ar_invoice_detail nya
                        String policyID = rcl.getStPolicyID();
                        String arInvoiceDetailID = rcl.getStInvoiceDetailID();

                        //cek hutang komisi udah dibayar belum by pol id & invoice detail id
                        String cekKomisi = "SELECT * "+
                                     " FROM AR_INVOICE  "+
                                     " WHERE amount_settled is not null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                     " and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?";

                        PreparedStatement PCekKomisi = S.setQuery(cekKomisi);

                        PCekKomisi.setObject(1, policyID);
                        PCekKomisi.setObject(2, arInvoiceDetailID);

                        ResultSet RSCekKomisi = PCekKomisi.executeQuery();

                        if (RSCekKomisi.next()){
                            logger.logDebug("################# DAPET HASILNYA, HUTANG UDAH DIBAYAR ...");
                            sudahBayarHutang = true;
                            keterangan = keterangan + "<br>Hutang komisi polis "+invoice.getStAttrPolicyNo()+" "+ invoice.getStInvoiceNo()+" sudah dibayar pada no bukti "+ RSCekKomisi.getString("receipt_no");
                        }

                        S.release();

                    }
                }
            }

            /*
            String cek = "select A.receipt_no "
                    + "  from ar_receipt a  "
                    + "   INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                    + "   where B.AR_INVOICE_ID IN "
                    + "   ( "
                    + "   SELECT ar_invoice_id "
                    + "   FROM AR_INVOICE "
                    + "   WHERE amount_settled is not null and ATTR_POL_ID IN "
                    + "   (select B.POL_ID "
                    + "   from ar_receipt a  "
                    + "   INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                    + "   where a.ar_receipt_id = ? "
                    + "   ) "
                    + "   AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' ";

            if (rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33") || rcp.getStARSettlementID().equalsIgnoreCase("39")) {
                cek = cek + " and refid2 not like 'TAX%'";
            }

            cek = cek + " )";

            PreparedStatement P6 = S.setQuery(cek);

            P6.setObject(1, rcp.getStARReceiptID());
            ResultSet RS = P6.executeQuery();

            boolean sudahBayarHutang = false;
            String receipt_no = null;
            if (RS.next()) {
                sudahBayarHutang = true;
                receipt_no = RS.getString("receipt_no");
            }
            */

            //logger.logDebug("+++++++++++++ SUDAH BAYAR HUTANG : "+ sudahBayarHutang);

            //CEK APAKAH POLIS SUDAH DIAJUKAN PROPOSAL KOMISI
            /*INVOICEID*/
            String cekCommInv = "select b.invoice_no as pol_no,b.no_surat_hutang "
                    + "from ( select b.pol_id,b.ar_invoice_no,b.ar_invoice_id "
                    + "from ar_receipt a "
                    + "INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                    + "where a.ar_receipt_id = ? "
                    + "group by b.pol_id,b.ar_invoice_no,b.ar_invoice_id ) a "
                    + "inner join ( select a.ins_pol_id,a.no_surat_hutang,a.invoice_no,a.ar_invoice_ref_id "
                    + "from ins_proposal_komisi a "
                    + "where a.cc_code = ? "
                    + ") b on b.ar_invoice_ref_id = a.ar_invoice_id ";

            PreparedStatement P9 = S.setQuery(cekCommInv);

            P9.setObject(1, rcp.getStARReceiptID());
            P9.setObject(2, rcp.getStCostCenterCode());
            ResultSet RS9 = P9.executeQuery();

            boolean sudahProposalKomisi = false;
            String polno = null;
            String shkno = null;
            if (RS9.next()) {
                sudahProposalKomisi = true;
                polno = RS9.getString("pol_no");
                shkno = RS9.getString("no_surat_hutang");
            }

            logger.logDebug("+++++++++++++ SUDAH PROPOSAL KOMISI : " + sudahProposalKomisi);

            S.release();

            //JIKA SUDAH PROPOSAL, GA BISA REVERSE PEMBAYARAN PREMI
            if (sudahProposalKomisi) {
                if (rcp.getStARSettlementID().equalsIgnoreCase("1")
                        || rcp.getStARSettlementID().equalsIgnoreCase("25")) {
                    //reverse(rcp,receipt_no);
                    throw new RuntimeException("Komisi polis " + polno + " sudah diajukan Proposal Komisi, reverse SHK : " + shkno + "\n"
                            + " dan hapus polis yang bersangkutan pada Proposal Komisi.");
                }
            }

//            /*POLIS*/
//            String cekCommPol = "select b.pol_no,b.no_surat_hutang "
//                    + "from ( select B.POL_ID,b.ar_invoice_no "
//                    + "from ar_receipt a "
//                    + "INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
//                    + "where a.ar_receipt_id = ? "
//                    + "group by b.pol_id,b.ar_invoice_no ) a "
//                    + "inner join ( select a.ins_pol_id,a.no_surat_hutang,a.pol_no "
//                    + "from ins_proposal_komisi a "
//                    + "where a.cc_code = ? "
//                    + ") b on b.ins_pol_id = a.pol_id ";
//
//            PreparedStatement P4 = S.setQuery(cekCommPol);
//
//            P4.setObject(1, rcp.getStARReceiptID());
//            P4.setObject(2, rcp.getStCostCenterCode());
//            ResultSet RS4 = P4.executeQuery();
//
////            boolean sudahProposalKomisi = false;
////            String polno = null;
////            String shkno = null;
//            if (RS4.next()) {
//                sudahProposalKomisi = true;
//                polno = RS4.getString("pol_no");
//                shkno = RS4.getString("no_surat_hutang");
//            }
//
//            logger.logDebug("+++++++++++++ SUDAH PROPOSAL KOMISI : " + sudahProposalKomisi);
//
//            S.release();
//
//            //JIKA SUDAH PROPOSAL, GA BISA REVERSE PEMBAYARAN PREMI
//            if (sudahProposalKomisi) {
//                if (rcp.getStARSettlementID().equalsIgnoreCase("1")
//                        || rcp.getStARSettlementID().equalsIgnoreCase("25")) {
//                    //reverse(rcp,receipt_no);
//                    throw new RuntimeException("Komisi polis " + polno + " sudah diajukan Proposal Komisi, reverse SHK : " + shkno + "\n"
//                            + " dan hapus polis yang bersangkutan pada Proposal Komisi.");
//                }
//            }

            //JIKA PEMBAYARAN KOAS JGN CEK HUTANG KOMISI/PAJAK
            if (rcp.getStARSettlementID().equalsIgnoreCase("13") || rcp.getStARSettlementID().equalsIgnoreCase("8")) {
                sudahBayarHutang = false;
            }

            //JIKA PEMBAYARAN KOMISI JGN CEK HUTANG PAJAK
            if (rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33") || rcp.getStARSettlementID().equalsIgnoreCase("39")
                    || rcp.getStARSettlementID().equalsIgnoreCase("45")) {
                sudahBayarHutang = false;
            }

            if (sudahBayarHutang) {
                //reverse(rcp,receipt_no);
                //throw new RuntimeException("Hutang komisi/pajak sudah dibayar, hapus/reverse dulu pembayaran komisi/pajak nya pada no bukti : " + receipt_no);
                throw new RuntimeException(keterangan);
            }

            
            reverse(rcp, rcp.getStReceiptNo());

            if (!rcp.getStARSettlementID().equalsIgnoreCase("13") && !rcp.getStARSettlementID().equalsIgnoreCase("8")
                    && !rcp.getStARSettlementID().equalsIgnoreCase("2") && !rcp.getStARSettlementID().equalsIgnoreCase("33")
                    && !rcp.getStARSettlementID().equalsIgnoreCase("39") && !rcp.getStARSettlementID().equalsIgnoreCase("45")) {

                //looping hapus invoice details pembayaran
                for (int i = 0; i < detailsInvoice.size(); i++) {
                    ARReceiptLinesView rclInvoice = (ARReceiptLinesView) detailsInvoice.get(i);

                    //rincian
                    final DTOList details = rclInvoice.getDetails();

                    for (int j = 0; j < details.size(); j++) {
                        ARReceiptLinesView rcl = (ARReceiptLinesView) details.get(j);

                        if(rcl.getStInvoiceDetailID()==null) continue;

                        ARInvoiceView invoice = rcl.getInvoice();

                        if(invoice!=null){
                            logger.logDebug("################# HAPUS HUTANG KOMISI NIH...");

                            //dapetin pol id & ar_invoice_detail nya
                            String policyID = rcl.getStPolicyID();
                            String arInvoiceDetailID = rcl.getStInvoiceDetailID();

                            //delete invoice detail hutang komisi yg belum dibayar
                            String deleteHutangDetail = "delete from ar_invoice_details "+
                                                        " where ar_invoice_id in( "+
                                                        "     select ar_invoice_id FROM AR_INVOICE "+
                                                        "     WHERE amount_settled is null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                                        "     and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?)";

                            PreparedStatement PDeleteDetail = S.setQuery(deleteHutangDetail);

                            PDeleteDetail.setObject(1, policyID);
                            PDeleteDetail.setObject(2, arInvoiceDetailID);

                            int rDetail = PDeleteDetail.executeUpdate();
                            S.release();

                            //hapus ar invoice hutang komisi yg belum dibayar
                            String deleteHutangInvoice = "delete from ar_invoice "+
                                                        " where ar_invoice_id in( "+
                                                        "   select ar_invoice_id FROM AR_INVOICE "+
                                                        "   WHERE amount_settled is null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                                        "   and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?)";

                            PreparedStatement PDeleteInvoice = S.setQuery(deleteHutangInvoice);

                            PDeleteInvoice.setObject(1, policyID);
                            PDeleteInvoice.setObject(2, arInvoiceDetailID);

                            int rInvoice = PDeleteInvoice.executeUpdate();
                            S.release();

                        }

                        //HAPUS BENTUKAN OTOMATIS TITIPAN PREMI SISA KREDIT SERBAGUNA
                        if (rcp.getStARSettlementID().equalsIgnoreCase("1") || rcp.getStARSettlementID().equalsIgnoreCase("25") ||
                            rcp.getStARSettlementID().equalsIgnoreCase("38") || rcp.getStARSettlementID().equalsIgnoreCase("44")    ) {

                            if (invoice != null) {

                                InsurancePolicyView pol = invoice.getPolicy();

                                if (pol.isStatusPolicy()) {
                                    if (pol.getStPolicyTypeID().equalsIgnoreCase("87") || pol.getStPolicyTypeID().equalsIgnoreCase("88")) {
                                        
                                        //hapus titipan serbaguna
                                        final DTOList titipan = ListUtil.getDTOListFromQuery(
                                                "select * from ar_titipan_premi where pol_id = ?",
                                                new Object[]{pol.getStPolicyID()},
                                                TitipanPremiView.class);

                                        if (titipan != null) {
                                            if (titipan.size() > 0) {

                                                //hapus jurnal titipan
                                                TitipanPremiView titip = (TitipanPremiView) titipan.get(0);

                                                final DTOList jurnal = ListUtil.getDTOListFromQuery(
                                                        "select * from gl_je_detail where trx_no = ?",
                                                        new Object[]{titip.getStTransactionNo()},
                                                        JournalView.class);

                                                jurnal.deleteAll();
                                                S.storeDeleteNormal(jurnal);

                                                logger.logDebug("####### HAPUS JURNAL TITIPAN ");

                                                S.release();

                                                //hapus titipan
                                                titipan.deleteAll();
                                                S.storeDeleteNormal(titipan);

                                                logger.logDebug("####### HAPUS TITIPAN ");

                                                S.release();


                                            }
                                        }
                                    }

                                }
                            }
                        }

                    }
                }

                PreparedStatement P2 = S.setQuery("update ins_policy set payment_date = null, payment_note = null, receipt_no = null "
                        + " WHERE pol_id IN "
                        + " (select B.POL_ID "
                        + " from ar_receipt a  "
                        + " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                        + " where a.ar_receipt_id = ? group by b.pol_id ) ");
                P2.setObject(1, rcp.getStARReceiptID());
                int r2 = P2.executeUpdate();
                S.release();

                /*
                String query1 = "delete from ar_invoice_details "
                        + " where ar_invoice_id in "
                        + " ( "
                        + " SELECT ar_invoice_id "
                        + " FROM AR_INVOICE "
                        + " WHERE amount_settled is null and ATTR_POL_ID IN "
                        + " (select B.POL_ID "
                        + " from ar_receipt a  "
                        + " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                        + " where a.ar_receipt_id = ? "
                        + " ) "
                        + " AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%'";

                PreparedStatement P7 = S.setQuery(query1 + " );");

                P7.setObject(1, rcp.getStARReceiptID());
                int r7 = P7.executeUpdate();
                S.release();

                String query2 = "delete from ar_invoice "
                        + " where ar_invoice_id in "
                        + " ( "
                        + " SELECT ar_invoice_id "
                        + " FROM AR_INVOICE "
                        + " WHERE amount_settled is null and ATTR_POL_ID IN "
                        + " (select B.POL_ID "
                        + " from ar_receipt a  "
                        + " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                        + " where a.ar_receipt_id = ? "
                        + " ) "
                        + " AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%'";

                PreparedStatement P8 = S.setQuery(query2 + " );");

                P8.setObject(1, rcp.getStARReceiptID());
                int r8 = P8.executeUpdate();
                S.release();

                PreparedStatement P2 = S.setQuery("update ins_policy set payment_date = null, payment_note = null, receipt_no = null "
                        + " WHERE pol_id IN "
                        + " (select B.POL_ID "
                        + " from ar_receipt a  "
                        + " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                        + " where a.ar_receipt_id = ? group by b.pol_id ) ");
                P2.setObject(1, rcp.getStARReceiptID());
                int r2 = P2.executeUpdate();
                S.release();
                */

            }
            

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }

        //CEK JIKA ADA HUTANG DAN SUDAH DI BAYARKAN

    }
    
    public void reversePembayaranAsli(ARReceiptView rcp)throws Exception{

        final SQLUtil S = new SQLUtil();
        try {
            logger.logDebug("+++++++++++++ MASUK CEK PEMBAYARAN HUTANG ++++++++++++++++");

            String cek = "select A.receipt_no "+
                          "  from ar_receipt a  "+
                          "   INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                          "   where B.AR_INVOICE_ID IN "+
                          "   ( "+
                          "   SELECT ar_invoice_id "+
                          "   FROM AR_INVOICE "+
                          "   WHERE amount_settled is not null and ATTR_POL_ID IN "+
                          "   (select B.POL_ID "+
                          "   from ar_receipt a  "+
                          "   INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                          "   where a.ar_receipt_id = ? "+
                          "   ) "+
                          "   AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' ";

            if(rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33")|| rcp.getStARSettlementID().equalsIgnoreCase("39"))
                cek = cek + " and refid2 not like 'TAX%'";

            cek = cek + " )";

            PreparedStatement P6 = S.setQuery(cek);

            P6.setObject(1, rcp.getStARReceiptID());
            ResultSet RS = P6.executeQuery();

            boolean sudahBayarHutang = false;
            String receipt_no = null;
            if(RS.next()){
                sudahBayarHutang = true;
                receipt_no = RS.getString("receipt_no");
            }

            //logger.logDebug("+++++++++++++ SUDAH BAYAR HUTANG : "+ sudahBayarHutang);

            //CEK APAKAH POLIS SUDAH DIAJUKAN PROPOSAL KOMISI
            String cekComm = "select b.pol_no,b.no_surat_hutang "
                    + "from ( select B.POL_ID,b.ar_invoice_no "
                    + "from ar_receipt a "
                    + "INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                    + "where a.ar_receipt_id = ? "
                    + "group by b.pol_id,b.ar_invoice_no ) a "
                    + "inner join ( select a.ins_pol_id,a.no_surat_hutang,a.pol_no "
                    + "from ins_proposal_komisi a "
                    + "where a.cc_code = ? "
                    + ") b on b.ins_pol_id = a.pol_id ";

            PreparedStatement P9 = S.setQuery(cekComm);

            P9.setObject(1, rcp.getStARReceiptID());
            P9.setObject(2, rcp.getStCostCenterCode());
            ResultSet RS2 = P9.executeQuery();

            boolean sudahProposalKomisi = false;
            String polno = null;
            String shkno = null;
            if (RS2.next()) {
                sudahProposalKomisi = true;
                polno = RS2.getString("pol_no");
                shkno = RS2.getString("no_surat_hutang");
            }

            logger.logDebug("+++++++++++++ SUDAH PROPOSAL KOMISI : " + sudahProposalKomisi);

            S.release();

//            if (!rcp.getStARSettlementID().equalsIgnoreCase("1")
//                    || !rcp.getStARSettlementID().equalsIgnoreCase("25")
//                    || !rcp.getStARSettlementID().equalsIgnoreCase("38")
//                    || !rcp.getStARSettlementID().equalsIgnoreCase("41")) {
//                sudahProposalKomisi = false;
//            }

            //JIKA SUDAH PROPOSAL, GA BISA REVERSE PEMBAYARAN PREMI
            if (sudahProposalKomisi ) {
                if (rcp.getStARSettlementID().equalsIgnoreCase("1")
                    || rcp.getStARSettlementID().equalsIgnoreCase("25")){
                    //reverse(rcp,receipt_no);
                    throw new RuntimeException("Komisi polis " + polno + " sudah diajukan Proposal Komisi, reverse SHK : " + shkno+"\n"
                            +" dan hapus polis yang bersangkutan pada Proposal Komisi.");
                }
                
            }

            S.release();

            //JIKA PEMBAYARAN KOAS JGN CEK HUTANG KOMISI/PAJAK
            if(rcp.getStARSettlementID().equalsIgnoreCase("13") || rcp.getStARSettlementID().equalsIgnoreCase("8"))
                sudahBayarHutang = false;

            //JIKA PEMBAYARAN KOMISI JGN CEK HUTANG PAJAK
             if(rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33")|| rcp.getStARSettlementID().equalsIgnoreCase("39")
                || rcp.getStARSettlementID().equalsIgnoreCase("45"))
                sudahBayarHutang = false;

            if(sudahBayarHutang){
                //reverse(rcp,receipt_no);
                throw new RuntimeException("Hutang komisi/pajak sudah dibayar, hapus/reverse dulu pembayaran komisi/pajak nya pada no bukti : " + receipt_no);
            }

            reverse(rcp, rcp.getStReceiptNo());

            if(!rcp.getStARSettlementID().equalsIgnoreCase("13") && !rcp.getStARSettlementID().equalsIgnoreCase("8")
               && !rcp.getStARSettlementID().equalsIgnoreCase("2") && !rcp.getStARSettlementID().equalsIgnoreCase("33")
               && !rcp.getStARSettlementID().equalsIgnoreCase("39") && !rcp.getStARSettlementID().equalsIgnoreCase("45")){
                String query1 = "delete from ar_invoice_details "+
                                                " where ar_invoice_id in "+
                                                " ( "+
                                                " SELECT ar_invoice_id "+
                                                " FROM AR_INVOICE "+
                                                " WHERE amount_settled is null and ATTR_POL_ID IN "+
                                                " (select B.POL_ID "+
                                                " from ar_receipt a  "+
                                                " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                                " where a.ar_receipt_id = ? "+
                                                " ) "+
                                                " AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%'";

//                if(rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33"))
//                    query1 = query1 + " and refid2 not like 'TAX%'";

                PreparedStatement P7 = S.setQuery( query1 + " );");

                    P7.setObject(1, rcp.getStARReceiptID());
                    int r7 = P7.executeUpdate();
                    S.release();

                    String query2 = "delete from ar_invoice "+
                                                    " where ar_invoice_id in "+
                                                    " ( "+
                                                    " SELECT ar_invoice_id "+
                                                    " FROM AR_INVOICE "+
                                                    " WHERE amount_settled is null and ATTR_POL_ID IN "+
                                                    " (select B.POL_ID "+
                                                    " from ar_receipt a  "+
                                                    " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                                    " where a.ar_receipt_id = ? "+
                                                    " ) "+
                                                    " AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%'";

//                    if(rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33"))
//                        query2 = query2 + " and refid2 like 'TAX%'";

                    PreparedStatement P8 = S.setQuery(query2+ " );");

                    P8.setObject(1, rcp.getStARReceiptID());
                    int r8 = P8.executeUpdate();
                    S.release();

                    PreparedStatement P2 = S.setQuery("update ins_policy set payment_date = null, payment_note = null, receipt_no = null "
                        + " WHERE pol_id IN "
                        + " (select B.POL_ID "
                        + " from ar_receipt a  "
                        + " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                        + " where a.ar_receipt_id = ? group by b.pol_id ) ");
                    P2.setObject(1, rcp.getStARReceiptID());
                    int r2 = P2.executeUpdate();
                    S.release();
            }
            
        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }

        //CEK JIKA ADA HUTANG DAN SUDAH DI BAYARKAN
         
    }

    public void updateTagihanKlaimPanjar(ARInvoiceView invoice, ARReceiptView rcp)throws Exception{

        final SQLUtil S = new SQLUtil();
        try {

            PreparedStatement P6 = S.setQuery("update ar_invoice set refid0 = 'PANJAR', receipt_no = ? where ar_invoice_id = ?");

            P6.setObject(1, rcp.getStReceiptNo());
            P6.setObject(2, invoice.getStARInvoiceID());

            int hasil = P6.executeUpdate();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }

    }

    public ARInvoiceView getARInvoiceKomisiUsingPolNo(String attrpolid) throws Exception {
        final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                "select * from ar_invoice where attr_pol_no = ? and ar_trx_type_id = 11 and substr(refid2,0,4) = 'POL' limit 1",
                new Object [] {attrpolid},
                ARInvoiceView.class
                ).getDTO();

        if(iv!=null) {
            iv.setDetails(

                    ListUtil.getDTOListFromQuery(
                    "select a.* from ar_invoice_details a,ar_invoice b where a.ar_invoice_id = b.ar_invoice_id and a.ar_invoice_id = ? and b.ar_trx_type_id = 11 and substr(b.refid2,0,4) = 'POL'",
                    new Object [] {iv.getStARInvoiceID()},
                    ARInvoiceDetailView.class
                    )

                    );
        }

        return iv;
    }

    public DTOList getARInvoiceByAttrPolIdCoasOnly(String invoice) throws Exception {
      /*final ARInvoiceView iv = (ARInvoiceView) ListUtil.getDTOListFromQuery(
                    "select * from ar_invoice where attr_pol_id = ?",
                    new Object [] {invoice},
                     ARInvoiceView.class
            ).getDTO();*/

      /*
      if(iv!=null) {
         iv.setDetails(
                 ListUtil.getDTOListFromQuery(
                         "select * from ar_invoice_details where ar_invoice_id = ?",
                         new Object [] {invoice},
                         ARInvoiceDetailView.class
                 )

         );
      }*/

        //return iv;

        final SQLAssembler sqa = new SQLAssembler();

        sqa.addSelect("*");
        sqa.addQuery(" from ar_invoice");
        sqa.addClause(" attr_pol_id = ?");
        sqa.addPar(invoice);
        sqa.addClause(" ar_trx_type_id = 10 and ent_id in (select refid1 from ent_master_coas)");

        final DTOList l = sqa.getList(ARInvoiceView.class);

        return l;
    }

    public void deleteAllDetail(ARReceiptView rcp)throws Exception{

        final SQLUtil S = new SQLUtil();
        try {

            PreparedStatement P6 = S.setQuery("delete from ar_receipt_lines where receipt_id = ?");

            P6.setObject(1, rcp.getStARReceiptID());

            int hasil = P6.executeUpdate();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }

    }


    public void savePembayaranKlaimCoas(ARReceiptView rcp) throws Exception {
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        //if (rcp.getStEntityID()!=null)
            //gla.setDesc("Y",rcp.getEntity().getStEntityName());

        if (rcp.getStEntityID()!=null){

            if(rcp.getEntity2(rcp.getStEntityID()).getStShortName()!=null)
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStShortName());
            else
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStEntityName());
        }

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));

            if(rcp.isNew())
                rcp.generateReceiptNo();

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();

            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));

            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);
                //}
            }

            S.store(rcp.getNotes());

            S.store(gLs);

            S.store(details);



            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

                 /*
         ARInvoiceView iv = rcp.getArapinvoice();

         iv.recalculate();

         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }

         String invoiceID = save(iv);

         rcp.setStARAPInvoiceID(invoiceID);*/

            rcp.setStARAPInvoiceID(stARInvoiceID);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));

            S.store(rcp);

            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {


                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                applicator.setDesc("Y",rcp.getEntity().getStShortName());

                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");

                applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());

                applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());


                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));
                 final String rekBankBayarKoas = applicator.getAccountID("122100000100");

                // AR DR vs bank CR

                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                //if(rcp.getSettlement().isAR()) negator = BDUtil.one;

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();

                //D130200008934500006
                String noBuktiCabang = "C" + rcp.getStReceiptNo().substring(1);
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/
                gl.setStSummaryFlag("Y");

                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();
                /*
                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                            head.setDbAutoCredit(
                                BDUtil.mul(negator,rl.getdb)
                                );
                        } else {
                            head.setStDescription("PEMBAYARAN "+rcp.getDetails().size()+" INVOICES");
                        }

                        journal.add(head);
                    }
                */

                boolean moreThan1Policy = rcp.getDetails().size()>=1;
                BigDecimal premiBrutoKoas = null;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if (rl.isDelete()) continue;

                    final JournalView line = gl.copy();

                    final JournalView headLine = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());

                    AccountView account = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                    //122208934500 00
                    //0123456789012345
                    String searchAccount = account.getStAccountNo().substring(0,12);

                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                    if(rcp.isJournalOffset()){
                        searchAccount = "122100000100";
                    }

                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();

                            head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );

                            premiBrutoKoas = rl.getDbTotalAmountPerLine();

                            if(rcp.isJournalOffset()){
                                searchAccount = "122100000100";
                                head.setStTransactionNo(noBuktiCabang);
                            }

                            head.setStAccountIDNotNull(applicator.getAccountID(searchAccount),"Invalid or empty account in payment method ");

                            head.setStDescription(paymentDesc);
                            head.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());

                            if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                head.setStDescription("PENERIMAAN KLAIM KO. "+rl.getInvoice().getPolicy().getStDLANo());

                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rcp.isJournalOffset()){
                                head.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());
                            }

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            //if(rcp.isJournalOffset()){
                                    /*
                                    if (rl.isInvoice()) {

                                        final DTOList comissionList = rl.getDetails();

                                        for (int j = 0; j < comissionList.size(); j++) {
                                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                                            if(!rcInvoiceDetail.isPremiGrossCoas() && !rcInvoiceDetail.isClaimCoins()) continue;

                                            if(rcInvoiceDetail.isPremiGrossCoas() || rcInvoiceDetail.isClaimCoins()){
                                                head.setDbAutoCredit(
                                                    BDUtil.mul(negator,det.getDbEnteredAmount())
                                                    );
                                                premiBrutoKoas = det.getDbEnteredAmount();
                                            }
                                        }
                                    }*/
                            //}

                            journal.add(head);
                        }

                    }

                    if (rl.isInvoice()) {

                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            if(!rcInvoiceDetail.isPremiGrossCoas() && !rcInvoiceDetail.isClaimCoins()) continue;

                            final JournalView lineDetail = gl.copy();

                            //BigDecimal amt2 = BDUtil.mul(negator,det.getDbEnteredAmount());
                            BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                            lineDetail.setStAccountIDNotNull(rcInvoiceDetail.getStGLAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                            lineDetail.setStDescription(rcInvoiceDetail.getStDescription());
                            lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                            lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                            lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rcInvoiceDetail.isPremiGrossCoas() || rcInvoiceDetail.isClaimCoins()){
                                lineDetail.setDbAutoDebit(amt2);

                                if(rcp.isJournalOffset()){
                                    lineDetail.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());
                                }

                                if(rcp.getStARSettlementID().equalsIgnoreCase("14")){
                                      lineDetail.setStAccountIDNotNull(applicator.getAccountID(rl.getInvoice().getARTrxType().getStGLARAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                      lineDetail.setStDescription("PENERIMAAN KLAIM KO. "+rl.getInvoice().getPolicy().getStDLANo());
                                }

                            }else{
                                lineDetail.setDbAutoCredit(amt2);
                            }

                            if(rcp.isJournalOffset()){
                                lineDetail.setStTransactionNo(noBuktiCabang);
                                lineDetail.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());
                            }

                            if(det.getDtReceiptDate()!=null){
                                lineDetail.setDtApplyDate(det.getDtReceiptDate());
                            }

                            journal.add(lineDetail);
                        }


                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                    }


                    //buat jurnal lawan AKP PER CABANG
                    if(rcp.isJournalOffset()){
                            if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoDebit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    //AccountView account = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    //String searchAccount = account.getStAccountNo().substring(0,12);

                                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                    if(rcp.isJournalOffset()){
                                        searchAccount = "122100000100";
                                    }

                                    akp.setStTransactionNo(noBuktiCabang);
                                    akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount),"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    akp.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoCredit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000000";

                                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR PRM KO "+ rl.getInvoice().getStNoSuratHutang());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp2.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp2.setStTransactionNo(noBuktiCabang);
                                    akp2.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount)));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount)).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            }
                    }

                    //BUAT JURNAL AKP KANTOR PUSAT
                    if(rcp.isJournalOffset()){
                            if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoCredit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('B', "00");

                                    akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount3) ,"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN PREMI KO. "+rl.getStInvoiceNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount3)));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount3)).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoDebit(
                                            BDUtil.mul(negator,premiBrutoKoas)
                                            );

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000000";

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR PRM KO "+ rl.getInvoice().getStNoSuratHutang());
                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("14"))
                                        akp2.setStDescription("PENERIMAAN KLAIM KO. "+ rl.getInvoice().getStNoSuratHutang());

                                    akp2.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount3)));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount3)).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            }
                    }

                }


                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }


        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

    public void getARReceiptForPrintingExcelPremi(String rcid, String settlement) throws Exception {

        final DTOList l = EXCEL_PREMI(rcid, settlement);

        SessionManager.getInstance().getRequest().setAttribute("RPT", l);

        final DTOList m = EXCEL_TITIPAN(rcid);

        SessionManager.getInstance().getRequest().setAttribute("RPT2", m);

        EXPORT_PREMI(settlement);
    }

    public void getARReceiptForPrintingExcelKlaim(String rcid, String settlement) throws Exception {

        final DTOList l = EXCEL_KLAIM(rcid, settlement);

        SessionManager.getInstance().getRequest().setAttribute("RPT", l);

        EXPORT_KLAIM();
    }

    public DTOList EXCEL_PREMI(String rcid, String settlement) throws Exception {
        final SQLAssembler sqa = new SQLAssembler();

        sqa.addSelect("f.status,f.create_who,d.cc_code,f.receipt_no,f.receipt_date,d.policy_date,d.cust_name,d.ccy_rate,"
                + "d.pol_no,d.dla_no,round(d.premi_total,0) as premi_total,round(d.premi_netto,0) as premi_netto,round(d.total_due,0) as total_due,"
                + "round(coalesce(d.nd_pcost,0),0) as nd_pcost,round(coalesce(d.nd_sfee,0),0) as nd_sfee,"
                + "(round(coalesce(d.nd_disc1,0),0) + round(coalesce(d.nd_disc2,0),0)) as nd_disc1,"
                + "(round(coalesce(d.nd_comm1,0),0) + round(coalesce(d.nd_comm2,0),0) + round(coalesce(d.nd_comm3,0),0) + round(coalesce(d.nd_comm4,0),0)) as nd_comm1,"
                + "(round(coalesce(d.nd_brok1,0),0) + round(coalesce(d.nd_brok2,0),0)) as nd_brok1,"
                + "(round(coalesce(d.nd_hfee,0),0)) as nd_hfee,"
                + "(round(coalesce(d.nd_taxcomm1,0),0) + round(coalesce(d.nd_taxcomm2,0),0) + round(coalesce(d.nd_taxcomm3,0),0) + round(coalesce(d.nd_taxcomm4,0),0)) as nd_taxcomm1,"
                + "(round(coalesce(d.nd_taxbrok1,0),0) + round(coalesce(d.nd_taxbrok2,0),0)) as nd_taxbrok1,"
                + "(round(coalesce(d.nd_feebase1,0),0) + round(coalesce(d.nd_feebase2,0),0)) as nd_feebase1,"
                + "(round(coalesce(d.nd_taxhfee,0),0)) as nd_taxhfee,"
                + "(round(coalesce(d.nd_ppn,0),0)) as nd_ppn,"
                + "sum(getpremi2(e.item_class = 'PREMIG',round(a.amount,0))) as premi_co,"
                + "sum(getpremi2(e.item_class = 'PREMIG',round(a.amount_settled,0))) as premi_paid_co,"
                + "sum(getpremi2(e.category in ('BROKERAGE','HFEE','COMMISSION') and e.item_class in ('BROKCO','HFEECO','COMCO'),round(a.amount,0))) as comis_co,"
                + "sum(getpremi2(e.category in ('BROKERAGE','HFEE','COMMISSION') and e.item_class in ('BROKCO','HFEECO','COMCO'),round(a.amount_settled,0))) as ap_comis_co,"
                + "sum(getpremi2(e.item_class = 'CLAIMN',round(a.amount,0))) as claim_co,"
                + "sum(getpremi2(e.item_class = 'CLAIMN',round(a.amount_settled,0))) as claim_paid_co,"
                + "sum(getpremi2(e.category = 'PREMIG',round(a.amount_settled,0))) as premi_paid,"
                + "sum(getpremi2(e.category = 'STAMPDUTY',round(a.amount_settled,0))) as ap_sfee_p,"
                + "sum(getpremi2(e.category = 'PCOST',round(a.amount_settled,0))) as ap_pcost_p,"
                + "sum(getpremi2(e.category = 'DISC',round(a.amount_settled,0))) as ap_disc_p,"
                + "sum(getpremi2(e.category = 'BROKERAGE' and e.item_desc = 'PPN', round(a.amount_settled,0))) as ap_ppn_p,"
                + "sum(getpremi2(e.category = 'HFEE' and e.item_class is null and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_hfee_p,"
                + "sum(getpremi2(e.category = 'BROKERAGE' and e.item_class is null and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_bfee_p,"
                + "sum(getpremi2(e.category = 'COMMISSION' and e.item_class = 'FEEBASE' and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_fbase_p,"
                + "sum(getpremi2(e.category = 'COMMISSION' and e.item_class is null and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_comis_p,"
                + "sum(getpremi2(e.category like 'TAX%' and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_tax_p ");

        sqa.addQuery(
                " from ar_invoice_details a "
                + " inner join ar_receipt_lines b on b.ar_invoice_dtl_id = a.ar_invoice_dtl_id "
                + " left join ar_invoice c on c.ar_invoice_id = a.ar_invoice_id "
                + " left join ins_policy d on d.pol_id = c.attr_pol_id "
                + " left join ar_trx_line e on e.ar_trx_line_id = a.ar_trx_line_id "
                + " left join ar_receipt f on f.ar_receipt_id = b.receipt_id "
                + " left join ent_master g on g.ent_id = d.entity_id  ");

        //if (!settlement.equalsIgnoreCase("13")) {
        //    sqa.addClause("b.ar_invoice_dtl_root_id is not null");
        //}

        //sqa.addClause("f.status = 'POST'");
        sqa.addClause("f.ar_settlement_id = ?");
        sqa.addPar(settlement);

        sqa.addClause("f.ar_receipt_id = ?");
        sqa.addPar(rcid);

        final String sql = sqa.getSQL() + " group by f.status,f.create_who,f.receipt_date,f.receipt_no,d.policy_date,"
                + "d.cust_name,d.cc_code,d.ccy_rate,d.pol_no,d.dla_no,d.premi_total,d.premi_netto,d.total_due,d.nd_pcost,"
                + "d.nd_sfee,d.nd_comm1,d.nd_comm2,d.nd_comm3,d.nd_comm4,d.nd_disc1,d.nd_disc2,d.nd_brok1,d.nd_brok2"
                + ",d.nd_hfee,d.nd_taxcomm1,d.nd_taxcomm2,d.nd_taxcomm3,d.nd_taxcomm4,d.nd_taxbrok1,d.nd_taxbrok2,"
                + "d.nd_taxhfee,d.nd_feebase1,d.nd_feebase2,d.nd_ppn order by f.receipt_date,f.receipt_no,d.pol_no ";

        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class);

        SessionManager.getInstance().getRequest().setAttribute("RPT", l);

        return l;

    }

    public DTOList EXCEL_TITIPAN(String rcid) throws Exception {
        final SQLAssembler sqa = new SQLAssembler();

        sqa.addSelect(" a.receipt_no,a.receipt_date,b.trx_no,b.counter,b.hdr_accountno,"
                + "c.pol_no,a.titipan_premi_used_amount,b.create_date,b.description,b.description_master ");

        sqa.addQuery(" from ar_receipt_lines a "
                + " inner join ar_titipan_premi b on b.trx_id = a.titipan_premi_id "
                + " left join ins_policy c on c.pol_id = a.pol_id ");

        sqa.addClause("a.line_type = 'TITIP'");

        sqa.addClause("a.receipt_id = ?");
        sqa.addPar(rcid);

        final String sql = sqa.getSQL() + " order by a.ar_rcl_id ";

        final DTOList m = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class);

        SessionManager.getInstance().getRequest().setAttribute("RPT2", m);

        return m;

    }

    public void EXPORT_PREMI(String settlement) throws Exception {

        XSSFWorkbook wb = new XSSFWorkbook();

        //bikin sheet
        XSSFSheet sheet = wb.createSheet("realisasi");

        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");

        BigDecimal TotalPremiBruto = null;
        BigDecimal TotalPremiNetto = null;
        BigDecimal TotalBiaMatPol = null;
        BigDecimal TotalComm = null;
        BigDecimal TotalTax = null;
        BigDecimal TotalPremiPaid = null;
        BigDecimal TotalCommPaid = null;
        BigDecimal TotalPremiNettoCoins = null;

        for (int i = 0; i < list.size(); i++) {
            HashDTO h = (HashDTO) list.get(i);

            if (!h.getFieldValueByFieldNameST("status").equalsIgnoreCase("POST")) {
                XSSFRow row1 = sheet.createRow(0);
                row1.createCell(0).setCellValue("SPECIMEN");
            }

            //bikin header
            XSSFRow row0 = sheet.createRow(2);
            row0.createCell(0).setCellValue("tgl bayar");
            row0.createCell(1).setCellValue("no bukti");
            row0.createCell(2).setCellValue("tgl polis");
            row0.createCell(3).setCellValue("no polis");
            row0.createCell(4).setCellValue("premi");
            row0.createCell(5).setCellValue("biaya adm");
            row0.createCell(6).setCellValue("tag bruto");
            row0.createCell(7).setCellValue("feebase");
            row0.createCell(8).setCellValue("diskon");
            row0.createCell(9).setCellValue("komisi");
            row0.createCell(10).setCellValue("pajak komisi");
            row0.createCell(11).setCellValue("premi netto");
            row0.createCell(12).setCellValue("premi dibayar");
            row0.createCell(13).setCellValue("komisi dibayar");
            row0.createCell(14).setCellValue("premi koas");
            row0.createCell(15).setCellValue("klaim koas");
            row0.createCell(16).setCellValue("tertanggung");
            row0.createCell(17).setCellValue("kurs");
            if (settlement.equalsIgnoreCase("14")) {
                row0.createCell(18).setCellValue("no LKP");
            }

            TotalTax = BDUtil.add(h.getFieldValueByFieldNameBD("nd_taxcomm1"), h.getFieldValueByFieldNameBD("nd_taxbrok1"));
            TotalTax = BDUtil.add(TotalTax, h.getFieldValueByFieldNameBD("nd_taxhfee"));

            TotalComm = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_brok1"));
            TotalComm = BDUtil.add(TotalComm, h.getFieldValueByFieldNameBD("nd_hfee"));
            TotalComm = BDUtil.add(TotalComm, h.getFieldValueByFieldNameBD("nd_ppn"));
            TotalComm = BDUtil.sub(TotalComm, TotalTax);

            TotalPremiBruto = BDUtil.add(h.getFieldValueByFieldNameBD("nd_pcost"), h.getFieldValueByFieldNameBD("nd_sfee"));
            TotalPremiBruto = BDUtil.add(TotalPremiBruto, h.getFieldValueByFieldNameBD("premi_total"));

            TotalBiaMatPol = BDUtil.add(h.getFieldValueByFieldNameBD("nd_pcost"), h.getFieldValueByFieldNameBD("nd_sfee"));

            TotalPremiNetto = BDUtil.add(h.getFieldValueByFieldNameBD("premi_netto"), TotalTax);

            TotalPremiPaid = BDUtil.add(h.getFieldValueByFieldNameBD("premi_paid"), h.getFieldValueByFieldNameBD("ap_sfee_p"));
            TotalPremiPaid = BDUtil.add(TotalPremiPaid, h.getFieldValueByFieldNameBD("ap_pcost_p"));
            TotalPremiPaid = BDUtil.sub(TotalPremiPaid, h.getFieldValueByFieldNameBD("ap_disc_p"));

            TotalCommPaid = BDUtil.add(h.getFieldValueByFieldNameBD("ap_bfee_p"), h.getFieldValueByFieldNameBD("ap_hfee_p"));
            TotalCommPaid = BDUtil.add(TotalCommPaid, h.getFieldValueByFieldNameBD("ap_fbase_p"));
            TotalCommPaid = BDUtil.add(TotalCommPaid, h.getFieldValueByFieldNameBD("ap_comis_p"));
            TotalCommPaid = BDUtil.add(TotalCommPaid, h.getFieldValueByFieldNameBD("ap_ppn_p"));
            TotalCommPaid = BDUtil.sub(TotalCommPaid, h.getFieldValueByFieldNameBD("ap_tax_p"));

            TotalPremiNettoCoins = BDUtil.sub(h.getFieldValueByFieldNameBD("premi_co"), h.getFieldValueByFieldNameBD("comis_co"));

            XSSFRow row = sheet.createRow(i + 3);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("receipt_date"));
            if (h.getFieldValueByFieldNameST("receipt_no") != null) {
                row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("receipt_no"));
            }
            if (h.getFieldValueByFieldNameDT("policy_date") != null) {
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            }
            if (h.getFieldValueByFieldNameST("pol_no") != null) {
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            }
            if (h.getFieldValueByFieldNameBD("premi_total") != null) {
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            }
            if (TotalBiaMatPol != null) {
                row.createCell(5).setCellValue(TotalBiaMatPol.doubleValue());
            }
            if (TotalPremiBruto != null) {
                row.createCell(6).setCellValue(TotalPremiBruto.doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("nd_feebase1") != null) {
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("nd_feebase1").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("nd_disc1") != null) {
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_disc1").doubleValue());
            }
            if (TotalComm != null) {
                row.createCell(9).setCellValue(TotalComm.doubleValue());
            }
            if (TotalTax != null) {
                row.createCell(10).setCellValue(TotalTax.doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("premi_netto") != null) {
                row.createCell(11).setCellValue(TotalPremiNetto.doubleValue());
            }
            if (TotalPremiPaid != null) {
                row.createCell(12).setCellValue(TotalPremiPaid.doubleValue());
            }
            if (TotalCommPaid != null) {
                row.createCell(13).setCellValue(TotalCommPaid.doubleValue());
            }
            if (TotalPremiNettoCoins != null) {
                row.createCell(14).setCellValue(TotalPremiNettoCoins.doubleValue());
            }
            if (TotalPremiNettoCoins != null) {
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("claim_co").doubleValue());
            }
            if (h.getFieldValueByFieldNameST("cust_name") != null) {
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            }
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            if (settlement.equalsIgnoreCase("14")) {
                if (h.getFieldValueByFieldNameST("dla_no") != null) {
                    row.createCell(18).setCellValue(h.getFieldValueByFieldNameST("dla_no"));
                }
            }

        }

        XSSFSheet sheetTITIP = wb.createSheet("titipan");

        final DTOList list2 = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT2");

        for (int j = 0; j < list2.size(); j++) {
            HashDTO h = (HashDTO) list2.get(j);

            //bikin header
            XSSFRow row0 = sheetTITIP.createRow(2);
            row0.createCell(0).setCellValue("nobuk realisasi");
            row0.createCell(1).setCellValue("tgl realisasi");
            row0.createCell(2).setCellValue("nobuk titipan");
            row0.createCell(3).setCellValue("konter");
            row0.createCell(4).setCellValue("no rekening");
            row0.createCell(5).setCellValue("no polis");
            row0.createCell(6).setCellValue("nilai");
            row0.createCell(7).setCellValue("tgl entry");
            row0.createCell(8).setCellValue("keterangan");
            row0.createCell(9).setCellValue("nama bank");

            XSSFRow row = sheetTITIP.createRow(j + 3);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameST("receipt_no"));
            row.createCell(1).setCellValue(h.getFieldValueByFieldNameDT("receipt_date"));
            row.createCell(2).setCellValue(h.getFieldValueByFieldNameST("trx_no"));
            row.createCell(3).setCellValue(h.getFieldValueByFieldNameBD("counter").doubleValue());
            row.createCell(4).setCellValue(h.getFieldValueByFieldNameST("hdr_accountno"));
            if (h.getFieldValueByFieldNameST("pol_no") != null) {
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            }
            if (h.getFieldValueByFieldNameBD("titipan_premi_used_amount") != null) {
                row.createCell(6).setCellValue(h.getFieldValueByFieldNameBD("titipan_premi_used_amount").doubleValue());
            }
            row.createCell(7).setCellValue(h.getFieldValueByFieldNameDT("create_date"));
            row.createCell(8).setCellValue(h.getFieldValueByFieldNameST("description"));
            row.createCell(9).setCellValue(h.getFieldValueByFieldNameST("description_master"));

        }

        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition", "attachment; filename=penerimaan_premi" + "_" + System.currentTimeMillis() + ".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token");
        ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();

        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }

    public DTOList EXCEL_KLAIM(String rcid, String settlement) throws Exception {
        final SQLAssembler sqa = new SQLAssembler();

        sqa.addSelect("e.create_who,e.receipt_no,e.receipt_date,d.cc_code,d.pol_id,d.policy_date,"
                + "d.pla_date,d.pla_no,d.dla_date,d.dla_no,d.pol_no,d.ccy_rate,d.pol_type_id,f.ar_cust_id as entity_id,g.ent_name,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=57,a.amount)),0) as Klaim_Bruto,coalesce(sum(getpremi2(a.ar_trx_line_id=57,a.amount_settled)),0) as Klaim_Bruto_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=58,a.amount)),0) as Deductible,coalesce(sum(getpremi2(a.ar_trx_line_id=58,a.amount_settled)),0) as Deductible_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=59,a.amount)),0) as Subrogasi,coalesce(sum(getpremi2(a.ar_trx_line_id=59,a.amount_settled)),0) as Subrogasi_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=60,a.amount)),0) as Wreck,coalesce(sum(getpremi2(a.ar_trx_line_id=60,a.amount_settled)),0) as Wreck_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=61,a.amount)),0) as Adjuster_Fee,coalesce(sum(getpremi2(a.ar_trx_line_id=61,a.amount_settled)),0) as Adjuster_Fee_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=62,a.amount)),0) as TJH,coalesce(sum(getpremi2(a.ar_trx_line_id=62,a.amount_settled)),0) as TJH_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=63,a.amount)),0) as Biaya_Derek,coalesce(sum(getpremi2(a.ar_trx_line_id=63,a.amount_settled)),0) as Biaya_Derek_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=64,a.amount)),0) as Salvage,coalesce(sum(getpremi2(a.ar_trx_line_id=64,a.amount_settled)),0) as Salvage_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=65,a.amount)),0) as Ex_Gratia_Klaim,coalesce(sum(getpremi2(a.ar_trx_line_id=65,a.amount_settled)),0) as Ex_Gratia_Klaim_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=85,a.amount)),0) as Depresiasi,coalesce(sum(getpremi2(a.ar_trx_line_id=85,a.amount_settled)),0) as Depresiasi_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=86,a.amount)),0) as Uang_Muka_Klaim,coalesce(sum(getpremi2(a.ar_trx_line_id=86,a.amount_settled)),0) as Uang_Muka_Klaim_Paid,"
                //+ "coalesce(sum(getpremi2(a.ar_trx_line_id=90,a.amount)),0) as Interim_Payment,coalesce(sum(getpremi2(a.ar_trx_line_id=90,a.amount_settled)),0) as Interim_Payment_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=91,a.amount)),0) as Penalty,coalesce(sum(getpremi2(a.ar_trx_line_id=91,a.amount_settled)),0) as Penalty_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=95,a.amount)),0) as Adjuster_Fee,coalesce(sum(getpremi2(a.ar_trx_line_id=95,a.amount_settled)),0) as Adjuster_Fee_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=96,a.amount)),0) as ppH23,coalesce(sum(getpremi2(a.ar_trx_line_id=96,a.amount_settled)),0) as ppH23_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=103,a.amount)),0) as Ex_Gratia_Beban_UW,coalesce(sum(getpremi2(a.ar_trx_line_id=103,a.amount_settled)),0) as Ex_Gratia_Beban_UW_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=104,a.amount)),0) as Fee_Recovery,coalesce(sum(getpremi2(a.ar_trx_line_id=104,a.amount_settled)),0) as Fee_Recovery_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=105,a.amount)),0) as Jasa_Bengkel,coalesce(sum(getpremi2(a.ar_trx_line_id=105,a.amount_settled)),0) as Jasa_Bengkel_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=106,a.amount)),0) as Spareparts,coalesce(sum(getpremi2(a.ar_trx_line_id=106,a.amount_settled)),0) as Spareparts_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=110,a.amount)),0) as ppn,coalesce(sum(getpremi2(a.ar_trx_line_id=110,a.amount_settled)),0) as ppn_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=111,a.amount)),0) as biayasurvey,coalesce(sum(getpremi2(a.ar_trx_line_id=111,a.amount_settled)),0) as biayasurvey_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=112,a.amount)),0) as cashcoll,coalesce(sum(getpremi2(a.ar_trx_line_id=112,a.amount_settled)),0) as cashcoll_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=115,a.amount)),0) as material,coalesce(sum(getpremi2(a.ar_trx_line_id=115,a.amount_settled)),0) as material_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=116,a.amount)),0) as surveyfee,coalesce(sum(getpremi2(a.ar_trx_line_id=116,a.amount_settled)),0) as surveyfee_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=117,a.amount)),0) as expenses,coalesce(sum(getpremi2(a.ar_trx_line_id=117,a.amount_settled)),0) as expenses_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=118,a.amount)),0) as vatfee,coalesce(sum(getpremi2(a.ar_trx_line_id=118,a.amount_settled)),0) as vatfee_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=119,a.amount)),0) as exaccident,coalesce(sum(getpremi2(a.ar_trx_line_id=119,a.amount_settled)),0) as exaccident_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=122,a.amount)),0) as biayamaterai,coalesce(sum(getpremi2(a.ar_trx_line_id=122,a.amount_settled)),0) as biayamaterai_Paid,"
                + "coalesce(sum(getpremi2(a.ar_trx_line_id=123,a.amount)),0) as bunga,coalesce(sum(getpremi2(a.ar_trx_line_id=123,a.amount_settled)),0) as bunga_Paid ");

        sqa.addQuery(
                " from ar_invoice_details a "
                + " inner join ar_receipt_lines b on b.ar_invoice_dtl_id = a.ar_invoice_dtl_id "
                + " left join ins_policy d on d.pol_id = b.pol_id "
                + " left join ar_receipt e on e.ar_receipt_id = b.receipt_id "
                + " left join ar_invoice f on f.ar_invoice_id = b.ar_invoice_id "
                + " left join ent_master g on g.ent_id = d.entity_id ");

        sqa.addClause("e.status = 'POST'");
        sqa.addClause("e.ar_settlement_id = ?");
        sqa.addPar(settlement);

        sqa.addClause("e.ar_receipt_id = ?");
        sqa.addPar(rcid);

        final String sql = sqa.getSQL() + " group by e.create_who,e.receipt_no,e.receipt_date,d.cc_code,d.pol_id,"
                + "d.policy_date,d.dla_date,d.pol_no,d.ccy_rate,f.ar_cust_id, d.dla_no,d.pol_type_id,g.ent_name,d.pla_date,d.pla_no "
                + "order by e.receipt_date,d.pol_no ";

        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class);

        SessionManager.getInstance().getRequest().setAttribute("RPT", l);

        return l;

    }

    public void EXPORT_KLAIM() throws Exception {

        XSSFWorkbook wb = new XSSFWorkbook();

        //bikin sheet
        XSSFSheet sheet = wb.createSheet("new sheet");

        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");

        BigDecimal TotalClaim = null;
        BigDecimal TotalClaimNetto = null;
        BigDecimal TotalClaimPaid = null;
        BigDecimal TotalClaimNettoPaid = null;
        BigDecimal OutstandingClaim = null;

        for (int i = 0; i < list.size(); i++) {
            HashDTO h = (HashDTO) list.get(i);

            //bikin header
            XSSFRow row0 = sheet.createRow(0);
            row0.createCell(0).setCellValue("tgl bayar");
            row0.createCell(1).setCellValue("no bukti");
            row0.createCell(2).setCellValue("tgl polis");
            row0.createCell(3).setCellValue("no polis");
            row0.createCell(4).setCellValue("tgl lkp");
            row0.createCell(5).setCellValue("no lkp");
            row0.createCell(6).setCellValue("klaim");
            row0.createCell(7).setCellValue("adjuster");
            row0.createCell(8).setCellValue("deductible");
            row0.createCell(9).setCellValue("subrograsi");
            row0.createCell(10).setCellValue("salvage");
            row0.createCell(11).setCellValue("depresiasi");
            row0.createCell(12).setCellValue("pinalty");
            row0.createCell(13).setCellValue("pph23");
            row0.createCell(14).setCellValue("fee recovery");
            row0.createCell(15).setCellValue("bayar klaim");
            row0.createCell(16).setCellValue("hutang klaim");
            row0.createCell(17).setCellValue("tertanggung");

            TotalClaim = BDUtil.add(h.getFieldValueByFieldNameBD("klaim_bruto"), h.getFieldValueByFieldNameBD("spareparts"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("jasa_bengkel"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("wreck"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("biaya_derek"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("ex_gratia_klaim"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("ex_gratia_beban_uw"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("tjh"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("ppn"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("biayasurvey"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("cashcoll"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("material"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("surveyfee"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("expenses"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("vatfee"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("exaccident"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("biayamaterai"));
            TotalClaim = BDUtil.add(TotalClaim, h.getFieldValueByFieldNameBD("bunga"));

            TotalClaimNetto = BDUtil.sub(TotalClaim, h.getFieldValueByFieldNameBD("deductible"));
            TotalClaimNetto = BDUtil.sub(TotalClaimNetto, h.getFieldValueByFieldNameBD("adjuster_fee"));
            TotalClaimNetto = BDUtil.sub(TotalClaimNetto, h.getFieldValueByFieldNameBD("subrogasi"));
            TotalClaimNetto = BDUtil.sub(TotalClaimNetto, h.getFieldValueByFieldNameBD("salvage"));
            TotalClaimNetto = BDUtil.sub(TotalClaimNetto, h.getFieldValueByFieldNameBD("depresiasi"));
            TotalClaimNetto = BDUtil.sub(TotalClaimNetto, h.getFieldValueByFieldNameBD("penalty"));
            TotalClaimNetto = BDUtil.sub(TotalClaimNetto, h.getFieldValueByFieldNameBD("pph23"));
            TotalClaimNetto = BDUtil.sub(TotalClaimNetto, h.getFieldValueByFieldNameBD("fee_recovery"));

            TotalClaimPaid = BDUtil.add(h.getFieldValueByFieldNameBD("klaim_bruto_paid"), h.getFieldValueByFieldNameBD("spareparts_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("jasa_bengkel_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("wreck_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("biaya_derek_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("ex_gratia_klaim_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("ex_gratia_beban_uw_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("interim_payment_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("tjh_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("ppn_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("biayasurvey_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("cashcoll_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("material_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("surveyfee_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("expenses_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("vatfee_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("exaccident_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("biayamaterai_paid"));
            TotalClaimPaid = BDUtil.add(TotalClaimPaid, h.getFieldValueByFieldNameBD("bunga_paid"));

            TotalClaimNettoPaid = BDUtil.sub(TotalClaimPaid, h.getFieldValueByFieldNameBD("deductible_paid"));
            TotalClaimNettoPaid = BDUtil.sub(TotalClaimNettoPaid, h.getFieldValueByFieldNameBD("adjuster_fee_paid"));
            TotalClaimNettoPaid = BDUtil.sub(TotalClaimNettoPaid, h.getFieldValueByFieldNameBD("subrogasi_paid"));
            TotalClaimNettoPaid = BDUtil.sub(TotalClaimNettoPaid, h.getFieldValueByFieldNameBD("salvage_paid"));
            TotalClaimNettoPaid = BDUtil.sub(TotalClaimNettoPaid, h.getFieldValueByFieldNameBD("depresiasi_paid"));
            TotalClaimNettoPaid = BDUtil.sub(TotalClaimNettoPaid, h.getFieldValueByFieldNameBD("penalty_paid"));
            TotalClaimNettoPaid = BDUtil.sub(TotalClaimNettoPaid, h.getFieldValueByFieldNameBD("pph23_paid"));
            TotalClaimNettoPaid = BDUtil.sub(TotalClaimNettoPaid, h.getFieldValueByFieldNameBD("fee_recovery_paid"));

            OutstandingClaim = BDUtil.sub(TotalClaimNetto, TotalClaimNettoPaid);

            XSSFRow row = sheet.createRow(i + 1);
            if (h.getFieldValueByFieldNameDT("receipt_date") != null) {
                row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("receipt_date"));
            }
            if (h.getFieldValueByFieldNameST("receipt_no") != null) {
                row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("receipt_no"));
            }
            if (h.getFieldValueByFieldNameDT("policy_date") != null) {
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            }
            if (h.getFieldValueByFieldNameST("pol_no") != null) {
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            }
            if (h.getFieldValueByFieldNameDT("dla_date") != null) {
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameDT("dla_date"));
            }
            if (h.getFieldValueByFieldNameST("dla_no") != null) {
                row.createCell(5).setCellValue(h.getFieldValueByFieldNameST("dla_no"));
            }
            if (TotalClaim != null) {
                row.createCell(6).setCellValue(TotalClaim.doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("adjuster_fee") != null) {
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("adjuster_fee").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("deductible") != null) {
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("deductible").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("subrogasi") != null) {
                row.createCell(9).setCellValue(h.getFieldValueByFieldNameBD("subrogasi").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("salvage") != null) {
                row.createCell(10).setCellValue(h.getFieldValueByFieldNameBD("salvage").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("depresiasi") != null) {
                row.createCell(11).setCellValue(h.getFieldValueByFieldNameBD("depresiasi").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("penalty") != null) {
                row.createCell(12).setCellValue(h.getFieldValueByFieldNameBD("penalty").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("pph23") != null) {
                row.createCell(13).setCellValue(h.getFieldValueByFieldNameBD("pph23").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("fee_recovery") != null) {
                row.createCell(14).setCellValue(h.getFieldValueByFieldNameBD("fee_recovery").doubleValue());
            }
            if (TotalClaimNettoPaid != null) {
                row.createCell(15).setCellValue(TotalClaimNettoPaid.doubleValue());
            }
            if (OutstandingClaim != null) {
                row.createCell(16).setCellValue(OutstandingClaim.doubleValue());
            }
            if (h.getFieldValueByFieldNameST("ent_name") != null) {
                row.createCell(17).setCellValue(h.getFieldValueByFieldNameST("ent_name"));
            }

        }

        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition", "attachment; filename=penerimaan_premi.xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token");
        ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();

        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }

    public String saveClaimInward(InsurancePolicyInwardView invoice, String stNextStatus) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag())) {
            invoice.validate();
        }

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B', invoice.getStCostCenterCode());

        if (invoice.getStARTransactionTypeID().equalsIgnoreCase("17")
                || invoice.getStARTransactionTypeID().equalsIgnoreCase("18")
                || invoice.getStARTransactionTypeID().equalsIgnoreCase("19")
                || invoice.getStARTransactionTypeID().equalsIgnoreCase("23")
                || invoice.getStARTransactionTypeID().equalsIgnoreCase("25")) {
            glApplicator.setDesc("Y", invoice.getEntity().getStShortName());
        }

        glApplicator.setDesc("X", invoice.getPolicyType().getStShortDescription());
        glApplicator.setDesc("K", invoice.getStDLANo());
        glApplicator.setDesc("M", DateUtil.getMonth(invoice.getDtInvoiceDate()).toUpperCase());
        glApplicator.setDesc("T", DateUtil.getYear(invoice.getDtInvoiceDate()));

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (stNextStatus != null) {
                if (stNextStatus.equalsIgnoreCase(FinCodec.ClaimStatus.DLA)) {
                    final InsurancePolicyInwardView oldPolis = (InsurancePolicyInwardView) DTOPool.getInstance().getDTO(InsurancePolicyInwardView.class, invoice.getStARInvoiceID());

                    oldPolis.markUpdate();

                    oldPolis.setStActiveFlag("N");

                    S.store(oldPolis);
                }
            }

            if (doPost) {
                if (invoice.getStGLARAccountID() == null) {

                    final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    if (acc == null) {
                        throw new RuntimeException("stGLARAccountID not found !" + invoice);
                    }

                    invoice.setStGLARAccountID(acc.getStAccountID());
                }
            }

            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("INSPOLINWARD")));

                if (!invoice.getStARTransactionTypeID().equalsIgnoreCase("27")) {
                    invoice.setStInvoiceNo(invoice.generateNoBuktiClaimInward());
                }
                if (invoice.getStARTransactionTypeID().equalsIgnoreCase("27")) {
                    invoice.generateEndorseNo();
                }
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView detailView = (InsurancePolicyInwardDetailView) details.get(i);

                if (detailView.isNew()) {
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                }

                if (doPost) {
                    if (detailView.isModified()) {
                        if (detailView.getStGLAccountID() == null) {
                            final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                            if (acc == null) {
                                throw new RuntimeException("Account ID is empty : " + detailView);
                            }

                            detailView.setStGLAccountID(acc.getStAccountID());
                        }
                    }
                }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());

            }

            S.store2(details);

            S.release();

            if (!invoice.isNew()) {
                if (doUnPost) {
                    //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            }

            if (doPost) {
                if (invoice.getStClaimStatus() != null) {
                    if (invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA)) {
                        doPost = false;
                    }
                }
            }

//            if (doPost) {
//
//                postInvoiceInward(invoice);
//
//                logger.logDebug("save: processing posting to GL");
//
//                final DTOList journalSet = new DTOList();
//
//                final BigDecimal negator = invoice.isAR() ? BDUtil.one : new BigDecimal(-1);
//
//                final JournalView gl = new JournalView();
//                gl.setStTransactionNo(invoice.getStInvoiceNo());
//                gl.setDtApplyDate(invoice.getDtInvoiceDate());
//                gl.setLgFiscalYear(Long.valueOf(DateUtil.getYear(invoice.getDtInvoiceDate())));
//                gl.setLgPeriodNo(Long.valueOf(DateUtil.getMonthDigit(invoice.getDtInvoiceDate())));
//                gl.setStJournalCode(null);
//                gl.setStCurrencyCode(invoice.getStCurrencyCode());
//                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
//                gl.setStTransactionNo(invoice.getStInvoiceNo());
//                gl.setStRefTRX(invoice.getStRefTRX());
//                gl.setStRefTRX("INV");
//                gl.setStRefTrxNo(invoice.getStARInvoiceID());
//                //tambahin ent_id
//                gl.setStRefEntID(invoice.getStEntityID());
//                gl.setStRecapitulationNo(invoice.getStNoSuratHutang());
//                gl.markNew();
//
//
//                {
//
//                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());
//
//                    final JournalView jv = gl.copy();
//                    final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
//                    jv.setDbAutoDebit(BDUtil.mul(negator, invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
//                    jv.setStAccountID(invoice.getStGLARAccountID());
//                    jv.setStDescription(glApplicator.getStGLDesc());
//
//                    jv.markNew();
//
//                    journalSet.add(jv);
//                }
//
//                for (int i = 0; i < details.size(); i++) {
//                    InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);
//
//                    if (InsurancePolicyInwardView.exludeComission) {
//                        if (ivd.isComission()) {
//                            continue;
//                        }
//                    }
//
//                    BigDecimal amt = ivd.getDbAmount();
//                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());
//
//                    if (BDUtil.isZeroOrNull(amt)) {
//                        continue;
//                    }
//
//                    if (ivd.getStTaxCode() != null) {
//                        final ARTaxView tax = ivd.getTax();
//
//                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
//                        //amt=BDUtil.sub(amt,taxAmt);
//
//                        final JournalView jv = gl.copy();
//                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
//                        jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
//                        jv.setStAccountID(accountID);
//                        jv.setStDescription(glApplicator.getPreviewDesc());
//
//                        jv.markNew();
//
//                        journalSet.add(jv);
//                    }
//
//                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());
//
//                    if (ac == null) {
//                        throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
//                    }
//
//                    final JournalView jv = gl.copy();
//                    final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
//                    jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
//                    jv.setStAccountID(ac.getStAccountID());
//                    jv.setStDescription(glApplicator.getStGLDesc());
//
//                    jv.markNew();
//
//                    journalSet.add(jv);
//                }
//
//                for (int i = 0; i < journalSet.size(); i++) {
//                    JournalView j = (JournalView) journalSet.get(i);
//
//                    j.loadAccountNo();
//                    j.setStApproved("Y");
//                    j.reCalculate();
//                }
//
//                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
//                getRemoteGeneralLedger().saveJournalEntry(journalSet);
//            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }
    
    public InsurancePolicyInwardView getARInvoiceInwardTreatyOnly(String invoice) throws Exception {
        final InsurancePolicyInwardView iv = (InsurancePolicyInwardView) ListUtil.getDTOListFromQuery(
                "select * from ins_pol_inward where ar_invoice_id = ? ",
                new Object [] {invoice},
                InsurancePolicyInwardView.class
                ).getDTO();

        return iv;
    }

    private String getUangMukaKlaimInsItemID() throws Exception {

        final LookUpUtil lu = ListUtil.getLookUpFromQuery("select ins_item_id,ins_item_id from ins_items where item_type='ADVPAYMENT'");

        return lu.getCode(0);
    }
 
    public void reverse(InsurancePolicyInwardView inward) throws Exception {
        final SQLUtil S = new SQLUtil();

        try {

            PreparedStatement P2 = S.setQuery("delete from gl_je_detail where ref_trx = 'INV' and pol_no is null and ref_trx_no = ? and trx_no = ? ");
            P2.setObject(1, inward.getStARInvoiceID());
            P2.setObject(2, inward.getStInvoiceNo());
            int r2 = P2.executeUpdate();
            S.release();

            PreparedStatement P4 = S.setQuery("delete from ar_invoice where attr_pol_no = ? and invoice_no = ? ");
            P4.setObject(1, inward.getStAttrPolicyNo());
            P4.setObject(2, inward.getStInvoiceNo());
            int r4 = P4.executeUpdate();
            S.release();

            PreparedStatement P3 = S.setQuery("update ins_pol_inward set approved_flag = null,posted_flag = null where ar_invoice_id = ? ");
            P3.setObject(1, inward.getStARInvoiceID());
            int r3 = P3.executeUpdate();
            S.release();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }
    }

    public ARTransactionLineView getTrxLine(String stARTrxLineID) {
      return (ARTransactionLineView) DTOPool.getInstance().getDTO(ARTransactionLineView.class, stARTrxLineID);
   }


    public String saveInvoiceClaim(ARInvoiceView invoice) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B',invoice.getStCostCenterCode());

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (doPost)
                if (invoice.getStGLARAccountID()==null) {

                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);

                invoice.setStGLARAccountID(acc.getStAccountID());
                }

            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW"))); //remark utk bersih2x
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);

                if (detailView.isNew())
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW"))); //remark utk bersih2x

                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);

                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }

            S.store(details);

            S.release();

            if (!invoice.isNew())
                if (doUnPost) {
                    getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }

            if (doPost) {

                //logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());

                if(invoice.getPolicy()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicy().getPolicyType().getStBusinessTypeID());

                gl.markNew();

                boolean isPanjarKlaim = false;

//                if(invoice.getStRefID0()!=null)
//                    if(invoice.getStRefID0().equalsIgnoreCase("PANJAR"))
//                        isPanjarKlaim = true;

                {

                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    final JournalView jv = gl.copy();

                    //jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    BigDecimal amount = invoice.getDbAmount();

                    if(isPanjarKlaim) amount = invoice.getPolicy().getDbClaimAdvancePaymentAmount();

                    if(invoice.isAR()) jv.setDbAutoCredit(BDUtil.mul(negator,amount));
                    else jv.setDbAutoDebit(BDUtil.mul(negator,amount));

                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(ac.getStDescription());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse()){
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                        if(invoice.getStARTransactionTypeID().equalsIgnoreCase("12"))
                            jv.setStDescription("Hut. Klm. Ass. Lgs. - " + invoice.getEntity().getStEntityName() + " " + invoice.getStRefID2());
                    }
                        

                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);

                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;

                    if(ivd.isUangMukaKlaim()) continue;

                    if(ivd.getStTaxFlag()!=null) continue;

                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());

                    AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());

                    final JournalView jv = gl.copy();

                    if(invoice.isAR()) jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));
                    else jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));

                    //String account = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());

                    //if (account==null) throw new RuntimeException("Account tidak ditemukan : "+ ivd.getStDescription() +" : "+ivd.getTrxLine().getStGLAccount());

                    jv.setStAccountID(ac.getStAccountID());

                    //glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                    //jv.setStDescription(glApplicator.getStGLDesc());

                    jv.setStDescription(ac.getStDescription());
                    jv.setStARTransactionLineID(ivd.getStARTrxLineID());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + ivd.getTrxLine().getStItemDesc().toUpperCase()+ " " + invoice.getStRefID2());


                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

    public void savePembayaranRealisasiUangMukaKlaim(ARReceiptView rcp) throws Exception {
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());

        try {
            if (rcp.isNew()){
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }

            if(rcp.isNew())
                rcp.generateReceiptNo();

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);

                    if(rcl.getPolicy()!=null){
                        InsurancePolicyView pol = rcl.getPolicy();

                        pol.setDtClaimPaymentDate(rcl.getDtReceiptDate());
                        pol.setStReceiptNo(rcl.getStReceiptNo());
                        pol.setStPaymentNotes(rcl.getStReceiptNo());
                        pol.setStClaimPaymentUsedFlag("Y");
                        pol.markUpdate();
                        S.store(pol);
                    }
                //}
            }

            S.store(rcp.getNotes());

            S.store(gLs);

            S.store(details);

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
            }

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());


            rcp.setStARAPInvoiceID(stARInvoiceID);

            String no_account = "00000";

            if(rcp.getAccounts()!=null)
                no_account = rcp.getAccounts().getStAccountNo().substring(5,10);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    no_account +
                    rcp.getStReceiptNo().substring(14,19));

            S.store(rcp);

            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                String entityGLCode = "00000";

                if(rcp.getStEntityID()!=null)
                    entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                if(rcp.getStEntityID()!=null)
                    applicator.setDesc("Y",rcp.getEntity().getStShortName());

                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");

                if(rcp.getInvoice(stARInvoiceID)!=null){
                    applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());

                    applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                }

                final LookUpUtil lu = ListUtil.getLookUpFromQuery("select gl_account,gl_account from ar_trx_line where item_class ='ADVPAYMENT' and enabled_flag='Y'");
                final String uangMukaAccount = lu.getCode(0);

                // AR DR vs bank CR
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                if(rcp.getSettlement().isAR()) negator = BDUtil.one;

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
                gl.setStSummaryFlag("Y");

                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();

                final JournalView head1 = gl.copy();
                BigDecimal creditHead = BDUtil.zero;

                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                            creditHead = BDUtil.mul(negator,rcp.getDbEnteredAmount());
                            head1.setDbAutoCredit(creditHead);
                            head1.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head1.setStDescription(paymentDesc);

                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                            if(rl.getDtReceiptDate()!=null){
                                head1.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            head1.setStDescription("Realisasi Byr "+rl.getStInvoiceNo());

                            if(rl.getInvoice()!=null){
                                head1.setStDescription(head1.getStDescription()+" "+ rl.getInvoice().getStRefID2()+ " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                            }else{
                                head1.setStDescription(head1.getStDescription()+" "+ rl.getStArInvoiceClaim()+ " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                            }
                            journal.add(head1);
                    }

                boolean moreThan1Policy = rcp.getDetails().size()>1;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if (rl.isDelete()) continue;

                    final JournalView line = gl.copy();

                    final JournalView headLine = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    BigDecimal excessAmt = BDUtil.zero;

                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                            final JournalView excess = gl.copy();

                            final ARSettlementExcessView xc = rl.getARSettlementExcess();
                            final boolean neg = xc.isNegative();
                            ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                            BigDecimal amtExc = BDUtil.mul(negator,rl.getDbExcessAmount());

                            if (neg) amtExc=BDUtil.negate(amtExc);

                            excessAmt = amtExc;

                            //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                            excess.setDbAutoDebit(amtExc);
                            excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                            excess.setStDescription(rl.getStExcessDescription());
                            excess.setStCurrencyCode(rcp.getStCurrencyCode());
                            excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                            excess.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                            if(rl.getDtReceiptDate()!=null){
                                excess.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(excess);
                    }

                    if(moreThan1Policy){
                         if (rc.isBank()) {

                                InsurancePolicyView policy = rl.getPolicy();
                                final JournalView head = gl.copy();
                                head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                                head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                                head.setStDescription(paymentDesc);

                                if(rl.getInvoice()!=null){
                                    if(rl.getInvoice().isAR())
                                        head.setStDescription("Trm "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                    else
                                        head.setStDescription("Realisasi Byr Htg Klm "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                }else{
                                    head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                }

                                head.setStPolicyNo(policy.getStPolicyNo());

                                if(rl.getStARSettlementExcessID()!=null){
                                    if(rl.getStLineType()!=null){
                                        if(!rl.isGL()){
                                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.sub(rl.getDbTotalAmountPerLine(),rl.getDbExcessAmount())));
                                        }
                                    }
                                }

                                if(rl.getDtReceiptDate()!=null){
                                    head.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                journal.add(head);
                        }
                    }
                    
                    boolean isNoKlaimGross = true;
                    BigDecimal tagihanNetto = null;
                    BigDecimal panjarKlaim = null;
                    if (rl.isInvoice()) {
                            final DTOList comissionList = rl.getDetails();

                            for (int j = 0; j < comissionList.size(); j++) {
                                    ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                                    ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                                    if(det.isAdvancePayment()){
                                        panjarKlaim = det.getDbAmount();

                                        if(det.isManual())
                                            panjarKlaim = det.getDbEnteredAmount();

                                        continue;
                                    }

                                    if(rcInvoiceDetail!=null){
                                        if(rcInvoiceDetail.isClaimGross())
                                            isNoKlaimGross = false;

                                        //if(rcInvoiceDetail.isTaxed()) continue;

                                        if(rcInvoiceDetail.getTrxLine().isNegative())
                                            tagihanNetto = BDUtil.sub(tagihanNetto, rcInvoiceDetail.getDbAmount());
                                        else
                                            tagihanNetto = BDUtil.add(tagihanNetto, rcInvoiceDetail.getDbAmount());
                                    }
                            }
                    }
 
                    if (rl.isInvoice()) {

                        InsurancePolicyView policy = rl.getPolicy();
                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            ARInvoiceView rcInvoice = det.getInvoice();

                            final JournalView lineDetail = gl.copy();

                            if(rcInvoiceDetail!=null){
                                    boolean isJournal = rcInvoiceDetail.isClaimGross() || rcInvoiceDetail.isUangMukaKlaim();

                                    if(!isJournal) continue;

                                    InsurancePolicyView policy2 = det.getPolicy();
                                    applicator.setCode('Y',policy2.getEntity().getStGLCode());
                                    applicator.setCode('X',policy2.getStPolicyTypeID());

                                    if (det.getPolicy().getEntity()!=null)
                                        applicator.setDesc("Y",policy2.getEntity().getStShortName());

                                    if (det.getPolicy().getEntity()!=null)
                                        applicator.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                    if(rcInvoiceDetail.isClaimGross()){
                                        //if(BDUtil.isZeroOrNull(amt2))
                                            amt2 = BDUtil.mul(negator,rcInvoice.getDbAmount());

                                            if(det.isManual())
                                                amt2 = det.getDbEnteredAmount();
                                    }

                                    lineDetail.setDbAutoDebit(amt2);
                                    lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                    if(rl.getInvoice().isAP())
                                        lineDetail.setStDescription("Realisasi Byr Htg Klm " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                    else
                                        lineDetail.setStDescription("Trm "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());


                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rcInvoiceDetail.isUangMukaKlaim()){
                                        amt = BDUtil.mul(negator,rcInvoice.getDbAmount());

                                        if(rl.getStARSettlementExcessID()!=null){
                                            if(rl.getStLineType()!=null){
                                                if(!rl.isGL()){
                                                    amt = BDUtil.mul(negator,BDUtil.sub(amt,rl.getDbExcessAmount()));
                                                }
                                            }
                                        }

                                        lineDetail.setDbAutoCredit(amt);
                                        lineDetail.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        //Byr Uang Muka Klaim LKP/03/20/1212/0330
                                        lineDetail.setStDescription("Byr " + rcInvoiceDetail.getTrxLine().getStItemDesc()+" "+ policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                    }

                                    if(det.getDtReceiptDate()!=null){
                                        lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                    }

                                    journal.add(lineDetail);

                                    //CEK PEMBAYARAN UANG MUKA KLAIM
                                    boolean uangMukaKlaim = false;
                                    BigDecimal uangMuka = null;
                                    if(!BDUtil.isZeroOrNull(det.getInvoice().getPolicy().getDbClaimAdvancePaymentAmount())){
                                        uangMukaKlaim = true;
                                        uangMuka = det.getInvoice().getPolicy().getDbClaimAdvancePaymentAmount();
                                    }
                                    if(!BDUtil.isZeroOrNull(det.getInvoice().getPolicy().getParentPolicy().getDbClaimAdvancePaymentAmount())){
                                        uangMukaKlaim = true;
                                        uangMuka = det.getInvoice().getPolicy().getParentPolicy().getDbClaimAdvancePaymentAmount();
                                    }

                            }else{

                                       // JURNAL REALISASI JIKA LAINNYA
                                
                                        boolean isJournal = det.isOthers();

                                        if(!isJournal) continue;

                                        final LookUpUtil lu2 = ListUtil.getLookUpFromQuery("select gl_account,gl_account from ar_trx_line where ar_trx_line_id = 109 and enabled_flag='Y'");
                                        final String exGratiaMarketingAccount = lu2.getCode(0);

                                        InsurancePolicyView policy2 = det.getPolicy();
                                        applicator.setCode('Y',"00000");
                                        applicator.setCode('X',policy2.getStPolicyTypeID());

                                        if (policy2.getEntity()!=null)
                                            applicator.setDesc("Y",policy2.getEntity().getStShortName());

                                        if (policy2.getEntity()!=null)
                                            applicator.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                        applicator.setDesc("K",policy2.getStPLANo());
                                        applicator.setDesc("M","");
                                        applicator.setDesc("T","");

                                        String exGratiaMarketingAccountID = applicator.getAccountID(exGratiaMarketingAccount);

                                        BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                        if(det.getStAccountID()!=null)
                                            exGratiaMarketingAccountID = det.getStAccountID();

                                        lineDetail.setDbAutoDebit(amt2);
                                        lineDetail.setStAccountIDNotNull(exGratiaMarketingAccountID,"Invalid or empty account in invoice : "+ policy2.getStPLANo());
                                        lineDetail.setStDescription("Realisasi Byr Htg Klm " + policy2.getStPLANo()+ " " + policy2.getClaimObject().getStObjectDescriptionWithoutCounter());
                                        lineDetail.setStDescription(applicator.getStGLDesc());

                                        if(!det.getStDescription().equalsIgnoreCase("Realisasi Panjar Klaim Lainnya"))
                                            lineDetail.setStDescription(det.getStDescription());

                                        lineDetail.setStCurrencyCode(policy2.getStCurrencyCode());
                                        lineDetail.setDbCurrencyRate(policy2.getDbCurrencyRate());
                                        lineDetail.setStPolicyNo(policy2.getStPolicyNo());

                                        if(det.getDtReceiptDate()!=null){
                                            lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                        }

                                        journal.add(lineDetail);

                            }

                        }

                        if(isNoKlaimGross){
                                final DTOList comissionList2 = rl.getDetails();

                                ARReceiptLinesView det = (ARReceiptLinesView) comissionList2.get(0);

                                ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                                final JournalView lineDetail = gl.copy();

                                if(rcInvoiceDetail!=null){

                                    // amt2 = BDUtil.mul(negator,tagihanNetto);
                                    BigDecimal amt2 = BDUtil.mul(negator,panjarKlaim);

                                    if(rl.getStARSettlementExcessID()!=null){
                                            if(rl.getStLineType()!=null){
                                                if(!rl.isGL()){
                                                    final ARSettlementExcessView xc = rl.getARSettlementExcess();
                                                    final boolean neg = xc.isNegative();

                                                    BigDecimal amtxc = rl.getDbExcessAmount();
                                                    if (neg) amtxc=BDUtil.negate(amtxc);

                                                    amt2 = BDUtil.mul(negator,BDUtil.sub(amt2, amtxc));
                                                }
                                            }
                                        }

                                    lineDetail.setDbAutoDebit(amt2);

                                    lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                    if(rl.getInvoice().isAP())
                                        lineDetail.setStDescription("Realisasi Byr Htg Klm "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                                    else
                                        lineDetail.setStDescription("Trm Klm. "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());

                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(det.getDtReceiptDate()!=null){
                                        lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                    }

                                    journal.add(lineDetail);
                                }
                        }

                        //TAMBAHKAN JURNAL BALIK PANJAR KLAIM
                        if(rcp.getStARSettlementID().equalsIgnoreCase("34")){
                                final DTOList comissionList2 = rl.getDetails();

                                ARReceiptLinesView det = (ARReceiptLinesView) comissionList2.get(0);

                                ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                                final JournalView lineDetail = gl.copy();

                                InsurancePolicyView policy2 = det.getPolicy();

                                gla.setCode('Y',policy2.getEntity().getStGLCode());
                                gla.setCode('X',policy2.getStPolicyTypeID());

                                if (det.getPolicy().getEntity()!=null)
                                    gla.setDesc("Y",policy2.getEntity().getStShortName());

                                if (det.getPolicy().getEntity()!=null)
                                    gla.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                String uangMukaAccountID = gla.getAccountID(uangMukaAccount);

                                if(rcInvoiceDetail!=null){

                                    BigDecimal amt2 = BDUtil.mul(negator,panjarKlaim);

                                    lineDetail.setDbAutoCredit(amt2);

                                    lineDetail.setStAccountIDNotNull(uangMukaAccountID,"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                    if(rl.getInvoice().isAP())
                                        lineDetail.setStDescription("Realisasi Uang Muka Klm "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                                    else
                                        lineDetail.setStDescription("Trm Klm. "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());

                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());


                                    if(det.getDtReceiptDate()!=null){
                                        lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                    }

                                    journal.add(lineDetail);

                                }else{

                                        // JURNAL REALISASI JIKA LAINNYA
                                        BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                        lineDetail.setDbAutoCredit(amt2);

                                        lineDetail.setStAccountIDNotNull(uangMukaAccountID,"Invalid or empty account in invoice : "+ policy2.getStPLANo());
                                        lineDetail.setStDescription("Realisasi Uang Muka Klm "+ policy2.getStPLANo() + " "+ policy2.getClaimObject().getStObjectDescriptionWithoutCounter());
                                        
                                        lineDetail.setStCurrencyCode(policy2.getStCurrencyCode());
                                        lineDetail.setDbCurrencyRate(policy2.getDbCurrencyRate());
                                        lineDetail.setStPolicyNo(policy2.getStPolicyNo());


                                        if(det.getDtReceiptDate()!=null){
                                            lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                        }

                                        journal.add(lineDetail);
                                }
                        }

                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());

                    } else if (rl.isGL()) {

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());

                    }

                }

                //UPDATE DATA KLAIM BAHWA TERJADI PANJAR KLAIM
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    final DTOList detail = rcl.getDetails();

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                                if(rcc.isAdvancePayment()){

                                    //UPDATE DATA KLAIM SET JML KLAIM
                                    InsurancePolicyView klaim = rcc.getPolicy();
                                    klaim.setDbClaimAdvancePaymentAmount(rcc.getDbEnteredAmount());
                                    klaim.setStReceiptNo(rcp.getStReceiptNo());
                                    klaim.setDtPaymentDate(rcc.getDtReceiptDate());
                                    klaim.markUpdate();
                                    S.store(klaim);

                                    //JIKA KLAIM LKP DAN BELUM DISETUJUI
                                   if(klaim.isStatusClaimDLA() && !klaim.isEffective()) {

                                            String insItemID = getUangMukaKlaimInsItemID();

                                            final InsurancePolicyItemsView item = new InsurancePolicyItemsView();

                                            item.setStItemClass(FinCodec.PolicyItemClass.CLAIM);

                                            item.markNew();

                                            item.setStInsItemID(insItemID);

                                            item.setStChargableFlag("Y");

                                            item.setDbAmount(klaim.getDbClaimAdvancePaymentAmount());

                                            item.setStChargableFlag("Y");

                                            item.setStROFlag("Y");

                                            item.setStPolicyID(klaim.getStPolicyID());

                                            if (item.isNew()) item.setStPolicyItemID(String.valueOf(IDFactory.createNumericID("POLITEM")));

                                            S.store(item);
                                    }
                                    //END

                                    //JIKA KLAIM LKP DAN SUDAH DISETUJUI
                                    if(klaim.isStatusClaimDLA() && klaim.isEffective()){
                                            ARInvoiceView invoice = getARInvoiceByAttrPolIDAndTrxTypeID(klaim.getStPolicyID(),"12");

                                            if(invoice==null)
                                                invoice = getARInvoiceByAttrPolIDAndTrxTypeID(klaim.getStPolicyID(),"26");

                                            /*
                                            final ARInvoiceDetailView ivd = new ARInvoiceDetailView();

                                            ivd.markNew();

                                            invoice.getDetails().add(ivd);

                                            ivd.setStEntityID(klaim.getStEntityID());
                                            ivd.setStARInvoiceID(invoice.getStARInvoiceID());
                                            ivd.setStARTrxLineID("86");
                                            ivd.loadSettings();
                                            ivd.setDbEnteredAmount(klaim.getDbClaimAdvancePaymentAmount());

                                             if (ivd.isNew())
                                                ivd.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));

                                            invoice.recalculate();

                                            S.store(ivd);
                                            */

                                            updateTagihanKlaimPanjar(invoice, rcp);

                                    }

                                }
                        }
                    }
                }

                for (int i = 0; i < journal.size(); i++) {
                        JournalView j = (JournalView) journal.get(i);

                        if (j.getAccount()==null) {
                            throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                        }

                        j.loadAccountNo();
                        j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }


    }

    public BigDecimal getDbPemakaianTitipanPremi(String trxID) throws Exception {

        final SQLUtil S = new SQLUtil();

        try {
            final PreparedStatement PS = S.setQuery("select coalesce(SUM(b.titipan_premi_used_amount),0) as pemakaian "+
                                                    " from ar_receipt a "+
                                                    " inner join ar_receipt_lines b on a.ar_receipt_id = b.receipt_id "+
                                                    " where a.status = 'POST' AND b.titipan_premi_id = ?");

            PS.setString(1, trxID);

            final ResultSet RS = PS.executeQuery();

            if (RS.next()) return RS.getBigDecimal(1);

            return null;

        } finally {
            S.release();
        }
    }


    public void deleteAllDetailClaim(ARReceiptView rcp)throws Exception{

        final SQLUtil S = new SQLUtil();
        try {

            PreparedStatement P6 = S.setQuery("delete from ar_receipt_lines where receipt_id = ?");

            P6.setObject(1, rcp.getStARReceiptID());

            int hasil = P6.executeUpdate();

            final DTOList detil = rcp.getDetails();

            for (int i = 0; i < detil.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) detil.get(i);

                    if(rcl.getPolicy()!=null){
                        InsurancePolicyView pol = rcl.getPolicy();

                        pol.setDtClaimPaymentDate(null);
                        pol.setStReceiptNo(null);
                        pol.setStPaymentNotes(null);
                        pol.setStClaimPaymentUsedFlag(null);
                        pol.markUpdate();
                        S.store(pol);
                    }
            }

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }

    }

    public String saveInvoiceClaimReins(ARInvoiceView invoice) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B',invoice.getStCostCenterCode());

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (doPost)
                if (invoice.getStGLARAccountID()==null) {

                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);

                invoice.setStGLARAccountID(acc.getStAccountID());
                }

            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW"))); //remark utk bersih2x
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);

                if (detailView.isNew())
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW"))); //remark utk bersih2x

                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);

                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }

            S.store(details);

            S.release();

            if (!invoice.isNew())
                if (doUnPost) {
                getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }

            if (doPost) {

                //logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());
                gl.setStRecapitulationNo(invoice.getStNoSuratHutang());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());

                if(invoice.getPolicyType()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicyType().getStBusinessTypeID());

                gl.markNew();

                //TAMBAH JURNAL PREMI R/I NETT KANTOR PUSAT
                glApplicator.setCode('X',invoice.getPolicyTypeGLCode()); //change these into a better system (use var interfaces & inner class)
                glApplicator.setCode('A',invoice.getStReferenceA0());
                glApplicator.setDesc("A",invoice.getStReferenceA1()!=null?invoice.getStReferenceA1():"");
                glApplicator.setCode('C',invoice.getStReferenceC0());
                glApplicator.setDesc("C",invoice.getStReferenceC1());
                glApplicator.setCode('D',invoice.getStReferenceD0());
                glApplicator.setDesc("D",invoice.getStReferenceD1());
                glApplicator.setCode('E',invoice.getStReferenceE0());
                glApplicator.setDesc("E",invoice.getStReferenceE1());
                //glApplicator.setCode('Y',getStReferenceY0());
                //glApplicator.setDesc("Y",getStReferenceY1());
                glApplicator.setCode('Z',invoice.getStReferenceZ0());
                glApplicator.setDesc("Z",invoice.getStReferenceZ1());
                glApplicator.setDesc("X",invoice.getPolicyType().getStShortDescription());
                glApplicator.setCode('Y',invoice.getEntity().getStGLCode());
                String entityDesc = invoice.getEntity().getStShortName()==null?invoice.getEntity().getStEntityName():invoice.getEntity().getStShortName();
                glApplicator.setDesc("Y",entityDesc);
                glApplicator.setDesc("M",DateUtil.getMonth(invoice.getDtInvoiceDate()).toUpperCase());
                glApplicator.setDesc("T",DateUtil.getYear(invoice.getDtInvoiceDate()));

                {

                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    final JournalView jv = gl.copy();

                    //jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));

                    if(invoice.isAR()) jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));

                    jv.setStAccountID(invoice.getStGLARAccountID());
                    //jv.setStDescription("R.A.K "+ ac.getStDescription());

                    glApplicator.getAccountID(invoice.getARTrxType().getStGLARAccount());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());

                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);

                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;

                    if(ivd.getStTaxFlag()!=null) continue;

                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());

                    AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());

                    final JournalView jv = gl.copy();

                    if(invoice.isAR()) jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));
                    else jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));

                    //String account = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());

                    //if (account==null) throw new RuntimeException("Account tidak ditemukan : "+ ivd.getStDescription() +" : "+ivd.getTrxLine().getStGLAccount());

                    jv.setStAccountID(ac.getStAccountID());

                    glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    //jv.setStDescription(ac.getStDescription());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + ivd.getTrxLine().getStItemDesc().toUpperCase()+ " " + invoice.getStRefID2());


                    jv.markNew();

                    journalSet.add(jv);
                }



                {
                    //logger.logDebug("################### MASUK JURNAL PREMI R/I KANTOR PUSAT #######################");
                    final ARTransactionLineView tl = getTrxLine("124");

                    String accode = tl.getStGLAccount();

                    glApplicator.setCode('B',"00");
                    //glApplicator.setCode('C',invoice.getStReferenceC0());

                    final AccountView ac = glc.getAccountByAccountID(glApplicator.getAccountID(accode));

                    final JournalView jv1 = gl.copy();

                    if(invoice.isAR()) jv1.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv1.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));

                    jv1.setStAccountID(ac.getStAccountID());
                    //jv1.setStDescription(ac.getStDescription());

                    glApplicator.getAccountID(accode);
                    jv1.setStDescription(glApplicator.getStGLDesc());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv1.setStDescription(jv1.getStDescription() + " " + invoice.getStRefID2());

                    jv1.markNew();

                    journalSet.add(jv1);
                }

                //TAMBAH JURNAL REKENING ANTAR KANTOR KANTOR PUSAT
                {
                    //logger.logDebug("################### MASUK JURNAL RAK R/I KANTOR PUSAT #######################");
                    ARTransactionLineView tl2 = getTrxLine("125");

                    String accode2 = tl2.getStGLAccount();

                    glApplicator.setCode('B',"00");

                    final AccountView ac2 = glc.getAccountByAccountID(glApplicator.getAccountID(accode2));

                    final JournalView jv2 = gl.copy();

                    if(invoice.isAR()) jv2.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv2.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));

                    jv2.setStAccountID(ac2.getStAccountID());
                    jv2.setStDescription(ac2.getStDescription());

                    glApplicator.getAccountID(accode2);
                    jv2.setStDescription(glApplicator.getStGLDesc());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv2.setStDescription(jv2.getStDescription() + " " + invoice.getStRefID2());

                    jv2.markNew();

                    journalSet.add(jv2);
                }

                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

    public String saveNew(ARInvoiceView invoice) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag()))
            invoice.validate();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B',invoice.getStCostCenterCode());

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            final boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (doPost)
                if (invoice.getStGLARAccountID()==null) {

                final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                if (acc==null) throw new RuntimeException("stGLARAccountID not found !"+invoice);

                invoice.setStGLARAccountID(acc.getStAccountID());
                }

            if (invoice.isNew()) {
                //invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW"))); //remark utk bersih2x
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("ARINVNEW")));
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                ARInvoiceDetailView detailView = (ARInvoiceDetailView) details.get(i);

                if (detailView.isNew())
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW")));
                //detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("ARINVDNEW"))); //remark utk bersih2x

                if (doPost)
                    if (detailView.isModified()) {
                    if (detailView.getStGLAccountID()==null) {
                        final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                        if (acc==null) throw new RuntimeException("Account ID is empty : "+detailView);

                        detailView.setStGLAccountID(acc.getStAccountID());
                    }
                    }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());
            }

            S.store(details);

            S.release();

            if (!invoice.isNew())
                if (doUnPost) {
                getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }

            if (doPost) {

                //logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR()?BDUtil.one:new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setDtApplyDate(invoice.getDtInvoiceDate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                gl.setStPolicyNo(invoice.getStAttrPolicyNo());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.markNew();

                {

                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    final JournalView jv = gl.copy();

                    //jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));

                    if(invoice.isAR()) jv.setDbAutoDebit(BDUtil.mul(negator,invoice.getDbAmount()));
                    else jv.setDbAutoCredit(BDUtil.mul(negator,invoice.getDbAmount()));

                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(ac.getStDescription());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());


                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < details.size(); i++) {
                    ARInvoiceDetailView ivd = (ARInvoiceDetailView) details.get(i);

                    if (ARInvoiceView.exludeComission)
                        if (ivd.isComission()) continue;

                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative()?-negator.intValue():negator.intValue());

                    /*
                    if (ivd.getStTaxCode()!=null) {
                        final ARTaxView tax = ivd.getTax();

                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);

                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());

                        jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());

                        jv.markNew();

                        journalSet.add(jv);
                    }*/
               /*else if (ivd.getTrxLine().isTaxed()) {
                  final ARTaxView tax = ivd.getTrxLine().getTax();

                  final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                  //amt=BDUtil.sub(amt,taxAmt);

                  final JournalView jv = gl.copy();
                  final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                  jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                  jv.setStAccountID(accountID);
                  jv.setStDescription(glApplicator.getPreviewDesc());

                  jv.markNew();

                  journalSet.add(jv);

               }*/



                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                    if (ac==null) throw new RuntimeException("Account not found ("+ivd.getStGLAccountID()+") at invoice "+invoice.getStInvoiceNo()+" item "+ivd.getStDescription());

                    final JournalView jv = gl.copy();

                    //jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));

                    if(invoice.isAR()) jv.setDbAutoCredit(BDUtil.mul(detailNegator,amt));
                    else jv.setDbAutoDebit(BDUtil.mul(detailNegator,amt));

                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(ac.getStDescription());

                    if(ivd.getStAccountDesc()!=null)
                        jv.setStDescription(ivd.getStAccountDesc());

                    if(invoice.getPolicy().isClaimDLA() || invoice.getPolicy().isStatusClaimEndorse())
                        jv.setStDescription(jv.getStDescription() + " " + invoice.getStRefID2());


                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }


    public String saveClaimInwardClosing(InsurancePolicyInwardView invoice, InsuranceClosingView closing, String stNextStatus) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag())) {
            invoice.validate();
        }

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B', invoice.getStCostCenterCode());

        if (!invoice.getStARTransactionTypeID().equalsIgnoreCase("24")) {
            glApplicator.setDesc("Y", invoice.getEntity().getStShortName());
        }

        glApplicator.setDesc("X", invoice.getPolicyType().getStShortDescription());
        glApplicator.setDesc("K", invoice.getStDLANo());
        glApplicator.setDesc("M", DateUtil.getMonth(closing.getDtInvoiceDate()).toUpperCase());
        glApplicator.setDesc("T", DateUtil.getYear(closing.getDtInvoiceDate()));

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (stNextStatus != null) {
                if (stNextStatus.equalsIgnoreCase(FinCodec.ClaimStatus.DLA)) {
                    final InsurancePolicyInwardView oldPolis = (InsurancePolicyInwardView) DTOPool.getInstance().getDTO(InsurancePolicyInwardView.class, invoice.getStARInvoiceID());

                    oldPolis.markUpdate();

                    oldPolis.setStActiveFlag("N");

                    S.store(oldPolis);
                }
            }

            if (doPost) {
                if (invoice.getStGLARAccountID() == null) {

                    final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    if (acc == null) {
                        throw new RuntimeException("stGLARAccountID not found !" + invoice);
                    }

                    invoice.setStGLARAccountID(acc.getStAccountID());
                }
            }

            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("INSPOLINWARD")));

                if (!invoice.isDLA()) {
                    invoice.setStInvoiceNo(invoice.generateNoBuktiClaimInward());
                }

            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView detailView = (InsurancePolicyInwardDetailView) details.get(i);

                if (detailView.isNew()) {
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                }

                if (doPost) {
                    if (detailView.isModified()) {
                        if (detailView.getStGLAccountID() == null) {
                            final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                            if (acc == null) {
                                throw new RuntimeException("Account ID is empty : " + detailView);
                            }

                            detailView.setStGLAccountID(acc.getStAccountID());
                        }
                    }
                }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());

            }

            S.store2(details);

            S.release();

            if (!invoice.isNew()) {
                if (doUnPost) {
                    //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            }

            if (doPost) {
                if (invoice.getStClaimStatus() != null) {
                    if (invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA)) {
                        doPost = false;
                    }
                }
            }

            if (doPost) {

                postInvoiceInwardClosing(invoice, closing);

                logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR() ? BDUtil.one : new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(closing.getDtInvoiceDate());
                gl.setLgFiscalYear(Long.valueOf(DateUtil.getYear(closing.getDtInvoiceDate())));
                gl.setLgPeriodNo(Long.valueOf(DateUtil.getMonthDigit(closing.getDtInvoiceDate())));
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.setStRecapitulationNo(invoice.getStNoSuratHutang());

                if(invoice.getPolicyType()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicyType().getStBusinessTypeID());

                gl.markNew();


                {

                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    final JournalView jv = gl.copy();
                    final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
                    jv.setDbAutoDebit(BDUtil.mul(negator, invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < details.size(); i++) {
                    InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                    if (InsurancePolicyInwardView.exludeComission) {
                        if (ivd.isComission()) {
                            continue;
                        }
                    }

                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                    if (BDUtil.isZeroOrNull(amt)) {
                        continue;
                    }

                    if (ivd.getStTaxCode() != null) {
                        final ARTaxView tax = ivd.getTax();

                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);

                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                        jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());

                        jv.markNew();

                        journalSet.add(jv);
                    }

                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                    if (ac == null) {
                        throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                    }

                    final JournalView jv = gl.copy();
                    final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                    jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

    public String saveSaldoAwalInwardClosing(InsurancePolicyInwardView invoice, InsuranceClosingView closing) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag())) {
            invoice.validate();
        }

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B', invoice.getStCostCenterCode());

        glApplicator.setDesc("Y", invoice.getEntity().getStShortName());
        glApplicator.setDesc("X", invoice.getPolicyType().getStShortDescription());
        glApplicator.setDesc("K", invoice.getStDLANo());
        glApplicator.setDesc("M", DateUtil.getMonth(invoice.getDtDueDate()).toUpperCase());
        glApplicator.setDesc("T", DateUtil.getYear(invoice.getDtDueDate()));

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (doPost) {
                if (invoice.getStGLARAccountID() == null) {

                    final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    if (acc == null) {
                        throw new RuntimeException("stGLARAccountID not found !" + invoice);
                    }

                    invoice.setStGLARAccountID(acc.getStAccountID());
                }
            }

            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("INSPOLINWARD")));

                if (invoice.getStARTransactionTypeID().equalsIgnoreCase("1")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("2")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("3")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("20")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("21")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("22")) {
                    invoice.setStInvoiceNo(invoice.generateNoBukti());
                } else if (invoice.getStARTransactionTypeID().equalsIgnoreCase("17")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("18")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("19")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("23")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("24")) {
                    invoice.setStInvoiceNo(invoice.generateNoBuktiClaimInward());
                }
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView detailView = (InsurancePolicyInwardDetailView) details.get(i);

                if (detailView.isNew()) {
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                }

                if (doPost) {
                    if (detailView.isModified()) {
                        if (detailView.getStGLAccountID() == null) {
                            final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                            if (acc == null) {
                                throw new RuntimeException("Account ID is empty : " + detailView);
                            }

                            detailView.setStGLAccountID(acc.getStAccountID());
                        }
                    }
                }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());

            }

            S.store2(details);

            S.release();

            if (!invoice.isNew()) {
                if (doUnPost) {
                    //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            }

            if (doPost) {
                if (invoice.getStClaimStatus() != null) {
                    if (invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA)) {
                        doPost = false;
                    }
                }
            }

            if (doPost) {

                postInvoiceInwardClosing(invoice,closing);

                logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR() ? BDUtil.one : new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(closing.getDtInvoiceDate());
                gl.setLgFiscalYear(Long.valueOf(DateUtil.getYear(closing.getDtInvoiceDate())));
                gl.setLgPeriodNo(Long.valueOf(DateUtil.getMonthDigit(closing.getDtInvoiceDate())));
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.setStRecapitulationNo(closing.getStNoSuratHutang());

                if(invoice.getPolicyType()!=null)
                    gl.setStBusinessTypeID(invoice.getPolicyType().getStBusinessTypeID());

                gl.markNew();


                {

                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    final JournalView jv = gl.copy();
                    final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
                    jv.setDbAutoDebit(BDUtil.mul(negator, invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < details.size(); i++) {
                    InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                    if (InsurancePolicyInwardView.exludeComission) {
                        if (ivd.isComission()) {
                            continue;
                        }
                    }

                    BigDecimal amt = ivd.getDbAmount();
                    final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                    if (BDUtil.isZeroOrNull(amt)) {
                        continue;
                    }

                    if (ivd.getStTaxCode() != null) {
                        final ARTaxView tax = ivd.getTax();

                        final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                        //amt=BDUtil.sub(amt,taxAmt);

                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                        jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                        jv.setStAccountID(accountID);
                        jv.setStDescription(glApplicator.getPreviewDesc());

                        jv.markNew();

                        journalSet.add(jv);
                    }
                    /*else if (ivd.getTrxLine().isTaxed()) {
                    final ARTaxView tax = ivd.getTrxLine().getTax();

                    final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                    //amt=BDUtil.sub(amt,taxAmt);

                    final JournalView jv = gl.copy();
                    final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                    jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                    jv.setStAccountID(accountID);
                    jv.setStDescription(glApplicator.getPreviewDesc());

                    jv.markNew();

                    journalSet.add(jv);

                    }*/



                    final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                    if (ac == null) {
                        throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                    }

                    final JournalView jv = gl.copy();
                    final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                    jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                    jv.setStAccountID(ac.getStAccountID());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    jv.markNew();

                    journalSet.add(jv);
                }

                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e; 
        } finally {
            S.release();
        }
    }

    public void postInvoiceInwardClosing(InsurancePolicyInwardView inward, InsuranceClosingView closing) throws Exception {
        ARInvoiceView invoice = new ARInvoiceView();

        invoice.markNew();

        invoice.setStARCustomerID(inward.getStEntityID());
        invoice.setStARTransactionTypeID(inward.getStARTransactionTypeID());
        invoice.setStApprovedFlag(inward.getStApprovedFlag());
        invoice.setStAttrPolicyAddress(inward.getStAttrPolicyAddress());
        invoice.setStAttrPolicyID(inward.getStARInvoiceID());
        invoice.setStAttrPolicyName(inward.getStAttrPolicyName());
        invoice.setStAttrPolicyNo(inward.getStAttrPolicyNo());
        invoice.setStAttrPolicyTypeID(inward.getStAttrPolicyTypeID());
        invoice.setStAttrQuartal(inward.getStAttrQuartal());
        invoice.setStAttrUnderwriting(inward.getStAttrUnderwriting());
        invoice.setStClaimStatus(inward.getStClaimStatus());
        invoice.setStCommitFlag(inward.getStCommitFlag()); 
        invoice.setStCostCenterCode(inward.getStCostCenterCode());
        invoice.setStCurrencyCode(inward.getStCurrencyCode());
        invoice.setStDLANo(inward.getStDLANo());
        invoice.setStDescription(inward.getStDescription());
        invoice.setStEntityID(inward.getStEntityID());
        invoice.setStGLARAccountDesc(inward.getStGLARAccountDesc());
        invoice.setStGLARAccountID(inward.getStGLARAccountID());
        invoice.setStGLCode(inward.getStGLCode());
        invoice.setStInvoiceNo(inward.getStInvoiceNo());
        invoice.setStInvoiceType(inward.getStInvoiceType());
        invoice.setStNegativeFlag(inward.getStNegativeFlag());
        invoice.setStRefID0(inward.getStRefID0());
        invoice.setStRefID1(inward.getStRefID1());
        invoice.setStRefID2(inward.getStRefID2());
        invoice.setStRefID3(inward.getStRefID3());
        invoice.setStRefInvoiceID(inward.getStRefInvoiceID());
        invoice.setStReferenceA0(inward.getStReferenceA0());
        invoice.setStReferenceA1(inward.getStReferenceA1());


        invoice.setStReferenceC1(inward.getStReferenceC1());
        invoice.setStReferenceD0(inward.getStReferenceD0());
        invoice.setStReferenceD1(inward.getStReferenceD1());
        invoice.setStReferenceE0(inward.getStReferenceE0());
        invoice.setStReferenceE1(inward.getStReferenceE1());
        invoice.setStReferenceX0(inward.getStReferenceX0());
        invoice.setStReferenceX1(inward.getStReferenceX1());
        invoice.setStReferenceY0(inward.getStReferenceY0());
        invoice.setStReferenceY1(inward.getStReferenceY1());
        invoice.setStReferenceZ0(inward.getStReferenceZ0());
        invoice.setStReferenceZ1(inward.getStReferenceZ1());
        invoice.setDbAmount(inward.getDbAmount());
        invoice.setDbAmountSettled(inward.getDbAmountSettled());
        invoice.setDbAttrPolicyTSI(inward.getDbAttrPolicyTSI());
        invoice.setDbAttrPolicyTSITotal(inward.getDbAttrPolicyTSITotal());
        invoice.setDbCurrencyRate(inward.getDbCurrencyRate());
        invoice.setDbEnteredAmount(inward.getDbEnteredAmount());
        invoice.setDtAttrPolicyPeriodEnd(inward.getDtAttrPolicyPeriodEnd());
        invoice.setDtAttrPolicyPeriodStart(inward.getDtAttrPolicyPeriodStart());
        invoice.setDtDueDate(inward.getDtDueDate());
        invoice.setDtInvoiceDate(closing.getDtInvoiceDate());
        invoice.setDtMutationDate(closing.getDtInvoiceDate());
        invoice.setDtTransDate(inward.getDtTransDate());
        invoice.setStNoSuratHutang(closing.getStNoSuratHutang());
        invoice.setStRefID1(inward.getStPLANo());
        invoice.setStRefID2(inward.getStDLANo());
        invoice.setStReferenceNo(inward.getStTransactionNoReference());
        //invoice.setStPostedFlag("Y");

        final DTOList ivdetails = new DTOList();

        invoice.setDetails(ivdetails);

        final DTOList details = inward.getDetails();
        for (int i = 0; i < details.size(); i++) {
            InsurancePolicyInwardDetailView det = (InsurancePolicyInwardDetailView) details.get(i);

            if (BDUtil.isZeroOrNull(det.getDbAmount())) {
                continue;
            }

            final ARInvoiceDetailView detail = new ARInvoiceDetailView();

            detail.setStARTrxLineID(det.getStARTrxLineID());
            detail.setStAccountDesc(det.getStAccountDesc());
            detail.setStAttrPolicyTypeID(det.getStAttrPolicyTypeID());
            detail.setStAttrUnderwriting(det.getStAttrUnderwriting());
            detail.setStComissionFlag(det.getStComissionFlag());
            detail.setStDescription(det.getStDescription());
            detail.setStEntityID(det.getStEntityID());
            detail.setStGLAccountID(det.getStGLAccountID());
            detail.setStNegativeFlag(det.getStNegativeFlag());
            detail.setStParentID(det.getStParentID());
            detail.setStRefID0(det.getStRefID0());
            detail.setStRefID1(det.getStRefID1());
            detail.setStRefID2(det.getStRefID2());
            detail.setStRefInvoiceDetailID(det.getStRefInvoiceDetailID());
            detail.setStRootID(det.getStRootID());
            detail.setStTaxFlag(det.getStTaxFlag());
            detail.setDbAmount(det.getDbAmount());
            detail.setDbAmountSettled(det.getDbAmountSettled());
            detail.setDbEnteredAmount(det.getDbEnteredAmount());
            detail.setDbTaxAmount(det.getDbTaxAmount());
            detail.setDbTaxRate(det.getDbTaxRate());

            detail.markNew();

            ivdetails.add(detail);

        }

        save(invoice);

    }

    public InsurancePolicyInwardView getARInvoiceInwardByPolNo(String stPolicyNo) throws Exception {
        final InsurancePolicyInwardView iv = (InsurancePolicyInwardView) ListUtil.getDTOListFromQuery(
                "select * from ins_pol_inward where attr_pol_no = ?",
                new Object [] {stPolicyNo},
                InsurancePolicyInwardView.class
                ).getDTO();


        if(iv!=null) {
            iv.setDetails(
                    ListUtil.getDTOListFromQuery(
                    "select * from ins_pol_inward_details where ar_invoice_id = ?",
                    new Object [] {iv.getStARInvoiceID()},
                    InsurancePolicyInwardDetailView.class
                    )

                    );
        }

        return iv;
    }

    public ARRequestFee getARRequestForPrinting(String arreqid, String alter) throws Exception {

        final ARRequestFee inv = (ARRequestFee) ListUtil.getDTOListFromQuery(
                "select * from ar_request_fee where req_id = ?",
                new Object[]{arreqid},
                ARRequestFee.class).getDTO();

        if (inv != null) {

            boolean mayPrint = false;
            if (Tools.isYes(inv.getStCashierFlag())) {
                mayPrint = true;
            }

            if (!mayPrint) {
                throw new RuntimeException(" Data belum divalidasi Kasir, slip tidak bisa dicetak");
            }

            if (alter.equals("standard")) {
                if (Tools.isYes(inv.getStPrintFlag())) {
                    throw new RuntimeException(" Data sudah pernah dicetak dengan Digitized Sign, konfirmasi ke Pimpinan untuk cetak ulang");
                }
            }

            inv.markUpdate();

            if (alter != null) {
                if (alter.equals("standard")) {
                    inv.setStPrintFlag("Y");
                }
            }

            final SQLUtil S = new SQLUtil();

            try {
                S.store(inv);
            } finally {
                S.release();
            }
        }
        return inv;
    }

    public void savePembayaranPremiSentralisasi(ARReceiptView rcp) throws Exception {

        boolean taxAcrualBases = true;

        rcp.validatePembayaranPremi();

        boolean jurnalOnly = false;

        boolean bentukHutangOnly = false;

        final SQLUtil S = new SQLUtil();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());

        if (rcp.getStEntityID()!=null){

            if(rcp.getEntity2(rcp.getStEntityID()).getStShortName()!=null)
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStShortName());
            else
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStEntityName());
        }

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));

            if(rcp.isNew()){
                rcp.generateReceiptNo();

                rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            }

            if(!rcp.isNew())
                if(rcp.getStReceiptNo2()==null)
                    rcp.setStReceiptNo2(rcp.generateReceiptNo2());

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());


            String stARInvoiceID="";

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                     rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStARInvoiceDetailID());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclsub.isCheck())
                            if(rclsub.getInvoiceDetail()!=null)
                                rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStARInvoiceDetailID());

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);//simpan ke receipt lines
                //}

                //if (rcl.getListTitipan().size()>0) {
                    final DTOList subTitipan = rcl.getListTitipan();
                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);

                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo2());

                        if(rcl.getDtReceiptDate()!=null){
                            rclTitipan.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclTitipan.isCheck())
                            if(rclTitipan.getInvoiceDetail()!=null)
                                rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());

                        if (rclTitipan.isNew()){
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                        }
                    }

                    S.store(subTitipan);//simpan ke receipt lines

                    if(rcl.getPolicy()!=null){
                        InsurancePolicyView pol = rcl.getPolicy();

                        pol.setDtPaymentDate(rcl.getDtReceiptDate());
                        pol.setStReceiptNo(rcl.getStReceiptNo());
                        pol.setStPaymentNotes(rcl.getStReceiptNo());
                        pol.markUpdate();
                        S.store(pol);
                    }


            }

            S.store(rcp.getNotes());//simpan note

            S.store(gLs);//simpan excess

            S.store(details);//simpen receipt dr invoice

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            //final boolean doPost = Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
                 rcp.setStARAPInvoiceID(null);
            }

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));

            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                applicator.setCode('B', rcp.getStCostCenterCode());

                if(rcp.getStEntityID()!=null){
                    final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                    applicator.setCode('Y', entityGLCode);

                    applicator.setDesc("Y",rcp.getEntity().getStShortName());

                    if(entityGLCode.equalsIgnoreCase("00000"))
                        applicator.setDesc("Y","");
                }else{
                    applicator.setCode('Y', "00000");
                    applicator.setDesc("Y","");
                }

                // AR DR vs bank CR

                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.setStSummaryFlag("Y");
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/

                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();


                //POSTING JURNAL HEADER RECEIPT VIEW
                if(!bentukHutangOnly){
                      if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl3.getInvoice()==null)
                                jurnalHead = false;

                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));

                        String accountID = null;
                        if(rcp.getStAccountEntityID()!=null){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");
                            applicator.setCode('B', rl3.getInvoice().getStCostCenterCode());
                            accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }

                        head.setStAccountIDNotNull(accountID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);
                        head.setLgHeaderAccountID(Long.valueOf(accountID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());


                        String desc1 = "";

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                            if(rl.getStInvoiceNo()!=null) desc1 = rl.getStInvoiceNo();

                            head.setStDescription("TERIMA PEMBAYARAN "+ desc1);
                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                        } else {
                            head.setStDescription("TERIMA "+rcp.getDetails().size()+" PEMBAYARAN");
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                        }

                        if(rl3.getInvoice()!=null)
                            head.setStPolicyNo(rl3.getInvoice().getStAttrPolicyNo());

                        if(jurnalHead)
                            journal.add(head);

                    }
                }

                //END POSTING JURNAL HEADER RECEIPT VIEW

                boolean moreThan1Policy = rcp.getDetails().size()>1;

              if(!bentukHutangOnly)
              { // POSTING JURNAL PELUNASAN RECEIPT LINES / DETAIL
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl.getInvoice()==null)
                                jurnalHead = false;

                    if(rl.getInvoice()!=null){
                        applicator.setCode('X', rl.getInvoice().getPolicyType().getStGLCode());
                        applicator.setDesc("X", rl.getInvoice().getPolicyType().getStShortDescription());
                    }

                    if (rl.isDelete()) continue;

                    if(moreThan1Policy){
                        if (rc.isBank() && !rl.isGL()) {
                            final JournalView head = gl.copy();

                            //head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            String accountID = null;
                            if(rcp.getStAccountEntityID()!=null){
                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");
                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                            }

                            head.setStAccountIDNotNull(accountID,"Invalid or empty account in payment method ");
                            head.setLgHeaderAccountID(Long.valueOf(accountID));
                            head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                            String descHead = "";
                            if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();
                            head.setStDescription("TERIMA PEMBAYARAN "+descHead);
                            head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                            if(rl.getStInvoiceID()!=null){
                                head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            if(jurnalHead)
                                journal.add(head);

                        }
                    }

                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excessBank = gl.copy();

                        BigDecimal amt = BDUtil.mul(negator,rl.getDbExcessAmount());
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        String accountID = null;

                        if (rcp.getDetails().size() > 1){
                            //ADD JURNAL BANK NYA

                            excessBank.setDbAutoCredit(amt);

                            
                            if(rcp.getStAccountEntityID()!=null){
                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                            }

                            excessBank.setStAccountIDNotNull(accountID,"Invalid or empty account in excess account "+xc.getStDescription());
                            excessBank.setLgHeaderAccountID(Long.valueOf(accountID));
                            excessBank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                            excessBank.setStDescription(rl.getStExcessDescription());
                            excessBank.setStCurrencyCode(rcp.getStCurrencyCode());
                            excessBank.setDbCurrencyRate(rcp.getDbCurrencyRate());
                            //excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getStInvoiceID()!=null){
                                    excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                excessBank.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(excessBank);
                            //END JURNAL BANK
                        }


                        final JournalView excess = gl.copy();

                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());
                        excess.setLgHeaderAccountID(Long.valueOf(accountID));
                        excess.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());

                        if(rl.getInvoice()!=null) excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        if(rl.getStInvoiceID()!=null){
                                excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        }

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);

                    }


                    final JournalView line = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    //POSTING LINE
                    boolean bayarTanpaPremi = false;
                    BigDecimal totalBayarTanpaPremi = null;


                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();

                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);

                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                String comAccount ="";

                                if(rcInvoiceDetail!=null){
                                    if(rcInvoiceDetail.getEntity()!=null){
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                    }if(rcInvoiceDetail.getStEntityID()==null){
                                        applicator.setCode('P', "00000");
                                    }
                                }

                                if (rccom.isDelete()) continue;

                                boolean dontJurnal = false;
                                boolean isKomisi = false;

                                if(rcInvoiceDetail!=null){
                                    dontJurnal = rcInvoiceDetail.isPolicyCost2() || rcInvoiceDetail.isDiscount2() ||
                                                     rcInvoiceDetail.isStampDuty2() || rcInvoiceDetail.isTaxComm() ||
                                                     rcInvoiceDetail.isTaxBrok() || rcInvoiceDetail.isTaxHFee();
                                    isKomisi = rcInvoiceDetail.isCommission2() || rcInvoiceDetail.isBrokerage2() || rcInvoiceDetail.isHandlingFee2() || rcInvoiceDetail.isPPN() || rcInvoiceDetail.isPPNFeebase();

                                    //PENGECEKAN TAGIHAN TANPA PREMI BRUTO
                                    if(rccom.getInvoice().getPolicy()!=null){
                                        if(BDUtil.isZeroOrNull(rccom.getInvoice().getPolicy().getDbPremiTotal())){
                                            if(!rcInvoiceDetail.isPremiGross2()){
                                                 bayarTanpaPremi = true;
                                                 totalBayarTanpaPremi = BDUtil.add(totalBayarTanpaPremi, rccom.getDbInvoiceAmount());
                                            }

                                        }
                                    }

                                }

                                String accountID = null;
                                if(rcp.getStAccountEntityID()!=null){
                                    applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                    accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                }

                                if(isKomisi && rccom.isCheck()) continue;

                                if(dontJurnal) {
                                }else{

                                    final JournalView comline = gl.copy();

                                    BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                    amount = BDUtil.mul(amount, rccom.getDbCurrencyRate(),2);

                                    //final BigDecimal taxamt = BDUtil.mul(negator,rccom.getDbOutstandingAmount());

                                    applicator.setCode('B', rl.getInvoice().getStCostCenterCode());

                                    
                                    if(rcInvoiceDetail!=null){
                                        if(rcInvoiceDetail.isComm()){
                                            comAccount = accountID;
                                        }else{
                                            //comAccount = rcp.getStAccountID();
                                            comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                        }

                                        if(isKomisi){
                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                        }

                                        String accountDescPremiG = null;
                                        if(rcInvoiceDetail.isPremiGross2()){

                                            if(getEntity(rccom.getInvoice().getStEntityID())!=null)
                                                applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                            else
                                                applicator.setCode('Y', "00000");

                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                            accountDescPremiG = applicator.getStGLDesc();
                                            //amount = rccom.getInvoice().getDbAmount();
                                            amount = rccom.getInvoice().getTotalTagihanNetto();
                                        }

                                        if(rcInvoiceDetail.isUangMukaPremi()){
                                            comAccount = rcInvoiceDetail.getStGLAccountID();
                                            comline.setStDescription("Pembayaran " + rccom.getStDescription());
                                            amount =  BDUtil.mul(negator,amount);
                                        }

                                        if(rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoDebit(amount);
                                        }else if(!rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoCredit(amount);
                                        }
                                    }else{
                                        comAccount = rl.getStAccountID();

                                        if(comAccount==null)  comAccount = accountID;

                                        if(rl.getListTitipan().size() > 0){
                                            ARReceiptLinesView rlTitipan = (ARReceiptLinesView) rl.getListTitipan().get(0);
                                            TitipanPremiView titipanPremi = getTitipanPremi(rlTitipan.getStTitipanPremiID());

                                            comAccount = titipanPremi.getStAccountID();
                                        }

                                        comline.setStDescription(rccom.getStDescription());
                                        comline.setDbAutoDebit(amount);
                                    }

                                    comline.setStAccountIDNotNull(comAccount,"Invalid account "+ comline.getStDescription()+ " in AP_COMM_ACRUAL parameters ("+rccom.getStReceiptLinesID()+": "+rccom.getStReceiptID()+" : "+ amount +")" );
                                    comline.setLgHeaderAccountID(Long.valueOf(accountID));
                                    comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    String referenceDesc = "";

                                    if(detil!=null){
                                        if(detil.getStRefInvoiceDetailID()!=null){
                                            referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                            if(referenceARInvoiceDetail!=null) referenceDesc = referenceARInvoiceDetail.getStDescription();
                                        }
                                    }

                                    comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());

                                    if(rcInvoiceDetail!=null){
                                        if(rcp.getArapinvoice().isAP())
                                            comline.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    }

                                    if(rcInvoiceDetail!=null){
                                        if(rcInvoiceDetail.isPremiGross2()){
                                            comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        }
                                    }

                                    comline.setStCurrencyCode(rl.getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getDbCurrencyRate());
                                    if(rl.getPolicy()!=null)
                                        comline.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        comline.setDtApplyDate(rccom.getDtReceiptDate());
                                    }

                                    if(rcp.isJournalOffset()){

                                        String accountHeaderID = null;
                                        if(rcp.getStAccountEntityID()!=null){
                                            applicator.setCode('Y', "00001");
                                            applicator.setCode('G', "00001");
                                            applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                            accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                        }
                                        comline.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                        comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());
                                    }

                                    if(jurnalHead)
                                        journal.add(comline);

                                }
                            }
                        }
                    }//END

                    //POSTING JURNAL PAJAK
                    //REMARK THIS KALAU PAKE ACRUAL BASES
                    String accountID = null;
                    if(rcp.getStAccountEntityID()!=null){
                        applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                        accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                    }

                        if (rl.isInvoice()) {
                            final DTOList detail = rl.getDetails();

                            if (detail.size()>0) {
                                for (int j = 0; j < detail.size(); j++) {
                                    ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);

                                    final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                    if (!rccom.isComission()) continue;

                                    if(!rcInvoiceDetail.isTax()) continue;

                                    if (rccom.isDelete()) continue;

                                    boolean parentLunas = false;

                                    if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                        final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                        for (int k = 0; k < detail.size(); k++) {
                                            ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                            if (!d2.isComission()) continue;

                                            ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                            if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                                 if(d2.isCheck()){//lunas komisi
                                                     parentLunas = true;
                                                     if(rcInvoiceDetail.getEntity()!=null)
                                                            applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                                     else
                                                            applicator.setCode('P', "00000");
                                                 }else{
                                                     if(rcInvoiceDetail2.getEntity()!=null)
                                                            applicator.setCode('P', rcInvoiceDetail2.getEntity().getStGLCode());
                                                     else
                                                            applicator.setCode('P', "00000");
                                                 }
                                            }

                                        }
                                    }

                                    final JournalView comline1 = gl.copy();

                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                    comamt = BDUtil.mul(comamt, rccom.getDbCurrencyRate(),2);

                                    if(rcInvoiceDetail.isNegative()){
                                        comline1.setDbAutoDebit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline1.setDbAutoCredit(comamt);
                                    }

                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();

                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());

                                    String referenceDesc = "";
                                    ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"HUTANG ";
                                    }

                                    //String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));

                                    String account = rl.getInvoice().getStGLARAccountID();

                                    comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                    comline1.setStDescription(paymentDesc);
                                    comline1.setStDescription(referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline1.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getInvoice().getPolicy().isTaxAcrualBases()){
                                        final AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rl.getInvoice().getStGLARAccountID());
                                        comline1.setStDescription(account2.getStDescription());
                                    }

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        comline1.setDtApplyDate(rccom.getDtReceiptDate());
                                    }

                                    comline1.setLgHeaderAccountID(Long.valueOf(accountID));
                                    comline1.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                                    if(rcp.isJournalOffset()){

                                        String accountHeaderID = null;
                                        if(rcp.getStAccountEntityID()!=null){
                                            applicator.setCode('Y', "00001");
                                            applicator.setCode('G', "00001");
                                            applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                            accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                        }
                                        comline1.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                        comline1.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());
                                    }

                                    journal.add(comline1);

                                    //JIKA PAJAK DI CENTANG TAMBAH JURNAL BANK SAJA
                                    if(rccom.isCheck()){
                                        final JournalView comline2 = gl.copy();

                                        if(rcInvoiceDetail.isNegative()){
                                            comline2.setDbAutoCredit(comamt);
                                        }else if(!rcInvoiceDetail.isNegative()){
                                            comline2.setDbAutoDebit(comamt);
                                        }

                                        ARInvoiceDetailView detil2 = new ARInvoiceDetailView();

                                        detil2 = getARInvoiceDetail(rccom.getStInvoiceDetailID());

                                        referenceDesc = "";
                                        ARInvoiceDetailView referenceARInvoiceDetail2 = new ARInvoiceDetailView();
                                        if(detil2.getStRefInvoiceDetailID()!=null){
                                            referenceARInvoiceDetail2 = getARInvoiceDetailParent(detil2.getStRefInvoiceDetailID());
                                            referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"";
                                        }

                                        String account2 = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLApAccount());
                                        comline2.setStAccountIDNotNull(account2,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());

                                        String descHead = "";
                                        if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();

                                        //comline2.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                        comline2.setStDescription("TAGIHAN "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comline2.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                        comline2.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                        comline2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                        comline2.setLgHeaderAccountID(Long.valueOf(accountID));
                                        comline2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                            comline2.setDtApplyDate(rccom.getDtReceiptDate());
                                        }

                                        if(rcp.isJournalOffset()){

                                            String accountHeaderID = null;
                                            if(rcp.getStAccountEntityID()!=null){
                                                applicator.setCode('Y', "00001");
                                                applicator.setCode('G', "00001");
                                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                                accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                            }
                                            comline2.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                            comline2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());
                                        }

                                        journal.add(comline2);
                                    }
                                }
                            }
                        }


                    //END POSTING PAJAK

                    //CEK JIKA PEMBAYARAN TANPA PREMI BRUTO MAKA MASUKKAN ke pembayaran premi

                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();

                        if (detail.size()>0) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(0);

                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                String comAccount ="";

                                if(rcInvoiceDetail!=null){
                                    if(rcInvoiceDetail.getEntity()!=null){
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                    }if(rcInvoiceDetail.getStEntityID()==null){
                                        applicator.setCode('P', "00000");
                                    }
                                }

                                if (rccom.isDelete()) continue;

                                String accountID2 = null;
                                if(rcp.getStAccountEntityID()!=null){
                                    applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                    accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                }

                                    if(bayarTanpaPremi){
                                        final JournalView comline = gl.copy();

                                        BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                        if(rcInvoiceDetail!=null){
                                            if(rcInvoiceDetail.isComm()){
                                                comAccount = accountID2;
                                            }else{
                                                comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                            }

                                            String accountDescPremiG = null;

                                            if(getEntity(rccom.getInvoice().getStEntityID())!=null)
                                                    applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                            else
                                                    applicator.setCode('Y', "00000");

                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                            if(rcInvoiceDetail.getTrxLine().getStGLAccountWithoutPremi()!=null)
                                                comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccountWithoutPremi());

                                            accountDescPremiG = applicator.getStGLDesc();
                                            amount = BDUtil.mul(negator,rccom.getInvoice().getDbAmount());

                                            comline.setDbAutoDebit(amount);
                                        }

                                        comline.setStAccountIDNotNull(comAccount,"Invalid account "+ comline.getStDescription()+ " in AP_COMM_ACRUAL parameters ("+rccom.getStReceiptLinesID()+": "+rccom.getStReceiptID()+" : "+ amount +")" );
                                        comline.setLgHeaderAccountID(Long.valueOf(accountID2));
                                        comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                                        if(rcInvoiceDetail!=null){
                                                comline.setStDescription("TERIMA PREMI BRUTO "+ rl.getStInvoiceNo());
                                        }

                                        comline.setStCurrencyCode(rl.getStCurrencyCode());
                                        comline.setDbCurrencyRate(rl.getDbCurrencyRate());
                                        if(rl.getPolicy()!=null)
                                            comline.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                            comline.setDtApplyDate(rccom.getDtReceiptDate());
                                        }

                                        if(rcp.isJournalOffset()){

                                            String accountHeaderID = null;
                                            if(rcp.getStAccountEntityID()!=null){
                                                applicator.setCode('Y', "00001");
                                                applicator.setCode('G', "00001");
                                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                                accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                            }
                                            comline.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                            comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());
                                        }

                                        journal.add(comline);
                                    }
                        }
                    }
                    //END

                    //END CEK BIAYA POLIS DAN MATERAI

                    DTOList titipan = rl.getListTitipan();

                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);

                        ARReceiptLinesView indukTitipan = (ARReceiptLinesView) rl;
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiView titipanPremi = getTitipanPremi(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Akun titipan No Bukti : "+titipanPremi.getStTransactionNo() + " Account ID : "+ titipanPremi.getStAccountID() +" tidak ditemukan");

                        if(titipanPremi.getStDescription() != null)
                            jurnalTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiUsedAmount()));

                        /*
                        if(BDUtil.lesserThanEqual(rlTitipan.getDbTitipanPremiTotalAmount(), rl.getDbTotalAmountPerLine())){
                            jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiAmount()));
                        }else{
                            jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                        }*/



                        if(rl.getInvoice()!=null)
                            jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        if(indukTitipan.getStAccountID()!=null)
                            jurnalBankTitipan.setStAccountIDNotNull(indukTitipan.getStAccountID(),"Invalid or empty account in payment method ");

                        jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());

                        if(titipanPremi.getStDescription() != null)
                            jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalBankTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalBankTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalBankTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        if(rcp.isJournalOffset()){
                            
                            jurnalBankTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                            jurnalBankTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                            jurnalTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                            jurnalTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                        }

                        journal.add(jurnalBankTitipan);

                        journal.add(jurnalTitipan);
                    }



                    if (rl.isGL()) {

                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        if (neg) amt=BDUtil.negate(amt);

                        //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rlxc.getInvoice().getStAttrPolicyNo());

                        journal.add(excess);
                    }


                    //buat jurnal lawan AKP KANTOR PUSAT

                    String searchAccount="";

                    if(rcp.isJournalOffset()){
                            //if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                    final String entityGLCode = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                    applicator.setCode('Y', entityGLCode);
                                    applicator.setCode('G', entityGLCode);
                                    applicator.setCode('B', rcp.getStCostCenterCode());

//                                    if(rcp.isJournalOffset()){
//                                        searchAccount = "122100000100";
//                                    }

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    akp.setStTransactionNo(rcp.getStReceiptNo());
                                    akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount3),"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN PREMI "+ rl.getInvoice().getStAttrPolicyNo());

                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }


//                                    applicator.setCode('Y', "00001");
//                                    applicator.setCode('G', "00001");
//                                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());
//
//                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    akp.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp2.setStTransactionNo(rcp.getStReceiptNo());
                                    akp2.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());



                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            //}
                    }

                    //BUAT JURNAL AKP KANTOR CABANG
                    if(rcp.isJournalOffset()){
                            //if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    akp.setStAccountIDNotNull(accountID2 ,"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN PREMI "+rl.getInvoice().getStAttrPolicyNo());
                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp2.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            //}
                    }

                }

            }

                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);

                 //BUAT HUTANG PIUTANG PIHAK KETIGA (HUTANG KOMISI, BROKERFEE, HFEE JIKA BELUM DI BAYAR)
              if(!jurnalOnly)
              {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    final ARInvoiceView actInvoice = rcl.getInvoice();

                    final DTOList detail = rcl.getDetails();

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();

                            if(rcInvoiceDetail==null) continue;

                            if(rcInvoiceDetail.isTax()) continue;

                            if(!rcc.isCheck()){

                                BigDecimal selisih = BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())?rcc.getDbOutstandingAmountAct():BDUtil.mul(rcc.getDbOutstandingAmountAct(),new BigDecimal(-1));


                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;

                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();

                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();

                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());

                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");

                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }


                                if((rcInvoiceDetail.isComission()||rcInvoiceDetail.isPPNFeebase())&&!rcInvoiceDetail.isTax()){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                    if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                        invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                        invoice.setStInvoiceType("AR");
                                    }
                                }

                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }


                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());

                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");

                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }


                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());

                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }

                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());

                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());

                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                                if(rcInvoiceDetail.isPPNFeebase())
                                    invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));

                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                                invoice.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                invoice.setDbEnteredAmount(rcc.getDbInvoiceAmount());


                                final DTOList ivdetails = new DTOList();

                                invoice.setDetails(ivdetails);

                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {

                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                        ivd.markNew();

                                        ivdetails.add(ivd);

                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                        ivd.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                        ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    }
                                }

                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());

                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );

                                    {

                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);

                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();

                                            ivdChild.markNew();

                                            ivdetails.add(ivdChild);

                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());

                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbEnteredAmount());
                                            ivdChild.setDbAmount(BDUtil.mul(childInvoiceDetailCek.getDbEnteredAmount(), actInvoice.getDbCurrencyRate(),2));
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                            ivdChild.setStRefID1(childInvoiceDetailCek.getStARInvoiceDetailID());
                                            ivdChild.setStRootID(childInvoiceDetailCek.getStARInvoiceDetailID());
                                        }
                                    }
                                }

                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }

                        }

                    }
                }
            }

            //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK JIKA KOMISI DI BAYAR
            //REMARK THIS KALAU PAKE METODE ACRUAL BASES
            if(!jurnalOnly)
            {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    final ARInvoiceView actInvoice = rcl.getInvoice();

                    if(taxAcrualBases) continue;

                    final DTOList detail = rcl.getDetails();

                    boolean parentLunas = false;

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();

                            if(rcInvoiceDetail==null) continue;

                            if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                parentLunas = false;
                                final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                for (int k = 0; k < detail.size(); k++) {
                                    ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                    ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                    if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                         if(d2.isCheck())
                                             parentLunas = true;

                                    }

                                }
                            }


                            if(!rcInvoiceDetail.isTax()) continue;

                            final BigDecimal comamt = rcc.getDbInvoiceAmount();

                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();

                            if(!parentLunas) continue;

                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();

                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();

                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");

                            if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                            }

                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());

                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");

                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }

                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());

                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }

                            String jenis = rcInvoiceDetail.getTrxLine().getStItemDesc().toUpperCase().startsWith("PPH21")?"PPH21":"PPH23";

                            invoice.setStNoSuratHutang(
                                "SHP/"+
                                jenis +
                                "/" +
                                invoice.getStARCustomerID()+
                                "/"+
                                invoice.getStCostCenterCode()+
                                "/"+
                                DateUtil.getMonth2Digit(rcp.getDtReceiptDate())+
                                "/"+
                                DateUtil.getYear(rcp.getDtReceiptDate()));


                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                            invoice.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                            invoice.setDbEnteredAmount(comamt);


                            final DTOList ivdetails = new DTOList();

                            invoice.setDetails(ivdetails);


                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );

                            {

                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();

                                    ivd.markNew();

                                    ivdetails.add(ivd);

                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                    ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                }
                            }

                                    invoice.recalculate2();

                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);

                        }
                    }

                }
            }
                //end hutang pajak

            //UPDATE SISA TITIPAN
            //if(!jurnalOnly){
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    final DTOList titip = rl.getListTitipan();
                    for (int j = 0; j < titip.size(); j++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);

                        updateAndCreateTitipanPremi(S,rcp,rlTitipan,rlTitipan.getStTitipanPremiID());
                    }
                }

            //AUTO BENTUK TITIPAN PREMI ATAS SISA PREMI
            if(!jurnalOnly)
            {
                if(rcp.getStARSettlementID().equalsIgnoreCase("1") || rcp.getStARSettlementID().equalsIgnoreCase("25") ||
                   rcp.getStARSettlementID().equalsIgnoreCase("38") || rcp.getStARSettlementID().equalsIgnoreCase("44")){
                    for (int i = 0; i < combined.size(); i++) {
                        ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                        final ARInvoiceView actInvoice = rcl.getInvoice();

                        if(actInvoice!=null){
                            InsurancePolicyView pol = actInvoice.getPolicy();

                            if(pol!=null){

                                if(pol.getStPolicyTypeID().equalsIgnoreCase("87") || pol.getStPolicyTypeID().equalsIgnoreCase("88")){

                                    if (pol.isStatusPolicy() || pol.isStatusEndorse()){

                                        final DTOList objects = pol.getObjects();

                                        for (int j = 0; j < objects.size(); j++) {
                                            InsurancePolicyObjectView object = (InsurancePolicyObjectView) objects.get(j);

                                            InsurancePolicyObjDefaultView obj = (InsurancePolicyObjDefaultView) object;

                                            if(obj.getStReference27()!=null){

                                                //jika dibayar sekaligus, sisa nya bentuk titipan premi, jika tidak maka tidak usah bentuk titipan ?

                                                if(obj.getStReference27().equalsIgnoreCase("1")){
                                                    createTitipanPremi(pol, object, rcp);
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
            }
 
            }

            S.store(rcp);

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
 }

    public void savePembayaranKomisiSentralisasi(ARReceiptView rcp) throws Exception {
        rcp.validate();

        boolean jurnalOnly = false;

        final SQLUtil S = new SQLUtil();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());

        try {
            if (rcp.isNew()){
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }

            if(rcp.isNew()){
                rcp.generateReceiptNo();

                rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            }

            if(!rcp.isNew())
                if(rcp.getStReceiptNo2()==null)
                    rcp.setStReceiptNo2(rcp.generateReceiptNo2());

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                    rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStRootID());


                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclsub.isCheck())
                            if(rclsub.getInvoiceDetail()!=null)
                                rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);
                //}

                //if (rcl.getListTitipan().size()>0) {
                    final DTOList subTitipan = rcl.getListTitipan();

                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);

                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo2());

                        if(rclTitipan.isCheck())
                            if(rclTitipan.getInvoiceDetail()!=null)
                                rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclTitipan.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclTitipan.isNew())
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subTitipan);//simpan ke receipt lines
                //}
            }

            S.store(rcp.getNotes());

            S.store(gLs);

            S.store(details);

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            //final boolean doPost = Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
                 rcp.setStARAPInvoiceID(null);
            }

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));



            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                String entityGLCode = "00000";

                if(rcp.getStEntityID()!=null)
                    entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                if(rcp.getEntity()!=null)
                    applicator.setDesc("Y",rcp.getEntity().getStShortName());

                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");

                // AR DR vs bank CR

                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                if(rcp.getSettlement().isAR()) negator = BDUtil.one;

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.setStSummaryFlag("Y");
                gl.markNew();

                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();

                String accountID = null;

                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );

                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                        //accountID = null;
                        if(rcp.getStAccountEntityID()!=null){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");
                            applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                            accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }

                        head.setStAccountIDNotNull(accountID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);
                        head.setLgHeaderAccountID(Long.valueOf(accountID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                        if (rcp.getDetails().size()==1) {
                            
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());

                            if(rl.getInvoice()!=null)
                                head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                        } else {
                            head.setStDescription("PEMBAYARAN "+rcp.getDetails().size()+" INVOICES");
                        }

                        journal.add(head);
                    }

                boolean moreThan1Policy = rcp.getDetails().size()>1;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if(rl.getInvoice()!=null){
                        applicator.setCode('X', rl.getInvoice().getPolicyType().getStGLCode());
                        applicator.setDesc("X", rl.getInvoice().getPolicyType().getStShortDescription());
                    }

                    if (rl.isDelete()) continue;

                    final JournalView line = gl.copy();

                    //final JournalView headLine = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    boolean pajakCentang = true;
                    //accountID = null;

                    if(moreThan1Policy){
                         if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );

                            
                            if(rcp.getStAccountEntityID()!=null){
                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");
                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                            }

                            head.setStAccountIDNotNull(accountID,"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("PEMBAYARAN "+rl.getStInvoiceNo());
                            head.setLgHeaderAccountID(Long.valueOf(accountID));
                            head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                            if(rl.getInvoice()!=null)
                                head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(head);
                        }
                    }

                    if (rl.isInvoice()) {

                        final DTOList comissionList = rl.getDetails();
                        BigDecimal komisiBruto = null;

                        final JournalView lineDetail = gl.copy();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            if(rcInvoiceDetail!=null){
                                if(rcInvoiceDetail.isTaxBrok()||rcInvoiceDetail.isTaxComm()||rcInvoiceDetail.isTaxHFee())
                                    if(!det.isCheck())
                                        pajakCentang = false;
                            }

                            komisiBruto = BDUtil.add(komisiBruto, BDUtil.mul(det.getDbInvoiceAmount(), rl.getDbCurrencyRate(),2));

                            if(det.getDtReceiptDate()!=null){
                                lineDetail.setDtApplyDate(det.getDtReceiptDate());
                            }

                            if(rcInvoiceDetail!=null){
                                if(!rcInvoiceDetail.isTaxBrok()&&!rcInvoiceDetail.isTaxComm()&&!rcInvoiceDetail.isTaxHFee()){

                                    if(rcInvoiceDetail.getEntity()!=null){
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                        applicator.setCode('Y', rcInvoiceDetail.getEntity().getStGLCode());
                                    }

                                    if(rcInvoiceDetail.getEntity()==null){
                                        applicator.setCode('P', rl.getInvoice().getEntity().getStGLCode());
                                        applicator.setCode('Y', rl.getInvoice().getEntity().getStGLCode());
                                    }
                                        

                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                    applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                    
                                    lineDetail.setDbAutoDebit(amt2);
                                    lineDetail.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rl.getInvoice().getStInvoiceType())),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription()!=null?rl.getInvoice().getStDescription():rl.getInvoice().getStInvoiceNo());
                                    lineDetail.setStDescription("PEMBAYARAN "+rcInvoiceDetail.getStDescription());
                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                    lineDetail.setLgHeaderAccountID(Long.valueOf(accountID));
                                    lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                                }
                            }else{
                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());
                                    //amt2 = BDUtil.mul(amt2, rl.getDbCurrencyRate(),2);

                                    lineDetail.setDbAutoDebit(amt2);
                                    lineDetail.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in invoice ");
                                    lineDetail.setStDescription(det.getStDescription());
                                    lineDetail.setStCurrencyCode(rcp.getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rcp.getDbCurrencyRate());
                                    lineDetail.setLgHeaderAccountID(Long.valueOf(accountID));
                                    lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());
                            }

                        }

                         journal.add(lineDetail);

                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {

                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        if (neg) amt=BDUtil.negate(amt);

                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rlxc.getInvoice().getStAttrPolicyNo());

                        journal.add(excess);
                    }

                    //add jurnal selisih baru
                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excessBank = gl.copy();

                        BigDecimal amtXc = BDUtil.mul(negator,rl.getDbExcessAmount());
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amtXc=BDUtil.negate(amtXc);

                        if (rcp.getDetails().size() > 1){
                            //ADD JURNAL BANK NYA

                            excessBank.setDbAutoCredit(amtXc);
                            excessBank.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                            excessBank.setStDescription(rl.getStExcessDescription());
                            excessBank.setStCurrencyCode(rcp.getStCurrencyCode());
                            excessBank.setDbCurrencyRate(rcp.getDbCurrencyRate());
                            excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            if(rl.getStInvoiceID()!=null){
                                    excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                excessBank.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(excessBank);
                            //END JURNAL BANK
                        }


                        final JournalView excess = gl.copy();

                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amtXc);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        if(rl.getStInvoiceID()!=null){
                                excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        }

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);

                    }
                    //end here


                    final DTOList child = rl.getDetails();

                    for (int k = 0; k < child.size(); k++) {
                        ARReceiptLinesView rclDet = (ARReceiptLinesView) child.get(k);

                        ARInvoiceDetailView detail = (ARInvoiceDetailView) rclDet.getInvoiceDetail();

                        if(detail == null) continue;

                        if(!detail.isTax()) continue;
                        //put here

                        if(rl.getInvoice().getPolicy().isTaxAcrualBases()) continue;

                        applicator.setCode('P', detail.getEntity().getStGLCode());

                        //add jurnal beban pajak
                        if(rclDet.isCheck()){
                            final JournalView comlineBebanPajak = gl.copy();

                            BigDecimal comamt2 = BDUtil.mul(negator,detail.getDbAmount());
                            //comamt2 = BDUtil.mul(comamt2, rclDet.getDbCurrencyRate(),2);

                            comlineBebanPajak.setDbAutoDebit(comamt2);

                            comlineBebanPajak.setStAccountIDNotNull(applicator.getAccountID(detail.getTrxLine().getStGLApAccount()),"Invalid or empty account in payment method ");
                            comlineBebanPajak.setStDescription(rl.getStInvoiceNo());
                            comlineBebanPajak.setStDescription(comlineBebanPajak.getStDescription().replaceAll("HUTANG","BEBAN "+ detail.getStDescription()+" "));
                            comlineBebanPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                            comlineBebanPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                            comlineBebanPajak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            if(rclDet.getDtReceiptDate()!=null){
                                comlineBebanPajak.setDtApplyDate(rclDet.getDtReceiptDate());
                            }

                            journal.add(comlineBebanPajak);
                        }
                        //end add jurnal beban pajak

                        //add jurnal hutang pajak
                        final JournalView comlineHutangPajak = gl.copy();

                        BigDecimal comamtHutangPajak = BDUtil.mul(negator,detail.getDbAmount());

                        //comamtHutangPajak = BDUtil.mul(comamtHutangPajak, rclDet.getDbCurrencyRate(),2);

                        comlineHutangPajak.setDbAutoCredit(comamtHutangPajak);
                        //ARInvoiceDetailView detilHutangPajak = new ARInvoiceDetailView();

                        applicator.setCode('Y', detail.getEntity().getStGLCode());

                        comlineHutangPajak.setStAccountIDNotNull(applicator.getAccountID(detail.getTrxLine().getStGLArAccountByType("AP")),"Invalid or empty account in payment method ");
                        comlineHutangPajak.setStDescription(paymentDesc);
                        comlineHutangPajak.setStDescription(rl.getStInvoiceNo());
                        comlineHutangPajak.setStDescription(comlineHutangPajak.getStDescription().replaceAll("HUTANG", "HUTANG "+detail.getStDescription()+" "));
                        comlineHutangPajak.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        comlineHutangPajak.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        comlineHutangPajak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rclDet.getDtReceiptDate()!=null){
                            comlineHutangPajak.setDtApplyDate(rclDet.getDtReceiptDate());
                        }

                        journal.add(comlineHutangPajak);


                    }

                    final DTOList titipan = rl.getListTitipan();
                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);

                        ARReceiptLinesView indukTitipan = (ARReceiptLinesView) rl;
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiView titipanPremi = getTitipanPremi(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Invalid or empty account in payment method ");

                        if(titipanPremi.getStDescription()!=null)
                            jurnalTitipan.setStDescription("REALISASI "+ titipanPremi.getStDescription());
                        else 
                            jurnalTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalTitipan.setDbAutoDebit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiUsedAmount()));
                        jurnalTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        /*
                        if(BDUtil.biggerThanEqual(BDUtil.negate(rlTitipan.getDbTitipanPremiAmount()), rl.getDbTotalAmountPerLine()))
                            jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                        else
                            jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiAmount()));
                        */

                        if(rl.getInvoice()!=null)
                            jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rlTitipan.getDtReceiptDate()!=null){
                            jurnalTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        journal.add(jurnalTitipan);

                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        jurnalBankTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        if(indukTitipan.getStAccountID()!=null)
                            jurnalBankTitipan.setStAccountIDNotNull(indukTitipan.getStAccountID(),"Invalid or empty account in payment method ");

                        if(titipanPremi.getStDescription()!=null)
                            jurnalBankTitipan.setStDescription("REALISASI "+ titipanPremi.getStDescription());
                        else
                            jurnalBankTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        if(rlTitipan.getDtReceiptDate()!=null){
                            jurnalBankTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        journal.add(jurnalBankTitipan);
                    }

                    //buat jurnal lawan AKP KANTOR PUSAT

                    String searchAccount="";

                    if(rcp.isJournalOffset()){
                            //if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                    final String entityGLCode2 = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                    applicator.setCode('Y', entityGLCode2);
                                    applicator.setCode('G', entityGLCode2);
                                    applicator.setCode('B', rcp.getStCostCenterCode());

//                                    if(rcp.isJournalOffset()){
//                                        searchAccount = "122100000100";
//                                    }

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    akp.setStTransactionNo(rcp.getStReceiptNo());
                                    akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount3),"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN HUTANG KOMISI "+ rl.getInvoice().getStAttrPolicyNo());

                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    akp.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount3)));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount3)).getStAccountNo());

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR KOMISI "+ rl.getInvoice().getStAttrPolicyNo());
                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp2.setStTransactionNo(rcp.getStReceiptNo());
                                    akp2.setLgHeaderAccountID(Long.valueOf(applicator.getAccountID(searchAccount3)));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(applicator.getAccountID(searchAccount3)).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            //}
                    }

                    //BUAT JURNAL AKP KANTOR CABANG
                    if(rcp.isJournalOffset()){
                            //if(moreThan1Policy){
                                if (rc.isBank()) {
                                    final JournalView akp = gl.copy();
                                    akp.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    akp.setStAccountIDNotNull(accountID2 ,"Invalid or empty account in payment method ");
                                    akp.setStDescription("PEMBAYARAN HUTANG KOMISI "+rl.getInvoice().getStAttrPolicyNo());
                                    akp.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp);

                                    final JournalView akp2 = gl.copy();
                                    akp2.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    akp2.setStDescription(applicator.getStGLDesc() + " BYR KOMISI "+ rl.getInvoice().getStAttrPolicyNo());
                                    akp2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    akp2.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        akp2.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(akp2);
                                }
                            //}
                    }

                    if(!jurnalOnly){
                        final DTOList titip = rl.getListTitipan();
                        for (int j = 0; j < titip.size(); j++) {
                            ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);

                            updateAndCreateTitipanKomisi(S,rcp,rlTitipan,rlTitipan.getStTitipanPremiID());
                        }
                    }


                }

                //buat hutang pajak ke depkeu
                if(!jurnalOnly){
                    for (int i = 0; i < combined.size(); i++) {
                        ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                        if(rcl.getInvoice()==null) continue;

                        if(rcl.getInvoice().getPolicy().isTaxAcrualBases()) continue;

                        final ARInvoiceView actInvoice = rcl.getInvoice();

                        //bedain antara hutang komisi dan pajak pembayaran

                        //final DTOList comissionList = rcl.getDetails();

                        final DTOList actDetails = actInvoice.getDetails();

                        if (actDetails.size()>0) {

                            for (int j = 0; j < actDetails.size(); j++) {
                                ARInvoiceDetailView rcInvoiceDetail = (ARInvoiceDetailView) actDetails.get(j);

                                if(!rcInvoiceDetail.isTax()) continue;

                                final BigDecimal comamt = rcInvoiceDetail.getDbAmount();

                                //final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();

                                //boolean parentLunas = BDUtil.isZero(BDUtil.sub(parentInvoiceDetail.getDbEnteredAmount(),parentInvoiceDetail.getDbAmountSettled()));

                                // if(!parentLunas) continue;

                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();

                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+ rcInvoiceDetail.getStARInvoiceID());
                                invoice.setStRefID2(rcInvoiceDetail.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());
                                invoice.setStInvoiceNo(rcl.getStInvoiceNo());
                                invoice.setStInvoiceNo(invoice.getStInvoiceNo().replaceAll("HUTANG","HUTANG " + rcInvoiceDetail.getStDescription() +" "));
                                invoice.setStInvoiceType("AP");
                                if(actInvoice.getStInvoiceType().equalsIgnoreCase("AR")){
                                    invoice.setStInvoiceType("AR");
                                }
                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());
                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");

                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }

                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());

                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }

                                 String jenis = rcInvoiceDetail.getTrxLine().getStItemDesc().toUpperCase().startsWith("PPH21")?"PPH21":"PPH23";

                                invoice.setStNoSuratHutang(
                                    "SHP/"+
                                    jenis +
                                    "/" +
                                    invoice.getStARCustomerID()+
                                    "/"+
                                    invoice.getStCostCenterCode()+
                                    "/"+
                                    DateUtil.getMonth2Digit(rcp.getDtReceiptDate())+
                                    "/"+
                                    DateUtil.getYear(rcp.getDtReceiptDate()));

                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                //tes invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLExcessAccount()));
                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")));

                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                                //invoice.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                invoice.setDbAmount(comamt);
                                invoice.setDbEnteredAmount(comamt);


                                final DTOList ivdetails = new DTOList();

                                invoice.setDetails(ivdetails);


                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );

                                {

                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                        final ARInvoiceDetailView ivd = new ARInvoiceDetailView();

                                        ivd.markNew();

                                        ivdetails.add(ivd);

                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        ivd.setDbEnteredAmount(comamt);
                                        ivd.setDbAmount(comamt);
                                        //ivd.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                        ivd.setStTaxCode(rcInvoiceDetail.getStTaxCodeOnSettlement());
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setStTaxFlag("Y");
                                        ivd.setStRefID0(rcInvoiceDetail.getStRefID0());
                                        ivd.setStRootID(rcInvoiceDetail.getStRootID());
                                    }
                                }

                                        invoice.recalculate2();

                                        invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")));
                                        final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                        invoice.setStRefInvoiceID(refid);
                                        save(invoice);

                            }

                        }


                    }
                }


                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }

            S.store(rcp);

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }


    }

    public void getARReceiptForPrintingExcelKlaimCo(String rcid, String settlement) throws Exception {

        final DTOList l = EXCEL_KLAIMCO(rcid, settlement);

        SessionManager.getInstance().getRequest().setAttribute("RPT", l);

        EXPORT_KLAIMCO(settlement);
    }

    public DTOList EXCEL_KLAIMCO(String rcid, String settlement) throws Exception {
        final SQLAssembler sqa = new SQLAssembler();

        sqa.addSelect("f.status,f.create_who,d.cc_code,f.receipt_no,f.receipt_date,d.policy_date,d.cust_name,d.ccy_rate,"
                + "d.pol_no,d.dla_no,round(d.premi_total,0) as premi_total,round(d.premi_netto,0) as premi_netto,round(d.total_due,0) as total_due,"
                + "round(coalesce(d.nd_pcost,0),0) as nd_pcost,round(coalesce(d.nd_sfee,0),0) as nd_sfee,"
                + "(round(coalesce(d.nd_disc1,0),0) + round(coalesce(d.nd_disc2,0),0)) as nd_disc1,"
                + "(round(coalesce(d.nd_comm1,0),0) + round(coalesce(d.nd_comm2,0),0) + round(coalesce(d.nd_comm3,0),0) + round(coalesce(d.nd_comm4,0),0)) as nd_comm1,"
                + "(round(coalesce(d.nd_brok1,0),0) + round(coalesce(d.nd_brok2,0),0)) as nd_brok1,"
                + "(round(coalesce(d.nd_hfee,0),0)) as nd_hfee,"
                + "(round(coalesce(d.nd_taxcomm1,0),0) + round(coalesce(d.nd_taxcomm2,0),0) + round(coalesce(d.nd_taxcomm3,0),0) + round(coalesce(d.nd_taxcomm4,0),0)) as nd_taxcomm1,"
                + "(round(coalesce(d.nd_taxbrok1,0),0) + round(coalesce(d.nd_taxbrok2,0),0)) as nd_taxbrok1,"
                + "(round(coalesce(d.nd_feebase1,0),0) + round(coalesce(d.nd_feebase2,0),0)) as nd_feebase1,"
                + "(round(coalesce(d.nd_taxhfee,0),0)) as nd_taxhfee,"
                + "sum(getpremi2(e.item_class = 'PREMIG',round(a.amount,0))) as premi_co,"
                + "sum(getpremi2(e.item_class = 'PREMIG',round(a.amount_settled,0))) as premi_paid_co,"
                + "sum(getpremi2(e.category in ('BROKERAGE','HFEE','COMMISSION') and e.item_class in ('BROKCO','HFEECO','COMCO'),round(a.amount,0))) as comis_co,"
                + "sum(getpremi2(e.category in ('BROKERAGE','HFEE','COMMISSION') and e.item_class in ('BROKCO','HFEECO','COMCO'),round(a.amount_settled,0))) as ap_comis_co,"
                + "sum(getpremi2(e.item_class = 'CLAIMN',round(a.amount,0))) as claim_co,"
                + "sum(getpremi2(e.item_class = 'CLAIMN',round(a.amount_settled,0))) as claim_paid_co,"
                + "sum(getpremi2(e.category = 'PREMIG',round(a.amount_settled,0))) as premi_paid,"
                + "sum(getpremi2(e.category = 'STAMPDUTY',round(a.amount_settled,0))) as ap_sfee_p,"
                + "sum(getpremi2(e.category = 'PCOST',round(a.amount_settled,0))) as ap_pcost_p,"
                + "sum(getpremi2(e.category = 'DISC',round(a.amount_settled,0))) as ap_disc_p,"
                + "sum(getpremi2(e.category = 'HFEE' and e.item_class is null and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_hfee_p,"
                + "sum(getpremi2(e.category = 'BROKERAGE' and e.item_class is null and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_bfee_p,"
                + "sum(getpremi2(e.category = 'COMMISSION' and e.item_class = 'FEEBASE' and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_fbase_p,"
                + "sum(getpremi2(e.category = 'COMMISSION' and e.item_class is null and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_comis_p,"
                + "sum(getpremi2(e.category like 'TAX%' and a.f_comission = 'Y',round(a.amount_settled,0))) as ap_tax_p ");

        sqa.addQuery(
                " from ar_invoice_details a "
                + " inner join ar_receipt_lines b on b.ar_invoice_dtl_id = a.ar_invoice_dtl_id and b.commit_flag = 'Y' and b.check_flag = 'Y' "
                + " left join ar_invoice c on c.ar_invoice_id = a.ar_invoice_id "
                + " left join ins_policy d on d.pol_id = c.attr_pol_id "
                + " left join ar_trx_line e on e.ar_trx_line_id = a.ar_trx_line_id "
                + " left join ar_receipt f on f.ar_receipt_id = b.receipt_id "
                + " left join ent_master g on g.ent_id = d.entity_id  ");

        sqa.addClause("f.ar_settlement_id = ?");
        sqa.addPar(settlement);

        sqa.addClause("f.ar_receipt_id = ?");
        sqa.addPar(rcid);

        final String sql = sqa.getSQL() + " group by f.status,f.create_who,f.receipt_date,f.receipt_no,d.policy_date,"
                + "d.cust_name,d.cc_code,d.ccy_rate,d.pol_no,d.dla_no,d.premi_total,d.premi_netto,d.total_due,d.nd_pcost,"
                + "d.nd_sfee,d.nd_comm1,d.nd_comm2,d.nd_comm3,d.nd_comm4,d.nd_disc1,d.nd_disc2,d.nd_brok1,d.nd_brok2"
                + ",d.nd_hfee,d.nd_taxcomm1,d.nd_taxcomm2,d.nd_taxcomm3,d.nd_taxcomm4,d.nd_taxbrok1,d.nd_taxbrok2,"
                + "d.nd_taxhfee,d.nd_feebase1,d.nd_feebase2 order by f.receipt_date,f.receipt_no,d.pol_no ";

        final DTOList l = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class);

        SessionManager.getInstance().getRequest().setAttribute("RPT", l);

        return l;

    }

    public void EXPORT_KLAIMCO(String settlement) throws Exception {

        XSSFWorkbook wb = new XSSFWorkbook();

        //bikin sheet
        XSSFSheet sheet = wb.createSheet("realisasi");

        final DTOList list = (DTOList) SessionManager.getInstance().getRequest().getAttribute("RPT");

        BigDecimal TotalPremiBruto = null;
        BigDecimal TotalPremiNetto = null;
        BigDecimal TotalBiaMatPol = null;
        BigDecimal TotalComm = null;
        BigDecimal TotalTax = null;
        BigDecimal TotalPremiPaid = null;
        BigDecimal TotalCommPaid = null;
        BigDecimal TotalPremiNettoCoins = null;

        for (int i = 0; i < list.size(); i++) {
            HashDTO h = (HashDTO) list.get(i);

            if (!h.getFieldValueByFieldNameST("status").equalsIgnoreCase("POST")) {
                XSSFRow row1 = sheet.createRow(0);
                row1.createCell(0).setCellValue("SPECIMEN");
            }

            //bikin header
            XSSFRow row0 = sheet.createRow(2);
            row0.createCell(0).setCellValue("tgl bayar");
            row0.createCell(1).setCellValue("no bukti");
            row0.createCell(2).setCellValue("tgl polis");
            row0.createCell(3).setCellValue("no polis");
            row0.createCell(4).setCellValue("premi");
            row0.createCell(5).setCellValue("biaya adm");
            row0.createCell(6).setCellValue("tag bruto");
            row0.createCell(7).setCellValue("feebase");
            row0.createCell(8).setCellValue("diskon");
            row0.createCell(9).setCellValue("komisi");
            row0.createCell(10).setCellValue("pajak komisi");
            row0.createCell(11).setCellValue("premi netto");
            row0.createCell(12).setCellValue("premi dibayar");
            row0.createCell(13).setCellValue("komisi dibayar");
            row0.createCell(14).setCellValue("premi koas");
            row0.createCell(15).setCellValue("klaim koas");
            row0.createCell(16).setCellValue("tertanggung");
            row0.createCell(17).setCellValue("kurs");
            if (settlement.equalsIgnoreCase("14")) {
                row0.createCell(18).setCellValue("no LKP");
            }

            TotalTax = BDUtil.add(h.getFieldValueByFieldNameBD("nd_taxcomm1"), h.getFieldValueByFieldNameBD("nd_taxbrok1"));
            TotalTax = BDUtil.add(TotalTax, h.getFieldValueByFieldNameBD("nd_taxhfee"));

            TotalComm = BDUtil.add(h.getFieldValueByFieldNameBD("nd_comm1"), h.getFieldValueByFieldNameBD("nd_brok1"));
            TotalComm = BDUtil.add(TotalComm, h.getFieldValueByFieldNameBD("nd_hfee"));
            TotalComm = BDUtil.sub(TotalComm, TotalTax);

            TotalPremiBruto = BDUtil.add(h.getFieldValueByFieldNameBD("nd_pcost"), h.getFieldValueByFieldNameBD("nd_sfee"));
            TotalPremiBruto = BDUtil.add(TotalPremiBruto, h.getFieldValueByFieldNameBD("premi_total"));

            TotalBiaMatPol = BDUtil.add(h.getFieldValueByFieldNameBD("nd_pcost"), h.getFieldValueByFieldNameBD("nd_sfee"));

            TotalPremiNetto = BDUtil.add(h.getFieldValueByFieldNameBD("premi_netto"), TotalTax);

            TotalPremiPaid = BDUtil.add(h.getFieldValueByFieldNameBD("premi_paid"), h.getFieldValueByFieldNameBD("ap_sfee_p"));
            TotalPremiPaid = BDUtil.add(TotalPremiPaid, h.getFieldValueByFieldNameBD("ap_pcost_p"));
            TotalPremiPaid = BDUtil.sub(TotalPremiPaid, h.getFieldValueByFieldNameBD("ap_disc_p"));


            TotalCommPaid = BDUtil.sub(h.getFieldValueByFieldNameBD("ap_bfee_p"), h.getFieldValueByFieldNameBD("ap_hfee_p"));
            TotalCommPaid = BDUtil.sub(TotalCommPaid, h.getFieldValueByFieldNameBD("ap_fbase_p"));
            TotalCommPaid = BDUtil.sub(TotalCommPaid, h.getFieldValueByFieldNameBD("ap_comis_p"));
            TotalCommPaid = BDUtil.add(TotalCommPaid, h.getFieldValueByFieldNameBD("ap_tax_p"));

            TotalPremiNettoCoins = BDUtil.sub(h.getFieldValueByFieldNameBD("premi_co"), h.getFieldValueByFieldNameBD("comis_co"));

            XSSFRow row = sheet.createRow(i + 3);
            row.createCell(0).setCellValue(h.getFieldValueByFieldNameDT("receipt_date"));
            if (h.getFieldValueByFieldNameST("receipt_no") != null) {
                row.createCell(1).setCellValue(h.getFieldValueByFieldNameST("receipt_no"));
            }
            if (h.getFieldValueByFieldNameDT("policy_date") != null) {
                row.createCell(2).setCellValue(h.getFieldValueByFieldNameDT("policy_date"));
            }
            if (h.getFieldValueByFieldNameST("pol_no") != null) {
                row.createCell(3).setCellValue(h.getFieldValueByFieldNameST("pol_no"));
            }
            if (h.getFieldValueByFieldNameBD("premi_total") != null) {
                row.createCell(4).setCellValue(h.getFieldValueByFieldNameBD("premi_total").doubleValue());
            }
            if (TotalBiaMatPol != null) {
                row.createCell(5).setCellValue(TotalBiaMatPol.doubleValue());
            }
            if (TotalPremiBruto != null) {
                row.createCell(6).setCellValue(TotalPremiBruto.doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("nd_feebase1") != null) {
                row.createCell(7).setCellValue(h.getFieldValueByFieldNameBD("nd_feebase1").doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("nd_disc1") != null) {
                row.createCell(8).setCellValue(h.getFieldValueByFieldNameBD("nd_disc1").doubleValue());
            }
            if (TotalComm != null) {
                row.createCell(9).setCellValue(TotalComm.doubleValue());
            }
            if (TotalTax != null) {
                row.createCell(10).setCellValue(TotalTax.doubleValue());
            }
            if (h.getFieldValueByFieldNameBD("premi_netto") != null) {
                row.createCell(11).setCellValue(TotalPremiNetto.doubleValue());
            }
            if (TotalPremiPaid != null) {
                row.createCell(12).setCellValue(TotalPremiPaid.doubleValue());
            }
            if (TotalCommPaid != null) {
                row.createCell(13).setCellValue(TotalCommPaid.doubleValue());
            }
            if (TotalPremiNettoCoins != null) {
                row.createCell(14).setCellValue(TotalPremiNettoCoins.doubleValue());
            }
            if (TotalPremiNettoCoins != null) {
                row.createCell(15).setCellValue(h.getFieldValueByFieldNameBD("claim_co").doubleValue());
            }
            if (h.getFieldValueByFieldNameST("cust_name") != null) {
                row.createCell(16).setCellValue(h.getFieldValueByFieldNameST("cust_name"));
            }
            row.createCell(17).setCellValue(h.getFieldValueByFieldNameBD("ccy_rate").doubleValue());
            if (settlement.equalsIgnoreCase("14")) {
                if (h.getFieldValueByFieldNameST("dla_no") != null) {
                    row.createCell(18).setCellValue(h.getFieldValueByFieldNameST("dla_no"));
                }
            }
        }

        SessionManager.getInstance().getResponse().setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        SessionManager.getInstance().getResponse().setHeader("Content-Disposition", "attachment; filename=penerimaan_premi" + "_" + System.currentTimeMillis() + ".xlsx;");
        SessionManager.getInstance().getResponse().setHeader("Pragma", "token");
        ServletOutputStream sosStream = SessionManager.getInstance().getResponse().getOutputStream();

        wb.write(sosStream);
        sosStream.flush();
        sosStream.close();
    }


    public void savePembayaranKlaimSentralisasi(ARReceiptView rcp) throws Exception {
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());

        try {
            if (rcp.isNew()){
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }

            if(rcp.isNew())
                rcp.generateReceiptNo();

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();

            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));

            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);

                    //if(rcl.isAdvancePayment()){
                        if(rcl.getPolicy()!=null){
                            InsurancePolicyView pol = rcl.getPolicy();

                            pol.setDtClaimPaymentDate(rcl.getDtReceiptDate());
                            pol.setStReceiptNo(rcl.getStReceiptNo());
                            pol.setStPaymentNotes(rcl.getStReceiptNo());
                            pol.setStClaimPaymentUsedFlag("Y");
                            pol.markUpdate();
                            S.store(pol);
                        }
                    //}
                //}
            }

            S.store(rcp.getNotes());

            S.store(gLs);

            S.store(details);

            if(rcp.getDetails().size()==0){
                 deleteAllDetailClaim(rcp);
            }

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

                 /*
         ARInvoiceView iv = rcp.getArapinvoice();

         iv.recalculate();

         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }

         String invoiceID = save(iv);

         rcp.setStARAPInvoiceID(invoiceID);*/

            rcp.setStARAPInvoiceID(stARInvoiceID);

            String no_account = "00000";

            if(rcp.getAccounts()!=null)
                no_account = rcp.getAccounts().getStAccountNo().substring(5,10);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    no_account +
                    rcp.getStReceiptNo().substring(14,19));

            S.store(rcp);

            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {


                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                applicator.setDesc("Y",rcp.getEntity().getStShortName());

                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");

                if(rcp.getInvoice(stARInvoiceID)!=null){
                    applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());

                    applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                }

                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));

                final LookUpUtil lu = ListUtil.getLookUpFromQuery("select gl_account,gl_account from ar_trx_line where item_class ='ADVPAYMENT' and enabled_flag='Y'");
                final String uangMukaAccount = lu.getCode(0);

                // AR DR vs bank CR
                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                if(rcp.getSettlement().isAR()) negator = BDUtil.one;

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
                gl.setStSummaryFlag("Y");
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/

                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();

                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));

                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                        applicator.setCode('B', rl.getPolicy().getStCostCenterCode());
                        
                        String accountID = null;
                        if(rcp.getStAccountEntityID()!=null){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");

                            if(rl.getInvoice()!=null)
                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                            else
                                applicator.setCode('B', rl.getPolicy().getStCostCenterCode());
                            
                            accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }

                        AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                        String searchAccount3 = account3.getStAccountNo().substring(0,12);

                        head.setStAccountIDNotNull(accountID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        

                        if(rl.getDtReceiptDate()!=null){
                            head.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        head.setStDescription("Byr Klm "+rl.getStInvoiceNo());

                        if(rl.getInvoice()!=null){
                            head.setStDescription(head.getStDescription()+" "+ rl.getInvoice().getStRefID2()+ " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                        }else{
                            head.setStDescription(head.getStDescription()+" "+ rl.getStArInvoiceClaim()+ " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                        }

                        head.setStPolicyNo(rl.getPolicy().getStPolicyNo());
                        head.setLgHeaderAccountID(Long.valueOf(accountID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                        journal.add(head);
                    }

                boolean moreThan1Policy = rcp.getDetails().size()>1;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if (rl.isDelete()) continue;

                    final JournalView line = gl.copy();

                    final JournalView headLine = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());

                    if(moreThan1Policy){
                         if (rc.isBank()) {

                            InsurancePolicyView policy = rl.getPolicy();
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                            String accountID = null;
                            if(rcp.getStAccountEntityID()!=null){
                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");
                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                            }

                            head.setStAccountIDNotNull(accountID,"Invalid or empty account in payment method ");

                            AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                            String searchAccount3 = account3.getStAccountNo().substring(0,12);

                            //head.setStAccountIDNotNull(applicator.getAccountID(searchAccount3),"Invalid or empty account in payment method ");


                            head.setStDescription(paymentDesc);

                            if(rl.getInvoice()!=null){
                                if(rl.getInvoice().isAR())
                                    head.setStDescription("Trm "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                else
                                    head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());

                                if(rl.getInvoice().isAdjusterFee())
                                    head.setDbAutoCredit(amt);

                            }else{
                                head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                            }

                            head.setStPolicyNo(policy.getStPolicyNo());

                            if(rl.getStARSettlementExcessID()!=null){
                                if(rl.getStLineType()!=null){
                                    if(!rl.isGL()){
                                        head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.sub(rl.getDbTotalAmountPerLine(),rl.getDbExcessAmount())));
                                    }
                                }
                            }

                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            if(rcp.getStAccountEntityID()!=null){
                                applicator.setCode('Y', "00001");
                                applicator.setCode('G', "00001");
                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                            }

                            head.setLgHeaderAccountID(Long.valueOf(accountID));
                            head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());


                            journal.add(head);
                        }
                    }

                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        BigDecimal amtExc = BDUtil.mul(negator,rl.getDbExcessAmount());

                        if (neg) amtExc=BDUtil.negate(amtExc);

                        //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoCredit(amtExc);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                        if(rl.getDtReceiptDate()!=null){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);
                    }

                    boolean isNoKlaimGross = true;
                    if (rl.isInvoice()) {
                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            if(rcInvoiceDetail!=null){
                                if(rcInvoiceDetail.isClaimGross())
                                    isNoKlaimGross = false;
                            }
                        }
                    }

                    if (rl.isInvoice()) {

                        InsurancePolicyView policy = rl.getPolicy();
                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            final JournalView lineDetail = gl.copy();

                            if(rcInvoiceDetail!=null){
                                boolean isJournal = rcInvoiceDetail.isClaimGross() || rcInvoiceDetail.isUangMukaKlaim();

                                if(!isJournal) continue;

                                InsurancePolicyView policy2 = det.getPolicy();
                                applicator.setCode('Y',policy2.getEntity().getStGLCode());
                                applicator.setCode('X',policy2.getStPolicyTypeID());

                                if (det.getPolicy().getEntity()!=null)
                                    applicator.setDesc("Y",policy2.getEntity().getStShortName());

                                if (det.getPolicy().getEntity()!=null)
                                    applicator.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                if(rcInvoiceDetail.isClaimGross()){
                                    if(BDUtil.isZeroOrNull(amt2))
                                        amt2 = BDUtil.mul(negator,det.getDbInvoiceAmount());
                                }

                                lineDetail.setDbAutoDebit(amt2);
                                lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                if(rl.getInvoice().isAP())
                                    lineDetail.setStDescription("Byr "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                else
                                    lineDetail.setStDescription("Trm "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());


                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                if(rcInvoiceDetail.isUangMukaKlaim()){
                                    amt = BDUtil.mul(negator,det.getDbInvoiceAmount());
                                    lineDetail.setDbAutoCredit(amt);
                                    lineDetail.setStAccountIDNotNull(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccount()),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    //Byr Uang Muka Klaim LKP/03/20/1212/0330
                                    lineDetail.setStDescription("Byr " + rcInvoiceDetail.getTrxLine().getStItemDesc()+" "+ policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                }

                                if(det.getDtReceiptDate()!=null){
                                    lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                }

                                String accountID = null;
                                if(rcp.getStAccountEntityID()!=null){
                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                    accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                }

                                lineDetail.setLgHeaderAccountID(Long.valueOf(accountID));
                                lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());


                                journal.add(lineDetail);

                                //CEK PEMBAYARAN UANG MUKA KLAIM
                                boolean uangMukaKlaim = false;
                                BigDecimal uangMuka = null;
                                if(!BDUtil.isZeroOrNull(det.getInvoice().getPolicy().getDbClaimAdvancePaymentAmount())){
                                    uangMukaKlaim = true;
                                    uangMuka = det.getInvoice().getPolicy().getDbClaimAdvancePaymentAmount();
                                }
                                if(!BDUtil.isZeroOrNull(det.getInvoice().getPolicy().getParentPolicy().getDbClaimAdvancePaymentAmount())){
                                    uangMukaKlaim = true;
                                    uangMuka = det.getInvoice().getPolicy().getParentPolicy().getDbClaimAdvancePaymentAmount();
                                }
                            }else{

                                InsurancePolicyView policy2 = det.getPolicy();

                                gla.setCode('Y',policy2.getEntity().getStGLCode());
                                gla.setCode('X',policy2.getStPolicyTypeID());
                                gla.setCode('B',policy2.getStCostCenterCode());

                                if (det.getPolicy().getEntity()!=null)
                                    gla.setDesc("Y",policy2.getEntity().getStShortName());

                                if (det.getPolicy().getEntity()!=null)
                                    gla.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                String uangMukaAccountID = gla.getAccountID(uangMukaAccount);
                                lineDetail.setStAccountIDNotNull(uangMukaAccountID,"Invalid or empty account in uang muka klaim : ");
                                lineDetail.setStDescription("Byr "+det.getStDescription() +" "+ det.getStArInvoiceClaim()+ " " + policy2.getClaimObject().getStObjectDescriptionWithoutCounter());

                                lineDetail.setStCurrencyCode(det.getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(det.getDbCurrencyRate());
                                lineDetail.setStPolicyNo(det.getPolicy().getStPolicyNo());
                                lineDetail.setDbAutoDebit(det.getDbEnteredAmount());

                                if(det.getDtReceiptDate()!=null){
                                    lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                }

                                journal.add(lineDetail);
                            }


                        }

                        if(isNoKlaimGross){
                            final DTOList comissionList2 = rl.getDetails();

                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList2.get(0);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            final JournalView lineDetail = gl.copy();

                            if(rcInvoiceDetail!=null){

                                BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

//                                if(BDUtil.isZeroOrNull(amt2)){
//                                    amt2 = BDUtil.mul(negator,det.getDbInvoiceAmount());
//                                }

                                lineDetail.setDbAutoDebit(amt2);

                                if(rcInvoiceDetail.isAdjusterFee() || rcInvoiceDetail.isSurveyAdjFee())
                                    lineDetail.setDbAutoDebit(BDUtil.mul(negator,rl.getDbEnteredAmount()));

                                lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                if(rl.getInvoice().isAP())
                                    lineDetail.setStDescription("Byr Klm. "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());
                                else
                                    lineDetail.setStDescription("Trm Klm. "+rl.getPolicy().getStDLANo() + " "+ rl.getPolicy().getClaimObject().getStObjectDescriptionWithoutCounter());

                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                String accountID = null;
                                if(rcp.getStAccountEntityID()!=null){
                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                    accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                }

                                lineDetail.setLgHeaderAccountID(Long.valueOf(accountID));
                                lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());

                                if(det.getDtReceiptDate()!=null){
                                    lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                }

                                journal.add(lineDetail);

                            }
                        }


                        //TAMBAH JURNAL PAJAK JIKA ADJUSTER FEE
                        boolean jurnalAdjuster = true;
                        if(jurnalAdjuster){

                            for (int j = 0; j < comissionList.size(); j++) {
                                ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                                ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                                final JournalView lineDetail = gl.copy();

                                if(rcInvoiceDetail!=null){
                                    boolean isJournal = rcInvoiceDetail.isAdjusterFee() || rcInvoiceDetail.isSurveyAdjFee();

                                    if(!isJournal) continue;

                                    BigDecimal pajakAdjuster = null;

                                    //add jurnal bank
                                    if (rc.isBank()) {

                                            final DTOList claimItems = rl.getPolicy().getClaimItems();

                                            for (int k = 0; k < claimItems.size(); k++) {
                                                InsurancePolicyItemsView item = (InsurancePolicyItemsView) claimItems.get(k);

                                                if(!item.isAFee() && !item.isSurveyAFee()) continue;

                                                if(item.isAFee() || item.isSurveyAFee())
                                                    pajakAdjuster = BDUtil.mul(item.getDbTaxAmount(), rl.getInvoice().getDbCurrencyRate());
                                            }

                                            final JournalView head = gl.copy();
                                            head.setDbAutoDebit(BDUtil.mul(negator,pajakAdjuster));
                                            
                                            head.setStDescription(paymentDesc);

                                            if(rl.getInvoice()!=null){
                                                if(rl.getInvoice().isAR())
                                                    head.setStDescription("Trm "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                                else
                                                    head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                            }else{
                                                head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+ policy.getStDLANo()+ " "+ policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                            }

                                            head.setStPolicyNo(policy.getStPolicyNo());

                                            String accountID = null;
                                            if(rcp.getStAccountEntityID()!=null){
                                                applicator.setCode('Y', "00001");
                                                applicator.setCode('G', "00001");
                                                applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                                accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                            }

                                            head.setStAccountIDNotNull(accountID,"Invalid or empty account in payment method ");
                                            head.setLgHeaderAccountID(Long.valueOf(accountID));
                                            head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());


                                            if(rl.getDtReceiptDate()!=null){
                                                head.setDtApplyDate(rl.getDtReceiptDate());
                                            }

                                            journal.add(head);
                                    }
                                    //end jurnal bank

                                    //add jurnal 4893
                                    InsurancePolicyView policy2 = det.getPolicy();
                                    applicator.setCode('Y',policy2.getEntity().getStGLCode());
                                    applicator.setCode('X',policy2.getStPolicyTypeID());

                                    if (det.getPolicy().getEntity()!=null)
                                        applicator.setDesc("Y",policy2.getEntity().getStShortName());

                                    if (det.getPolicy().getEntity()!=null)
                                        applicator.setDesc("X",policy2.getPolicyType().getStShortDescription());

                                    BigDecimal amt2 = BDUtil.mul(negator,pajakAdjuster);

                                    lineDetail.setDbAutoCredit(amt2);
                                    lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());

                                    if(rl.getInvoice().isAP())
                                        lineDetail.setStDescription("Byr "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                    else
                                        lineDetail.setStDescription("Trm "+ rcInvoiceDetail.getStDescription()+ " " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());


                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(det.getDtReceiptDate()!=null){
                                        lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                    }

                                    String accountID = null;
                                    if(rcp.getStAccountEntityID()!=null){
                                        applicator.setCode('Y', "00001");
                                        applicator.setCode('G', "00001");
                                        applicator.setCode('B', rl.getInvoice().getStCostCenterCode());
                                        accountID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                                    }

                                    lineDetail.setLgHeaderAccountID(Long.valueOf(accountID));
                                    lineDetail.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID).getStAccountNo());


                                    journal.add(lineDetail);

                                }
                            }
                        //END JURNAL ADJUSTER
                      }


                        //buat jurnal lawan AKP KANTOR PUSAT

                        String searchAccount="";

                        //if(rcp.isJournalOffset())
                        {
                                //if(moreThan1Policy){
                                    if (rc.isBank()) {
                                        final JournalView akp = gl.copy();
                                        akp.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                        final String entityGLCode2 = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                        applicator.setCode('Y', entityGLCode2);
                                        applicator.setCode('G', entityGLCode2);
                                        applicator.setCode('B', rcp.getStCostCenterCode());


    //                                    if(rcp.isJournalOffset()){
    //                                        searchAccount = "122100000100";
    //                                    }

                                        AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                        akp.setStTransactionNo(rcp.getStReceiptNo());
                                        akp.setStAccountIDNotNull(applicator.getAccountID(searchAccount3),"Invalid or empty account in payment method ");
                                        akp.setStDescription("Byr Klm " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());

                                        akp.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                        if(rl.getDtReceiptDate()!=null){
                                            akp.setDtApplyDate(rl.getDtReceiptDate());
                                        }

//                                        applicator.setCode('Y', "00001");
//                                        applicator.setCode('G', "00001");
//                                        applicator.setCode('B', rl.getPolicy().getStCostCenterCode());
//
//                                        String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                        akp.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                        akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                                        journal.add(akp);

                                        final JournalView akp2 = gl.copy();
                                        akp2.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                        //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        //"210000000000 12"
                                        //0123456789012345
                                        String searchAccount2 = "210000000002";

                                        applicator.setCode('B', rcp.getStCostCenterCode());

                                        akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                        akp2.setStDescription(applicator.getStGLDesc() + " BYR KLM " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                        akp2.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                        akp2.setStTransactionNo(rcp.getStReceiptNo());
                                        akp2.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                        akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());



                                        if(rl.getDtReceiptDate()!=null){
                                            akp2.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(akp2);
                                    }
                                //}
                        }

                        //BUAT JURNAL AKP KANTOR CABANG
                        //if(rcp.isJournalOffset())
                        {
                                //if(moreThan1Policy){
                                    if (rc.isBank()) {
                                        final JournalView akp = gl.copy();
                                        akp.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                        AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        //122208934500 00
                                        //0123456789012345
                                        String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                        applicator.setCode('Y', "00001");
                                        applicator.setCode('G', "00001");
                                        applicator.setCode('B', rl.getPolicy().getStCostCenterCode());

                                        String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                        akp.setStAccountIDNotNull(accountID2 ,"Invalid or empty account in payment method ");
                                        akp.setStDescription("Byr Klm " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                        akp.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                        akp.setLgHeaderAccountID(Long.valueOf(accountID2));
                                        akp.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());


                                        if(rl.getDtReceiptDate()!=null){
                                            akp.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(akp);

                                        final JournalView akp2 = gl.copy();
                                        akp2.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                        //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                        //"210000000000 12"
                                        //0123456789012345
                                        String searchAccount2 = "210000000002";

                                        akp2.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                        akp2.setStDescription(applicator.getStGLDesc() + " BYR KLM " + policy.getStDLANo()+ " " + policy.getClaimObject().getStObjectDescriptionWithoutCounter());
                                        akp2.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                        akp2.setLgHeaderAccountID(Long.valueOf(accountID2));
                                        akp2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());


                                        if(rl.getDtReceiptDate()!=null){
                                            akp2.setDtApplyDate(rl.getDtReceiptDate());
                                        }

                                        journal.add(akp2);
                                    }
                                //}
                        }

                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        //line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());

                    }

                }

                //cek uang muka klaim
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    //final ARInvoiceView actInvoice = rcl.getInvoice();

                    final DTOList detail = rcl.getDetails();

                   // boolean parentLunas = false;

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                            if(rcc.isAdvancePayment()){

                                InsurancePolicyView klaim = rcc.getPolicy();
                                klaim.setDbClaimAdvancePaymentAmount(rcc.getDbEnteredAmount());
                                klaim.setStReceiptNo(rcp.getStReceiptNo());
                                klaim.markUpdate();
                                S.store(klaim);

                                //JIKA KLAIM LKP DAN SUDAH DISETUJUI
                                if(klaim.isStatusClaimDLA() && klaim.isEffective()){
                                    ARInvoiceView invoice = getARInvoiceByAttrPolIDAndTrxTypeID(klaim.getStPolicyID(),"12");

                                    if(invoice==null)
                                        invoice = getARInvoiceByAttrPolIDAndTrxTypeID(klaim.getStPolicyID(),"26");

                                    updateTagihanKlaimPanjar(invoice, rcp);

                                }

                            }
                        }
                    }
                }

                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }


        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }


    }


    public void savePembayaranInward(ARReceiptView rcp) throws Exception {
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B', rcp.getStCostCenterCode());
        gla.setCode('Y', rcp.getStEntityID());
        if (rcp.getStEntityID() != null) {
            gla.setDesc("Y", rcp.getEntity().getStEntityName());
        }

        try {
            if (rcp.isNew()) {
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));
            }

            if (rcp.isNew()) {
                rcp.generateReceiptNo();
            }

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod != null) {
                rcp.setStAccountID(paymentMethod.getStGLAccountID());
            }

            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            String stARInvoiceID = "";
            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew()) {
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                }

                if (rcl.isDelete()) {
                    rcl.setDbAmount(BDUtil.zero);
                }

                final DTOList subDetails = rcl.getDetails();

                for (int j = 0; j < subDetails.size(); j++) {
                    ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                    rclsub.setStReceiptID(rcp.getStARReceiptID());
                    rclsub.setStReceiptNo(rcp.getStReceiptNo());
                    rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                    if (rcl.getDtReceiptDate() != null) {
                        rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                    }

                    if (rclsub.isNew()) {
                        rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }
                }

                S.store(subDetails);

                if (rcl.getPolicy() != null) {
                    InsurancePolicyView pol = rcl.getPolicy();

                    pol.setDtPaymentDate(rcl.getDtReceiptDate());
                    pol.setStReceiptNo(rcl.getStReceiptNo());
                    pol.setStPaymentNotes(rcl.getStReceiptNo());
                    pol.markUpdate();
                    S.store(pol);
                }
            }

            S.store(rcp.getNotes());

            S.store(gLs);

            S.store(details);

            if (rcp.getDetails().size() == 0) {
                deleteAllDetail(rcp);
            }

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld == null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            String no_account = "00000";

            if (rcp.getAccounts() != null) {
                no_account = rcp.getAccounts().getStAccountNo().substring(5, 10);
            }

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0, 9)
                    + no_account
                    + rcp.getStReceiptNo().substring(14, 19));

            S.store(rcp);

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                applicator.setDesc("Y", rcp.getEntity().getStShortName());

                if (entityGLCode.equalsIgnoreCase("00000")) {
                    applicator.setDesc("Y", "");
                }

                if (rcp.getInvoice(stARInvoiceID) != null) {
                    applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());

                    applicator.setDesc("X", rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());
                }

                final LookUpUtil lu = ListUtil.getLookUpFromQuery("select gl_account,gl_account from ar_trx_line where item_class ='ADVPAYMENT' and enabled_flag='Y'");
                final String uangMukaAccount = lu.getCode(0);

                // AR DR vs bank CR
                BigDecimal negator = rcp.getSettlement().isAP() ? BDUtil.one : new BigDecimal(-1);

                if (rcp.getSettlement().isAR()) {
                    negator = BDUtil.one;
                }

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
                gl.setStSummaryFlag("Y");
                /*gl.setLgFiscalYear();
                gl.setLgPeriodNo();*/

                final String paymentDesc = "Payment No : " + rcp.getStReceiptNo();

                final DTOList journal = new DTOList();

                if (rcp.getDetails().size() == 1) {
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(BDUtil.mul(negator, rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(rcp.getStAccountID(), "Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                        if (rl.getDtReceiptDate() != null) {
                            head.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        head.setStDescription("Byr Inw " + rl.getStInvoiceNo());

                        journal.add(head);
                    }
                }

                boolean moreThan1Policy = rcp.getDetails().size() > 1;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if (rl.isDelete()) {
                        continue;
                    }

                    final JournalView line = gl.copy();

                    final JournalView headLine = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator, rl.getDbEnteredAmount());

                    if (moreThan1Policy) {
                        if (rc.isBank()) {

//                            InsurancePolicyView policy = rl.getPolicy();
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(BDUtil.mul(negator, rl.getDbTotalAmountPerLine()));
                            head.setStAccountIDNotNull(rcp.getStAccountID(), "Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);

                            head.setStDescription("Trm " + rl.getStInvoiceNo());

                            if (rl.getStARSettlementExcessID() != null) {
                                if (rl.getStLineType() != null) {
                                    if (!rl.isGL()) {
                                        head.setDbAutoCredit(BDUtil.mul(negator, BDUtil.sub(rl.getDbTotalAmountPerLine(), rl.getDbExcessAmount())));
                                    }
                                }
                            }

                            if (rl.getDtReceiptDate() != null) {
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(head);
                        }
                    }

                    if (rl.getStARSettlementExcessID() != null && !rl.isGL()) {
                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        BigDecimal amtExc = BDUtil.mul(negator, rl.getDbExcessAmount());

                        if (neg) {
                            amtExc = BDUtil.negate(amtExc);
                        }

                        //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amtExc);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(), "Invalid or empty account in excess account " + xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                        if (rl.getDtReceiptDate() != null) {
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);
                    }

                    if (rl.isInvoice()) {

//                        InsurancePolicyView policy = rl.getPolicy();
                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            final JournalView lineDetail = gl.copy();

                            if (rcInvoiceDetail != null) {
                                boolean isJournal = rcInvoiceDetail.isGrossPremium();

                                if (!isJournal) {
                                    continue;
                                }

                                BigDecimal amt2 = BDUtil.mul(negator, rl.getDbTotalAmountPerLine());

                                if (rcInvoiceDetail.isGrossPremium()) {
                                    if (BDUtil.isZeroOrNull(amt2)) {
                                        amt2 = BDUtil.mul(negator, det.getDbInvoiceAmount());
                                    }
                                }

                                lineDetail.setDbAutoDebit(amt2);
                                lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(), "Invalid or empty account in invoice : " + rl.getInvoice().getStDescription());

                                lineDetail.setStDescription("Byr " + rcInvoiceDetail.getStDescription() + " " + rl.getStInvoiceNo());

                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                if (det.getDtReceiptDate() != null) {
                                    lineDetail.setDtApplyDate(det.getDtReceiptDate());
                                }

                                journal.add(lineDetail);

                            }
                        }

                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(), "Invalid or empty account in invoice : " + rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR " + rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        //line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) {
                            amt = BDUtil.negate(amt);
                        }

                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc, "Invalid or empty account in excess account " + xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        //line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    }
                }

                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount() == null) {
                        throw new RuntimeException("Account not found ? : accoount=" + j.getLgAccountID() + ", line = " + j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }


        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

    public void updateNobukIzinCair(ARInvoiceView invoice, ARReceiptView rcp) throws Exception {

        final SQLUtil S = new SQLUtil();
        try {

            PreparedStatement P = S.setQuery("update ar_izin_pencairan_detail set receipt_no = ? where ar_invoice_id = ?");

            P.setObject(1, rcp.getStReceiptNo());
            P.setObject(2, invoice.getStARInvoiceID());

            int hasil = P.executeUpdate();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }
    }

public void savePembayaranInwardNew(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));

            if(rcp.isNew())
                rcp.generateReceiptNo();

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            String stARInvoiceID="";

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);//simpen ke receipt lines
                }
            }

            S.store(rcp.getNotes());//simpen note

            S.store(gLs);//excess

            S.store(details);//simpen receipt dr invoice



            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));

            S.store(rcp);

            if (doUnPost) {
                //getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                applicator.setDesc("Y",rcp.getEntity().getStShortName());

                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");

                //applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());

                //applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());


                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));


                // AR DR vs bank CR

                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                if(rcp.getSettlement().isAP()) negator = BDUtil.one;

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/

                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();

                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {

                        ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                        negator = rl.getInvoice().isAP()?BDUtil.one:new BigDecimal(-1);

                        final JournalView head = gl.copy();
                        
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        //JIKA PROFIT KOMISI
                        if(rl.getInvoice().getStARTransactionTypeID().equalsIgnoreCase("20")){
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        }else{
                            head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        }

                        if (rcp.getDetails().size()==1) {
                            //ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("Byr "+rl.getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        } else {
                            head.setStDescription("Byr "+rcp.getDetails().size()+" INVOICES");
                        }

                        journal.add(head);
                    }

                boolean moreThan1Policy = rcp.getDetails().size()>1;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if (rl.isDelete()) continue;

                    final JournalView line = gl.copy();

                    final JournalView headLine = gl.copy();

                    negator = rl.getInvoice().isAP()?BDUtil.one:new BigDecimal(-1);

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());

                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();

                            //JIKA PROFIT KOMISI
                            if(rl.getInvoice().getStARTransactionTypeID().equalsIgnoreCase("20")){
                                head.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                            }else{
                                head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));
                            }

                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("Byr Htg. R/A Prm. " + rl.getInvoice().getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            journal.add(head);
                        }
                    }

                    if (rl.isInvoice()) {

                        final DTOList comissionList = rl.getDetails();

                        //for (int j = 0; j < comissionList.size(); j++) {
                            //ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            //ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            /*
                            boolean jurnal = false;

                            //jika pembayaran inward
                            if(rcInvoiceDetail.isPremiGross2() && comissionList.size()>1){
                                jurnal = true;
                            }

                            //jika hanya klaim saja
                            if(comissionList.size()==1 && rcInvoiceDetail.isClaimReas()){
                               jurnal = true;
                            }

                            //jika hanya brokerfee saja
                            if(comissionList.size()==1 && rcInvoiceDetail.isBrokerage2()){
                               jurnal = true;
                            }

                            if(!jurnal) continue;
                             * */

                            //jurnal lawan nya
                            if(true){

                                final JournalView lineDetail = gl.copy();

                                BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                /*
                                if(rcInvoiceDetail.isPremiGross2()
                                    ||rcInvoiceDetail.isClaimReas() || rcInvoiceDetail.isBrokerage2()){
                                    lineDetail.setDbAutoDebit(amt2);
                                }else{
                                    lineDetail.setDbAutoCredit(amt2);
                                }*/


                                //JIKA PROFIT KOMISI
                                if(rl.getInvoice().getStARTransactionTypeID().equalsIgnoreCase("20")){
                                    lineDetail.setDbAutoCredit(amt2);
                                }else{
                                    lineDetail.setDbAutoDebit(amt2);
                                }

                                final ARTransactionLineView tl = getTrxLine("113");

                                String accode = tl.getStGLAccount();

                                applicator.setCode('B',"00");
                                applicator.setCode('C',rl.getInvoice().getStReferenceC0());
                                applicator.setCode('Y',rl.getInvoice().getEntity().getStGLCode());
                                applicator.setCode('X',rl.getInvoice().getPolicyTypeGLCode());

                                applicator.setDesc("C",rl.getInvoice().getStReferenceC1());
                                applicator.setDesc("D",rl.getInvoice().getStNoSuratHutang());
                                applicator.setDesc("M","");
                                applicator.setDesc("T","");
                                applicator.setDesc("A","");

                                final AccountView ac = glc.getAccountByAccountID(applicator.getAccountID(accode));

                                final JournalView jv1 = gl.copy();

                                applicator.getAccountID(accode);

                                if(ac!=null){
                                    lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                }else{
                                    lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    lineDetail.setStDescription("Byr " + glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID()).getStDescription());
                                }

                                //lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                lineDetail.setStDescription(lineDetail.getStDescription() + " " + rl.getInvoice().getStInvoiceNo());
                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                journal.add(lineDetail);
                            }


                        //}


                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());


                    } 

                }


                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

public void saveCashflowKlaim(ARCashflowView rcp) throws Exception {
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStEntityName());

        try {
            if (rcp.isNew()){
                rcp.setStARCashflowID(String.valueOf(IDFactory.createNumericID("ARCF")));
            }

            if(rcp.isNew())
                rcp.generateReceiptNo();

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            //rcp.setStExcessAccountID(getRemoteGeneralLedger().generateAccount(rc.getStExcessAccount(), rcp.getStCostCenterCode()));

            //rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            //final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            String stARInvoiceID="";
            for (int i = 0; i < combined.size(); i++) {
                ARCashflowDetailsView rcl = (ARCashflowDetailsView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStARCashflowID(rcp.getStARCashflowID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew())
                    rcl.setStARCashflowDetailID(String.valueOf(IDFactory.createNumericID("CFDTL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

            /*ARReceiptLinesView oldRCL = (ARReceiptLinesView) rcl.getOld();

            final BigDecimal amountDiff = BDUtil.sub(rcl.getDbAmount(), oldRCL.getDbAmount());
            final boolean invoiceDiffer = oldRCL==null || (!Tools.isEqual(oldRCL.getStInvoiceID(), rcl.getStInvoiceID()));

            if (!invoiceDiffer) {
               if (Tools.compare(amountDiff,BDUtil.zero)!=0)
                  updateBalance(rcl.getStInvoiceID(), amountDiff);
            } else {
               if (oldRCL.getStInvoiceID()!=null)
                  updateBalance(oldRCL.getStInvoiceID(), BDUtil.negate(oldRCL.getDbAmount()));
               updateBalance(rcl.getStInvoiceID(), rcl.getDbAmount());
            }*/

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARCashflowDetailsView rclsub = (ARCashflowDetailsView) subDetails.get(j);

                        rclsub.setStARCashflowID(rcp.getStARCashflowID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStARCashflowDetailID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if (rclsub.isNew())
                            rclsub.setStARCashflowDetailID(String.valueOf(IDFactory.createNumericID("CFDTL")));
                    }

                    S.store(subDetails);

                    //if(rcl.isAdvancePayment()){
                        if(rcl.getPolicy()!=null){
//                            InsurancePolicyView pol = rcl.getPolicy();
//
//                            pol.setDtClaimPaymentDate(rcl.getDtReceiptDate());
//                            pol.setStReceiptNo(rcl.getStReceiptNo());
//                            pol.setStPaymentNotes(rcl.getStReceiptNo());
//                            pol.setStClaimPaymentUsedFlag("Y");
//                            pol.markUpdate();
//                            S.store(pol);
                        }
                    //}
                //}
            }

            S.store(rcp.getNotes());

            S.store(gLs);

            S.store(details);

            if(rcp.getDetails().size()==0){
                 //deleteAllDetailClaim(rcp);
            }

            final ARCashflowView rcpOld = (ARCashflowView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

                 /*
         ARInvoiceView iv = rcp.getArapinvoice();

         iv.recalculate();

         if (iv.isUnModified()) {
            iv.markUpdate();
            iv.getDetails().markAllUpdate();
         }

         String invoiceID = save(iv);

         rcp.setStARAPInvoiceID(invoiceID);*/

            rcp.setStARAPInvoiceID(stARInvoiceID);

            String no_account = "00000";

//            if(rcp.getAccounts()!=null)
//                no_account = rcp.getAccounts().getStAccountNo().substring(5,10);
//
//            rcp.setStReceiptNo(
//                    rcp.getStReceiptNo().substring(0,9)+
//                    no_account +
//                    rcp.getStReceiptNo().substring(14,19));

            S.store(rcp);

            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {

                for (int i = 0; i < details.size(); i++) {
                    ARCashflowDetailsView rcl = (ARCashflowDetailsView) details.get(i);

                    if(rcl.getPolicy()!=null){
                            InsurancePolicyView pol = rcl.getPolicy();
//
//                            pol.setDtClaimPaymentDate(rcl.getDtReceiptDate());
//                            pol.setStReceiptNo(rcl.getStReceiptNo());
//                            pol.setStPaymentNotes(rcl.getStReceiptNo());
//                            pol.setStClaimPaymentUsedFlag("Y");
//                            pol.markUpdate();
//                            S.store(pol);
                        logger.logWarning("################# update flag klaim sudah di cashflow "+ pol.getStDLANo());
                    }
                }


            }


        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }


    }


public ARCashflowView getARCashflow(String rcid) throws Exception {

        final ARCashflowView rcp = (ARCashflowView)ListUtil.getDTOListFromQuery(
                "select * from ar_cashflow where ar_cashflow_id = ?",
                new Object [] {rcid},
                ARCashflowView.class
                ).getDTO();

        if (rcp!=null) {

            final DTOList combined = ListUtil.getDTOListFromQuery(
                    "   select " +
                    "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                    "   from " +
                    "      ar_cashflow_details a" +
                    "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                    "   where coalesce(a.line_type,'') <> 'TITIP'" +
                    "     and a.ar_cashflow_id = ? order by a.ar_cashflow_dtl_id",
                    new Object [] {rcid},
                    ARCashflowDetailsView.class
                    );

            rcp.setDetails(new DTOList());
            rcp.setNotes(new DTOList());
            rcp.setGls(new DTOList());
            final HashMap rclMap = new HashMap();

            for (int i = 0; i < combined.size(); i++) {
                ARCashflowDetailsView rcl = (ARCashflowDetailsView) combined.get(i);

                rclMap.put(rcl.getStARCashflowDetailID(), rcl);

                if (rcl.isInvoice())
                    rcp.getDetails().add(rcl);

                if (rcl.isNote())
                    rcp.getNotes().add(rcl);

                if (rcl.isGL())
                    rcp.getGLs().add(rcl);

            }


            for (int i = 0; i < combined.size(); i++) {
                ARCashflowDetailsView rcl = (ARCashflowDetailsView) combined.get(i);

                if (rcl.getStReceiptLinesRefID()!=null) {
                    final ARCashflowDetailsView rclRef = (ARCashflowDetailsView)rclMap.get(rcl.getStReceiptLinesRefID());

                    if(rclRef!=null)
                        rclRef.getDetails().add(rcl);
                }
            }

         /*rcp.setDetails(ListUtil.getDTOListFromQuery(
                 "   select " +
                 "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                 "   from " +
                 "      ar_receipt_lines a" +
                 "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                 "   where " +
                 "      a.receipt_id = ? and a.line_type = ?",
                 new Object [] {rcid,FinCodec.ARReceiptLineType.INVOICE},
                 ARReceiptLinesView.class
         ));

         rcp.setNotes(ListUtil.getDTOListFromQuery(
                 "   select " +
                 "      a.*, b.amount as iv_amount, b.amount_settled as iv_amount_settled" +
                 "   from " +
                 "      ar_receipt_lines a" +
                 "      left join ar_invoice b on b.ar_invoice_id = a.ar_invoice_id" +
                 "   where " +
                 "      a.receipt_id = ? and a.line_type = ?",
                 new Object [] {rcid,FinCodec.ARReceiptLineType.NOTE},
                 ARReceiptLinesView.class
         ));*/
        }

        return rcp;
    }

public void reverseCashflow(ARCashflowView rcp) throws Exception {
        final SQLUtil S = new SQLUtil();

        try {

            PreparedStatement P = S.setQuery("update ar_cashflow set posted_flag = 'N',status = 'NEW' where ar_cashflow_id = ?");

            P.setObject(1, rcp.getStARCashflowID());
            int r = P.executeUpdate();
            S.release();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }


    }

public String saveSaldoAwalInwardUpload(InsurancePolicyInwardView invoice) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag())) {
            invoice.validate();
        }

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B', invoice.getStCostCenterCode());

        glApplicator.setDesc("Y", invoice.getEntity().getStShortName());
        glApplicator.setDesc("X", invoice.getPolicyType().getStShortDescription());
        glApplicator.setDesc("K", invoice.getStDLANo());
        glApplicator.setDesc("M", DateUtil.getMonth(invoice.getDtMutationDate()).toUpperCase());
        glApplicator.setDesc("T", DateUtil.getYear(invoice.getDtMutationDate()));

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (doPost) {
                if (invoice.getStGLARAccountID() == null) {

                    final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    if (acc == null) {
                        throw new RuntimeException("stGLARAccountID not found !" + invoice);
                    }

                    invoice.setStGLARAccountID(acc.getStAccountID());
                }
            }

            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("INSPOLINWARD")));

                if (invoice.getStARTransactionTypeID().equalsIgnoreCase("1")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("2")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("3")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("20")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("21")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("22")) {

                    if(!invoice.isEndorseMode())
                        invoice.setStInvoiceNo(invoice.generateNoBukti());

                } else if (invoice.getStARTransactionTypeID().equalsIgnoreCase("17")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("18")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("19")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("23")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("24")) {
                    invoice.setStInvoiceNo(invoice.generateNoBuktiClaimInward());
                }
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView detailView = (InsurancePolicyInwardDetailView) details.get(i);

                if (detailView.isNew()) {
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                }

                if (doPost) {
                    if (detailView.isModified()) {
                        if (detailView.getStGLAccountID() == null) {
                            final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                            if (acc == null) {
                                throw new RuntimeException("Account ID is empty : " + detailView);
                            }

                            detailView.setStGLAccountID(acc.getStAccountID());
                        }
                    }
                }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());

                if (detailView.getDetails().size()>0) {
                    final DTOList subDetails = detailView.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        InsurancePolicyInwardDetailView rclsub = (InsurancePolicyInwardDetailView) subDetails.get(j);

                        rclsub.setStRefInvoiceDetailID(detailView.getStARInvoiceDetailID());
                        rclsub.setStARInvoiceID(invoice.getStARInvoiceID());

                        if (rclsub.isNew())
                            rclsub.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                    }

                    S.store2(subDetails);//simpan ke receipt lines
                }

            }

            //S.store2(details);

            final DTOList installment = invoice.getInstallment();

            final boolean isCicilan = installment.size()>1;

            for (int j = 0; j < installment.size(); j++) {
                InsurancePolicyInwardInstallmentView installmentView = (InsurancePolicyInwardInstallmentView) installment.get(j);

                if (installmentView.isNew()) {
                    installmentView.setStInsurancePolicyInwardInstallmentID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDINST")));
                }

                installmentView.setStARInvoiceID(invoice.getStARInvoiceID());

            }

            S.store2(installment);

            S.release();

            if (!invoice.isNew()) {
                if (doUnPost) {
                    //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            }

            if (doPost) {
                if (invoice.getStClaimStatus() != null) {
                    if (invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA)) {
                        doPost = false;
                    }
                }
            }

            if (doPost) {

                if(!isCicilan)
                    postInvoiceInward(invoice);
                else
                    postInvoiceInwardInstallment(invoice);

                logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR() ? BDUtil.one : new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtMutationDate());
                gl.setLgFiscalYear(Long.valueOf(DateUtil.getYear(invoice.getDtMutationDate())));
                gl.setLgPeriodNo(Long.valueOf(DateUtil.getMonthDigit(invoice.getDtMutationDate())));
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.setStRecapitulationNo(invoice.getStNoSuratHutang());
                gl.markNew();


                if(!isCicilan){

                    {

                    final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    final JournalView jv = gl.copy();
                    final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
                    jv.setDbAutoDebit(BDUtil.mul(negator, invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                    jv.setStAccountID(invoice.getStGLARAccountID());
                    jv.setStDescription(glApplicator.getStGLDesc());

                    jv.markNew();

                    journalSet.add(jv);
                    }

                    for (int i = 0; i < details.size(); i++) {
                        InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                        if (InsurancePolicyInwardView.exludeComission) {
                            if (ivd.isComission()) {
                                continue;
                            }
                        }

                        BigDecimal amt = ivd.getDbAmount();
                        final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                        if (BDUtil.isZeroOrNull(amt)) {
                            continue;
                        }

                        if (ivd.getStTaxCode() != null) {
                            final ARTaxView tax = ivd.getTax();

                            final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                            //amt=BDUtil.sub(amt,taxAmt);

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                            jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                            jv.setStAccountID(accountID);
                            jv.setStDescription(glApplicator.getPreviewDesc());

                            jv.markNew();

                            journalSet.add(jv);
                        }

                        final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                        if (ac == null) {
                            throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                        }

                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                        jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                        jv.setStAccountID(ac.getStAccountID());
                        jv.setStDescription(glApplicator.getStGLDesc());

                        jv.markNew();

                        journalSet.add(jv);
                    }
                }else{

                    //posting jika cicilan
                    for (int j = 0; j < installment.size(); j++) {
                        InsurancePolicyInwardInstallmentView inst = (InsurancePolicyInwardInstallmentView) installment.get(j);

                        {

                            final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());

                            //BigDecimal amount = BDUtil.mul(inst.getDbAmount(), invoice.getDbCurrencyRate(), 2);
                            BigDecimal amount = inst.getDbAmount();
                            jv.setDbAutoDebit(BDUtil.mul(negator, amount));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT


                            jv.setStAccountID(invoice.getStGLARAccountID());
                            jv.setStDescription(glApplicator.getStGLDesc() + " - INST " + (j+1));

                            jv.markNew();

                            journalSet.add(jv);
                        }

                        for (int i = 0; i < details.size(); i++) {
                            InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                            if (InsurancePolicyInwardView.exludeComission) {
                                if (ivd.isComission()) {
                                    continue;
                                }
                            }

                            BigDecimal amt = ivd.getDbAmount();

                            if(ivd.isPremiGross2()) amt = inst.getDbPremiBruto();
                            else if(ivd.isCommission2()) amt = inst.getDbKomisi();
                            else amt = inst.getDbFee();

                            //amt = BDUtil.mul(amt, invoice.getDbCurrencyRate(), 2);

                            final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                            if (BDUtil.isZeroOrNull(amt)) {
                                continue;
                            }

                            if (ivd.getStTaxCode() != null) {
                                final ARTaxView tax = ivd.getTax();

                                final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                                //amt=BDUtil.sub(amt,taxAmt);

                                final JournalView jv = gl.copy();
                                final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                                jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                                jv.setStAccountID(accountID);
                                jv.setStDescription(glApplicator.getPreviewDesc() + " - INST " + (j+1));

                                jv.markNew();

                                journalSet.add(jv);
                            }
                            /*else if (ivd.getTrxLine().isTaxed()) {
                            final ARTaxView tax = ivd.getTrxLine().getTax();

                            final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                            //amt=BDUtil.sub(amt,taxAmt);

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                            jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                            jv.setStAccountID(accountID);
                            jv.setStDescription(glApplicator.getPreviewDesc());

                            jv.markNew();

                            journalSet.add(jv);

                            }*/



                            final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                            if (ac == null) {
                                throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                            }

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                            jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                            jv.setStAccountID(ac.getStAccountID());
                            jv.setStDescription(glApplicator.getStGLDesc() + " - INST " + (j+1));

                            jv.markNew();

                            journalSet.add(jv);
                        }
                    }
                }


                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

public void savePenerimaanKlaimOutward(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));

            if(rcp.isNew())
                rcp.generateReceiptNo();

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            String stARInvoiceID="";

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());
                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);//simpen ke receipt lines
                }
            }

            S.store(rcp.getNotes());//simpen note

            S.store(gLs);//excess

            S.store(details);//simpen receipt dr invoice



            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));

            S.store(rcp);

            if (doUnPost) {
                //getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                applicator.setDesc("Y",rcp.getEntity().getStShortName());

                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");

                //applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());

                //applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());


                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));


                // AR DR vs bank CR

                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                if(rcp.getSettlement().isAP()) negator = BDUtil.one;

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/

                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();

                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();
                        head.setDbAutoDebit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("Byr "+rl.getStInvoiceNo()+" "+rl.getInvoice().getStRefID2());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        } else {
                            head.setStDescription("Byr "+rcp.getDetails().size()+" INVOICES");
                        }

                        journal.add(head);
                    }

                boolean moreThan1Policy = rcp.getDetails().size()>1;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if (rl.isDelete()) continue;

                    final JournalView line = gl.copy();

                    final JournalView headLine = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());

                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoDebit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);
                            head.setStDescription("Byr Htg. R/A Prm. " + rl.getInvoice().getStNoSuratHutang()+ " "+ rl.getInvoice().getStRefID2());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            journal.add(head);
                        }
                    }

                    if (rl.isInvoice()) {

                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            //jika pembayaran reas treaty
                            if(!rcInvoiceDetail.isPremiGrossReas() && !rcInvoiceDetail.isClaimReas())
                                    continue;

                            //jurnal lawan nya
                            if(true){

                                final JournalView lineDetail = gl.copy();

                                BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                if(rcInvoiceDetail.isPremiGrossReas() || rcInvoiceDetail.isClaimReas()){
                                    lineDetail.setDbAutoCredit(amt2);
                                }else{
                                    lineDetail.setDbAutoDebit(amt2);
                                }

                                final ARTransactionLineView tl = getTrxLine("113");

                                String accode = tl.getStGLAccount();

                                applicator.setCode('B',"00");
                                applicator.setCode('C',rl.getInvoice().getStReferenceC0());
                                applicator.setCode('Y',rl.getInvoice().getEntity().getStGLCode());
                                applicator.setCode('X',rl.getInvoice().getPolicyTypeGLCode());

                                applicator.setDesc("C",rl.getInvoice().getStReferenceC1());
                                applicator.setDesc("D",rl.getInvoice().getStNoSuratHutang());
                                applicator.setDesc("M","");
                                applicator.setDesc("T","");
                                applicator.setDesc("A","");

                                final AccountView ac = glc.getAccountByAccountID(applicator.getAccountID(accode));

                                final JournalView jv1 = gl.copy();

                                applicator.getAccountID(accode);

                                if(ac!=null){
                                    lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    lineDetail.setStDescription("Byr " + applicator.getStGLDesc()+ " "+ rl.getInvoice().getStRefID2());
                                }else{
                                    lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    lineDetail.setStDescription("Byr " + glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID()).getStDescription()+ " "+ rl.getInvoice().getStRefID2());
                                }

                                //lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                //lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                journal.add(lineDetail);
                            }


                        }


                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());


                    }

                }


                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

public String saveSaldoAwalInwardPajakAcrual(InsurancePolicyInwardView invoice) throws Exception {

        if (Tools.isYes(invoice.getStPostedFlag())) {
            invoice.validate();
        }

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator glApplicator = new GLUtil.Applicator();

        glApplicator.setCode('B', invoice.getStCostCenterCode());

        glApplicator.setDesc("Y", invoice.getEntity().getStShortName());
        glApplicator.setDesc("X", invoice.getPolicyType().getStShortDescription());
        glApplicator.setDesc("K", invoice.getStDLANo());
        glApplicator.setDesc("M", DateUtil.getMonth(invoice.getDtMutationDate()).toUpperCase());
        glApplicator.setDesc("T", DateUtil.getYear(invoice.getDtMutationDate()));

        final SQLUtil S = new SQLUtil();

        try {

            final boolean postFlagChanged = invoice.isChanged("posted_flag");
            boolean doPost = postFlagChanged && Tools.isYes(invoice.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(invoice.getStPostedFlag());

            if (doPost) {
                if (invoice.getStGLARAccountID() == null) {

                    final AccountView acc = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                    if (acc == null) {
                        throw new RuntimeException("stGLARAccountID not found !" + invoice);
                    }

                    invoice.setStGLARAccountID(acc.getStAccountID());
                }
            }

            if (invoice.isNew()) {
                invoice.setStARInvoiceID(String.valueOf(IDFactory.createNumericID("INSPOLINWARD")));

                if (invoice.getStARTransactionTypeID().equalsIgnoreCase("1")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("2")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("3")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("20")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("21")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("22")) {

                    if(!invoice.isEndorseMode())
                        invoice.setStInvoiceNo(invoice.generateNoBukti());

                } else if (invoice.getStARTransactionTypeID().equalsIgnoreCase("17")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("18")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("19")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("23")
                        || invoice.getStARTransactionTypeID().equalsIgnoreCase("24")) {
                    invoice.setStInvoiceNo(invoice.generateNoBuktiClaimInward());
                }
            }

            S.store(invoice);

            final DTOList details = invoice.getDetails();

            for (int i = 0; i < details.size(); i++) {
                InsurancePolicyInwardDetailView detailView = (InsurancePolicyInwardDetailView) details.get(i);

                if (detailView.isNew()) {
                    detailView.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                }

                if (doPost) {
                    if (detailView.isModified()) {
                        if (detailView.getStGLAccountID() == null) {
                            final AccountView acc = glc.getAccountByAccountID(detailView.getStGLAccountID());

                            if (acc == null) {
                                throw new RuntimeException("Account ID is empty : " + detailView);
                            }

                            detailView.setStGLAccountID(acc.getStAccountID());
                        }
                    }
                }

                detailView.setStARInvoiceID(invoice.getStARInvoiceID());

                if (detailView.getDetails().size()>0) {
                    final DTOList subDetails = detailView.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        InsurancePolicyInwardDetailView rclsub = (InsurancePolicyInwardDetailView) subDetails.get(j);

                        rclsub.setStRefInvoiceDetailID(detailView.getStARInvoiceDetailID());
                        rclsub.setStARInvoiceID(invoice.getStARInvoiceID());

                        if (rclsub.isNew())
                            rclsub.setStARInvoiceDetailID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDDET")));
                    }

                    S.store2(subDetails);//simpan ke receipt lines
                }

            }

            S.store2(details);

            final DTOList installment = invoice.getInstallment();

            final boolean isCicilan = installment.size()>1;

            for (int j = 0; j < installment.size(); j++) {
                InsurancePolicyInwardInstallmentView installmentView = (InsurancePolicyInwardInstallmentView) installment.get(j);

                if (installmentView.isNew()) {
                    installmentView.setStInsurancePolicyInwardInstallmentID(String.valueOf(IDFactory.createNumericID("INSPOLINWARDINST")));
                }

                installmentView.setStARInvoiceID(invoice.getStARInvoiceID());

            }

            S.store2(installment);

            S.release();

            if (!invoice.isNew()) {
                if (doUnPost) {
                    //getRemoteGeneralLedger().reverse(invoice.getStRefTRX());
                }
            }

            if (doPost) {
                if (invoice.getStClaimStatus() != null) {
                    if (invoice.getStClaimStatus().equalsIgnoreCase(FinCodec.ClaimStatus.PLA)) {
                        doPost = false;
                    }
                }
            }

            if (doPost) {

                if(!isCicilan)
                    postInvoiceInward(invoice);
                else
                    postInvoiceInwardInstallment(invoice);

                logger.logDebug("save: processing posting to GL");

                final DTOList journalSet = new DTOList();

                final BigDecimal negator = invoice.isAR() ? BDUtil.one : new BigDecimal(-1);

                final JournalView gl = new JournalView();
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setDtApplyDate(invoice.getDtMutationDate());
                gl.setLgFiscalYear(Long.valueOf(DateUtil.getYear(invoice.getDtMutationDate())));
                gl.setLgPeriodNo(Long.valueOf(DateUtil.getMonthDigit(invoice.getDtMutationDate())));
                gl.setStJournalCode(null);
                gl.setStCurrencyCode(invoice.getStCurrencyCode());
                gl.setDbCurrencyRate(invoice.getDbCurrencyRate());
                gl.setStTransactionNo(invoice.getStInvoiceNo());
                gl.setStRefTRX(invoice.getStRefTRX());
                gl.setStRefTRX("INV");
                gl.setStRefTrxNo(invoice.getStARInvoiceID());
                //tambahin ent_id
                gl.setStRefEntID(invoice.getStEntityID());
                gl.setStRecapitulationNo(invoice.getStNoSuratHutang());
                gl.markNew();


                if(!isCicilan){

                    {

                        final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());
                        jv.setDbAutoDebit(BDUtil.mul(negator, invoice.getDbAmount()));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                        jv.setStAccountID(invoice.getStGLARAccountID());
                        jv.setStDescription(glApplicator.getStGLDesc());

                        jv.markNew();

                        journalSet.add(jv);
                    }

                    for (int i = 0; i < details.size(); i++) {
                        InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                        if (InsurancePolicyInwardView.exludeComission) {
                            if (ivd.isComission()) {
                                continue;
                            }
                        }

                        BigDecimal amt = ivd.getDbAmount();

                        final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                        if(ivd.isBrokerageFee()){
                            //cari pajak nya dulu
                            BigDecimal taxAmount = BDUtil.zero;

                             for (int k = 0; k < details.size(); k++) {
                                InsurancePolicyInwardDetailView ivdPajak = (InsurancePolicyInwardDetailView) details.get(k);

                                if(ivdPajak.getTrxLine().isTaxed()){
                                    taxAmount = ivdPajak.getDbAmount();
                                }
                            }

                            amt = BDUtil.sub(amt, taxAmount);
                        }

                        if (BDUtil.isZeroOrNull(amt)) {
                            continue;
                        }

                        if (ivd.getStTaxCode() != null) {
                            final ARTaxView tax = ivd.getTax();

                            final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                            //amt=BDUtil.sub(amt,taxAmt);

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                            

//                            if(ivd.isTaxBrokerageFee())
//                                jv.setDbAutoCredit(BDUtil.mul(detailNegator, taxAmt));
//                            else

                            jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT

                            jv.setStAccountID(accountID);
                            jv.setStDescription(glApplicator.getPreviewDesc());

                            jv.markNew();

                            journalSet.add(jv);
                        }

                        final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                        if (ac == null) {
                            throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                        }

                        final JournalView jv = gl.copy();
                        final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                        

                        if(ivd.isTaxBrokerageFee())
                            jv.setDbAutoDebit(amt);
                        else
                            jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT

                        //jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                        jv.setStAccountID(ac.getStAccountID());
                        jv.setStDescription(glApplicator.getStGLDesc());

                        jv.markNew();

                        journalSet.add(jv);
                    }
                }else{

                    //posting jika cicilan
                    for (int j = 0; j < installment.size(); j++) {
                        InsurancePolicyInwardInstallmentView inst = (InsurancePolicyInwardInstallmentView) installment.get(j);

                        {

                            final AccountView ac = glc.getAccountByAccountID(invoice.getStGLARAccountID());

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(invoice.getARTrxType().getStGLAPAccount());

                            //BigDecimal amount = BDUtil.mul(inst.getDbAmount(), invoice.getDbCurrencyRate(), 2);
                            BigDecimal amount = inst.getDbAmount();
                            jv.setDbAutoDebit(BDUtil.mul(negator, amount));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT


                            jv.setStAccountID(invoice.getStGLARAccountID());
                            jv.setStDescription(glApplicator.getStGLDesc() + " - INST " + (j+1));

                            jv.markNew();

                            journalSet.add(jv);
                        }

                        for (int i = 0; i < details.size(); i++) {
                            InsurancePolicyInwardDetailView ivd = (InsurancePolicyInwardDetailView) details.get(i);

                            if (InsurancePolicyInwardView.exludeComission) {
                                if (ivd.isComission()) {
                                    continue;
                                }
                            }

                            BigDecimal amt = ivd.getDbAmount();

                            if(ivd.isPremiGross2()) amt = inst.getDbPremiBruto();
                            else if(ivd.isCommission2()) amt = inst.getDbKomisi();
                            else amt = inst.getDbFee();

                            //amt = BDUtil.mul(amt, invoice.getDbCurrencyRate(), 2);

                            final BigDecimal detailNegator = new BigDecimal(ivd.isNegative() ? -negator.intValue() : negator.intValue());

                            if (BDUtil.isZeroOrNull(amt)) {
                                continue;
                            }

                            if (ivd.getStTaxCode() != null) {
                                final ARTaxView tax = ivd.getTax();

                                final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                                //amt=BDUtil.sub(amt,taxAmt);

                                final JournalView jv = gl.copy();
                                final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                                jv.setDbAutoDebit(BDUtil.mul(detailNegator, taxAmt));//SETELAH DI UBAH,SEBELUMNYA AUTODEBIT
                                jv.setStAccountID(accountID);
                                jv.setStDescription(glApplicator.getPreviewDesc() + " - INST " + (j+1));

                                jv.markNew();

                                journalSet.add(jv);
                            }
                            /*else if (ivd.getTrxLine().isTaxed()) {
                            final ARTaxView tax = ivd.getTrxLine().getTax();

                            final BigDecimal taxAmt = BDUtil.mul(tax.getDbRate(), amt);
                            //amt=BDUtil.sub(amt,taxAmt);

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(tax.getStAccountCode());
                            jv.setDbAutoDebit(BDUtil.mul(detailNegator,taxAmt));
                            jv.setStAccountID(accountID);
                            jv.setStDescription(glApplicator.getPreviewDesc());

                            jv.markNew();

                            journalSet.add(jv);

                            }*/



                            final AccountView ac = glc.getAccountByAccountID(ivd.getStGLAccountID());

                            if (ac == null) {
                                throw new RuntimeException("Account not found (" + ivd.getStGLAccountID() + ") at invoice " + invoice.getStInvoiceNo() + " item " + ivd.getStDescription());
                            }

                            final JournalView jv = gl.copy();
                            final String accountID = glApplicator.getAccountID(ivd.getTrxLine().getStGLAccount());
                            jv.setDbAutoCredit(BDUtil.mul(detailNegator, amt));//SETELAH DI UBAH,SEBELUMNYA AUTOCREDIT
                            jv.setStAccountID(ac.getStAccountID());
                            jv.setStDescription(glApplicator.getStGLDesc() + " - INST " + (j+1));

                            jv.markNew();

                            journalSet.add(jv);
                        }
                    }
                }


                for (int i = 0; i < journalSet.size(); i++) {
                    JournalView j = (JournalView) journalSet.get(i);

                    j.loadAccountNo();
                    j.setStApproved("Y");
                    j.reCalculate();
                }

                //getRemoteGeneralLedger().saveJournalSaldoAwal(journalSet);
                getRemoteGeneralLedger().saveJournalEntry(journalSet);
            }

            return invoice.getStARInvoiceID();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

public void savePembayaranPremiPolisKhusus(ARReceiptView rcp) throws Exception {

        boolean taxAcrualBases = true;

        rcp.validatePembayaranPremi();

        boolean jurnalOnly = false;

        boolean bentukHutangOnly = false;

        final SQLUtil S = new SQLUtil();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());

        if (rcp.getStEntityID()!=null){

            if(rcp.getEntity2(rcp.getStEntityID()).getStShortName()!=null)
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStShortName());
            else
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStEntityName());
        }

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));

            if(rcp.isNew()){
                rcp.generateReceiptNo();

                rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            }

            if(!rcp.isNew())
                if(rcp.getStReceiptNo2()==null)
                    rcp.setStReceiptNo2(rcp.generateReceiptNo2());

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());


            String stARInvoiceID="";

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                     rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStARInvoiceDetailID());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclsub.isCheck())
                            if(rclsub.getInvoiceDetail()!=null)
                                rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStARInvoiceDetailID());

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);//simpan ke receipt lines
                //}

                //if (rcl.getListTitipan().size()>0) {
                    final DTOList subTitipan = rcl.getListTitipan();
                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);

                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo2());

                        if(rcl.getDtReceiptDate()!=null){
                            rclTitipan.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclTitipan.isCheck())
                            if(rclTitipan.getInvoiceDetail()!=null)
                                rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());

                        if (rclTitipan.isNew()){
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                        }
                    }

                    S.store(subTitipan);//simpan ke receipt lines

                    if(rcl.getPolicy()!=null){
                        InsurancePolicyView pol = rcl.getPolicy();

                        pol.setDtPaymentDate(rcl.getDtReceiptDate());
                        pol.setStReceiptNo(rcl.getStReceiptNo());
                        pol.setStPaymentNotes(rcl.getStReceiptNo());
                        pol.markUpdate();
                        S.store(pol);
                    }


            }

            S.store(rcp.getNotes());//simpan note

            S.store(gLs);//simpan excess

            S.store(details);//simpen receipt dr invoice

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            //final boolean doPost = Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            //C1209242424001 00001
            //01234567890123 456789

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
                 rcp.setStARAPInvoiceID(null);
            }


            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));



            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                applicator.setCode('B', rcp.getStCostCenterCode());

                if(rcp.getStEntityID()!=null){
                    final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                    applicator.setCode('Y', entityGLCode);

                    applicator.setDesc("Y",rcp.getEntity().getStShortName());

                    if(entityGLCode.equalsIgnoreCase("00000"))
                        applicator.setDesc("Y","");
                }else{
                    applicator.setCode('Y', "00000");
                    applicator.setDesc("Y","");
                }

                // AR DR vs bank CR

                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.setStSummaryFlag("Y");
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/

                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();


                //POSTING JURNAL HEADER RECEIPT VIEW
                if(!bentukHutangOnly){
                      if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl3.getInvoice()==null)
                                jurnalHead = false;

                        String ccCodepolis = "";

                        if(rl3.getPolicy()!=null)
                                ccCodepolis = rl3.getPolicy().getStCostCenterCode();

                        //Get Akun header
                        String accountHeaderID = "";

                        if(ccCodepolis.equalsIgnoreCase("80")){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");
                            applicator.setCode('B', "80");

                            accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }else{
                            accountHeaderID = rcp.getStAccountID();
                        }

                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                        String desc1 = "";

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                            if(rl.getStInvoiceNo()!=null) desc1 = rl.getStInvoiceNo();

                            head.setStDescription("TERIMA PEMBAYARAN "+ desc1);
                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                        } else {
                            head.setStDescription("TERIMA "+rcp.getDetails().size()+" PEMBAYARAN");
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                        }

                        if(rl3.getInvoice()!=null)
                            head.setStPolicyNo(rl3.getInvoice().getStAttrPolicyNo());

                        if(jurnalHead)
                            journal.add(head);

                    }
                }

                //END POSTING JURNAL HEADER RECEIPT VIEW

                boolean moreThan1Policy = rcp.getDetails().size()>1;

              if(!bentukHutangOnly)
              { // POSTING JURNAL PELUNASAN RECEIPT LINES / DETAIL
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl.getInvoice()==null)
                                jurnalHead = false;

                    if(rl.getInvoice()!=null){
                        applicator.setCode('X', rl.getInvoice().getPolicyType().getStGLCode());
                        applicator.setDesc("X", rl.getInvoice().getPolicyType().getStShortDescription());
                    }

                    if (rl.isDelete()) continue;

                    String ccCodepolis = "";

                    if(rl.getPolicy()!=null)
                           ccCodepolis = rl.getPolicy().getStCostCenterCode();

                    //Get Akun header
                    String accountHeaderID = "";

                    if(ccCodepolis.equalsIgnoreCase("80")){
                        applicator.setCode('Y', "00001");
                        applicator.setCode('G', "00001");
                        applicator.setCode('B', "80");

                        accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                    }else{
                        accountHeaderID = rcp.getStAccountID();
                    }


                    if(moreThan1Policy){

                        if(!ccCodepolis.equalsIgnoreCase("80")){
                            if (rc.isBank() && !rl.isGL()) {
                                final JournalView head = gl.copy();

                                head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");

                                String descHead = "";
                                if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();
                                head.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                if(rl.getStInvoiceID()!=null){
                                    head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                }

                                if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                    head.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                if(jurnalHead)
                                    journal.add(head);

                            }
                        }else{
                                if (rc.isBank() && !rl.isGL()) {
                                    final JournalView head = gl.copy();

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', "80");

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    head.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");

                                    String descHead = "";
                                    if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();
                                    head.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                    head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                    head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                    if(rl.getStInvoiceID()!=null){
                                        head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                    }

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        head.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    if(jurnalHead)
                                        journal.add(head);

                                }
                        }

                    }

                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excessBank = gl.copy();

                        BigDecimal amt = BDUtil.mul(negator,rl.getDbExcessAmount());
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        if (rcp.getDetails().size() > 1){
                            //ADD JURNAL BANK NYA

                            excessBank.setDbAutoCredit(amt);
                            excessBank.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                            excessBank.setStDescription(rl.getStExcessDescription());
                            excessBank.setStCurrencyCode(rcp.getStCurrencyCode());
                            excessBank.setDbCurrencyRate(rcp.getDbCurrencyRate());

                            if(rl.getStInvoiceID()!=null){
                                    excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                excessBank.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(excessBank);
                            //END JURNAL BANK
                        }


                        final JournalView excess = gl.copy();

                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());

                        if(rl.getInvoice()!=null) excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        if(rl.getStInvoiceID()!=null){
                                excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        }

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);

                    }


                    final JournalView line = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    //POSTING LINE
                    boolean bayarTanpaPremi = false;
                    BigDecimal totalBayarTanpaPremi = null;


                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();

                        if (detail.size()>0) {
                            for (int j = 0; j < detail.size(); j++) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);

                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                String comAccount ="";

                                if(rcInvoiceDetail!=null){
                                    if(rcInvoiceDetail.getEntity()!=null){
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                    }if(rcInvoiceDetail.getStEntityID()==null){
                                        applicator.setCode('P', "00000");
                                    }
                                }

                                if (rccom.isDelete()) continue;

                                boolean dontJurnal = false;
                                boolean isKomisi = false;

                                if(rcInvoiceDetail!=null){

                                    dontJurnal = rcInvoiceDetail.isPolicyCost2() || rcInvoiceDetail.isDiscount2() ||
                                                     rcInvoiceDetail.isStampDuty2() || rcInvoiceDetail.isTaxComm() ||
                                                     rcInvoiceDetail.isTaxBrok() || rcInvoiceDetail.isTaxHFee();
                                    isKomisi = rcInvoiceDetail.isCommission2() || rcInvoiceDetail.isBrokerage2() || rcInvoiceDetail.isHandlingFee2() || rcInvoiceDetail.isPPN() || rcInvoiceDetail.isPPNFeebase();

                                    //PENGECEKAN TAGIHAN TANPA PREMI BRUTO
                                    if(rccom.getInvoice().getPolicy()!=null){
                                        if(BDUtil.isZeroOrNull(rccom.getInvoice().getPolicy().getDbPremiTotal())){
                                            if(!rcInvoiceDetail.isPremiGross2()){
                                                 bayarTanpaPremi = true;
                                                 //totalBayarTanpaPremi = BDUtil.add(totalBayarTanpaPremi, rccom.getDbInvoiceAmount());
                                                 totalBayarTanpaPremi = BDUtil.add(totalBayarTanpaPremi, rccom.getInvoice().getTotalTagihanNetto());
                                            }

                                        }
                                    }

                                }

                                if(isKomisi && rccom.isCheck()) continue;

                                if(dontJurnal) {
                                }else{

                                    final JournalView comline = gl.copy();

                                    BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                    amount = BDUtil.mul(amount, rccom.getDbCurrencyRate(),2);

                                    if(ccCodepolis.equalsIgnoreCase("80"))
                                        applicator.setCode('B', "80");
                                    else
                                        applicator.setCode('B', rcp.getStCostCenterCode());

                                    if(rcInvoiceDetail!=null){
                                        if(rcInvoiceDetail.isComm()){
                                            comAccount = rcp.getStAccountID();
                                        }else{
                                            comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                        }

                                        if(isKomisi){
                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));
                                        }

                                        String accountDescPremiG = null;
                                        if(rcInvoiceDetail.isPremiGross2()){

                                            if(getEntity(rccom.getInvoice().getStEntityID())!=null)
                                                applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                            else
                                                applicator.setCode('Y', "00000");

                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                            accountDescPremiG = applicator.getStGLDesc();
                                            //amount = rccom.getInvoice().getDbAmount(); old
                                            amount = rccom.getInvoice().getTotalTagihanNetto();
                                        }

                                        if(rcInvoiceDetail.isUangMukaPremi()){
                                            comAccount = rcInvoiceDetail.getStGLAccountID();
                                            comline.setStDescription("Pembayaran " + rccom.getStDescription());
                                            amount =  BDUtil.mul(negator,amount);
                                        }

                                        if(rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoDebit(amount);
                                        }else if(!rcInvoiceDetail.isNegative()){
                                            comline.setDbAutoCredit(amount);
                                        }
                                    }else{
                                        comAccount = rl.getStAccountID();

                                        if(comAccount==null)  comAccount = rcp.getStAccountID();

                                        if(rl.getListTitipan().size() > 0){
                                            ARReceiptLinesView rlTitipan = (ARReceiptLinesView) rl.getListTitipan().get(0);
                                            TitipanPremiExtracomptableView titipanPremi = getTitipanPremiPolisKhusus(rlTitipan.getStTitipanPremiID());

                                            comAccount = titipanPremi.getStAccountID();
                                        }

                                        comline.setStDescription(rccom.getStDescription());
                                        comline.setDbAutoDebit(amount);
                                    }

                                    comline.setStAccountIDNotNull(comAccount,"Invalid account "+ comline.getStDescription()+ " in AP_COMM_ACRUAL parameters ("+rccom.getStReceiptLinesID()+": "+rccom.getStReceiptID()+" : "+ amount +")" );

                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();
                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());
                                    String referenceDesc = "";

                                    if(detil!=null){
                                        if(detil.getStRefInvoiceDetailID()!=null){
                                            referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                            if(referenceARInvoiceDetail!=null) referenceDesc = referenceARInvoiceDetail.getStDescription();
                                        }
                                    }

                                    comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());

                                    if(rcInvoiceDetail!=null){
                                        if(rcp.getArapinvoice().isAP())
                                            comline.setStDescription("HUTANG "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    }

                                    if(rcInvoiceDetail!=null){
                                        if(rcInvoiceDetail.isPremiGross2()){
                                            comline.setStDescription("TERIMA "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        }
                                    }

                                    comline.setStCurrencyCode(rl.getStCurrencyCode());
                                    comline.setDbCurrencyRate(rl.getDbCurrencyRate());
                                    if(rl.getPolicy()!=null)
                                        comline.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        comline.setDtApplyDate(rccom.getDtReceiptDate());
                                    }

                                    comline.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                    comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                    if(jurnalHead)
                                        journal.add(comline);
                                }
                            }
                        }
                    }//END

                    //POSTING JURNAL PAJAK
                    //REMARK THIS KALAU PAKE ACRUAL BASES
                        if (rl.isInvoice()) {
                            final DTOList detail = rl.getDetails();

                            if (detail.size()>0) {
                                for (int j = 0; j < detail.size(); j++) {
                                    ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(j);

                                    final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                    if (!rccom.isComission()) continue;

                                    if(!rcInvoiceDetail.isTax()) continue;

                                    if (rccom.isDelete()) continue;

                                    boolean parentLunas = false;

                                    if(ccCodepolis.equalsIgnoreCase("80"))
                                        applicator.setCode('B', "80");
                                    else
                                        applicator.setCode('B', rcp.getStCostCenterCode());

                                    if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                        final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                        for (int k = 0; k < detail.size(); k++) {
                                            ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                            if (!d2.isComission()) continue;

                                            ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                            if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                                 if(d2.isCheck()){//lunas komisi
                                                     parentLunas = true;
                                                     if(rcInvoiceDetail.getEntity()!=null)
                                                            applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                                     else
                                                            applicator.setCode('P', "00000");
                                                 }else{
                                                     if(rcInvoiceDetail2.getEntity()!=null)
                                                            applicator.setCode('P', rcInvoiceDetail2.getEntity().getStGLCode());
                                                     else
                                                            applicator.setCode('P', "00000");
                                                 }
                                            }

                                        }
                                    }

                                    final JournalView comline1 = gl.copy();

                                    BigDecimal comamt = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                    comamt = BDUtil.mul(comamt, rccom.getDbCurrencyRate(),2);

                                    if(rcInvoiceDetail.isNegative()){
                                        comline1.setDbAutoDebit(comamt);
                                    }else if(!rcInvoiceDetail.isNegative()){
                                        comline1.setDbAutoCredit(comamt);
                                    }

                                    ARInvoiceDetailView detil = new ARInvoiceDetailView();

                                    detil = getARInvoiceDetail(rccom.getStInvoiceDetailID());

                                    String referenceDesc = "";
                                    ARInvoiceDetailView referenceARInvoiceDetail = new ARInvoiceDetailView();
                                    if(detil.getStRefInvoiceDetailID()!=null){
                                        referenceARInvoiceDetail = getARInvoiceDetailParent(detil.getStRefInvoiceDetailID());
                                        referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"HUTANG ";
                                    }

                                    //String account = parentLunas?applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AP")):applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType("AR"));

                                    String account = rl.getInvoice().getStGLARAccountID();

                                    comline1.setStAccountIDNotNull(account,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());
                                    comline1.setStDescription(paymentDesc);
                                    comline1.setStDescription(referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                    comline1.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    comline1.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    comline1.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getInvoice().getPolicy().isTaxAcrualBases()){
                                        final AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rl.getInvoice().getStGLARAccountID());
                                        comline1.setStDescription(account2.getStDescription());
                                    }

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        comline1.setDtApplyDate(rccom.getDtReceiptDate());
                                    }

                                    comline1.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                    comline1.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                    journal.add(comline1);

                                    //JIKA PAJAK DI CENTANG TAMBAH JURNAL BANK SAJA
                                    if(rccom.isCheck()){
                                        final JournalView comline2 = gl.copy();

                                        if(rcInvoiceDetail.isNegative()){
                                            comline2.setDbAutoCredit(comamt);
                                        }else if(!rcInvoiceDetail.isNegative()){
                                            comline2.setDbAutoDebit(comamt);
                                        }

                                        ARInvoiceDetailView detil2 = new ARInvoiceDetailView();

                                        detil2 = getARInvoiceDetail(rccom.getStInvoiceDetailID());

                                        referenceDesc = "";
                                        ARInvoiceDetailView referenceARInvoiceDetail2 = new ARInvoiceDetailView();
                                        if(detil2.getStRefInvoiceDetailID()!=null){
                                            referenceARInvoiceDetail2 = getARInvoiceDetailParent(detil2.getStRefInvoiceDetailID());
                                            referenceDesc = !parentLunas?referenceARInvoiceDetail.getStDescription():"";
                                        }

                                        String account2 = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLApAccount());
                                        comline2.setStAccountIDNotNull(account2,"Invalid or empty account in ar trx line " + rcInvoiceDetail.getTrxLine());

                                        String descHead = "";
                                        if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();

                                        //comline2.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                        comline2.setStDescription("TAGIHAN "+ referenceDesc +" "+ rccom.getStDescription()+" "+ rl.getStInvoiceNo());
                                        comline2.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                        comline2.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                        comline2.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                        comline2.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                        comline2.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                            comline2.setDtApplyDate(rccom.getDtReceiptDate());
                                        }

                                        journal.add(comline2);
                                    }
                                }
                            }
                        }


                    //END POSTING PAJAK

                    //CEK JIKA PEMBAYARAN TANPA PREMI BRUTO MAKA MASUKKAN ke pembayaran premi

                    if (rl.isInvoice()) {
                        final DTOList detail = rl.getDetails();

                        if (detail.size()>0) {
                                ARReceiptLinesView rccom = (ARReceiptLinesView) detail.get(0);

                                final ARInvoiceDetailView rcInvoiceDetail = rccom.getInvoiceDetail();

                                String comAccount ="";

                                if(rcInvoiceDetail!=null){
                                    if(rcInvoiceDetail.getEntity()!=null){
                                        applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());
                                    }if(rcInvoiceDetail.getStEntityID()==null){
                                        applicator.setCode('P', "00000");
                                    }
                                }

                                if (rccom.isDelete()) continue;

                                if(ccCodepolis.equalsIgnoreCase("80"))
                                    applicator.setCode('B', "80");
                                else
                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    if(bayarTanpaPremi){
                                        final JournalView comline = gl.copy();

                                        BigDecimal amount = BDUtil.mul(negator,rccom.getDbInvoiceAmount());

                                        if(rcInvoiceDetail!=null){
                                            if(rcInvoiceDetail.isComm()){
                                                comAccount = rcp.getStAccountID();
                                            }else{
                                                comAccount = rcInvoiceDetail.getTrxLine().getStGLAccount();
                                            }

                                            String accountDescPremiG = null;

                                            if(getEntity(rccom.getInvoice().getStEntityID())!=null)
                                                    applicator.setCode('Y', getEntity(rccom.getInvoice().getStEntityID()).getStGLCode());
                                            else
                                                    applicator.setCode('Y', "00000");

                                            comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccount());//here
                                            if(rcInvoiceDetail.getTrxLine().getStGLAccountWithoutPremi()!=null)
                                                comAccount = applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLAccountWithoutPremi());

                                            accountDescPremiG = applicator.getStGLDesc();
                                            //amount = BDUtil.mul(negator,rccom.getInvoice().getDbAmount());
                                            amount = BDUtil.mul(negator,rccom.getInvoice().getTotalTagihanNetto());


                                            comline.setDbAutoDebit(amount);
                                        }

                                        comline.setStAccountIDNotNull(comAccount,"Invalid account "+ comline.getStDescription()+ " in AP_COMM_ACRUAL parameters ("+rccom.getStReceiptLinesID()+": "+rccom.getStReceiptID()+" : "+ amount +")" );

                                        if(rcInvoiceDetail!=null){
                                                comline.setStDescription("TERIMA PREMI BRUTO "+ rl.getStInvoiceNo());
                                        }

                                        comline.setStCurrencyCode(rl.getStCurrencyCode());
                                        comline.setDbCurrencyRate(rl.getDbCurrencyRate());
                                        if(rl.getPolicy()!=null)
                                            comline.setStPolicyNo(rl.getPolicy().getStPolicyNo());

                                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                            comline.setDtApplyDate(rccom.getDtReceiptDate());
                                        }

                                        comline.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                        comline.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                        journal.add(comline);
                                    }
                        }
                    }
                    //END

                    DTOList titipan = rl.getListTitipan();

                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);

                        ARReceiptLinesView indukTitipan = (ARReceiptLinesView) rl;
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiExtracomptableView titipanPremi = getTitipanPremiPolisKhusus(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Akun titipan No Bukti : "+titipanPremi.getStTransactionNo() + " Account ID : "+ titipanPremi.getStAccountID() +" tidak ditemukan");

                        if(titipanPremi.getStDescription() != null)
                            jurnalTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiUsedAmount()));

                        jurnalTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                        if(rl.getInvoice()!=null)
                            jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        if(indukTitipan.getStAccountID()!=null)
                            jurnalBankTitipan.setStAccountIDNotNull(indukTitipan.getStAccountID(),"Invalid or empty account in payment method ");

                        jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());

                        if(titipanPremi.getStDescription() != null)
                            jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalBankTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalBankTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());

                        jurnalBankTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalBankTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalBankTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        journal.add(jurnalBankTitipan);

                        journal.add(jurnalTitipan);
                    }



                    if (rl.isGL()) {

                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        if (neg) amt=BDUtil.negate(amt);

                        //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rlxc.getInvoice().getStAttrPolicyNo());

                        journal.add(excess);
                    }

                    //BUAT JURNAL RAK KANTOR CABANG
                    if(rl.getPolicy()!=null){
                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();

                                    bank.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStAccountIDNotNull(rcp.getStAccountID() ,"Invalid or empty account in payment method ");
                                    bank.setStDescription("PEMBAYARAN PREMI "+rl.getInvoice().getStAttrPolicyNo());
                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    bank.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }

                        //JURNAL RAK UNIT NON AKS
                        if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){
                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();
                                    bank.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                    final String entityGLCode = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                    //applicator.setCode('Y', entityGLCode);
                                    //applicator.setCode('G', entityGLCode);
                                    //applicator.setCode('B', "00");

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', "80");

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStTransactionNo(rcp.getStReceiptNo());
                                    bank.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");
                                    bank.setStDescription("PEMBAYARAN PREMI "+ rl.getInvoice().getStAttrPolicyNo());

                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    bank.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    String searchAccount2 = "210000000002";

                                    //applicator.setCode('B', "00");

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setStTransactionNo(rcp.getStReceiptNo());
                                    rak.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }
                    }




                }

            }

                /*
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
                */

                 //BUAT HUTANG PIUTANG PIHAK KETIGA (HUTANG KOMISI, BROKERFEE, HFEE JIKA BELUM DI BAYAR)
              if(!jurnalOnly)
              {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    final ARInvoiceView actInvoice = rcl.getInvoice();

                    final DTOList detail = rcl.getDetails();

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();

                            if(rcInvoiceDetail==null) continue;

                            if(rcInvoiceDetail.isTax()) continue;

                            if(!rcc.isCheck()){

                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;

                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();

                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();

                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());

                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");

                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }


                                if((rcInvoiceDetail.isComission()||rcInvoiceDetail.isPPNFeebase())&&!rcInvoiceDetail.isTax()){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                    if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                        invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                        invoice.setStInvoiceType("AR");
                                    }
                                }

                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }

                                 //HANYA HUTKOM SENTRALISASI YG BISA DIBAYAR PER POLIS
                                if(!rcp.getStARSettlementID().equalsIgnoreCase("38")){
                                    if (rcInvoiceDetail.isCommission2() && !rcInvoiceDetail.isFeeBase3() && !rcInvoiceDetail.isPPNFeebase()) {
                                        invoice.setStUsedFlag("Y");
                                    }
                                }


                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());

                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");

                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }


                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());

                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }

                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());

                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());

                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                                if(rcInvoiceDetail.isPPNFeebase())
                                    invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));

                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                                invoice.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                invoice.setDbEnteredAmount(rcc.getDbInvoiceAmount());


                                final DTOList ivdetails = new DTOList();

                                invoice.setDetails(ivdetails);

                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {

                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                        ivd.markNew();

                                        ivdetails.add(ivd);

                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                        ivd.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                        ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    }
                                }

                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());

                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );

                                    {

                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);

                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();

                                            ivdChild.markNew();

                                            ivdetails.add(ivdChild);

                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());

                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbEnteredAmount());
                                            ivdChild.setDbAmount(BDUtil.mul(childInvoiceDetailCek.getDbEnteredAmount(), actInvoice.getDbCurrencyRate(),2));
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                            ivdChild.setStRefID1(childInvoiceDetailCek.getStARInvoiceDetailID());
                                            ivdChild.setStRootID(childInvoiceDetailCek.getStARInvoiceDetailID());
                                        }
                                    }
                                }

                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }

                        }

                    }
                }
            }

            //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK JIKA KOMISI DI BAYAR
            //REMARK THIS KALAU PAKE METODE ACRUAL BASES
            if(!jurnalOnly)
            {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    final ARInvoiceView actInvoice = rcl.getInvoice();

                    if(taxAcrualBases) continue;

                    final DTOList detail = rcl.getDetails();

                    boolean parentLunas = false;

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();

                            if(rcInvoiceDetail==null) continue;

                            if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                parentLunas = false;
                                final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                for (int k = 0; k < detail.size(); k++) {
                                    ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                    ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                    if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                         if(d2.isCheck())
                                             parentLunas = true;

                                    }

                                }
                            }


                            if(!rcInvoiceDetail.isTax()) continue;

                            final BigDecimal comamt = rcc.getDbInvoiceAmount();

                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();

                            if(!parentLunas) continue;

                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();

                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();

                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");

                            if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                            }

                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());

                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");

                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }

                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());

                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }

                            String jenis = rcInvoiceDetail.getTrxLine().getStItemDesc().toUpperCase().startsWith("PPH21")?"PPH21":"PPH23";

                            invoice.setStNoSuratHutang(
                                "SHP/"+
                                jenis +
                                "/" +
                                invoice.getStARCustomerID()+
                                "/"+
                                invoice.getStCostCenterCode()+
                                "/"+
                                DateUtil.getMonth2Digit(rcp.getDtReceiptDate())+
                                "/"+
                                DateUtil.getYear(rcp.getDtReceiptDate()));


                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                            invoice.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                            invoice.setDbEnteredAmount(comamt);


                            final DTOList ivdetails = new DTOList();

                            invoice.setDetails(ivdetails);


                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );

                            {

                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();

                                    ivd.markNew();

                                    ivdetails.add(ivd);

                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                    ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                }
                            }

                                    invoice.recalculate2();

                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);

                        }
                    }

                }
            }
                //end hutang pajak

            //UPDATE SISA TITIPAN
            //if(!jurnalOnly){
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    final DTOList titip = rl.getListTitipan();
                    for (int j = 0; j < titip.size(); j++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);

                        updateAndCreateTitipanPremiPolisKhusus(S,rcp,rlTitipan,rlTitipan.getStTitipanPremiID());
                    }
                }
            //}

            }

            S.store(rcp);

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
 }

private void updateAndCreateTitipanPremiPolisKhusus(SQLUtil S, ARReceiptView rcp, ARReceiptLinesView rl, String stTitipanPremiID) throws Exception{
        //final SQLUtil S = new SQLUtil();
        try{
                TitipanPremiExtracomptableView titipan = getTitipanPremiPolisKhusus(stTitipanPremiID);

                BigDecimal totalPemakaian = getDbPemakaianTitipanPremiPolisKhusus(stTitipanPremiID);

                BigDecimal sisaTitipan = BDUtil.sub(titipan.getDbAmount(), totalPemakaian);

                sisaTitipan = sisaTitipan.setScale(2,BigDecimal.ROUND_HALF_UP);

                BigDecimal pemakaian = rl.getDbTitipanPremiUsedAmount();

                pemakaian = pemakaian.setScale(2,BigDecimal.ROUND_HALF_UP);

                if(BDUtil.isZeroOrNull(sisaTitipan)){
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" sudah nol, tidak bisa untuk realisasi");
                }

                if(BDUtil.biggerThanZero(sisaTitipan)){
                    if(BDUtil.lesserThan(sisaTitipan,pemakaian))
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" tidak mencukupi untuk realisasi");
                }

                if(BDUtil.lesserThanZero(sisaTitipan)){
                    if(BDUtil.biggerThanZero(BDUtil.sub(sisaTitipan,pemakaian)))
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" tidak mencukupi untuk realisasi");
                }

                titipan.markUpdate();

                BigDecimal sisaTitipanUpdate = BDUtil.sub(sisaTitipan, rl.getDbTitipanPremiUsedAmount());

                titipan.setDbBalance(sisaTitipanUpdate);


                S.store(titipan);
                //S.release();
        }catch(Exception e) {
            ctx.setRollbackOnly();
            throw e;
        }

     }

public TitipanPremiExtracomptableView getTitipanPremiPolisKhusus(String stArTitipanID) throws Exception {
        DTOPool.getInstance().clear();

        if (stArTitipanID==null) return null;

        return (TitipanPremiExtracomptableView) DTOPool.getInstance().getDTO(TitipanPremiExtracomptableView.class, stArTitipanID);
}

public BigDecimal getDbPemakaianTitipanPremiPolisKhusus(String trxID) throws Exception {

        final SQLUtil S = new SQLUtil();

        try {
            final PreparedStatement PS = S.setQuery("select coalesce(SUM(b.titipan_premi_used_amount),0) as pemakaian "+
                                                    " from ar_receipt a "+
                                                    " inner join ar_receipt_lines b on a.ar_receipt_id = b.receipt_id "+
                                                    " where a.status = 'POST' AND b.titipan_premi_id = ? and a.receipt_date>='2024-01-01 00:00:00'");

            PS.setString(1, trxID);

            final ResultSet RS = PS.executeQuery();

            if (RS.next()) return RS.getBigDecimal(1);

            return null;

        } finally {
            S.release();
        }
    }

public void reversePembayaranPolisKhusus(ARReceiptView rcp) throws Exception {

        final SQLUtil S = new SQLUtil();
        try {
            logger.logDebug("+++++++++++++ MASUK CEK PEMBAYARAN HUTANG ++++++++++++++++");

            //CEK PEMBAYARAN HUTANG KOMISI
            //looping rincian pembayaran
            final DTOList detailsInvoice = rcp.getDetails();

            boolean sudahBayarHutang = false;
            String keterangan = "";

            for (int i = 0; i < detailsInvoice.size(); i++) {
                ARReceiptLinesView rclInvoice = (ARReceiptLinesView) detailsInvoice.get(i);

                //rincian
                final DTOList details = rclInvoice.getDetails();

                for (int j = 0; j < details.size(); j++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) details.get(j);

                    if(rcl.getStInvoiceDetailID()==null) continue;

                    ARInvoiceView invoice = rcl.getInvoice();

                    if(invoice!=null){
                        logger.logDebug("################# CEK HUTANG KOMISI NIH...");

                        //dapetin pol id & ar_invoice_detail nya
                        String policyID = rcl.getStPolicyID();
                        String arInvoiceDetailID = rcl.getStInvoiceDetailID();

                        //cek hutang komisi udah dibayar belum by pol id & invoice detail id
                        String cekKomisi = "SELECT * "+
                                     " FROM AR_INVOICE  "+
                                     " WHERE amount_settled is not null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                     " and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?";

                        PreparedStatement PCekKomisi = S.setQuery(cekKomisi);

                        PCekKomisi.setObject(1, policyID);
                        PCekKomisi.setObject(2, arInvoiceDetailID);

                        ResultSet RSCekKomisi = PCekKomisi.executeQuery();

                        if (RSCekKomisi.next()){
                            logger.logDebug("################# DAPET HASILNYA, HUTANG UDAH DIBAYAR ...");
                            sudahBayarHutang = true;
                            keterangan = keterangan + "<br>Hutang komisi polis "+invoice.getStAttrPolicyNo()+" "+ invoice.getStInvoiceNo()+" sudah dibayar pada no bukti "+ RSCekKomisi.getString("receipt_no");
                        }

                        S.release();

                    }
                }
            }



            //logger.logDebug("+++++++++++++ SUDAH BAYAR HUTANG : "+ sudahBayarHutang);

            //CEK APAKAH POLIS SUDAH DIAJUKAN PROPOSAL KOMISI
            /*INVOICEID*/
            String cekCommInv = "select b.invoice_no as pol_no,b.no_surat_hutang "
                    + "from ( select b.pol_id,b.ar_invoice_no,b.ar_invoice_id "
                    + "from ar_receipt a "
                    + "INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                    + "where a.ar_receipt_id = ? "
                    + "group by b.pol_id,b.ar_invoice_no,b.ar_invoice_id ) a "
                    + "inner join ( select a.ins_pol_id,a.no_surat_hutang,a.invoice_no,a.ar_invoice_ref_id "
                    + "from ins_proposal_komisi a "
                    + "where a.cc_code = ? "
                    + ") b on b.ar_invoice_ref_id = a.ar_invoice_id ";

            PreparedStatement P9 = S.setQuery(cekCommInv);

            P9.setObject(1, rcp.getStARReceiptID());
            P9.setObject(2, rcp.getStCostCenterCode());
            ResultSet RS9 = P9.executeQuery();

            boolean sudahProposalKomisi = false;
            String polno = null;
            String shkno = null;
            if (RS9.next()) {
                sudahProposalKomisi = true;
                polno = RS9.getString("pol_no");
                shkno = RS9.getString("no_surat_hutang");
            }

            logger.logDebug("+++++++++++++ SUDAH PROPOSAL KOMISI : " + sudahProposalKomisi);

            S.release();

            //JIKA SUDAH PROPOSAL, GA BISA REVERSE PEMBAYARAN PREMI
            if (sudahProposalKomisi) {
                if (rcp.getStARSettlementID().equalsIgnoreCase("1")
                        || rcp.getStARSettlementID().equalsIgnoreCase("25")) {
                    //reverse(rcp,receipt_no);
                    throw new RuntimeException("Komisi polis " + polno + " sudah diajukan Proposal Komisi, reverse SHK : " + shkno + "\n"
                            + " dan hapus polis yang bersangkutan pada Proposal Komisi.");
                }
            }

            //JIKA PEMBAYARAN KOAS JGN CEK HUTANG KOMISI/PAJAK
            if (rcp.getStARSettlementID().equalsIgnoreCase("13") || rcp.getStARSettlementID().equalsIgnoreCase("8")) {
                sudahBayarHutang = false;
            }

            //JIKA PEMBAYARAN KOMISI JGN CEK HUTANG PAJAK
            if (rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33") || rcp.getStARSettlementID().equalsIgnoreCase("39")
                    || rcp.getStARSettlementID().equalsIgnoreCase("45")) {
                sudahBayarHutang = false;
            }

            if (sudahBayarHutang) {
                //reverse(rcp,receipt_no);
                //throw new RuntimeException("Hutang komisi/pajak sudah dibayar, hapus/reverse dulu pembayaran komisi/pajak nya pada no bukti : " + receipt_no);
                throw new RuntimeException(keterangan);
            }


            reversePolisKhusus(rcp, rcp.getStReceiptNo());

            if (!rcp.getStARSettlementID().equalsIgnoreCase("13") && !rcp.getStARSettlementID().equalsIgnoreCase("8")
                    && !rcp.getStARSettlementID().equalsIgnoreCase("2") && !rcp.getStARSettlementID().equalsIgnoreCase("33")
                    && !rcp.getStARSettlementID().equalsIgnoreCase("39") && !rcp.getStARSettlementID().equalsIgnoreCase("45")) {

                //looping hapus invoice details pembayaran
                for (int i = 0; i < detailsInvoice.size(); i++) {
                    ARReceiptLinesView rclInvoice = (ARReceiptLinesView) detailsInvoice.get(i);

                    //rincian
                    final DTOList details = rclInvoice.getDetails();

                    for (int j = 0; j < details.size(); j++) {
                        ARReceiptLinesView rcl = (ARReceiptLinesView) details.get(j);

                        if(rcl.getStInvoiceDetailID()==null) continue;

                        ARInvoiceView invoice = rcl.getInvoice();

                        if(invoice!=null){
                            logger.logDebug("################# HAPUS HUTANG KOMISI NIH...");

                            //dapetin pol id & ar_invoice_detail nya
                            String policyID = rcl.getStPolicyID();
                            String arInvoiceDetailID = rcl.getStInvoiceDetailID();

                            //delete invoice detail hutang komisi yg belum dibayar
                            String deleteHutangDetail = "delete from ar_invoice_details "+
                                                        " where ar_invoice_id in( "+
                                                        "     select ar_invoice_id FROM AR_INVOICE "+
                                                        "     WHERE amount_settled is null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                                        "     and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?)";

                            PreparedStatement PDeleteDetail = S.setQuery(deleteHutangDetail);

                            PDeleteDetail.setObject(1, policyID);
                            PDeleteDetail.setObject(2, arInvoiceDetailID);

                            int rDetail = PDeleteDetail.executeUpdate();
                            S.release();

                            //hapus ar invoice hutang komisi yg belum dibayar
                            String deleteHutangInvoice = "delete from ar_invoice "+
                                                        " where ar_invoice_id in( "+
                                                        "   select ar_invoice_id FROM AR_INVOICE "+
                                                        "   WHERE amount_settled is null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                                        "   and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?)";

                            PreparedStatement PDeleteInvoice = S.setQuery(deleteHutangInvoice);

                            PDeleteInvoice.setObject(1, policyID);
                            PDeleteInvoice.setObject(2, arInvoiceDetailID);

                            int rInvoice = PDeleteInvoice.executeUpdate();
                            S.release();

                        }
                    }
                }

                PreparedStatement P2 = S.setQuery("update ins_policy set payment_date = null, payment_note = null, receipt_no = null "
                        + " WHERE pol_id IN "
                        + " (select B.POL_ID "
                        + " from ar_receipt a  "
                        + " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                        + " where a.ar_receipt_id = ? group by b.pol_id ) ");
                P2.setObject(1, rcp.getStARReceiptID());
                int r2 = P2.executeUpdate();
                S.release();


            }


        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }

        //CEK JIKA ADA HUTANG DAN SUDAH DI BAYARKAN

    }

public void reversePolisKhusus(ARReceiptView rcp, String receipt_no) throws Exception {
        final SQLUtil S = new SQLUtil();

        try {

            PreparedStatement P = S.setQuery("update ar_receipt set posted_flag = 'N',status = 'NEW' where receipt_no = ?");

            P.setObject(1, receipt_no);
            int r = P.executeUpdate();
            S.release();

            PreparedStatement P2 = S.setQuery("delete from gl_je_detail where trx_no in ('C" + receipt_no.substring(1) +"', 'D"+ receipt_no.substring(1) +"','"+ receipt_no +"')");

            //P2.setObject(1, receipt_no);
            int r2 = P2.executeUpdate();
            S.release();

            if(rcp.getStReceiptNo2()!= null){
                PreparedStatement P21 = S.setQuery("delete from gl_je_detail where trx_no = ?");

                P21.setObject(1, rcp.getStReceiptNo2());
                int r21 = P21.executeUpdate();
                S.release();
            }


            PreparedStatement P3 = S.setQuery("update ar_invoice set amount_settled = null,receipt_date = null,used_flag = null "+
                                           " where ar_invoice_id in "+
                                           "  (select b.ar_invoice_id "+
                                           "  from ar_receipt a  "+
                                           "  INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                           "  where a.ar_receipt_id = ?)");

            P3.setObject(1, rcp.getStARReceiptID());
            int r3 = P3.executeUpdate();
            S.release();

            PreparedStatement P4 = S.setQuery("update ar_invoice_details set amount_settled = null "+
                                           " where ar_invoice_id in "+
                                           "  (select b.ar_invoice_id "+
                                           "  from ar_receipt a  "+
                                           "  INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                           "  where a.ar_receipt_id = ?)");

            P4.setObject(1, rcp.getStARReceiptID());
            int r4 = P4.executeUpdate();
            S.release();

            /*
            PreparedStatement P5 = S.setQuery("UPDATE AR_TITIPAN_PREMI X SET BALANCE = BALANCE + "+
                                             "   ( "+
                                             "    SELECT TITIPAN_PREMI_USED_AMOUNT  "+
                                             "    FROM AR_RECEIPT A "+
                                             "    INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                             "    WHERE A.ar_receipt_id = ? "+
                                             "    AND TITIPAN_PREMI_ID IS NOT NULL "+
                                             "    AND TITIPAN_PREMI_ID = X.trx_id "+
                                             "    ) "+
                                             "    WHERE TRX_ID IN "+
                                             "    (SELECT TITIPAN_PREMI_ID "+
                                             "    FROM AR_RECEIPT A "+
                                             "    INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                             "    WHERE A.ar_receipt_id = ? "+
                                             "    AND TITIPAN_PREMI_ID IS NOT NULL);");

            P5.setObject(1, rcp.getStARReceiptID());
            P5.setObject(2, rcp.getStARReceiptID());
            int r5 = P5.executeUpdate();
            S.release();
            */

            //BALIKIN NILAI TITIPAN
            final SQLAssembler sqa = new SQLAssembler();

            sqa.addSelect("titipan_premi_id::varchar,titipan_premi_amount,titipan_premi_used_amount ");
            sqa.addQuery("from ar_receipt_lines "+
                          " where receipt_id = "+ rcp.getStARReceiptID() +" and line_type = 'TITIP' and titipan_premi_id is not null ");

            final DTOList l = ListUtil.getDTOListFromQuery(
                sqa.getSQL(),
                HashDTO.class
                );

            SQLUtil SUpdate = new SQLUtil();

            for (int i = 0; i < l.size(); i++) {
                 HashDTO h = (HashDTO) l.get(i);

                 if(h.getFieldValueByFieldNameBD("titipan_premi_used_amount")==null) continue;

                 String sqlUpdate = "update ar_titipan_premi_extracomptable set balance = balance + (" + h.getFieldValueByFieldNameBD("titipan_premi_used_amount").doubleValue()+
                                    ") where trx_id = "+ h.getFieldValueByFieldNameST("titipan_premi_id") +";";


                 PreparedStatement PS = SUpdate.setQuery(sqlUpdate);

                 int j = PS.executeUpdate();

                 if (j == 0) {
                    throw new Exception("gagal membalikkan nilai titipan premi");
                 }
            }

            SUpdate.releaseResource();
            SUpdate.release();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }


    }

public void saveRealisasiTitipanPremiReinsuranceOLD(ARReceiptView rcp) throws Exception {

        boolean taxAcrualBases = true;

        rcp.validatePembayaranPremi();

        boolean jurnalOnly = false;

        boolean bentukHutangOnly = false;

        final SQLUtil S = new SQLUtil();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());

        if (rcp.getStEntityID()!=null){

            if(rcp.getEntity2(rcp.getStEntityID()).getStShortName()!=null)
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStShortName());
            else
                gla.setDesc("Y",rcp.getEntity2(rcp.getStEntityID()).getStEntityName());
        }

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));

            if(rcp.isNew()){
                rcp.generateReceiptNo();

                rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            }

            if(!rcp.isNew())
                if(rcp.getStReceiptNo2()==null)
                    rcp.setStReceiptNo2(rcp.generateReceiptNo2());

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());


            String stARInvoiceID="";

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());
                if(rcl.isCheck())
                     rcl.setStARInvoiceDetailRootID(rcl.getInvoiceDetail().getStARInvoiceDetailID());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                //if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptNo(rcp.getStReceiptNo());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rcl.getDtReceiptDate()!=null){
                            rclsub.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclsub.isCheck())
                            if(rclsub.getInvoiceDetail()!=null)
                                rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStARInvoiceDetailID());

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);//simpan ke receipt lines
                //}

                //if (rcl.getListTitipan().size()>0) {
                    final DTOList subTitipan = rcl.getListTitipan();
                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);

                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo2());

                        if(rcl.getDtReceiptDate()!=null){
                            rclTitipan.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclTitipan.isCheck())
                            if(rclTitipan.getInvoiceDetail()!=null)
                                rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());

                        if (rclTitipan.isNew()){
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                        }
                    }

                    S.store(subTitipan);//simpan ke receipt lines

                    if(rcl.getPolicy()!=null){
                        InsurancePolicyView pol = rcl.getPolicy();

                        pol.setDtPaymentDate(rcl.getDtReceiptDate());
                        pol.setStReceiptNo(rcl.getStReceiptNo());
                        pol.setStPaymentNotes(rcl.getStReceiptNo());
                        pol.markUpdate();
                        S.store(pol);
                    }


            }

            S.store(rcp.getNotes());//simpan note

            S.store(gLs);//simpan excess

            S.store(details);//simpen receipt dr invoice

            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            //final boolean doPost = Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            //C1209242424001 00001
            //01234567890123 456789

            if(rcp.getDetails().size()==0){
                 deleteAllDetail(rcp);
                 rcp.setStARAPInvoiceID(null);
            }


            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));



            /*
            if (doUnPost) {
                getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }*/

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                applicator.setCode('B', rcp.getStCostCenterCode());

                if(rcp.getStEntityID()!=null){
                    final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                    applicator.setCode('Y', entityGLCode);

                    applicator.setDesc("Y",rcp.getEntity().getStShortName());

                    if(entityGLCode.equalsIgnoreCase("00000"))
                        applicator.setDesc("Y","");
                }else{
                    applicator.setCode('Y', "00000");
                    applicator.setDesc("Y","");
                }

                // AR DR vs bank CR

                final BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                //tambahin ent_id
                gl.setStRefEntID(rcp.getStEntityID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.setStSummaryFlag("Y");
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/

                final String paymentDesc = "Selisih Bayar Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();


                //POSTING JURNAL HEADER RECEIPT VIEW
                if(!bentukHutangOnly){
                      if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {
                        final JournalView head = gl.copy();

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl3.getInvoice()==null)
                                jurnalHead = false;

                        String ccCodepolis = "";

                        if(rl3.getPolicy()!=null)
                                ccCodepolis = rl3.getPolicy().getStCostCenterCode();

                        //Get Akun header
                        String accountHeaderID = "";

                        if(ccCodepolis.equalsIgnoreCase("80")){
                            applicator.setCode('Y', "00001");
                            applicator.setCode('G', "00001");
                            applicator.setCode('B', "80");

                            accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                        }else{
                            accountHeaderID = rcp.getStAccountID();
                        }

                        head.setDbAutoCredit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                        head.setStAccountIDNotNull(accountHeaderID,"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                        head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                        String desc1 = "";

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);

                            if(rl.getStInvoiceNo()!=null) desc1 = rl.getStInvoiceNo();

                            head.setStDescription("TERIMA PEMBAYARAN "+ desc1);
                            if(rl.getDtReceiptDate()!=null){
                                head.setDtApplyDate(rl.getDtReceiptDate());
                            }
                        } else {
                            head.setStDescription("TERIMA "+rcp.getDetails().size()+" PEMBAYARAN");
                            head.setDbAutoDebit(BDUtil.mul(negator,rcp.getDbEnteredAmount()));
                            head.setDbAutoCredit(BDUtil.mul(negator,BDUtil.zero));
                        }

                        if(rl3.getInvoice()!=null)
                            head.setStPolicyNo(rl3.getInvoice().getStAttrPolicyNo());

                        if(jurnalHead)
                            journal.add(head);

                    }
                }

                //END POSTING JURNAL HEADER RECEIPT VIEW

                boolean moreThan1Policy = rcp.getDetails().size()>1;

              if(!bentukHutangOnly)
              { // POSTING JURNAL PELUNASAN RECEIPT LINES / DETAIL
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    boolean jurnalHead = true;
                        if(rcp.getStARSettlementID().equalsIgnoreCase("25"))
                            if(rl.getInvoice()==null)
                                jurnalHead = false;

                    if(rl.getInvoice()!=null){
                        applicator.setCode('X', rl.getInvoice().getPolicyType().getStGLCode());
                        applicator.setDesc("X", rl.getInvoice().getPolicyType().getStShortDescription());
                    }

                    if (rl.isDelete()) continue;

                    String ccCodepolis = "";

                    if(rl.getPolicy()!=null)
                           ccCodepolis = rl.getPolicy().getStCostCenterCode();

                    //Get Akun header
                    String accountHeaderID = "";

                    if(ccCodepolis.equalsIgnoreCase("80")){
                        applicator.setCode('Y', "00001");
                        applicator.setCode('G', "00001");
                        applicator.setCode('B', "80");

                        accountHeaderID = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());
                    }else{
                        accountHeaderID = rcp.getStAccountID();
                    }


                    if(moreThan1Policy){

                        if(!ccCodepolis.equalsIgnoreCase("80")){
                            if (rc.isBank() && !rl.isGL()) {
                                final JournalView head = gl.copy();

                                head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");

                                String descHead = "";
                                if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();
                                head.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                if(rl.getStInvoiceID()!=null){
                                    head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                }

                                if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                    head.setDtApplyDate(rl.getDtReceiptDate());
                                }

                                if(jurnalHead)
                                    journal.add(head);

                            }
                        }else{
                                if (rc.isBank() && !rl.isGL()) {
                                    final JournalView head = gl.copy();

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', "80");

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    head.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");

                                    String descHead = "";
                                    if(rl.getInvoice()!=null) descHead = rl.getInvoice().getStAttrPolicyNo();
                                    head.setStDescription("TERIMA PEMBAYARAN "+descHead);
                                    head.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    head.setLgHeaderAccountID(Long.valueOf(accountHeaderID));
                                    head.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountHeaderID).getStAccountNo());

                                    if(rl.getStInvoiceID()!=null){
                                        head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                                    }

                                    if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                        head.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    if(jurnalHead)
                                        journal.add(head);

                                }
                        }

                    }

                    if(rl.getStARSettlementExcessID()!=null && !rl.isGL()){
                        final JournalView excessBank = gl.copy();

                        BigDecimal amt = BDUtil.mul(negator,rl.getDbExcessAmount());
                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        if (rcp.getDetails().size() > 1){
                            //ADD JURNAL BANK NYA

                            excessBank.setDbAutoCredit(amt);
                            excessBank.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                            excessBank.setStDescription(rl.getStExcessDescription());
                            excessBank.setStCurrencyCode(rcp.getStCurrencyCode());
                            excessBank.setDbCurrencyRate(rcp.getDbCurrencyRate());

                            if(rl.getStInvoiceID()!=null){
                                    excessBank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                            }

                            if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                                excessBank.setDtApplyDate(rl.getDtReceiptDate());
                            }

                            journal.add(excessBank);
                            //END JURNAL BANK
                        }


                        final JournalView excess = gl.copy();

                        final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());

                        if(rl.getInvoice()!=null) excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        if(rl.getStInvoiceID()!=null){
                                excess.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        }

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            excess.setDtApplyDate(rl.getDtReceiptDate());
                        }

                        journal.add(excess);

                    }


                    final JournalView line = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());
                    //POSTING LINE
                    boolean bayarTanpaPremi = false;
                    BigDecimal totalBayarTanpaPremi = null;


                    //xxxx
                        
                    //END

                    DTOList titipan = rl.getListTitipan();

                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);

                        ARReceiptLinesView indukTitipan = (ARReceiptLinesView) rl;
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiReinsuranceView titipanPremi = getTitipanPremiReinsurance(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Akun titipan No Bukti : "+titipanPremi.getStTransactionNo() + " Account ID : "+ titipanPremi.getStAccountID() +" tidak ditemukan");

                        if(titipanPremi.getStDescription() != null)
                            jurnalTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiUsedAmount()));

                        jurnalTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                        if(rl.getInvoice()!=null)
                            jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        if(indukTitipan.getStAccountID()!=null)
                            jurnalBankTitipan.setStAccountIDNotNull(indukTitipan.getStAccountID(),"Invalid or empty account in payment method ");

                        jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());

                        if(titipanPremi.getStDescription() != null)
                            jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalBankTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalBankTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());

                        jurnalBankTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalBankTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalBankTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        journal.add(jurnalBankTitipan);

                        journal.add(jurnalTitipan);
                    }



                    if (rl.isGL()) {

                        final JournalView excess = gl.copy();

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();
                        ARReceiptLinesView rlxc = (ARReceiptLinesView) combined.get(0);

                        if (neg) amt=BDUtil.negate(amt);

                        //final String xcAcc = gla.getAccountID(rl.getStExcessAccountID());
                        excess.setDbAutoDebit(amt);
                        excess.setStAccountIDNotNull(rl.getStExcessAccountID(),"Invalid or empty account in excess account "+xc.getStDescription());

                        excess.setStDescription(rl.getStExcessDescription());
                        excess.setStCurrencyCode(rcp.getStCurrencyCode());
                        excess.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        excess.setStPolicyNo(rlxc.getInvoice().getStAttrPolicyNo());

                        journal.add(excess);
                    }

                    //BUAT JURNAL RAK KANTOR CABANG
                    if(rl.getPolicy()!=null){
                            if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){

                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();

                                    bank.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    AccountView account3 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //122208934500 00
                                    //0123456789012345
                                    String searchAccount3 = account3.getStAccountNo().substring(0,12);

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', rcp.getStCostCenterCode());

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStAccountIDNotNull(rcp.getStAccountID() ,"Invalid or empty account in payment method ");
                                    bank.setStDescription("PEMBAYARAN PREMI "+rl.getInvoice().getStAttrPolicyNo());
                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    bank.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    //AccountView account2 = getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID());
                                    //"210000000000 12"
                                    //0123456789012345
                                    String searchAccount2 = "210000000002";

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }

                        //JURNAL RAK UNIT NON AKS
                        if(rl.getPolicy().getStCostCenterCode().equalsIgnoreCase("80")){
                                if (rc.isBank()) {
                                    final JournalView bank = gl.copy();
                                    bank.setDbAutoDebit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));


                                    final String entityGLCode = getEntity(rcp.getStAccountEntityID()).getStGLCode();

                                    //applicator.setCode('Y', entityGLCode);
                                    //applicator.setCode('G', entityGLCode);
                                    //applicator.setCode('B', "00");

                                    applicator.setCode('Y', "00001");
                                    applicator.setCode('G', "00001");
                                    applicator.setCode('B', "80");

                                    String accountID2 = applicator.getAccountIDUsingLike(rcp.getReceiptClass().getStReference1().trim());

                                    bank.setStTransactionNo(rcp.getStReceiptNo());
                                    bank.setStAccountIDNotNull(accountID2,"Invalid or empty account in payment method ");
                                    bank.setStDescription("PEMBAYARAN PREMI "+ rl.getInvoice().getStAttrPolicyNo());

                                    bank.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        bank.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    bank.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    bank.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    journal.add(bank);

                                    final JournalView rak = gl.copy();
                                    rak.setDbAutoCredit(BDUtil.mul(negator,rl.getDbTotalAmountPerLine()));

                                    String searchAccount2 = "210000000002";

                                    //applicator.setCode('B', "00");

                                    rak.setStAccountIDNotNull(applicator.getAccountID(searchAccount2),"Invalid or empty account in payment method ");
                                    rak.setStDescription(applicator.getStGLDesc() + " BYR PRM "+ rl.getInvoice().getStAttrPolicyNo());
                                    rak.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    rak.setStTransactionNo(rcp.getStReceiptNo());
                                    rak.setLgHeaderAccountID(Long.valueOf(accountID2));
                                    rak.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(accountID2).getStAccountNo());

                                    if(rl.getDtReceiptDate()!=null){
                                        rak.setDtApplyDate(rl.getDtReceiptDate());
                                    }

                                    journal.add(rak);
                                }
                        }
                    }




                }

            }

                
                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
                

                 //BUAT HUTANG PIUTANG PIHAK KETIGA (HUTANG KOMISI, BROKERFEE, HFEE JIKA BELUM DI BAYAR)
              if(!jurnalOnly)
              {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    final ARInvoiceView actInvoice = rcl.getInvoice();

                    final DTOList detail = rcl.getDetails();

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();

                            if(rcInvoiceDetail==null) continue;

                            if(rcInvoiceDetail.isTax()) continue;

                            if(!rcc.isCheck()){

                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct()))
                                    continue;

                                final ARInvoiceView invoice = new ARInvoiceView();
                                invoice.markNew();

                                ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();

                                invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                                invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                                invoice.setStRefID2(refIVD.getStRefID0());
                                invoice.setStPolicyID(actInvoice.getStPolicyID());

                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");

                                if(rcInvoiceDetail.isGrossPremium()&&BDUtil.biggerThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AR");
                                }


                                if((rcInvoiceDetail.isComission()||rcInvoiceDetail.isPPNFeebase())&&!rcInvoiceDetail.isTax()){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                    if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                        invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                        invoice.setStInvoiceType("AR");
                                    }
                                }

                                if(rcInvoiceDetail.isComission()&&rcInvoiceDetail.isTax()&&BDUtil.lesserThanZero(rcc.getDbOutstandingAmountAct())){
                                    invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                    invoice.setStInvoiceType("AP");
                                }

                                 //HANYA HUTKOM SENTRALISASI YG BISA DIBAYAR PER POLIS
                                if(!rcp.getStARSettlementID().equalsIgnoreCase("38")){
                                    if (rcInvoiceDetail.isCommission2() && !rcInvoiceDetail.isFeeBase3() && !rcInvoiceDetail.isPPNFeebase()) {
                                        invoice.setStUsedFlag("Y");
                                    }
                                }


                                invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                                invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                                invoice.setDtDueDate(invoice.getDtInvoiceDate());

                                invoice.setDbAmountSettled(null);
                                invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                                invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                                invoice.setStPostedFlag("N");

                                invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                                if(invoice.getStARCustomerID()==null){
                                    invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                                }


                                invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                                invoice.setStEntityID(invoice.getStARCustomerID());

                                if(invoice.getStEntityID()==null){
                                    invoice.setStEntityID(invoice.getStEntityID());
                                }

                                //invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());
                                if(rcInvoiceDetail.getEntity()!=null)
                                    applicator.setCode('P', rcInvoiceDetail.getEntity().getStGLCode());

                                invoice.setStGLARAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(rcc.getInvoice().getStInvoiceType())));
                                //if(invoice.getStGLARAccountID()==null) invoice.setStGLARAccountID(rcInvoiceDetail.getStGLAccountID());

                                invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                                if(!rcInvoiceDetail.isComission())
                                    invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                                if(rcInvoiceDetail.isPPNFeebase())
                                    invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));

                                invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                                invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                                invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                                invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                                invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                                invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                                invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                                invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                                invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                                invoice.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                invoice.setDbEnteredAmount(rcc.getDbInvoiceAmount());


                                final DTOList ivdetails = new DTOList();

                                invoice.setDetails(ivdetails);

                                final DTOList artlines = ListUtil.getDTOListFromQuery(
                                        "select * from ar_trx_line where ar_trx_line_id = ?",
                                        new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                        ARTransactionLineView.class
                                        );
                                final ARInvoiceDetailView ivd = new ARInvoiceDetailView();
                                {

                                    if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                    for (int k = 0; k < artlines.size(); k++) {
                                        ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                        ivd.markNew();

                                        ivdetails.add(ivd);

                                        ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                        ivd.loadSettings();
                                        //ivd.setStGLAccountID(rcInvoiceDetail.getStGLAccountID());
                                        ivd.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                        ivd.setStEntityID(rcInvoiceDetail.getStEntityID());
                                        ivd.setDbEnteredAmount(rcc.getDbInvoiceAmount());
                                        ivd.setDbAmount(BDUtil.mul(rcc.getDbInvoiceAmount(), actInvoice.getDbCurrencyRate(),2));
                                        ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                        ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                        ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    }
                                }

                                final ARInvoiceDetailView childInvoiceDetailCek = getRefARInvoiceDetail(rcc.getInvoiceDetail().getStARInvoiceDetailID());

                                if(childInvoiceDetailCek!=null){
                                    final DTOList artlines2 = ListUtil.getDTOListFromQuery(
                                            "select * from ar_trx_line where ar_trx_line_id = ?",
                                            new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                            ARTransactionLineView.class
                                            );

                                    {

                                        if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                        for (int k = 0; k < artlines2.size(); k++) {
                                            ARTransactionLineView artl = (ARTransactionLineView) artlines2.get(k);

                                            final ARInvoiceDetailView ivdChild = new ARInvoiceDetailView();

                                            ivdChild.markNew();

                                            ivdetails.add(ivdChild);

                                            ivdChild.setStARTrxLineID(childInvoiceDetailCek.getStARTrxLineID());
                                            ivdChild.loadSettings();
                                            //ivdChild.setStGLAccountID(childInvoiceDetailCek.getStGLAccountID());

                                            ivdChild.setStGLAccountID(applicator.getAccountID(rcInvoiceDetail.getTrxLine().getStGLArAccountByType(invoice.getStInvoiceType())));
                                            ivdChild.setDbEnteredAmount(childInvoiceDetailCek.getDbEnteredAmount());
                                            ivdChild.setDbAmount(BDUtil.mul(childInvoiceDetailCek.getDbEnteredAmount(), actInvoice.getDbCurrencyRate(),2));
                                            ivdChild.setStEntityID(childInvoiceDetailCek.getStEntityID());
                                            ivdChild.setStTaxCode(childInvoiceDetailCek.getStTaxCodeOnSettlement());
                                            ivdChild.setRef(ivd);
                                            ivdChild.setStTaxFlag("Y");
                                            ivdChild.setStRefID0(childInvoiceDetailCek.getStRefID0());
                                            ivdChild.setStRefID1(childInvoiceDetailCek.getStARInvoiceDetailID());
                                            ivdChild.setStRootID(childInvoiceDetailCek.getStARInvoiceDetailID());
                                        }
                                    }
                                }

                                final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                invoice.setStRefInvoiceID(refid);
                                save(invoice);
                            }

                        }

                    }
                }
            }

            //BUAT HUTANG PAJAK KE DEPARTEMEN PAJAK JIKA KOMISI DI BAYAR
            //REMARK THIS KALAU PAKE METODE ACRUAL BASES
            if(!jurnalOnly)
            {
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                    final ARInvoiceView actInvoice = rcl.getInvoice();

                    if(taxAcrualBases) continue;

                    final DTOList detail = rcl.getDetails();

                    boolean parentLunas = false;

                    if (detail.size()>0) {

                        for (int j = 0; j < detail.size(); j++) {
                            ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                            final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();

                            if(rcInvoiceDetail==null) continue;

                            if(rcInvoiceDetail.getStRefInvoiceDetailID()!=null){
                                parentLunas = false;
                                final String ref = rcInvoiceDetail.getStRefInvoiceDetailID();
                                for (int k = 0; k < detail.size(); k++) {
                                    ARReceiptLinesView d2 = (ARReceiptLinesView) detail.get(k);

                                    ARInvoiceDetailView rcInvoiceDetail2 = d2.getInvoiceDetail();
                                    if(ref.equalsIgnoreCase(rcInvoiceDetail2.getStARInvoiceDetailID())){
                                         if(d2.isCheck())
                                             parentLunas = true;

                                    }

                                }
                            }


                            if(!rcInvoiceDetail.isTax()) continue;

                            final BigDecimal comamt = rcc.getDbInvoiceAmount();

                            final ARInvoiceDetailView parentInvoiceDetail = rcc.getInvoiceDetail().getRef();

                            if(!parentLunas) continue;

                            final ARInvoiceView invoice = new ARInvoiceView();
                            invoice.markNew();

                            ARInvoiceDetailView refIVD = rcc.getInvoiceDetail();

                            invoice.setStRefID0("RCP/"+rcp.getStARReceiptID());
                            invoice.setStRefID1("RCC/"+rcc.getStInvoiceDetailID());
                            invoice.setStRefID2(refIVD.getStRefID0());
                            invoice.setStPolicyID(actInvoice.getStPolicyID());
                            invoice.setStInvoiceNo("HUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                            invoice.setStInvoiceType("AP");

                            if(rcc.getInvoice().getStInvoiceType().equalsIgnoreCase("AP")){
                                invoice.setStInvoiceNo("PIUTANG "+ rcc.getStDescription() +" : " + rcl.getStInvoiceNo());
                                invoice.setStInvoiceType("AR");
                            }

                            invoice.setStCostCenterCode(actInvoice.getStCostCenterCode());
                            invoice.setDtInvoiceDate(rcp.getDtReceiptDate());
                            invoice.setDtDueDate(invoice.getDtInvoiceDate());

                            invoice.setDbAmountSettled(null);
                            invoice.setStCurrencyCode(actInvoice.getStCurrencyCode());
                            invoice.setDbCurrencyRate(actInvoice.getDbCurrencyRate());
                            invoice.setStPostedFlag("N");

                            invoice.setStARCustomerID(rcInvoiceDetail.getStEntityID());
                            if(invoice.getStARCustomerID()==null){
                                invoice.setStARCustomerID(actInvoice.getStARCustomerID());
                            }

                            invoice.setDtMutationDate(invoice.getDtInvoiceDate());
                            invoice.setStEntityID(invoice.getStARCustomerID());

                            if(invoice.getStEntityID()==null){
                                invoice.setStEntityID(invoice.getStEntityID());
                            }

                            String jenis = rcInvoiceDetail.getTrxLine().getStItemDesc().toUpperCase().startsWith("PPH21")?"PPH21":"PPH23";

                            invoice.setStNoSuratHutang(
                                "SHP/"+
                                jenis +
                                "/" +
                                invoice.getStARCustomerID()+
                                "/"+
                                invoice.getStCostCenterCode()+
                                "/"+
                                DateUtil.getMonth2Digit(rcp.getDtReceiptDate())+
                                "/"+
                                DateUtil.getYear(rcp.getDtReceiptDate()));


                            invoice.setStARTransactionTypeID(Parameter.readString("COMISSION_AR_TRX"));
                            if(!rcInvoiceDetail.isComission())
                                invoice.setStARTransactionTypeID(actInvoice.getStARTransactionTypeID());

                            invoice.setStAttrPolicyNo(actInvoice.getStAttrPolicyNo());
                            invoice.setStAttrPolicyName(actInvoice.getStAttrPolicyName());
                            invoice.setDtAttrPolicyPeriodStart(actInvoice.getDtAttrPolicyPeriodStart());
                            invoice.setDtAttrPolicyPeriodEnd(actInvoice.getDtAttrPolicyPeriodEnd());
                            invoice.setStAttrPolicyAddress(actInvoice.getStAttrPolicyAddress());
                            invoice.setDbAttrPolicyTSI(actInvoice.getDbAttrPolicyTSI());
                            invoice.setDbAttrPolicyTSITotal(actInvoice.getDbAttrPolicyTSITotal());
                            invoice.setStAttrPolicyTypeID(actInvoice.getStAttrPolicyTypeID());
                            invoice.setStAttrPolicyID(actInvoice.getStAttrPolicyID());

                            invoice.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                            invoice.setDbEnteredAmount(comamt);


                            final DTOList ivdetails = new DTOList();

                            invoice.setDetails(ivdetails);


                            final DTOList artlines = ListUtil.getDTOListFromQuery(
                                    "select * from ar_trx_line where ar_trx_line_id = ?",
                                    new Object [] {rcInvoiceDetail.getStARTrxLineID()},
                                    ARTransactionLineView.class
                                    );

                            {

                                if (artlines.size()!=1) throw new RuntimeException("Invalid transaction lines count "+artlines.size()+" "+ invoice.getStARTransactionTypeID());

                                for (int k = 0; k < artlines.size(); k++) {
                                    ARTransactionLineView artl = (ARTransactionLineView) artlines.get(k);

                                    final ARInvoiceDetailView ivd = new ARInvoiceDetailView();

                                    ivd.markNew();

                                    ivdetails.add(ivd);

                                    ivd.setStARTrxLineID(artl.getStARTrxLineID());
                                    ivd.loadSettings();
                                    ivd.setDbEnteredAmount(comamt);
                                    ivd.setDbAmount(BDUtil.mul(comamt, actInvoice.getDbCurrencyRate(),2));
                                    ivd.setStTaxCode(rcc.getInvoiceDetail().getStTaxCodeOnSettlement());
                                    ivd.setStEntityID(rcc.getInvoiceDetail().getStEntityID());
                                    ivd.setStRefID1(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStParentID(rcInvoiceDetail.getStARInvoiceDetailID());
                                    ivd.setStRootID(rcInvoiceDetail.getStARInvoiceDetailID());
                                }
                            }

                                    invoice.recalculate2();

                                    final String refid = rcInvoiceDetail.getStRefInvoiceDetailID()==null?rcInvoiceDetail.getStARInvoiceDetailID():rcInvoiceDetail.getStRefInvoiceDetailID();
                                    invoice.setStRefInvoiceID(refid);
                                    save(invoice);

                        }
                    }

                }
            }
                //end hutang pajak

            //UPDATE SISA TITIPAN
            //if(!jurnalOnly){
                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    final DTOList titip = rl.getListTitipan();
                    for (int j = 0; j < titip.size(); j++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);

                        updateAndCreateTitipanPremiReinsurance(S,rcp,rlTitipan,rlTitipan.getStTitipanPremiID());
                    }
                }
            //}

            }

            S.store(rcp);

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
 }

public TitipanPremiReinsuranceView getTitipanPremiReinsurance(String stArTitipanID) throws Exception {
        DTOPool.getInstance().clear();

        if (stArTitipanID==null) return null;

        return (TitipanPremiReinsuranceView) DTOPool.getInstance().getDTO(TitipanPremiReinsuranceView.class, stArTitipanID);
}

private void updateAndCreateTitipanPremiReinsurance(SQLUtil S, ARReceiptView rcp, ARReceiptLinesView rl, String stTitipanPremiID) throws Exception{
        //final SQLUtil S = new SQLUtil();
        try{
                TitipanPremiReinsuranceView titipan = getTitipanPremiReinsurance(stTitipanPremiID);

                BigDecimal totalPemakaian = getDbPemakaianTitipanPremiReinsurance(stTitipanPremiID);

                BigDecimal sisaTitipan = BDUtil.sub(titipan.getDbAmount(), totalPemakaian);

                sisaTitipan = sisaTitipan.setScale(2,BigDecimal.ROUND_HALF_UP);

                BigDecimal pemakaian = rl.getDbTitipanPremiUsedAmount();

                pemakaian = pemakaian.setScale(2,BigDecimal.ROUND_HALF_UP);

                if(BDUtil.isZeroOrNull(sisaTitipan)){
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" sudah nol, tidak bisa untuk realisasi");
                }

                if(BDUtil.biggerThanZero(sisaTitipan)){
                    if(BDUtil.lesserThan(sisaTitipan,pemakaian))
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" tidak mencukupi untuk realisasi");
                }

                if(BDUtil.lesserThanZero(sisaTitipan)){
                    if(BDUtil.biggerThanZero(BDUtil.sub(sisaTitipan,pemakaian)))
                        throw new RuntimeException("Sisa titipan "+ titipan.getStTransactionNo() +" counter "+ titipan.getStCounter() +" tidak mencukupi untuk realisasi");
                }

                titipan.markUpdate();

                BigDecimal sisaTitipanUpdate = BDUtil.sub(sisaTitipan, rl.getDbTitipanPremiUsedAmount());

                titipan.setDbBalance(sisaTitipanUpdate);


                S.store(titipan);
                //S.release();
        }catch(Exception e) {
            ctx.setRollbackOnly();
            throw e;
        }

     }

public BigDecimal getDbPemakaianTitipanPremiReinsurance(String trxID) throws Exception {

        final SQLUtil S = new SQLUtil();

        try {
            final PreparedStatement PS = S.setQuery("select coalesce(SUM(b.titipan_premi_used_amount),0) as pemakaian "+
                                                    " from ar_receipt a "+
                                                    " inner join ar_receipt_lines b on a.ar_receipt_id = b.receipt_id "+
                                                    " where a.ar_settlement_id = 49 and  a.status = 'POST' AND b.titipan_premi_id = ? ");

            PS.setString(1, trxID);

            final ResultSet RS = PS.executeQuery();

            if (RS.next()) return RS.getBigDecimal(1);

            return null;

        } finally {
            S.release();
        }
    }

public void reversePembayaranTPReinsurance(ARReceiptView rcp) throws Exception {

        final SQLUtil S = new SQLUtil();
        try {
            logger.logDebug("+++++++++++++ MASUK CEK PEMBAYARAN HUTANG ++++++++++++++++");

            //CEK PEMBAYARAN HUTANG KOMISI
            //looping rincian pembayaran
            final DTOList detailsInvoice = rcp.getDetails();

            boolean sudahBayarHutang = false;
            String keterangan = "";

            for (int i = 0; i < detailsInvoice.size(); i++) {
                ARReceiptLinesView rclInvoice = (ARReceiptLinesView) detailsInvoice.get(i);

                //rincian
                final DTOList details = rclInvoice.getDetails();

                for (int j = 0; j < details.size(); j++) {
                    ARReceiptLinesView rcl = (ARReceiptLinesView) details.get(j);

                    if(rcl.getStInvoiceDetailID()==null) continue;

                    ARInvoiceView invoice = rcl.getInvoice();

                    if(invoice!=null){
                        logger.logDebug("################# CEK HUTANG KOMISI NIH...");

                        //dapetin pol id & ar_invoice_detail nya
                        String policyID = rcl.getStPolicyID();
                        String arInvoiceDetailID = rcl.getStInvoiceDetailID();

                        //cek hutang komisi udah dibayar belum by pol id & invoice detail id
                        String cekKomisi = "SELECT * "+
                                     " FROM AR_INVOICE  "+
                                     " WHERE amount_settled is not null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                     " and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?";

                        PreparedStatement PCekKomisi = S.setQuery(cekKomisi);

                        PCekKomisi.setObject(1, policyID);
                        PCekKomisi.setObject(2, arInvoiceDetailID);

                        ResultSet RSCekKomisi = PCekKomisi.executeQuery();

                        if (RSCekKomisi.next()){
                            logger.logDebug("################# DAPET HASILNYA, HUTANG UDAH DIBAYAR ...");
                            sudahBayarHutang = true;
                            keterangan = keterangan + "<br>Hutang komisi polis "+invoice.getStAttrPolicyNo()+" "+ invoice.getStInvoiceNo()+" sudah dibayar pada no bukti "+ RSCekKomisi.getString("receipt_no");
                        }

                        S.release();

                    }
                }
            }



            //logger.logDebug("+++++++++++++ SUDAH BAYAR HUTANG : "+ sudahBayarHutang);

            //CEK APAKAH POLIS SUDAH DIAJUKAN PROPOSAL KOMISI
            /*INVOICEID*/
            String cekCommInv = "select b.invoice_no as pol_no,b.no_surat_hutang "
                    + "from ( select b.pol_id,b.ar_invoice_no,b.ar_invoice_id "
                    + "from ar_receipt a "
                    + "INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                    + "where a.ar_receipt_id = ? "
                    + "group by b.pol_id,b.ar_invoice_no,b.ar_invoice_id ) a "
                    + "inner join ( select a.ins_pol_id,a.no_surat_hutang,a.invoice_no,a.ar_invoice_ref_id "
                    + "from ins_proposal_komisi a "
                    + "where a.cc_code = ? "
                    + ") b on b.ar_invoice_ref_id = a.ar_invoice_id ";

            PreparedStatement P9 = S.setQuery(cekCommInv);

            P9.setObject(1, rcp.getStARReceiptID());
            P9.setObject(2, rcp.getStCostCenterCode());
            ResultSet RS9 = P9.executeQuery();

            boolean sudahProposalKomisi = false;
            String polno = null;
            String shkno = null;
            if (RS9.next()) {
                sudahProposalKomisi = true;
                polno = RS9.getString("pol_no");
                shkno = RS9.getString("no_surat_hutang");
            }

            logger.logDebug("+++++++++++++ SUDAH PROPOSAL KOMISI : " + sudahProposalKomisi);

            S.release();

            //JIKA SUDAH PROPOSAL, GA BISA REVERSE PEMBAYARAN PREMI
            if (sudahProposalKomisi) {
                if (rcp.getStARSettlementID().equalsIgnoreCase("1")
                        || rcp.getStARSettlementID().equalsIgnoreCase("25")) {
                    //reverse(rcp,receipt_no);
                    throw new RuntimeException("Komisi polis " + polno + " sudah diajukan Proposal Komisi, reverse SHK : " + shkno + "\n"
                            + " dan hapus polis yang bersangkutan pada Proposal Komisi.");
                }
            }

            //JIKA PEMBAYARAN KOAS JGN CEK HUTANG KOMISI/PAJAK
            if (rcp.getStARSettlementID().equalsIgnoreCase("13") || rcp.getStARSettlementID().equalsIgnoreCase("8")) {
                sudahBayarHutang = false;
            }

            //JIKA PEMBAYARAN KOMISI JGN CEK HUTANG PAJAK
            if (rcp.getStARSettlementID().equalsIgnoreCase("2") || rcp.getStARSettlementID().equalsIgnoreCase("33") || rcp.getStARSettlementID().equalsIgnoreCase("39")
                    || rcp.getStARSettlementID().equalsIgnoreCase("45")) {
                sudahBayarHutang = false;
            }

            if (sudahBayarHutang) {
                //reverse(rcp,receipt_no);
                //throw new RuntimeException("Hutang komisi/pajak sudah dibayar, hapus/reverse dulu pembayaran komisi/pajak nya pada no bukti : " + receipt_no);
                throw new RuntimeException(keterangan);
            }


            reverseTPReinsurance(rcp, rcp.getStReceiptNo());

            if (!rcp.getStARSettlementID().equalsIgnoreCase("13") && !rcp.getStARSettlementID().equalsIgnoreCase("8")
                    && !rcp.getStARSettlementID().equalsIgnoreCase("2") && !rcp.getStARSettlementID().equalsIgnoreCase("33")
                    && !rcp.getStARSettlementID().equalsIgnoreCase("39") && !rcp.getStARSettlementID().equalsIgnoreCase("45")) {

                //looping hapus invoice details pembayaran
                for (int i = 0; i < detailsInvoice.size(); i++) {
                    ARReceiptLinesView rclInvoice = (ARReceiptLinesView) detailsInvoice.get(i);

                    //rincian
                    final DTOList details = rclInvoice.getDetails();

                    for (int j = 0; j < details.size(); j++) {
                        ARReceiptLinesView rcl = (ARReceiptLinesView) details.get(j);

                        if(rcl.getStInvoiceDetailID()==null) continue;

                        ARInvoiceView invoice = rcl.getInvoice();

                        if(invoice!=null){
                            logger.logDebug("################# HAPUS HUTANG KOMISI NIH...");

                            //dapetin pol id & ar_invoice_detail nya
                            String policyID = rcl.getStPolicyID();
                            String arInvoiceDetailID = rcl.getStInvoiceDetailID();

                            //delete invoice detail hutang komisi yg belum dibayar
                            String deleteHutangDetail = "delete from ar_invoice_details "+
                                                        " where ar_invoice_id in( "+
                                                        "     select ar_invoice_id FROM AR_INVOICE "+
                                                        "     WHERE amount_settled is null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                                        "     and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?)";

                            PreparedStatement PDeleteDetail = S.setQuery(deleteHutangDetail);

                            PDeleteDetail.setObject(1, policyID);
                            PDeleteDetail.setObject(2, arInvoiceDetailID);

                            int rDetail = PDeleteDetail.executeUpdate();
                            S.release();

                            //hapus ar invoice hutang komisi yg belum dibayar
                            String deleteHutangInvoice = "delete from ar_invoice "+
                                                        " where ar_invoice_id in( "+
                                                        "   select ar_invoice_id FROM AR_INVOICE "+
                                                        "   WHERE amount_settled is null AND AR_TRX_TYPE_ID = 11 and refid2 not like 'TAX%' "+
                                                        "   and ATTR_POL_ID = ? and ref_invoice_id::bigint = ?)";

                            PreparedStatement PDeleteInvoice = S.setQuery(deleteHutangInvoice);

                            PDeleteInvoice.setObject(1, policyID);
                            PDeleteInvoice.setObject(2, arInvoiceDetailID);

                            int rInvoice = PDeleteInvoice.executeUpdate();
                            S.release();

                        }
                    }
                }

                PreparedStatement P2 = S.setQuery("update ins_policy set payment_date = null, payment_note = null, receipt_no = null "
                        + " WHERE pol_id IN "
                        + " (select B.POL_ID "
                        + " from ar_receipt a  "
                        + " INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "
                        + " where a.ar_receipt_id = ? group by b.pol_id ) ");
                P2.setObject(1, rcp.getStARReceiptID());
                int r2 = P2.executeUpdate();
                S.release();


            }


        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }

        //CEK JIKA ADA HUTANG DAN SUDAH DI BAYARKAN

    }

public void reverseTPReinsurance(ARReceiptView rcp, String receipt_no) throws Exception {
        final SQLUtil S = new SQLUtil();

        try {

            PreparedStatement P = S.setQuery("update ar_receipt set posted_flag = 'N',status = 'NEW' where receipt_no = ?");

            P.setObject(1, receipt_no);
            int r = P.executeUpdate();
            S.release();

            PreparedStatement P2 = S.setQuery("delete from gl_je_detail where trx_no in ('C" + receipt_no.substring(1) +"', 'D"+ receipt_no.substring(1) +"','"+ receipt_no +"')");

            //P2.setObject(1, receipt_no);
            int r2 = P2.executeUpdate();
            S.release();

            if(rcp.getStReceiptNo2()!= null){
                PreparedStatement P21 = S.setQuery("delete from gl_je_detail where trx_no = ?");

                P21.setObject(1, rcp.getStReceiptNo2());
                int r21 = P21.executeUpdate();
                S.release();
            }


            PreparedStatement P3 = S.setQuery("update ar_invoice set amount_settled = null,receipt_date = null,used_flag = null "+
                                           " where ar_invoice_id in "+
                                           "  (select b.ar_invoice_id "+
                                           "  from ar_receipt a  "+
                                           "  INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                           "  where a.ar_receipt_id = ?)");

            P3.setObject(1, rcp.getStARReceiptID());
            int r3 = P3.executeUpdate();
            S.release();

            PreparedStatement P4 = S.setQuery("update ar_invoice_details set amount_settled = null "+
                                           " where ar_invoice_id in "+
                                           "  (select b.ar_invoice_id "+
                                           "  from ar_receipt a  "+
                                           "  INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                           "  where a.ar_receipt_id = ?)");

            P4.setObject(1, rcp.getStARReceiptID());
            int r4 = P4.executeUpdate();
            S.release();

            /*
            PreparedStatement P5 = S.setQuery("UPDATE AR_TITIPAN_PREMI X SET BALANCE = BALANCE + "+
                                             "   ( "+
                                             "    SELECT TITIPAN_PREMI_USED_AMOUNT  "+
                                             "    FROM AR_RECEIPT A "+
                                             "    INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                             "    WHERE A.ar_receipt_id = ? "+
                                             "    AND TITIPAN_PREMI_ID IS NOT NULL "+
                                             "    AND TITIPAN_PREMI_ID = X.trx_id "+
                                             "    ) "+
                                             "    WHERE TRX_ID IN "+
                                             "    (SELECT TITIPAN_PREMI_ID "+
                                             "    FROM AR_RECEIPT A "+
                                             "    INNER JOIN AR_RECEIPT_LINES B ON A.AR_RECEIPT_ID = B.RECEIPT_ID "+
                                             "    WHERE A.ar_receipt_id = ? "+
                                             "    AND TITIPAN_PREMI_ID IS NOT NULL);");

            P5.setObject(1, rcp.getStARReceiptID());
            P5.setObject(2, rcp.getStARReceiptID());
            int r5 = P5.executeUpdate();
            S.release();
            */

            //BALIKIN NILAI TITIPAN
            final SQLAssembler sqa = new SQLAssembler();

            sqa.addSelect("titipan_premi_id::varchar,titipan_premi_amount,titipan_premi_used_amount ");
            sqa.addQuery("from ar_receipt_lines "+
                          " where receipt_id = "+ rcp.getStARReceiptID() +" and line_type = 'TITIP' and titipan_premi_id is not null ");

            final DTOList l = ListUtil.getDTOListFromQuery(
                sqa.getSQL(),
                HashDTO.class
                );

            SQLUtil SUpdate = new SQLUtil();

            for (int i = 0; i < l.size(); i++) {
                 HashDTO h = (HashDTO) l.get(i);

                 if(h.getFieldValueByFieldNameBD("titipan_premi_used_amount")==null) continue;

                 String sqlUpdate = "update ar_titipan_premi_reinsurance set balance = balance + (" + h.getFieldValueByFieldNameBD("titipan_premi_used_amount").doubleValue()+
                                    ") where trx_id = "+ h.getFieldValueByFieldNameST("titipan_premi_id") +";";


                 PreparedStatement PS = SUpdate.setQuery(sqlUpdate);

                 int j = PS.executeUpdate();

                 if (j == 0) {
                    throw new Exception("gagal membalikkan nilai titipan premi");
                 }
            }

            SUpdate.releaseResource();
            SUpdate.release();

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw new RuntimeException(e);
        } finally {
            S.release();
        }


    }

public void getARReceiptForPrintingExcelPremiKhusus(String rcid, String settlement) throws Exception {

        final DTOList l = EXCEL_PREMI(rcid, settlement);

        SessionManager.getInstance().getRequest().setAttribute("RPT", l);

        final DTOList m = EXCEL_TITIPAN_TP(rcid);

        SessionManager.getInstance().getRequest().setAttribute("RPT2", m);

        EXPORT_PREMI(settlement);
    }

public DTOList EXCEL_TITIPAN_TP(String rcid) throws Exception {
        final SQLAssembler sqa = new SQLAssembler();

        sqa.addSelect(" a.receipt_no,a.receipt_date,b.trx_no,b.counter,b.hdr_accountno,"
                + "c.pol_no,a.titipan_premi_used_amount,b.create_date,b.description,b.description_master ");

        sqa.addQuery(" from ar_receipt_lines a "
                + " inner join ar_titipan_premi_extracomptable b on b.trx_id = a.titipan_premi_id "
                + " left join ins_policy c on c.pol_id = a.pol_id ");

        sqa.addClause("a.line_type = 'TITIP'");

        sqa.addClause("a.receipt_id = ?");
        sqa.addPar(rcid);

        final String sql = sqa.getSQL() + " order by a.ar_rcl_id ";

        final DTOList m = ListUtil.getDTOListFromQuery(
                sql,
                sqa.getPar(),
                HashDTO.class);

        SessionManager.getInstance().getRequest().setAttribute("RPT2", m);

        return m;

    }

public void saveRealisasiTitipanPremiReinsurance(ARReceiptView rcp) throws Exception {
        BigDecimal dbBayarAmount = rcp.getDbAmountApplied();
        String invoiceID="";
        rcp.validate();

        final SQLUtil S = new SQLUtil();

        final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

        final GLUtil.Applicator gla = new GLUtil.Applicator();

        gla.setCode('B',rcp.getStCostCenterCode());
        gla.setCode('Y',rcp.getStEntityID());
        if (rcp.getStEntityID()!=null)
            gla.setDesc("Y",rcp.getEntity().getStShortName());

        try {
            if (rcp.isNew())
                rcp.setStARReceiptID(String.valueOf(IDFactory.createNumericID("ARRC")));

            if(rcp.isNew()){
                rcp.generateReceiptNo();
                rcp.setStReceiptNo2(rcp.generateReceiptNo2());
            }

            if(!rcp.isNew())
                if(rcp.getStReceiptNo2()==null)
                    rcp.setStReceiptNo2(rcp.generateReceiptNo2());

            final ARPaymentMethodView paymentMethod = rcp.getPaymentMethod();
            final ARReceiptClassView rc = rcp.getReceiptClass();

            if (paymentMethod!=null)
                rcp.setStAccountID(paymentMethod.getStGLAccountID());

            rcp.setStExcessAccountID(gla.getAccountID(rc.getStExcessAccount()));

            final DTOList details = rcp.getDetails();

            final DTOList combined = new DTOList();

            final DTOList gLs = rcp.getGLs();

            combined.addAll(details);
            combined.addAll(rcp.getNotes());
            combined.addAll(details.getDeleted());
            combined.addAll(rcp.getNotes().getDeleted());
            combined.addAll(gLs);
            combined.addAll(rcp.getGLs().getDeleted());

            String stARInvoiceID="";

            final ARReceiptLinesView refBlankRCL = new ARReceiptLinesView();

            for (int i = 0; i < combined.size(); i++) {
                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                stARInvoiceID = rcl.getStInvoiceID();

                rcl.setStReceiptID(rcp.getStARReceiptID());
                rcl.setStReceiptNo(rcp.getStReceiptNo());

                if (rcl.isNew())
                    rcl.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));

                if (rcl.isDelete()) rcl.setDbAmount(BDUtil.zero);

                if (rcl.getDetails().size()>0) {
                    final DTOList subDetails = rcl.getDetails();

                    for (int j = 0; j < subDetails.size(); j++) {
                        ARReceiptLinesView rclsub = (ARReceiptLinesView) subDetails.get(j);

                        rclsub.setStReceiptID(rcp.getStARReceiptID());
                        rclsub.setStReceiptLinesRefID(rcl.getStReceiptLinesID());

                        if(rclsub.getInvoiceDetail()!=null)
                            rclsub.setStARInvoiceDetailRootID(rclsub.getInvoiceDetail().getStRootID());

                        if (rclsub.isNew())
                            rclsub.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                    }

                    S.store(subDetails);//simpen ke receipt lines

                    final DTOList subTitipan = rcl.getListTitipan();
                    for (int k = 0; k < subTitipan.size(); k++) {
                        ARReceiptLinesView rclTitipan = (ARReceiptLinesView) subTitipan.get(k);

                        rclTitipan.setStReceiptID(rcp.getStARReceiptID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo());
                        rclTitipan.setStReceiptLinesRefID(rcl.getStReceiptLinesID());
                        rclTitipan.setStReceiptNo(rcp.getStReceiptNo2());

                        if(rcl.getDtReceiptDate()!=null){
                            rclTitipan.setDtReceiptDate(rcl.getDtReceiptDate());
                        }

                        if(rclTitipan.isCheck())
                            if(rclTitipan.getInvoiceDetail()!=null)
                                rclTitipan.setStARInvoiceDetailRootID(rclTitipan.getInvoiceDetail().getStARInvoiceDetailID());

                        if (rclTitipan.isNew()){
                            rclTitipan.setStReceiptLinesID(String.valueOf(IDFactory.createNumericID("ARRCL")));
                        }
                    }

                    S.store(subTitipan);//simpan ke receipt lines
                }
            }

            S.store(rcp.getNotes());//simpen note

            S.store(gLs);//excess

            S.store(details);//simpen receipt dr invoice



            final ARReceiptView rcpOld = (ARReceiptView) rcp.getOld();
            final boolean postFlagChanged = rcpOld==null || !Tools.isEqual(rcpOld.getStPostedFlag(), rcp.getStPostedFlag());
            final boolean doPost = postFlagChanged && Tools.isYes(rcp.getStPostedFlag());
            final boolean doUnPost = postFlagChanged && Tools.isNo(rcp.getStPostedFlag());

            rcp.setStARAPInvoiceID(stARInvoiceID);

            rcp.setStReceiptNo(
                    rcp.getStReceiptNo().substring(0,9)+
                    rcp.getAccounts().getStAccountNo().substring(5,10)+
                    rcp.getStReceiptNo().substring(14,19));

            S.store(rcp);

            if (doUnPost) {
                //getRemoteGeneralLedger().reverse(rcp.getStRefTRX());
            }

            if (doPost) {

                final GLUtil.Applicator applicator = new GLUtil.Applicator();

                final String entityGLCode = getEntity(rcp.getStEntityID()).getStGLCode();

                applicator.setCode('B', rcp.getStCostCenterCode());

                applicator.setCode('Y', entityGLCode);

                applicator.setDesc("Y",rcp.getEntity().getStShortName());

                if(entityGLCode.equalsIgnoreCase("00000"))
                    applicator.setDesc("Y","");

                //applicator.setCode('X', rcp.getInvoice(stARInvoiceID).getPolicyType().getStGLCode());

                //applicator.setDesc("X",rcp.getInvoice(stARInvoiceID).getPolicyType().getStShortDescription());


                //final String apComAccrualAccID = applicator.getAccountID(Parameter.readString("AP_COMM_ACRUAL"));


                // AR DR vs bank CR

                BigDecimal negator = rcp.getSettlement().isAP()?BDUtil.one:new BigDecimal(-1);

                if(rcp.getSettlement().isAP()) negator = BDUtil.one;

                final JournalView gl = new JournalView();

                gl.setDbEnteredDebit(null);
                gl.setDbEnteredCredit(null);
                gl.setStCurrencyCode(rcp.getStCurrencyCode());
                gl.setDbCurrencyRate(rcp.getDbCurrencyRate());
                gl.setStAccountID(null);
                gl.setStDescription(null);
                gl.setDtApplyDate(rcp.getDtReceiptDate());
                gl.setStJournalCode(null);
                gl.setStTransactionNo(rcp.getStReceiptNo());
                gl.setStRefTRX(rcp.getStRefTRX());
                gl.setStRefTrxType("RCP");
                gl.setStRefTrxNo(rcp.getStARReceiptID());
                gl.setStIDRFlag(rcp.getStIDRFlag());
                gl.markNew();
            /*gl.setLgFiscalYear();
            gl.setLgPeriodNo();*/

                final String paymentDesc = "Payment No : "+rcp.getStReceiptNo();

                final DTOList journal = new DTOList();

                if (rcp.getDetails().size()==1)
                    if (rc.isBank()) {

                        ARReceiptLinesView rl3 = (ARReceiptLinesView) combined.get(0);

                        boolean jurnalHead = true;

                        if(rl3.getInvoice()==null)
                                jurnalHead = false;

                        final JournalView head = gl.copy();
                        head.setDbAutoCredit(
                                BDUtil.mul(negator,rcp.getDbEnteredAmount())
                                );
                        head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        head.setStDescription(paymentDesc);

                        if (rcp.getDetails().size()==1) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) rcp.getDetails().get(0);
                            head.setStDescription("Byr Premi R/I");

                            if(rl.getInvoice()!=null)
                                head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());
                        } else {
                            head.setStDescription("Byr "+rcp.getDetails().size()+" INVOICES");
                        }

                        if(jurnalHead)
                            journal.add(head);
                    }

                boolean moreThan1Policy = rcp.getDetails().size()>1;

                for (int i = 0; i < combined.size(); i++) {
                    ARReceiptLinesView rl = (ARReceiptLinesView) combined.get(i);

                    if (rl.isDelete()) continue;

                    final JournalView line = gl.copy();

                    final JournalView headLine = gl.copy();

                    BigDecimal amt = BDUtil.mul(negator,rl.getDbEnteredAmount());

                    if(moreThan1Policy){
                        if (rc.isBank()) {
                            final JournalView head = gl.copy();
                            head.setDbAutoCredit(
                                    BDUtil.mul(negator,rl.getDbTotalAmountPerLine())
                                    );
                            head.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                            head.setStDescription(paymentDesc);

                            String desc = "";

                            if(rl.getInvoice()!=null)
                                desc = rl.getInvoice().getStInvoiceNo();

                            head.setStDescription("Byr Htg. R/A Prm. " + rl.getInvoice().getStInvoiceNo());
                            head.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                            journal.add(head);
                        }
                    }

                    if (rl.isInvoice()) {

                        boolean klaimOnly = false;

                        boolean komisiOnly = false;

                        final DTOList comissionList = rl.getDetails();

                        for (int j = 0; j < comissionList.size(); j++) {
                            ARReceiptLinesView det = (ARReceiptLinesView) comissionList.get(j);

                            ARInvoiceDetailView rcInvoiceDetail = det.getInvoiceDetail();

                            //jika pembayaran reas treaty
                            if(rcInvoiceDetail!=null){

                                //cek jika invoice hanya klaim only
                                final DTOList comissionListCek = rl.getDetails();

                                for (int k = 0; k < comissionListCek.size(); k++) {
                                    ARReceiptLinesView detCek = (ARReceiptLinesView) comissionListCek.get(k);

                                    ARInvoiceDetailView rcInvoiceDetailCek = detCek.getInvoiceDetail();

                                    if(comissionListCek.size()==1 && rcInvoiceDetailCek.isClaimReas())
                                        klaimOnly = true;

                                    if(comissionListCek.size()==1 && rcInvoiceDetailCek.isKomisiReas())
                                        komisiOnly = true;

                                }

                                //if(!rcInvoiceDetail.isPremiGrossReas() && !rcInvoiceDetail.isClaimReas() && !rcInvoiceDetail.isPremiGrossReas2())
                                    //continue;

                                //if(!rcInvoiceDetail.isPremiGrossReas() && !rcInvoiceDetail.isPremiGrossReas2())
                                    //continue;

                                //jurnal lawan nya
                                if(rcInvoiceDetail.isPremiGrossReas() || rcInvoiceDetail.isPremiGrossReas2()){

                                    final JournalView lineDetail = gl.copy();

                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                    if(rcInvoiceDetail.isPremiGrossReas() || rcInvoiceDetail.isPremiGrossReas2() || rcInvoiceDetail.isClaimReas()){
                                        lineDetail.setDbAutoDebit(amt2);
                                    }else{
                                        lineDetail.setDbAutoCredit(amt2);
                                    }

                                    final ARTransactionLineView tl = getTrxLine("113");

                                    String accode = tl.getStGLAccount();

                                    applicator.setCode('B',"00");
                                    applicator.setCode('C',rl.getInvoice().getStReferenceC0());
                                    applicator.setCode('Y',rl.getInvoice().getEntity().getStGLCode());
                                    applicator.setCode('X',rl.getInvoice().getPolicyTypeGLCode());

                                    applicator.setDesc("C",rl.getInvoice().getStReferenceC1());
                                    applicator.setDesc("D",rl.getInvoice().getStNoSuratHutang());
                                    applicator.setDesc("M","");
                                    applicator.setDesc("T","");
                                    applicator.setDesc("A","");

                                    final AccountView ac = glc.getAccountByAccountID(applicator.getAccountID(accode));

                                    final JournalView jv1 = gl.copy();

                                    applicator.getAccountID(accode);

                                    if(ac!=null){
                                        lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        lineDetail.setStDescription("Byr " + applicator.getStGLDesc());

                                    }else{
                                        lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        lineDetail.setStDescription("Byr " + glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID()).getStDescription());

                                        if(!rl.getInvoice().getStCostCenterCode().equalsIgnoreCase("00")){

                                            final AccountView acInv = glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID());

                                            final AccountView ac2 = glc.getAccountByAccountID(applicator.getAccountID(acInv.getStAccountNo().substring(0, 12)));

                                            lineDetail.setStAccountIDNotNull(ac2.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        }
                                            

                                    }

                                    //lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    //lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    journal.add(lineDetail);

                                }else if(klaimOnly){

                                    final JournalView lineDetail = gl.copy();

                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                    if(rcInvoiceDetail.isPremiGrossReas() || rcInvoiceDetail.isPremiGrossReas2() || rcInvoiceDetail.isClaimReas()){
                                        lineDetail.setDbAutoDebit(amt2);
                                    }else{
                                        lineDetail.setDbAutoCredit(amt2);
                                    }

                                    final ARTransactionLineView tl = getTrxLine("113");

                                    String accode = tl.getStGLAccount();

                                    applicator.setCode('B',"00");
                                    applicator.setCode('C',rl.getInvoice().getStReferenceC0());
                                    applicator.setCode('Y',rl.getInvoice().getEntity().getStGLCode());
                                    applicator.setCode('X',rl.getInvoice().getPolicyTypeGLCode());

                                    applicator.setDesc("C",rl.getInvoice().getStReferenceC1());
                                    applicator.setDesc("D",rl.getInvoice().getStNoSuratHutang());
                                    applicator.setDesc("M","");
                                    applicator.setDesc("T","");
                                    applicator.setDesc("A","");

                                    final AccountView ac = glc.getAccountByAccountID(applicator.getAccountID(accode));

                                    final JournalView jv1 = gl.copy();

                                    applicator.getAccountID(accode);

                                    if(ac!=null){
                                        lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                    }else{
                                        lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        lineDetail.setStDescription("Byr " + glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID()).getStDescription());
                                    }

                                    //lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    //lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    journal.add(lineDetail);

                                }else if(komisiOnly){

                                    final JournalView lineDetail = gl.copy();

                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                    if(rcInvoiceDetail.isKomisiReas()){
                                        lineDetail.setDbAutoDebit(amt2);
                                    }else{
                                        lineDetail.setDbAutoCredit(amt2);
                                    }

                                    final ARTransactionLineView tl = getTrxLine("113");

                                    String accode = tl.getStGLAccount();

                                    applicator.setCode('B',"00");
                                    applicator.setCode('C',rl.getInvoice().getStReferenceC0());
                                    applicator.setCode('Y',rl.getInvoice().getEntity().getStGLCode());
                                    applicator.setCode('X',rl.getInvoice().getPolicyTypeGLCode());

                                    applicator.setDesc("C",rl.getInvoice().getStReferenceC1());
                                    applicator.setDesc("D",rl.getInvoice().getStNoSuratHutang());
                                    applicator.setDesc("M","");
                                    applicator.setDesc("T","");
                                    applicator.setDesc("A","");

                                    final AccountView ac = glc.getAccountByAccountID(applicator.getAccountID(accode));

                                    final JournalView jv1 = gl.copy();

                                    applicator.getAccountID(accode);

                                    if(ac!=null){
                                        lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                    }else{
                                        lineDetail.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                        lineDetail.setStDescription("Byr " + glc.getAccountByAccountID(rl.getInvoice().getStGLARAccountID()).getStDescription());
                                    }

                                    //lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    //lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                    lineDetail.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                                    lineDetail.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                                    journal.add(lineDetail);
                                }
                            }else{
                                //REALISASI LAINNYA
                                if(false){

                                    final JournalView lineDetail = gl.copy();

                                    BigDecimal amt2 = BDUtil.mul(negator,rl.getDbTotalAmountPerLine());

                                    lineDetail.setDbAutoDebit(amt2);

                                    final ARTransactionLineView tl = getTrxLine("113");


                                    String comAccount = rl.getStAccountID();

                                        if(comAccount==null)  comAccount = rcp.getStAccountID();

                                        if(rl.getListTitipan().size() > 0){
                                            ARReceiptLinesView rlTitipan = (ARReceiptLinesView) rl.getListTitipan().get(0);
                                            TitipanPremiReinsuranceView titipanPremi = getTitipanPremiReinsurance(rlTitipan.getStTitipanPremiID());

                                            comAccount = titipanPremi.getStAccountID();
                                        }

                                        //comline.setStDescription(rccom.getStDescription());

                                        lineDetail.setStAccountIDNotNull(comAccount,"Invalid or empty account in invoice : ");
                                        lineDetail.setStDescription("Byr Titipan Premi R/I");

                                    //lineDetail.setStAccountIDNotNull(ac.getStAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                                    //lineDetail.setStDescription("Byr " + applicator.getStGLDesc());
                                    lineDetail.setStCurrencyCode(rcp.getStCurrencyCode());
                                    lineDetail.setDbCurrencyRate(rcp.getDbCurrencyRate());


                                    journal.add(lineDetail);
                                }
                            }
                            


                        }


                    } else if (rl.isNote()) {
                        line.setDbAutoCredit(amt);
                        line.setStAccountIDNotNull(rl.getInvoice().getStGLARAccountID(),"Invalid or empty account in invoice : "+rl.getInvoice().getStDescription());
                        line.setStDescription("SETTLEMENT FOR "+rl.getStInvoiceNo());
                        line.setStCurrencyCode(rl.getInvoice().getStCurrencyCode());
                        line.setDbCurrencyRate(rl.getInvoice().getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                    } else if (rl.isGL()) {

                        final ARSettlementExcessView xc = rl.getARSettlementExcess();
                        final boolean neg = xc.isNegative();

                        if (neg) amt=BDUtil.negate(amt);

                        final String xcAcc = gla.getAccountID(xc.getStGLAccount());
                        line.setDbAutoDebit(amt);
                        line.setStAccountIDNotNull(xcAcc,"Invalid or empty account in excess account "+xc.getStDescription());
                        line.setStDescription(paymentDesc);
                        line.setStCurrencyCode(rcp.getStCurrencyCode());
                        line.setDbCurrencyRate(rcp.getDbCurrencyRate());
                        line.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());


                    }

                    DTOList titipan = rl.getListTitipan();

                    for (int m = 0; m < titipan.size(); m++) {
                        ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titipan.get(m);

                        ARReceiptLinesView indukTitipan = (ARReceiptLinesView) rl;
                        final JournalView jurnalTitipan = gl.copy();

                        TitipanPremiReinsuranceView titipanPremi = getTitipanPremiReinsurance(rlTitipan.getStTitipanPremiID());
                        jurnalTitipan.setStAccountIDNotNull(titipanPremi.getStAccountID(),"Akun titipan No Bukti : "+titipanPremi.getStTransactionNo() + " Account ID : "+ titipanPremi.getStAccountID() +" tidak ditemukan");

                        if(titipanPremi.getStDescription() != null)
                            jurnalTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());
                        jurnalTitipan.setDbAutoCredit(BDUtil.mul(negator,rlTitipan.getDbTitipanPremiUsedAmount()));

                        jurnalTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());


                        if(rl.getInvoice()!=null)
                            jurnalTitipan.setStPolicyNo(rl.getInvoice().getStAttrPolicyNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        //add jurnal bank
                        final JournalView jurnalBankTitipan = jurnalTitipan.copy();

                        jurnalBankTitipan.inverse();
                        jurnalBankTitipan.setStAccountIDNotNull(rcp.getStAccountID(),"Invalid or empty account in payment method ");
                        if(indukTitipan.getStAccountID()!=null)
                            jurnalBankTitipan.setStAccountIDNotNull(indukTitipan.getStAccountID(),"Invalid or empty account in payment method ");

                        jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());

                        if(titipanPremi.getStDescription() != null)
                            jurnalBankTitipan.setStDescription("REALISASI " + titipanPremi.getStDescription());
                        else
                            jurnalBankTitipan.setStDescription("REALISASI TITIPAN PREMI");

                        jurnalBankTitipan.setStTransactionNo(rlTitipan.getStReceiptNo());

                        jurnalBankTitipan.setLgHeaderAccountID(Long.valueOf(rcp.getStAccountID()));
                        jurnalBankTitipan.setStHeaderAccountNo(getRemoteGeneralLedger().getAccountByAccountID(rcp.getStAccountID()).getStAccountNo());

                        if(rcp.getStARSettlementID().equalsIgnoreCase("1")){
                            jurnalBankTitipan.setDtApplyDate(rlTitipan.getDtReceiptDate());
                        }

                        journal.add(jurnalBankTitipan);

                        journal.add(jurnalTitipan);
                    }

                }


                for (int i = 0; i < journal.size(); i++) {
                    JournalView j = (JournalView) journal.get(i);

                    if (j.getAccount()==null) {
                        throw new RuntimeException("Account not found ? : accoount="+j.getLgAccountID()+", line = "+j.getStDescription());
                    }

                    j.loadAccountNo();
                    j.reCalculate();
                }

                getRemoteGeneralLedger().saveJournalEntry(journal);
            }

        } catch (Exception e) {
            ctx.setRollbackOnly();
            throw e;
        } finally {
            S.release();
        }
    }

public void createTitipanPremi(InsurancePolicyView pol, InsurancePolicyObjectView object, ARReceiptView receipt) throws Exception{

        try{   
                if(pol.isStatusPolicy() || pol.isStatusEndorse()){

                    logger.logDebug("+++++++++++++ CREATE TITIPAN PREMI SISANYA +++++++++++++++");
                    TitipanPremiHeaderView newHeaderTitipan = new TitipanPremiHeaderView();
                    newHeaderTitipan.markNew();

                    final GLUtil.Applicator applicator = new GLUtil.Applicator();
                    final GLUtil.GLAccountCache glc = new GLUtil.GLAccountCache();

                    // 12210 BPD
                    // 12210
                    EntityView ent = pol.getEntity();

                    String bankcode = "12210YYYYY00|%Y%";

                    if (ent.isBPD()) bankcode = "12210YYYYY00|%Y%";
                    //else bankcode = "12220YYYYY00|%Y%";

                    applicator.setCode('B',receipt.getStCostCenterCode());
                    //applicator.setCode('C',rl.getInvoice().getStReferenceC0());
                    applicator.setCode('Y',pol.getEntity().getStGLCode());
                    applicator.setCode('X',pol.getPolicyType().getStGLCode());

                    applicator.setDesc("Y",pol.getEntity().getStShortName());

                    if(receipt!=null){
                        applicator.setCode('Y', receipt.getPaymentEntity().getStGLCode());
                        applicator.setDesc("Y", receipt.getPaymentEntity().getStShortName());

                        applicator.setCode('X',"00");
                    }

                    //akun bank
                    //final AccountView account = getRemoteGeneralLedger().getAccountByAccountID("2082");
                    final DTOList titipan = receipt.getTitipan();

                    if(titipan.size()>0){
                        for (int i = 0; i < titipan.size(); i++) {
                            ARReceiptLinesView rl = (ARReceiptLinesView) titipan.get(i);

                            if(i>0) continue;

                            TitipanPremiView titip = rl.getTitipanPremi();

                            final AccountView accountBank2 = glc.getAccountByAccountID(titip.getStAccountIDMaster());

                            newHeaderTitipan.setStAccountIDMaster(accountBank2.getStAccountID());
                            newHeaderTitipan.setStAccountNoMaster(accountBank2.getStAccountNo());
                            newHeaderTitipan.setStDescriptionMaster(accountBank2.getStDescription());

                            /*
                            final DTOList titip = rl.getListTitipan();
                            for (int j = 0; j < titip.size(); j++) {
                                ARReceiptLinesView rlTitipan = (ARReceiptLinesView) titip.get(j);

                                updateAndCreateTitipanPremi(S,rcp,rlTitipan,rlTitipan.getStTitipanPremiID());
                            }*/
                        }
                    }else{

                        if(receipt.getStAccountID()!=null){

                            final AccountView accountBank = glc.getAccountByAccountID(receipt.getStAccountID());

                            newHeaderTitipan.setStAccountIDMaster(accountBank.getStAccountID());
                            newHeaderTitipan.setStAccountNoMaster(accountBank.getStAccountNo());
                            newHeaderTitipan.setStDescriptionMaster(accountBank.getStDescription());

                        }else{

                            final AccountView accountBank = glc.getAccountByAccountID(applicator.getAccountID(bankcode));

                            newHeaderTitipan.setStAccountIDMaster(accountBank.getStAccountID());
                            newHeaderTitipan.setStAccountNoMaster(accountBank.getStAccountNo());
                            newHeaderTitipan.setStDescriptionMaster(accountBank.getStDescription());
                        }

                    }

                    //akun titipan
                    // 489217000700 70
                     /*
                        489400000000 Titipan Premi JW Kredit
                        489410000000 TP JW Kredit BPD
                        489420000000 TP JW Kredit Mandiri ok
                        489430000000 TP JW Kredit Mandiri Taspen ok
                        489440000000 TP JW Kredit BNI ok
                        489490000000 TP JW Kredit BPR ok
                     */
                    String accode = "4894210000XX|Titipan Premi JW Kredit - %Y%";

                    if (ent.isBPD()) accode = "4894210000XX|TP JW Kredit BPD - %Y%"; //BPD
                    if (ent.getStRef2().equalsIgnoreCase("62")) accode = "4894220000XX|TP JW Kredit Mandiri - %Y%"; //bank mandiri
                    if (ent.getStRef2().equalsIgnoreCase("1129")) accode = "4894230000XX|TP JW Kredit Mandiri Taspen - %Y%"; // mantap
                    if (ent.getStRef2().equalsIgnoreCase("1096")) accode = "4894240000XX|TP JW Kredit BNI - %Y%"; // BNI
                    if (ent.getStEntityName().toUpperCase().contains("BPR")) accode = "4894290000XX|TP JW Kredit BPR - %Y%"; // BPR

                    applicator.setCode('B',receipt.getStCostCenterCode());
                    applicator.setCode('Y',pol.getEntity().getStGLCode());
                    applicator.setCode('X',pol.getPolicyType().getStGLCode());

                    applicator.setDesc("Y",pol.getEntity().getStShortName());

                    if(receipt!=null){
                        applicator.setCode('Y', receipt.getPaymentEntity().getStGLCode());
                        applicator.setDesc("Y", receipt.getPaymentEntity().getStShortName());
                    }

                    final AccountView accountTitipan = glc.getAccountByAccountID(applicator.getAccountID(accode));

                    //String referenceNo = obj.getStReference16()!=null?obj.getStReference16():obj.getStReference4();

                    //final AccountView accountTitipan = getRemoteGeneralLedger().getAccountByAccountID("3575");
                    Date tglTitipan = pol.getDtPolicyDate();

                    if(receipt!=null){
                        tglTitipan = receipt.getDtReceiptDate();
                    }

                    newHeaderTitipan.setStAccountNo(accountTitipan.getStAccountNo());

                    newHeaderTitipan.setStApproved("Y");
                    newHeaderTitipan.setDtCreateDate(new Date());
                    newHeaderTitipan.setStMethodCode("C");
                    newHeaderTitipan.setStYears(DateUtil.getYear(tglTitipan));
                    newHeaderTitipan.setStMonths(DateUtil.getMonth2Digit(tglTitipan));
                    //newHeaderTitipan.setStDescription("Titipan Premi JW Kredit " + obj.getStObjectDescriptionWithoutCounter() + " "+ referenceNo);
                    newHeaderTitipan.setDbCurrencyRate(BDUtil.one);
                    newHeaderTitipan.setStApproved("Y");
                    newHeaderTitipan.setStActiveFlag("Y");
                    newHeaderTitipan.setStCostCenter(receipt.getStCostCenterCode());
                    newHeaderTitipan.setStCause("3");
                    newHeaderTitipan.setStPolicyID(pol.getStPolicyID());
                    newHeaderTitipan.setStPolicyNo(pol.getStPolicyNo());
                    newHeaderTitipan.setStRefEntID(receipt.getStAccountEntityID());
                    //newHeaderTitipan.setStReference1(obj.getStReference16());

                    DTOList titip = new DTOList();

                    //final DTOList objects = pol.getObjects();

                    //for (int i = 0; i < objects.size(); i++) {
                            //InsurancePolicyObjectView objx = (InsurancePolicyObjectView) objects.get(i);
                            InsurancePolicyObjectView objx = (InsurancePolicyObjectView) object;

                            InsurancePolicyObjDefaultView obj = (InsurancePolicyObjDefaultView) objx;

                            String referenceNo = obj.getStReference16()!=null?obj.getStReference16():obj.getStReference4();

                            String noEndorse = pol.getStPolicyNo().substring(17, 19);

                            int counter = 0;

                            //titipan 1
                            if(false){
                                if(!BDUtil.isZeroOrNull(obj.getDbReference13())){
                                    TitipanPremiView newTitipan = new TitipanPremiView();

                                    newTitipan.markNew();
                                    newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                    newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                    newTitipan.setDbBalance(obj.getDbReference13());
                                    newTitipan.setDbAmount(obj.getDbReference13());
                                    newTitipan.setStTransactionHeaderID(null);
                                    newTitipan.setDtApplyDate(tglTitipan);
                                    newTitipan.setDbCurrencyRate(BDUtil.one);
                                    newTitipan.setStApproved("Y");
                                    newTitipan.setStActiveFlag("Y");
                                    newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                    newTitipan.setStCause("3");
                                    newTitipan.setStCounter("1");
                                    newTitipan.setStDescription("TP JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                    newTitipan.setStPolicyID(pol.getStPolicyID());
                                    newTitipan.setStPolicyNo(pol.getStPolicyNo());
                                    newTitipan.setStReference1(obj.getStReference16());
                                    newTitipan.setStReferenceNo(referenceNo);

                                    titip.add(newTitipan);
                                }
                            }

                            //titipan 2
                            if(!BDUtil.isZeroOrNull(obj.getDbReference15())){
                                TitipanPremiView newTitipan = new TitipanPremiView();

                                newTitipan.markNew();
                                newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                newTitipan.setDbBalance(obj.getDbReference15());
                                newTitipan.setDbAmount(obj.getDbReference15());

                                //Jika pembayaran netto, bentuk titipan netto
                                if(obj.getStReference28()!=null){
                                    if(obj.getStReference28().equalsIgnoreCase("2")){
                                        //newTitipan.setDbBalance(obj.getDbReference28());
                                        //newTitipan.setDbAmount(obj.getDbReference28());
                                    }
                                }

                                newTitipan.setStTransactionHeaderID(null);
                                newTitipan.setDtApplyDate(tglTitipan);
                                newTitipan.setDbCurrencyRate(BDUtil.one);
                                newTitipan.setStApproved("Y");
                                newTitipan.setStActiveFlag("Y");
                                newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                newTitipan.setStCause("3");
                                newTitipan.setStCounter("1");
                                newTitipan.setStDescription("TP JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                newTitipan.setStPolicyID(pol.getStPolicyID());
                                newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"200");

                                if(pol.isStatusEndorse())
                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "2"+ noEndorse);

                                newTitipan.setStReference1(obj.getStReference16());
                                newTitipan.setStReferenceNo(referenceNo);
                                newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                counter++;

                                titip.add(newTitipan);
                            }

                            //titipan 3
                            if(!BDUtil.isZeroOrNull(obj.getDbReference17())){
                                TitipanPremiView newTitipan = new TitipanPremiView();

                                newTitipan.markNew();
                                newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                newTitipan.setDbBalance(obj.getDbReference17());
                                newTitipan.setDbAmount(obj.getDbReference17());

                                //Jika pembayaran netto, bentuk titipan netto
                                if(obj.getStReference28()!=null){
                                    if(obj.getStReference28().equalsIgnoreCase("2")){
                                        //newTitipan.setDbBalance(obj.getDbReference29());
                                        //newTitipan.setDbAmount(obj.getDbReference29());
                                    }
                                }

                                newTitipan.setStTransactionHeaderID(null);
                                newTitipan.setDtApplyDate(tglTitipan);
                                newTitipan.setDbCurrencyRate(BDUtil.one);
                                newTitipan.setStApproved("Y");
                                newTitipan.setStActiveFlag("Y");
                                newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                newTitipan.setStCause("3");
                                newTitipan.setStCounter("2");
                                newTitipan.setStDescription("TP JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                newTitipan.setStPolicyID(pol.getStPolicyID());
                                newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"300");

                                if(pol.isStatusEndorse())
                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "3"+ noEndorse);

                                newTitipan.setStReference1(obj.getStReference16());
                                newTitipan.setStReferenceNo(referenceNo);
                                newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                counter++;

                                titip.add(newTitipan);
                            }

                            //titipan 4
                            if(!BDUtil.isZeroOrNull(obj.getDbReference19())){
                                TitipanPremiView newTitipan = new TitipanPremiView();

                                newTitipan.markNew();
                                newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                newTitipan.setDbBalance(obj.getDbReference19());
                                newTitipan.setDbAmount(obj.getDbReference19());

                                //Jika pembayaran netto, bentuk titipan netto
                                if(obj.getStReference28()!=null){
                                    if(obj.getStReference28().equalsIgnoreCase("2")){
                                        //newTitipan.setDbBalance(obj.getDbReference30());
                                        //newTitipan.setDbAmount(obj.getDbReference30());
                                    }
                                }

                                newTitipan.setStTransactionHeaderID(null);
                                newTitipan.setDtApplyDate(tglTitipan);
                                newTitipan.setDbCurrencyRate(BDUtil.one);
                                newTitipan.setStApproved("Y");
                                newTitipan.setStActiveFlag("Y");
                                newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                newTitipan.setStCause("3");
                                newTitipan.setStCounter("3");
                                newTitipan.setStDescription("TP JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                newTitipan.setStPolicyID(pol.getStPolicyID());
                                newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"400");

                                if(pol.isStatusEndorse())
                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "4"+ noEndorse);

                                newTitipan.setStReference1(obj.getStReference16());
                                newTitipan.setStReferenceNo(referenceNo);
                                newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                counter++;

                                titip.add(newTitipan);
                            }

                            //titipan 5
                            if(!BDUtil.isZeroOrNull(obj.getDbReference21())){
                                TitipanPremiView newTitipan = new TitipanPremiView();

                                newTitipan.markNew();
                                newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                newTitipan.setDbBalance(obj.getDbReference21());
                                newTitipan.setDbAmount(obj.getDbReference21());

                                //Jika pembayaran netto, bentuk titipan netto
                                if(obj.getStReference28()!=null){
                                    if(obj.getStReference28().equalsIgnoreCase("2")){
                                        //newTitipan.setDbBalance(obj.getDbReference31());
                                        //newTitipan.setDbAmount(obj.getDbReference31());
                                    }
                                }

                                newTitipan.setStTransactionHeaderID(null);
                                newTitipan.setDtApplyDate(tglTitipan);
                                newTitipan.setDbCurrencyRate(BDUtil.one);
                                newTitipan.setStApproved("Y");
                                newTitipan.setStActiveFlag("Y");
                                newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                newTitipan.setStCause("3");
                                newTitipan.setStCounter("4");
                                newTitipan.setStDescription("TP JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                newTitipan.setStPolicyID(pol.getStPolicyID());
                                newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"500");

                                if(pol.isStatusEndorse())
                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "5"+ noEndorse);

                                newTitipan.setStReference1(obj.getStReference16());
                                newTitipan.setStReferenceNo(referenceNo);
                                newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                counter++;

                                titip.add(newTitipan);
                            }

                            //titipan 6
                            if(!BDUtil.isZeroOrNull(obj.getDbReference23())){
                                TitipanPremiView newTitipan = new TitipanPremiView();

                                newTitipan.markNew();
                                newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                newTitipan.setDbBalance(obj.getDbReference23());
                                newTitipan.setDbAmount(obj.getDbReference23());

                                //Jika pembayaran netto, bentuk titipan netto
                                if(obj.getStReference28()!=null){
                                    if(obj.getStReference28().equalsIgnoreCase("2")){
                                        //newTitipan.setDbBalance(obj.getDbReference32());
                                        //newTitipan.setDbAmount(obj.getDbReference32());
                                    }
                                }

                                newTitipan.setStTransactionHeaderID(null);
                                newTitipan.setDtApplyDate(tglTitipan);
                                newTitipan.setDbCurrencyRate(BDUtil.one);
                                newTitipan.setStApproved("Y");
                                newTitipan.setStActiveFlag("Y");
                                newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                newTitipan.setStCause("3");
                                newTitipan.setStCounter("5");
                                newTitipan.setStDescription("TP JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                newTitipan.setStPolicyID(pol.getStPolicyID());
                                newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"600");

                                if(pol.isStatusEndorse())
                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "6"+ noEndorse);

                                newTitipan.setStReference1(obj.getStReference16());
                                newTitipan.setStReferenceNo(referenceNo);
                                newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                counter++;

                                titip.add(newTitipan);
                            }


                            //titipan outgo KSG REMARK DULU BELUM CLEAR
                            /*
                            final DTOList combined = receipt.getDetails();

                            for (int i = 0; i < combined.size(); i++) {
                                ARReceiptLinesView rcl = (ARReceiptLinesView) combined.get(i);

                                final ARInvoiceView actInvoice = rcl.getInvoice();

                                final DTOList detail = rcl.getDetails();

                                    for (int j = 0; j < detail.size(); j++) {
                                        ARReceiptLinesView rcc = (ARReceiptLinesView) detail.get(j);

                                        final ARInvoiceDetailView rcInvoiceDetail = rcc.getInvoiceDetail();

                                        //if(rcInvoiceDetail.isPremiGross2() || rcInvoiceDetail.isTax() || rcInvoiceDetail.isPPN() || rcInvoiceDetail.isPPNFeebase()) continue;
                                        //if(rcInvoiceDetail.isPremiGross2() || rcInvoiceDetail.isTax()) continue;
                                        if(rcInvoiceDetail.isPremiGross2()) continue;

                                        logger.logDebug("################ item = "+ rcInvoiceDetail.getStDescription());

                                        //TITIPAN OUTGO POLIS 2
                                        if(rcc.getStCheck2()!=null){
                                            if(rcc.isCheck2()){

                                                if(!BDUtil.isZeroOrNull(rcc.getDbAmount2())){
                                                    TitipanPremiView newTitipan = new TitipanPremiView();

                                                    newTitipan.markNew();
                                                    newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                                    newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                                    newTitipan.setDbBalance(BDUtil.negate(rcc.getDbAmount2()));
                                                    newTitipan.setDbAmount(BDUtil.negate(rcc.getDbAmount2()));

                                                    if(rcInvoiceDetail.isTax()){
                                                        //newTitipan.setDbBalance(rcc.getDbAmount2());
                                                        //newTitipan.setDbAmount(rcc.getDbAmount2());
                                                    }

                                                    newTitipan.setStTransactionHeaderID(null);
                                                    newTitipan.setDtApplyDate(tglTitipan);
                                                    newTitipan.setDbCurrencyRate(BDUtil.one);
                                                    newTitipan.setStApproved("Y");
                                                    newTitipan.setStActiveFlag("Y");
                                                    newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                                    newTitipan.setStCause("3");
                                                    newTitipan.setStARTrxLineID(rcInvoiceDetail.getStARTrxLineID());

                                                    counter++;
                                                    newTitipan.setStCounter(String.valueOf(counter));
                                                    newTitipan.setStDescription("TP "+ rcc.getStDescription() +" JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                                    newTitipan.setStPolicyID(pol.getStPolicyID());
                                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"200");

                                                    if(pol.isStatusEndorse())
                                                        newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "2"+ noEndorse);

                                                    newTitipan.setStReference1(obj.getStReference16());
                                                    newTitipan.setStReferenceNo(referenceNo);
                                                    newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                                    titip.add(newTitipan);
                                                }
                                                
                                            }
                                        }
                                        

                                        //TITIPAN OUTGO POLIS 3
                                        if(rcc.getStCheck3()!=null){
                                            if(rcc.isCheck3()){

                                                if(!BDUtil.isZeroOrNull(rcc.getDbAmount3())){
                                                    TitipanPremiView newTitipan = new TitipanPremiView();

                                                    newTitipan.markNew();
                                                    newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                                    newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                                    newTitipan.setDbBalance(BDUtil.negate(rcc.getDbAmount3()));
                                                    newTitipan.setDbAmount(BDUtil.negate(rcc.getDbAmount3()));

                                                    if(rcInvoiceDetail.isTax()){
                                                        //newTitipan.setDbBalance(rcc.getDbAmount3());
                                                        //newTitipan.setDbAmount(rcc.getDbAmount3());
                                                    }

                                                    newTitipan.setStTransactionHeaderID(null);
                                                    newTitipan.setDtApplyDate(tglTitipan);
                                                    newTitipan.setDbCurrencyRate(BDUtil.one);
                                                    newTitipan.setStApproved("Y");
                                                    newTitipan.setStActiveFlag("Y");
                                                    newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                                    newTitipan.setStCause("3");
                                                    newTitipan.setStARTrxLineID(rcInvoiceDetail.getStARTrxLineID());

                                                    counter++;
                                                    newTitipan.setStCounter(String.valueOf(counter));
                                                    newTitipan.setStDescription("TP "+ rcc.getStDescription() +" JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                                    newTitipan.setStPolicyID(pol.getStPolicyID());
                                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"300");

                                                    if(pol.isStatusEndorse())
                                                        newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "3"+ noEndorse);

                                                    newTitipan.setStReference1(obj.getStReference16());
                                                    newTitipan.setStReferenceNo(referenceNo);
                                                    newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                                    titip.add(newTitipan);
                                                }
                                                
                                            }
                                        }
                                        

                                        //TITIPAN OUTGO POLIS 4
                                        if(rcc.getStCheck4()!=null){
                                            if(rcc.isCheck4()){

                                                if(!BDUtil.isZeroOrNull(rcc.getDbAmount4())){
                                                    TitipanPremiView newTitipan = new TitipanPremiView();

                                                    newTitipan.markNew();
                                                    newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                                    newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                                    newTitipan.setDbBalance(BDUtil.negate(rcc.getDbAmount4()));
                                                    newTitipan.setDbAmount(BDUtil.negate(rcc.getDbAmount4()));

                                                    if(rcInvoiceDetail.isTax()){
                                                        //newTitipan.setDbBalance(rcc.getDbAmount4());
                                                        //newTitipan.setDbAmount(rcc.getDbAmount4());
                                                    }

                                                    newTitipan.setStTransactionHeaderID(null);
                                                    newTitipan.setDtApplyDate(tglTitipan);
                                                    newTitipan.setDbCurrencyRate(BDUtil.one);
                                                    newTitipan.setStApproved("Y");
                                                    newTitipan.setStActiveFlag("Y");
                                                    newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                                    newTitipan.setStCause("3");
                                                    newTitipan.setStARTrxLineID(rcInvoiceDetail.getStARTrxLineID());

                                                    counter++;
                                                    newTitipan.setStCounter(String.valueOf(counter));

                                                    newTitipan.setStDescription("TP "+ rcc.getStDescription() +" JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                                    newTitipan.setStPolicyID(pol.getStPolicyID());
                                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"400");

                                                    if(pol.isStatusEndorse())
                                                        newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "4"+ noEndorse);

                                                    newTitipan.setStReference1(obj.getStReference16());
                                                    newTitipan.setStReferenceNo(referenceNo);
                                                    newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                                    titip.add(newTitipan);
                                                }
                                                
                                            }
                                        }
                                        

                                        //TITIPAN OUTGO POLIS 5
                                        if(rcc.getStCheck5()!=null){
                                            if(rcc.isCheck5()){

                                                if(!BDUtil.isZeroOrNull(rcc.getDbAmount5())){
                                                    TitipanPremiView newTitipan = new TitipanPremiView();

                                                    newTitipan.markNew();
                                                    newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                                    newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                                    newTitipan.setDbBalance(BDUtil.negate(rcc.getDbAmount5()));
                                                    newTitipan.setDbAmount(BDUtil.negate(rcc.getDbAmount5()));

                                                    if(rcInvoiceDetail.isTax()){
                                                        //newTitipan.setDbBalance(rcc.getDbAmount5());
                                                        //newTitipan.setDbAmount(rcc.getDbAmount5());
                                                    }

                                                    newTitipan.setStTransactionHeaderID(null);
                                                    newTitipan.setDtApplyDate(tglTitipan);
                                                    newTitipan.setDbCurrencyRate(BDUtil.one);
                                                    newTitipan.setStApproved("Y");
                                                    newTitipan.setStActiveFlag("Y");
                                                    newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                                    newTitipan.setStCause("3");
                                                    newTitipan.setStARTrxLineID(rcInvoiceDetail.getStARTrxLineID());

                                                    counter++;
                                                    newTitipan.setStCounter(String.valueOf(counter));

                                                    newTitipan.setStDescription("TP "+ rcc.getStDescription() +" JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                                    newTitipan.setStPolicyID(pol.getStPolicyID());
                                                    newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"500");

                                                    if(pol.isStatusEndorse())
                                                        newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "5"+ noEndorse);

                                                    newTitipan.setStReference1(obj.getStReference16());
                                                    newTitipan.setStReferenceNo(referenceNo);
                                                    newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                                    titip.add(newTitipan);
                                                }
                                                
                                            }
                                        }
                                        

                                        //TITIPAN OUTGO POLIS 6
                                         if(rcc.getStCheck6()!=null){
                                             if(rcc.isCheck6()){

                                                 if(!BDUtil.isZeroOrNull(rcc.getDbAmount6())){
                                                        TitipanPremiView newTitipan = new TitipanPremiView();

                                                        newTitipan.markNew();
                                                        newTitipan.setStAccountNo(accountTitipan.getStAccountNo());
                                                        newTitipan.setStAccountID(accountTitipan.getStAccountID());

                                                        newTitipan.setDbBalance(BDUtil.negate(rcc.getDbAmount6()));
                                                        newTitipan.setDbAmount(BDUtil.negate(rcc.getDbAmount6()));

                                                        if(rcInvoiceDetail.isTax()){
                                                            //newTitipan.setDbBalance(rcc.getDbAmount6());
                                                            //newTitipan.setDbAmount(rcc.getDbAmount6());
                                                        }

                                                        newTitipan.setStTransactionHeaderID(null);
                                                        newTitipan.setDtApplyDate(tglTitipan);
                                                        newTitipan.setDbCurrencyRate(BDUtil.one);
                                                        newTitipan.setStApproved("Y");
                                                        newTitipan.setStActiveFlag("Y");
                                                        newTitipan.setStCostCenter(receipt.getStCostCenterCode());
                                                        newTitipan.setStCause("3");
                                                        newTitipan.setStARTrxLineID(rcInvoiceDetail.getStARTrxLineID());

                                                        counter++;
                                                        newTitipan.setStCounter(String.valueOf(counter));

                                                        newTitipan.setStDescription("TP "+ rcc.getStDescription() +" JW Kredit " + obj.getStObjectDescriptionWithoutCounter()+ " "+ referenceNo);
                                                        newTitipan.setStPolicyID(pol.getStPolicyID());
                                                        newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+"600");

                                                        if(pol.isStatusEndorse())
                                                            newTitipan.setStPolicyNo(pol.getStPolicyNo().substring(0, 16)+ "6"+ noEndorse);

                                                        newTitipan.setStReference1(obj.getStReference16());
                                                        newTitipan.setStReferenceNo(referenceNo);
                                                        newTitipan.setStRefEntID(receipt.getStAccountEntityID());

                                                        titip.add(newTitipan);
                                                 }
                                                
                                            }
                                         }
                                }
                            }
                            */

                    //}

                    getRemoteGeneralLedger().saveTitipanPremi(newHeaderTitipan, titip);
                }

        }catch(Exception e) {
            ctx.setRollbackOnly();
            throw e;
        }

     }

public TitipanPremiView getTitipanPremiByPolNo(String policyNo) throws Exception {
        final TitipanPremiView iv = (TitipanPremiView) ListUtil.getDTOListFromQuery(
                "select * from ar_titipan_premi where pol_no = ? ",
                new Object [] {policyNo},
                TitipanPremiView.class
                ).getDTO();

        return iv;
    }

public DTOList getTitipanPremiSerbaguna(String policyNo) throws Exception {
        return ListUtil.getDTOListFromQuery(
                "select * from ar_titipan_premi where pol_no = ? ",
                new Object [] {policyNo},
                TitipanPremiView.class
                );
}


} 
